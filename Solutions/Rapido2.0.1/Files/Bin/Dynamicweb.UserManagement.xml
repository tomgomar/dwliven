<?xml version="1.0"?>
<doc>
<assembly>
<name>
Dynamicweb.UserManagement
</name>
</assembly>
<members>
<member name="T:Dynamicweb.UserManagement.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Dynamicweb.UserManagement.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Dynamicweb.UserManagement.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Dynamicweb.UserManagement.Common.CustomFields.CustomFieldRenderer">
 <summary>The Class CustomFieldRenderer represents renderer for user custom fields</summary>
</member>
<member name="M:Dynamicweb.UserManagement.Common.CustomFields.CustomFieldRenderer.Render(Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldValueCollection,Dynamicweb.Rendering.Template,System.String,System.Boolean)">
 <summary>Render given custom field values into template</summary>
 <param name="customFieldValues"><see cref="T:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldValueCollection">Collection</see> of custom fields values</param>
 <param name="template">Parent template</param>
 <param name="prefix">Additional field prefix</param>
 <param name="forEdit">If true also render tags for input controls</param>
</member>
<member name="T:Dynamicweb.UserManagement.Frontend.Action">
 <summary>
 Action enumeration
 </summary>
</member>
<member name="T:Dynamicweb.UserManagement.Frontend.CreateProfileApprovalTypes">
 <summary>
 Approval types for created profiles enumeration
 </summary>
</member>
<member name="T:Dynamicweb.UserManagement.Frontend.Frontend">
 <summary>The Class Frontend represents user management front-end handler</summary>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Frontend.#ctor">
 <summary>Initialize new instance of Frontend class</summary>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Frontend.GetContent">
 <summary>Gets markup that renders user management module</summary>
 <returns>HTML output as <see cref="T:System.String">String</see></returns>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Frontend.GetEmailSignUpUser(System.String,System.Boolean)">
 <summary>
 Gets user by email
 </summary>
 <param name="emailAddress">User email address</param>
 <param name="fillNewUser">Does it needs to generate new password</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Frontend.SaveNewPasswordToPasswordTrackingTable(System.String,System.Int32)">
 <summary>
 Save newPassword to password tracking table
 </summary>
 <param name="newPassword">The new password</param>
 <param name="userID">the User ID</param>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Frontend.DownloadVCard(System.String,Dynamicweb.Security.UserManagement.User)">
 <summary>Download visiting card for given user</summary>
 <param name="vCardFieldsString">Visiting card fields as comma-separated string</param>
 <param name="user">The <see cref="T:Dynamicweb.Security.UserManagement.User">User</see> for visiting card</param>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Frontend.HandleViewAddresses(Dynamicweb.UserManagement.Frontend.ParagraphSettings,Dynamicweb.Rendering.Template@,Dynamicweb.Security.UserManagement.User)">
 <summary>
 Handles the view addresses.
 </summary>
 <param name="settings">The settings.</param>
 <param name="template">The template.</param>
 <param name="currentUser">The current user.</param>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Frontend.GetAvailableFieldsForPasswordRecovery(System.Boolean)">
 <summary>Gets fields used for password recovery</summary>
 <param name="isFrontend">Indicates if execution is on frontend</param>
 <returns><see cref="T:System.Collections.Generic.IEnumerable`1">Collection</see> of fields</returns>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Frontend.GetAllPasswordRecoveryFields(System.Boolean)">
 <summary>Gets fields used for password recovery</summary>
 <param name="isFrontend">Indicates if execution is on frontend</param>
 <returns><see cref="T:System.Collections.Generic.IEnumerable`1">Collection</see> of fields</returns>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Frontend.ChangePassword(System.Int32,System.String,System.String,System.Boolean)">
 <summary>
 Changes the password of the specified user ID.
 </summary>
 <param name="userId">The user identifier.</param>
 <param name="oldPassword">The old password.</param>
 <param name="newPassword">The new password.</param>
 <param name="encryptPassword">if set to <c>true</c> [encrypt password].</param>
</member>
<member name="T:Dynamicweb.UserManagement.Frontend.GroupTemplateExtender">
 <example>
 <code title="User group template extender" description="Extends rendering template with custom tags" source="..\Dynamicweb\05 - Modules\Dynamicweb.UserManagement\Head\Dynamicweb.UserManagement.Examples\GroupTemplateExtenderSample.cs" lang="CS"></code>
 </example>
 <summary>
 Represents template extender.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.GroupTemplateExtender.Group">
 <summary>
 Gets or sets the extendable <see cref="T:Dynamicweb.Security.UserManagement.Group">Group</see>.
 </summary>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.GroupTemplateExtender.IncludeGroupsAndUsers">
 <summary>
 Gets or sets flag - include subgroups and users.
 </summary>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.GroupTemplateExtender.ElementName">
 <summary>
 Gets or sets name of the element.
 </summary>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.GroupTemplateExtender.UserSortField">
 <summary>
 Gets or sets the sort field.
 </summary>
 <value>The sort field.</value>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.GroupTemplateExtender.UserSortOrder">
 <summary>
 Gets or sets the sort order.
 </summary>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.GroupTemplateExtender.PagingHandler">
 <summary>
 Gets or sets the <see cref="T:Dynamicweb.Modules.Common.PagingHandler">PagingHandler</see>.
 </summary>
</member>
<member name="T:Dynamicweb.UserManagement.Frontend.ManageAddressesAction">
 <summary>
 Manage addresses action enumeration
 </summary>
</member>
<member name="T:Dynamicweb.UserManagement.Frontend.ParagraphSettings">
 <summary>The Class ParagraphSettings represents settings based on paragraph properties</summary>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ShowProfileUserID">
 <summary>
 Gets value indicating if profile user id will be shown
 </summary>
 <returns><see cref="T:System.Boolean">Boolean</see> value whether to show profile user id</returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ShowProfileUser">
 <summary>
 Gets selected <see cref="T:Dynamicweb.UserManagement.Frontend.ShowProfileUserMode">mode</see> selected for showing user profile
 </summary>
 <returns><see cref="T:Dynamicweb.UserManagement.Frontend.ShowProfileUserMode">Mode</see> selected for showing user profile</returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.EditProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ShowType">
 <summary>
 Gets selected <see cref="T:Dynamicweb.UserManagement.Frontend.ShowTypes">type</see> for showing user profile
 </summary>
 <returns><see cref="T:Dynamicweb.UserManagement.Frontend.ShowTypes">Type</see> selected for showing user profile</returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ListTemplate">
 <summary>
 Gets the path to template used for displaying list of user and/or groups
 </summary>
 <returns>The Path to selected list template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.List">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.SearchResultTemplate">
 <summary>
 Gets the path to template used for displaying search result
 </summary>
 <returns>The Path to search result template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.List">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.SearchTemplate">
 <summary>
 Gets the path to template used for searching
 </summary>
 <returns>The Path to search result template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.List">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ListUsers">
 <summary>
 Gets the complete users collection selected in paragraph properties
 </summary>
 <returns>The users <see cref="T:Dynamicweb.Security.UserManagement.UserCollection">collection</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.List">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ListGroups">
 <summary>
 Gets the groups collection selected in paragraph properties
 </summary>
 <returns>The groups <see cref="T:Dynamicweb.Security.UserManagement.GroupCollection">collection</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.List">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ListSubgroupSettings">
 <summary>
 Gets the settings related to handling subgroups
 </summary>
 <returns>The <see cref="T:Dynamicweb.UserManagement.Frontend.SubgroupSettingsInfo">settings</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.List">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ListUserSortField">
 <summary>
 Gets the sorting field
 </summary>
 <returns>Selected <see cref="T:Dynamicweb.Security.UserManagement.SortFields">sort field</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.List">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ListUserSortOrder">
 <summary>
 Gets the sorting order
 </summary>
 <returns>Selected <see cref="T:Dynamicweb.UserManagement.Frontend.SortOrders">sort order</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.List">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.PagingHandler">
 <summary>
 Gets the handler of paging results
 </summary>
 <returns>The <see cref="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.PagingHandler">handler</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.List">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.DetailUserTemplate">
 <summary>
 Gets the path to template used for displaying user details
 </summary>
 <returns>The Path to user details template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.List">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.DetailGroupTemplate">
 <summary>
 Gets the path to template used for displaying group details
 </summary>
 <returns>The Path to group details template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.List">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ListEditUserTemplate">
 <summary>
 Gets the path to list edit user template
 </summary>
 <returns>The Path to list edit user template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.List">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ListEditUserSelectableGroups">
 <summary>
 Gets selected groups are allowed for user to join while profile edit
 </summary>
 <returns>The groups <see cref="T:Dynamicweb.Security.UserManagement.GroupCollection">collection</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.List">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ShowProfileTemplate">
 <summary>
 Gets the path to template used for showing user profile
 </summary>
 <returns>The Path to the template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.EditProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ShowProfileAllowEdit">
 <summary>
 Gets value indicating if profile edit will be allowed in show profile
 </summary>
 <returns><see cref="T:System.Boolean">Boolean</see> value whether to allow edit profile</returns>
 <remarks>
 used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.EditProfile">show type</see>
 if <see cref="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ShowProfileUser">Show profile</see> setting set to <see cref="F:Dynamicweb.UserManagement.Frontend.ShowProfileUserMode.LoggedIn">show logged in user</see>
 </remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ShowProfileEditUserTemplate">
 <summary>
 Gets the path to template used for displaying user profile in edit profile
 </summary>
 <returns>The Path to the template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.EditProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ShowProfileEditAddressesTemplate">
 <summary>
 Gets the path to template used for editing user address
 </summary>
 <returns>The Path to the template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.EditProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ShowProfileViewAddressesTemplate">
 <summary>
 Gets the path to template used for displaying user address
 </summary>
 <returns>The Path to the template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.EditProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ShowProfileAddAddressTemplate">
 <summary>
 Gets the path to template used for displaying user address with allowed adding address
 </summary>
 <returns>The Path to the template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.EditProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ShowProfileEditUserSelectableGroups">
 <summary>
 Gets selected groups are allowed for user to join on show profile
 </summary>
 <returns>The groups <see cref="T:Dynamicweb.Security.UserManagement.GroupCollection">collection</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.EditProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.CreateProfileTemplate">
 <summary>
 Gets the path to template used for creating user
 </summary>
 <returns>The Path to the template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.CreateProfileApprovalType">
 <summary>
 Gets the value indicating how created profiles will be approved
 </summary>
 <returns>Selected <see cref="T:Dynamicweb.UserManagement.Frontend.CreateProfileApprovalTypes">approval type</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.CreateProfileAutoLogin">
 <summary>
 Gets value indicating if user will be auto logged in after profile creation
 </summary>
 <returns><see cref="T:System.Boolean">Boolean</see> value whether to auto login user</returns>
 <remarks>
 used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see>
 if <see cref="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.CreateProfileApprovalType">approval type</see> is <see cref="F:Dynamicweb.UserManagement.Frontend.CreateProfileApprovalTypes.None"/>
 </remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.MatchAnonymousOrdersOnEmail">
 <summary>
 Gets value indicating if anonymous orders will be associated with new user by its email
 </summary>
 <returns><see cref="T:System.Boolean">Boolean</see> value whether to associate orders with user</returns>        
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.DoUpdateUsersByEmail">
 <summary>
 Gets value indicating if users will be updated by its email
 </summary>
 <returns><see cref="T:System.Boolean">Boolean</see> value whether to update users</returns>  
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.CreateProfileNewUserGroups">
 <summary>
 Gets selected groups user will be placed into after profile creation
 </summary>
 <returns>The groups <see cref="T:Dynamicweb.Security.UserManagement.GroupCollection">collection</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.CreateProfileSelectableGroups">
 <summary>
 Gets selected groups user allowed to join on profile creation
 </summary>
 <returns>The groups <see cref="T:Dynamicweb.Security.UserManagement.GroupCollection">collection</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ConfirmationEmailTemplate">
 <summary>
 Gets the path to template used for confirmation e-mail
 </summary>
 <returns>The Path to the template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ConfirmationEmailFromAddress">
 <summary>
 Gets the sender address of confirmation e-mail
 </summary>
 <returns>The <see cref="T:System.String">Address</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ConfirmationEmailSubject">
 <summary>
 Gets the subject of confirmation e-mail
 </summary>
 <returns>The <see cref="T:System.String">Subject</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.NotificationEmailTemplate">
 <summary>
 Gets the path to template used for notification e-mails
 </summary>
 <returns>The Path to the template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.NotificationEmailFromAddress">
 <summary>
 Gets the sender address of notification e-mail
 </summary>
 <returns>The <see cref="T:System.String">Address</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.NotificationEmailFromName">
 <summary>
 Gets the sender name of notification e-mail
 </summary>
 <returns>The <see cref="T:System.String">Name</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.NotificationEmailSubject">
 <summary>
 Gets the subject of notification e-mail
 </summary>
 <returns>The <see cref="T:System.String">Subject</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.NotificationEmailRecipients">
 <summary>
 Gets the recipients collection selected in paragraph properties for e-mail notifications
 </summary>
 <returns>The users <see cref="T:Dynamicweb.Security.UserManagement.UserCollection">collection</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.UserNotificationEmailTemplate">
 <summary>
 Gets the path to template used for notification e-mails to created user
 </summary>
 <returns>The Path to the template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.UserNotificationEmailFromAddress">
 <summary>
 Gets the sender address of notification e-mail to created user
 </summary>
 <returns>The <see cref="T:System.String">Address</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.UserNotificationEmailFromName">
 <summary>
 Gets the sender name of notification e-mail to created user
 </summary>
 <returns>The <see cref="T:System.String">Name</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.UserNotificationEmailSubject">
 <summary>
 Gets the subject of notification e-mail to created user
 </summary>
 <returns>The <see cref="T:System.String">Subject</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.CreateProfileRedirectType">
 <summary>
 Gets the value indicating where to redirect user after creating profile
 </summary>
 <returns>Selected <see cref="T:Dynamicweb.UserManagement.Frontend.RedirectTypes">redirect type</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.CreateProfileRedirectTemplate">
 <summary>
 Gets the path to template used for redirecting user after create profile if <see cref="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.CreateProfileRedirectType">redirect type</see> is <see cref="F:Dynamicweb.UserManagement.Frontend.RedirectTypes.Template">template</see>
 </summary>
 <returns>The Path to the template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.CreateProfileRedirectPage">
 <summary>
 Gets the path to page used for redirecting user after create profile if <see cref="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.CreateProfileRedirectType">redirect type</see> is <see cref="F:Dynamicweb.UserManagement.Frontend.RedirectTypes.Page">Page</see>
 </summary>
 <returns>The Path to the page as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ApprovalRedirectPage">
 <summary>
 Gets the path to page used for redirecting user after approval
 </summary>
 <returns>The Path to the page as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.LoggedInRedirectPage">
 <summary>
 Gets the path to page used for redirecting user after log in 
 </summary>
 <returns>The Path to the page as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.CreateProfile">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.UploadedImagesFolder">
 <summary>
 Gets the path to upload folder for images
 </summary>
 <returns>
 Returns path to folder as <see cref="T:System.String">String</see>
 </returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.UploadedImagesMaxWidth">
 <summary>
 Gets the max width of upload images
 </summary>
 <returns>
 Returns max width if defined in paragraph properties 
 otherwise
 returns 0 as <see cref="T:System.Int32">Integer</see>
 </returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.UploadedImagesMaxHeight">
 <summary>
 Gets the max height of upload images
 </summary>
 <returns>
 Returns max height if defined in paragraph properties 
 otherwise
 returns 0 as <see cref="T:System.Int32">Integer</see>
 </returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.VCardFieldsString">
 <summary>
 Gets the fields selected for using with visiting card
 </summary>
 <returns>Visiting card fields As comma-separated <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.List">list</see> and <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.ViewProfile">list</see> show types</remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.DeleteMainAddressMessage">
 <summary>
 Gets defined error message used for delete main address
 </summary>
 <returns>The message as <see cref="T:System.String">String</see></returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.DeleteDefaultAddressMessage">
 <summary>
 Gets defined error message used for delete default address
 </summary>
 <returns>The message as <see cref="T:System.String">String</see></returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.DeleteAddressMessage">
 <summary>
 Gets defined error message used for delete address
 </summary>
 <returns>The message as <see cref="T:System.String">String</see></returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.IncorrectEmailFormat">
 <summary>
 Gets defined error message used for e-mail has incorrect format
 </summary>
 <returns>The message as <see cref="T:System.String">String</see></returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ErrorEmptyEmail">
 <summary>
 Gets defined error message used for e-mail is empty
 </summary>
 <returns>The message as <see cref="T:System.String">String</see></returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ErrorEmailNotFound">
 <summary>
 Gets defined error message used for e-mail is not found
 </summary>
 <returns>The message as <see cref="T:System.String">String</see></returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ErrorEmptyUsername">
 <summary>
 Gets defined error message used for empty user name
 </summary>
 <returns>The message as <see cref="T:System.String">String</see></returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ErrorEmptyPassword">
 <summary>
 Gets defined error message used for empty password
 </summary>
 <returns>The message as <see cref="T:System.String">String</see></returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ErrorPasswordsNotMatch">
 <summary>
 Gets defined error message used for passwords doesn't match
 </summary>
 <returns>The message as <see cref="T:System.String">String</see></returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ErrorWrongPassword">
 <summary>
 Gets defined error message used for wrong password
 </summary>
 <returns>The message as <see cref="T:System.String">String</see></returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ErrorPasswordLength">
 <summary>
 Gets defined error message used for wrong password length
 </summary>
 <returns>The message as <see cref="T:System.String">String</see></returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ErrorUsernameTaken">
 <summary>
 Gets defined error message used for user name is already taken
 </summary>
 <returns>The message as <see cref="T:System.String">String</see></returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ErrorIllegalPasswordCharacters">
 <summary>
 Gets defined error message used for password contains illegal characters
 </summary>
 <returns>The message as <see cref="T:System.String">String</see></returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ErrorPasswordSmallLength">
 <summary>
 Gets defined error message used for password too short
 </summary>
 <returns>The message as <see cref="T:System.String">String</see></returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ErrorPasswordComplexity">
 <summary>
 Gets defined error message used for password complexity
 </summary>
 <returns>The message as <see cref="T:System.String">String</see></returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ErrorPasswordReuse">
 <summary>
 Gets defined error message used for password reuse
 </summary>
 <returns>The message as <see cref="T:System.String">String</see></returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.LoginTemplate">
 <summary>
 Gets the path to template used for login user
 </summary>
 <returns>The Path to the template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.Login">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.PasswordResetTemplate">
 <summary>
 Gets the path to template used for password reset
 </summary>
 <returns>The Path to the template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.Login">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.PasswordRecoveryTemplate">
 <summary>
 Gets the path to template used for password recovery
 </summary>
 <returns>The Path to the template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.Login">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.PasswordRecoveryOperator">
 <summary>
 Gets operator indicating whether all of <see cref="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.PasswordRecoveryUserFields">field</see> should be equal or at least any of them
 </summary>
 <returns>
 <see cref="T:System.String">String</see> value
 "RecoveryOperatorAND"
 if "All selected fields must apply" is selected in paragraph settings
 or
 "AnyField"
 if "Any selected fields must apply" is selected in paragraph settings
 </returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.Login">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.PasswordRecoveryMethod">
 <summary>
 Gets the password recovery method
 </summary>
 <returns>Selected <see cref="T:Dynamicweb.UserManagement.Frontend.PasswordRecoveryMethod">password recovery method</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.Login">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.PasswordRecoveryLinkLifeTime">
 <summary>
 Gets defined hours amount if <see cref="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.PasswordRecoveryMethod">password recovery method</see> is <see cref="F:Dynamicweb.UserManagement.Frontend.PasswordRecoveryMethod.SendRestoreLink">SendRestoreLink</see>
 </summary>
 <returns>The hours amount as <see cref="T:System.Int32">Integer</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.Login">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.PasswordRecoveryUserFields">
 <summary>
 Gets the fields selected for using with password recovery
 </summary>
 <returns>Selected password recovery fields <see cref="T:System.String">String array</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.Login">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.ErrorEmptyField">
 <summary>
 Gets defined error message used for empty field
 </summary>
 <returns>The message as <see cref="T:System.String">String</see></returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.PasswordRecoveryEmailTemplate">
 <summary>
 Gets the path to template used for password recovery e-mail 
 </summary>
 <returns>The Path to the template as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.Login">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.PasswordRecoveryEmailFrom">
 <summary>
 Gets the sender address of password recovery e-mail
 </summary>
 <returns>The <see cref="T:System.String">Address</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.Login">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.PasswordRecoveryEmailSubject">
 <summary>
 Gets the subject of password recovery e-mail
 </summary>
 <returns>The <see cref="T:System.String">Subject</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.Login">show type</see></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.ParagraphSettings.LoginSuccessRedirectToPage">
 <summary>
 Gets the path to page used for redirecting user after log in
 </summary>
 <returns>The Path to the page as <see cref="T:System.String">String</see></returns>
 <remarks>used with <see cref="F:Dynamicweb.UserManagement.Frontend.ShowTypes.Login">show type</see></remarks>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.ParagraphSettings.#ctor(Dynamicweb.Modules.Properties)">
 <summary>
 Initialize a new ParagraphSettings based on given properties
 </summary>
 <param name="paragraphProperties">The paragraph <see cref="T:Dynamicweb.Modules.Properties">Properties</see></param>
</member>
<member name="T:Dynamicweb.UserManagement.Frontend.PasswordRecoveryMethod">
 <summary>
 Password recovery method enumeration
 </summary>
</member>
<member name="T:Dynamicweb.UserManagement.Frontend.RedirectTypes">
 <summary>
 Redirect types enumeration
 </summary>
</member>
<member name="T:Dynamicweb.UserManagement.Frontend.Renderer">
 <summary>The Class Renderer represents renderer user management related entities</summary>
</member>
<member name="F:Dynamicweb.UserManagement.Frontend.Renderer._propertyInfosLock">
 <summary>
 Used to synchronize access to object from multiple threads.
 </summary>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderSearchForm(Dynamicweb.Rendering.Template)">
 <summary>
 Renders the search form.
 </summary>
 <param name="searchBoxTemplate">Template containing search box markup.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderSearchForm(Dynamicweb.Rendering.Template,Dynamicweb.Rendering.Template,System.Int32)">
 <summary>
 Renders the search form.
 </summary>
 <param name="searchBoxTemplate">Template containing search form markup.</param>
 <param name="masterTemplate">Template to render search form contents into.</param>
 <param name="paragraphID">An ID of the module paragraph.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderUsersAndGroups(Dynamicweb.Security.UserManagement.UserCollection,Dynamicweb.Security.UserManagement.GroupCollection,System.Int32,Dynamicweb.Security.UserManagement.SortFields,Dynamicweb.UserManagement.Frontend.SortOrders,Dynamicweb.Rendering.Template,Dynamicweb.Modules.Common.PagingHandler)">
 <summary>
 Renders the users and groups
 </summary>
 <param name="users"><see cref="T:Dynamicweb.Security.UserManagement.UserCollection">collection</see> of users to be rendered</param>
 <param name="groups"><see cref="T:Dynamicweb.Security.UserManagement.GroupCollection">collection</see> of groups to be rendered</param>
 <param name="numSubgroupLevels">The number of subgroups that should be included into rendering</param>
 <param name="userSortField"><see cref="T:Dynamicweb.Security.UserManagement.SortFields">User Field</see> that used for ordering</param>
 <param name="userSortOrder"><see cref="T:Dynamicweb.UserManagement.Frontend.SortOrders">Direction</see> used for ordering</param>
 <param name="template">Template to render users and groups into.</param>
 <param name="pagingHandler">Paging handler used to split results to pages</param>
 <exception cref="T:System.Exception">
 Thrown when <see cref="T:Dynamicweb.Security.UserManagement.SortFields">UserSortField</see> is <see cref="F:Dynamicweb.Security.UserManagement.SortFields.Sorting">Sorting</see>
 and <see cref="T:Dynamicweb.Security.UserManagement.GroupCollection">Groups</see> parameter contains more than 1 group
 </exception>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderUsers(Dynamicweb.Security.UserManagement.UserCollection,Dynamicweb.Rendering.Template,Dynamicweb.Security.UserManagement.SortFields,Dynamicweb.UserManagement.Frontend.SortOrders,System.Boolean,Dynamicweb.Modules.Common.PagingHandler,Dynamicweb.Security.UserManagement.Group)">
 <summary>
 Renders the users
 </summary>
 <param name="users"><see cref="T:Dynamicweb.Security.UserManagement.UserCollection">collection</see> of users to be rendered</param>
 <param name="template">Template to render users into.</param>
 <param name="sortField"><see cref="T:Dynamicweb.Security.UserManagement.SortFields">User Field</see> that used for ordering</param>
 <param name="sortOrder"><see cref="T:Dynamicweb.UserManagement.Frontend.SortOrders">Direction</see> used for ordering</param>
 <param name="includeParentGroups">Indicates whether to render parent groups</param>
 <param name="pagingHandler">Paging handler used to split results to pages</param>
 <param name="sortInGroup">The <see cref="T:Dynamicweb.Security.UserManagement.Group">Group</see> in which users will be sorted</param>
 <remarks>Users will be rendered inside loop named "Users"</remarks>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderUsers(Dynamicweb.Security.UserManagement.UserCollection,Dynamicweb.Rendering.Template,Dynamicweb.Security.UserManagement.SortFields,Dynamicweb.UserManagement.Frontend.SortOrders,System.String,System.Boolean,Dynamicweb.Modules.Common.PagingHandler,Dynamicweb.Security.UserManagement.Group)">
 <summary>
 Renders the users
 </summary>
 <param name="users"><see cref="T:Dynamicweb.Security.UserManagement.UserCollection">collection</see> of users to be rendered</param>
 <param name="template">Template to render users into.</param>
 <param name="sortField"><see cref="T:Dynamicweb.Security.UserManagement.SortFields">User Field</see> that used for ordering</param>
 <param name="sortOrder"><see cref="T:Dynamicweb.UserManagement.Frontend.SortOrders">Direction</see> used for ordering</param>
 <param name="loopName">Name of the loop in which users will be rendered</param>
 <param name="includeParentGroups">Indicates whether to render parent groups</param>
 <param name="pagingHandler">Paging handler used to split results to pages</param>
 <param name="sortInGroup">The <see cref="T:Dynamicweb.Security.UserManagement.Group">Group</see> in which users will be sorted</param>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderGroups(Dynamicweb.Security.UserManagement.GroupCollection,Dynamicweb.Rendering.Template,Dynamicweb.Modules.Common.PagingHandler)">
 <summary>
 Renders the groups
 </summary>
 <param name="groups"><see cref="T:Dynamicweb.Security.UserManagement.GroupCollection">collection</see> of groups to be rendered</param>
 <param name="template">Template to render users into.</param>
 <param name="pagingHandler">Paging handler used to split results to pages</param>
 <remarks>
 Contained users and subgroups will not be rendered
 and results will be sorted by name in ascending direction
 </remarks>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderGroups(Dynamicweb.Security.UserManagement.GroupCollection,Dynamicweb.Rendering.Template,System.Boolean,Dynamicweb.Security.UserManagement.SortFields,Dynamicweb.UserManagement.Frontend.SortOrders,Dynamicweb.Modules.Common.PagingHandler)">
 <summary>
 Renders the groups
 </summary>
 <param name="groups"><see cref="T:Dynamicweb.Security.UserManagement.GroupCollection">collection</see> of groups to be rendered</param>
 <param name="template">Template to render users into.</param>
 <param name="includeGroupsAndUsers">Indicates whether to render сontained users and subgroups</param>
 <param name="userSortField"><see cref="T:Dynamicweb.Security.UserManagement.SortFields">User Field</see> that used for ordering</param>
 <param name="userSortOrder"><see cref="T:Dynamicweb.UserManagement.Frontend.SortOrders">Direction</see> used for ordering</param>
 <param name="pagingHandler">Paging handler used to split results to pages</param>
 <remarks>Groups will be rendered inside loop named "Groups"</remarks>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderGroups(Dynamicweb.Security.UserManagement.GroupCollection,Dynamicweb.Rendering.Template,System.String,System.Boolean,Dynamicweb.Security.UserManagement.SortFields,Dynamicweb.UserManagement.Frontend.SortOrders,Dynamicweb.Modules.Common.PagingHandler)">
 <summary>
 Renders the groups
 </summary>
 <param name="groups"><see cref="T:Dynamicweb.Security.UserManagement.GroupCollection">collection</see> of groups to be rendered</param>
 <param name="template">Template to render users into.</param>
 <param name="loopName">Name of the loop in which users will be rendered</param>
 <param name="includeSubgroupsAndUsers">Indicates whether to render сontained users and subgroups</param>
 <param name="userSortField"><see cref="T:Dynamicweb.Security.UserManagement.SortFields">User Field</see> that used for ordering</param>
 <param name="userSortOrder"><see cref="T:Dynamicweb.UserManagement.Frontend.SortOrders">Direction</see> used for ordering</param>
 <param name="pagingHandler">Paging handler used to split results to pages</param>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderUser(Dynamicweb.Security.UserManagement.User,Dynamicweb.Rendering.Template,System.Boolean,Dynamicweb.Modules.Common.PagingHandler)">
 <summary>
 Renders the user
 </summary>
 <param name="user"><see cref="T:Dynamicweb.Security.UserManagement.User">User</see> to be rendered</param>
 <param name="template">Template to render user into.</param>
 <param name="includeParentGroups">Indicates whether to render parent groups</param>
 <param name="pagingHandler">Paging handler used to split results to pages</param>
 <remarks>Tags for user editing will be rendered also</remarks>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderUser(Dynamicweb.Security.UserManagement.User,Dynamicweb.Rendering.Template,System.Boolean,Dynamicweb.Modules.Common.PagingHandler,System.Boolean)">
 <summary>
 Renders the user
 </summary>
 <param name="user"><see cref="T:Dynamicweb.Security.UserManagement.User">User</see> to be rendered</param>
 <param name="template">Template to render user into.</param>
 <param name="includeParentGroups">Indicates whether to render parent groups</param>
 <param name="pagingHandler">Paging handler used to split results to pages</param>
 <param name="allowEdit">Indicates whether to render tags for user editing</param>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderGroup(Dynamicweb.Security.UserManagement.Group,Dynamicweb.Rendering.Template,Dynamicweb.Modules.Common.PagingHandler)">
 <summary>
 Renders the group
 </summary>
 <param name="group"><see cref="T:Dynamicweb.Security.UserManagement.GroupCollection">Group</see> to be rendered</param>
 <param name="template">Template to render group into.</param>
 <param name="pagingHandler">Paging handler used to split results to pages</param>
 <remarks>
 Contained users and subgroups will not be rendered
 and results will be sorted by name in ascending direction
 </remarks>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderGroup(Dynamicweb.Security.UserManagement.Group,Dynamicweb.Rendering.Template,System.Boolean,Dynamicweb.Security.UserManagement.SortFields,Dynamicweb.UserManagement.Frontend.SortOrders,Dynamicweb.Modules.Common.PagingHandler)">
 <summary>
 Renders the group
 </summary>
 <param name="group"><see cref="T:Dynamicweb.Security.UserManagement.Group">Group</see> to be rendered</param>
 <param name="template">Template to render group into.</param>
 <param name="includeGroupsAndUsers">Indicates whether to render сontained users and subgroups</param>
 <param name="userSortField"><see cref="T:Dynamicweb.Security.UserManagement.SortFields">User Field</see> that used for ordering</param>
 <param name="userSortOrder"><see cref="T:Dynamicweb.UserManagement.Frontend.SortOrders">Direction</see> used for ordering</param>
 <param name="pagingHandler">Paging handler used to split results to pages</param>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderUserEdit(Dynamicweb.Security.UserManagement.User,Dynamicweb.Security.UserManagement.GroupCollection,System.Collections.Generic.IDictionary{System.String,Dynamicweb.UserManagement.Frontend.UMFormField},Dynamicweb.Rendering.Template,Dynamicweb.Modules.Common.PagingHandler)">
 <summary>
 Renders the user edit related tags
 </summary>
 <param name="user"><see cref="T:Dynamicweb.Security.UserManagement.User">User</see> to be rendered</param>
 <param name="selectableGroups"><see cref="T:Dynamicweb.Security.UserManagement.GroupCollection">Groups</see> which are allowed for user to join in</param>
 <param name="errors">Collection used for handling errors</param>
 <param name="template">Template to render user into.</param>
 <param name="pagingHandler">Paging handler used to split results to pages</param>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderUserAddressAdd(System.Int32,System.Boolean,System.Int32,Dynamicweb.Rendering.Template,System.Collections.Generic.List{Dynamicweb.UserManagement.Frontend.UMFormField})">
 <summary>
 Renders the user add/update address related tags
 </summary>
 <param name="userID">ID of <see cref="T:Dynamicweb.Security.UserManagement.User">User</see> address will be added/Updated</param>
 <param name="forUpdate">Indicates is adding new address or update existing</param>
 <param name="addressId">ID of address object</param>
 <param name="template">Template to render user address tags into.</param>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderUserAddress(Dynamicweb.Security.UserManagement.UserAddress,Dynamicweb.Rendering.Template)">
 <summary>
 Renders the address related tags
 </summary>
 <param name="address"><see cref="T:Dynamicweb.Security.UserManagement.UserAddress">Address</see> to be rendered</param>
 <param name="template">Template to render the address tags into.</param>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderUserAddresses(Dynamicweb.Security.UserManagement.User,Dynamicweb.Rendering.Template,Dynamicweb.UserManagement.Frontend.ParagraphSettings)">
 <summary>
 Renders the all of the user addresses
 </summary>
 <param name="user"><see cref="T:Dynamicweb.Security.UserManagement.User">User</see> who's addresses will be rendered</param>
 <param name="template">Template to render the address tags into.</param>
 <param name="settings"><see cref="T:Dynamicweb.UserManagement.Frontend.ParagraphSettings">Settings</see> of the related paragraph</param>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderUserCreate(Dynamicweb.Security.UserManagement.GroupCollection,Dynamicweb.Security.UserManagement.GroupCollection,Dynamicweb.UserManagement.Frontend.CreateProfileApprovalTypes,System.Collections.Generic.IDictionary{System.String,Dynamicweb.UserManagement.Frontend.UMFormField},Dynamicweb.Rendering.Template,Dynamicweb.Modules.Common.PagingHandler)">
 <summary>
 Renders the user edit related tags
 </summary>
 <param name="NewUserGroups"><see cref="T:Dynamicweb.Security.UserManagement.GroupCollection">Groups</see> where newly created user will be added</param>
 <param name="selectableGroups"><see cref="T:Dynamicweb.Security.UserManagement.GroupCollection">Groups</see> which are allowed for user to join in</param>
 <param name="errors">Collection used for handling errors</param>
 <param name="template">Template to render user into.</param>
 <param name="pagingHandler">Paging handler used to split results to pages</param>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderUserNameInputs(System.Collections.Generic.IDictionary{System.String,Dynamicweb.UserManagement.Frontend.UMFormField},Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the user name input controls related tags
 </summary>
 <param name="errors">Collection used for handling errors</param>
 <param name="template">Template to render inputs related tags into.</param>
 <param name="userName">User name as default value for input control</param>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderUserTemplateExtenders(Dynamicweb.UserManagement.Frontend.Action,Dynamicweb.Security.UserManagement.User,Dynamicweb.Rendering.Template,System.Boolean,Dynamicweb.Modules.Common.PagingHandler)">
 <summary>
 Extends a User template with TemplateExtenders
 </summary>
 <param name="User">The currently rendered user</param>
 <param name="Template">The template rendering the user</param>
 <param name="IncludeParentGroups">Flag - include parent groups</param>
 <param name="PagingHandler">Paging handler</param>
 <remarks>
 </remarks>
 <history>
 	[yzh]	14-04-2011	Created
 </history>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.Renderer.RenderGroupTemplateExtenders(Dynamicweb.Security.UserManagement.Group,Dynamicweb.Rendering.Template,System.Boolean,System.String,Dynamicweb.Security.UserManagement.SortFields,Dynamicweb.UserManagement.Frontend.SortOrders,Dynamicweb.Modules.Common.PagingHandler)">
 <summary>
 Extends a User template with TemplateExtenders
 </summary>
 <param name="Group">The currently rendered group</param>
 <param name="Template">The template rendering the user</param>
 <param name="IncludeGroupsAndUsers">Flag - include groups and users</param>
 <param name="ElementName">Element name</param>
 <param name="UserSortField">Users sort field</param>
 <param name="UserSortOrder">Users sort order</param>
 <param name="PagingHandler">Paging handler</param>
 <remarks>
 </remarks>
 <history>
 	[yzh]	14-04-2011	Created
 </history>
</member>
<member name="T:Dynamicweb.UserManagement.Frontend.ShowProfileUserMode">
 <summary>
 Show profile mode enumeration
 </summary>
</member>
<member name="T:Dynamicweb.UserManagement.Frontend.ShowTypes">
 <summary>
 
 </summary>
</member>
<member name="T:Dynamicweb.UserManagement.Frontend.SortOrders">
 <summary>
 
 </summary>
</member>
<member name="T:Dynamicweb.UserManagement.Frontend.UMFormField">
 <summary>The Structure UMFormField represents entity is used for handling errors related to specific fields</summary>
</member>
<member name="M:Dynamicweb.UserManagement.Frontend.UMFormField.#ctor(System.String,System.String,System.String)">
 <summary>
 Initialize new UMFormField with specified form name, nice name and error message
 </summary>
 <param name="formFieldName">Name used for </param>
 <param name="niceName"></param>
 <param name="errorMessage"></param>
</member>
<member name="F:Dynamicweb.UserManagement.Frontend.UMFormField.FormFieldName">
 <summary>Field name related to form</summary>
</member>
<member name="F:Dynamicweb.UserManagement.Frontend.UMFormField.NiceName">
 <summary>Name that is used for UI</summary>
</member>
<member name="F:Dynamicweb.UserManagement.Frontend.UMFormField.ErrorMessage">
 <summary>Message describing whats gone wrong</summary>
</member>
<member name="T:Dynamicweb.UserManagement.Frontend.UserTemplateExtender">
 <example>
 <code title="User template extender" description="Extends rendering template with custom tags" source="..\Dynamicweb\05 - Modules\Dynamicweb.UserManagement\Head\Dynamicweb.UserManagement.Examples\UserTemplateExtenderSample.cs" lang="CS"></code>
 </example>
 <summary>
 Represents template extender.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.UserTemplateExtender.Action">
 <summary>
 Gets or sets action executed under profile
 </summary>
 <returns>The action.</returns>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.UserTemplateExtender.User">
 <summary>
 Gets or sets the user.
 </summary>
 <value>The user.</value>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.UserTemplateExtender.IncludeParentGroups">
 <summary>
 Gets or sets flag - include parent groups.
 </summary>
</member>
<member name="P:Dynamicweb.UserManagement.Frontend.UserTemplateExtender.PagingHandler">
 <summary>
 Gets or sets the PagingHandler.
 </summary>
 <value>The PagingHandler.</value>
</member>
<member name="T:Dynamicweb.UserManagement.Notifications.AutoLoginNotificationSubscriber">
 <summary>The Class AutoLoginNotificationSubscriber represents subscriber for auto login notification</summary>
</member>
<member name="M:Dynamicweb.UserManagement.Notifications.AutoLoginNotificationSubscriber.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>This method called when user auto login event fires</summary>
</member>
<member name="T:Dynamicweb.UserManagement.Notifications.UserEditorRenderingNotificationSubscriber">
 <summary>
 The Class UserEditorRenderingNotificationSubscriber represents subscriber for user editor rendering notification
 </summary>
</member>
<member name="M:Dynamicweb.UserManagement.Notifications.UserEditorRenderingNotificationSubscriber.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>This method called when user auto login event fires</summary>
</member>
<member name="T:Dynamicweb.UserManagement.Notifications.ValidateUserNotificationArgs">
 <example>
 <code title="Validate user notification subscriber" description="Allow to handle user validated event" source="..\Dynamicweb\05 - Modules\Dynamicweb.UserManagement\Head\Dynamicweb.UserManagement.Examples\Notifications\UserValidatedObserverSample.cs" lang="CS"></code>
 </example>
 <summary>
 Represents a validate user notification agruments.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.UserManagement.Notifications.ValidateUserNotificationArgs.Subject">
 <summary>
 Gets the subject of the notification (user which has been validated).
 </summary>
 <remarks></remarks>
 <value>User which has been validated.</value>
</member>
<member name="P:Dynamicweb.UserManagement.Notifications.ValidateUserNotificationArgs.Errors">
 <summary>
 Gets the validation errors.
 </summary>
 <remarks></remarks>
 <value>Validation errors.</value>
</member>
<member name="M:Dynamicweb.UserManagement.Notifications.ValidateUserNotificationArgs.#ctor(Dynamicweb.Security.UserManagement.User,System.Collections.Generic.Dictionary{System.String,Dynamicweb.UserManagement.Frontend.UMFormField})">
 <summary>
 Creates a new instance of a class.
 </summary>
 <param name="subject">The validated user.</param>
 <param name="errors">Validation errors.</param>
 <remarks></remarks>
</member>
</members>
</doc>
