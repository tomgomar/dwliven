@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using Dynamicweb.Extensibility
@using Dynamicweb.Content
@using System;
@using System.Globalization;
@using System.Linq
@using System.IO
@using Dynamicweb.Core
@using System.Web 


@{
	string pageId = GetGlobalValue("Global:Page.ID").ToString();
	string productId = GetString("Ecom:Product.ID");
	string uniqueId = GetString("Ecom:Product.ID") + GetString("Ecom:Product.VariantID");
	string currentPrice = GetString("Ecom:Product.Discount.Price.PriceFormatted") == GetString("Ecom:Product.Price.PriceFormatted") ? GetString("Ecom:Product.Price.PriceFormatted") : GetString("Ecom:Product.Discount.Price.PriceFormatted");
	string hideHelpText = "";
	string requestQuery = GetGlobalValue("Global:Request.Query");
	string variantId = HttpContext.Current.Request.QueryString.Get("variantId");
	string feedId = pageId + "&ProductID=" + productId + "&VariantID=" + variantId + "&Feed=True&redirect=false";

	int featuresCount = 0;
	string brand = GetString("Ecom:Product:Field.brand");
	bool onlyPreview = Converter.ToBoolean(Pageview.Area.Item["OnlyPreviewForAnonymous"]) && Pageview.User == null;

	foreach (LoopItem customField in GetLoop("CustomFieldValues"))
	{
		if (!String.IsNullOrEmpty(customField.GetString("Product.CustomField.Value.Clean")) && customField.GetString("Product.CustomField.Name") != "CustomSticker")
		{
			featuresCount++;
		}
	}

	foreach (LoopItem customField in GetLoop("ProductCategories"))
	{
		foreach (LoopItem field in customField.GetLoop("ProductCategoryFields"))
		{
			if (!String.IsNullOrEmpty(field.GetString("Ecom:Product.CategoryField.Value")))
			{
				featuresCount++;
			}
		}
	}

	foreach (LoopItem variantgroup in GetLoop("VariantGroups"))
	{
		foreach (LoopItem variantoption in variantgroup.GetLoop("VariantAvailableOptions"))
		{
			if (variantoption.GetBoolean("Ecom:VariantOption.Selected"))
			{
				hideHelpText = "u-hidden";
			}
		}
	}

	int relatedProductsPageSize = 4;
	int relatedProductsColumnWidth = 3;

	if (Pageview.Device.ToString() == "Mobile")
	{
		relatedProductsPageSize = 1;
		relatedProductsColumnWidth = 12;
	}

	if (Pageview.Device.ToString() == "Tablet")
	{
		relatedProductsPageSize = 3;
		relatedProductsColumnWidth = 4;
	}

	string feedPageUrl = "/Default.aspx?ID=" + GetPageIdByNavigationTag("ProductsPage");
	string feedFullUrl = feedPageUrl + "&PageSize=" + relatedProductsPageSize + "&ProdID=" + productId + "&feed=true";
	string productContainerId = "Product" + productId;

	string siteURL = Dynamicweb.Context.Current.Request.Url.Scheme + "://" + Dynamicweb.Context.Current.Request.Url.Host;

	//gallery
	int imagesCount = 1;
	List<string> galleryImages = new List<string>();

    string imagePrefix = "/Admin/Public/GetImage.ashx?width=550&amp;height=550&amp;crop=5&FillCanvas=True&DoNotUpscale=true&amp;Compression=75&amp;image=";
    string thumbPrefix = "/Admin/Public/GetImage.ashx?width=100&amp;height=100&amp;crop=5&FillCanvas=True&DoNotUpscale=true&amp;Compression=75&amp;image=";
    string fullImage = "";

    galleryImages.Add(imagePrefix + GetString("Ecom:Product.ImageLarge.Default.Clean"));

    foreach (LoopItem alternativeImage in GetLoop("Ecom:Product.AlternativeImages"))
    {
        if (!String.IsNullOrEmpty(alternativeImage.GetString("Ecom:Product.AlternativeImages.Image")))
        {
            fullImage = imagePrefix + alternativeImage.GetString("Ecom:Product.AlternativeImages.Image");

			galleryImages.Add(fullImage);
			imagesCount++;
		}
	}

    foreach (LoopItem detail in GetLoop("Details"))
    {
        if (!String.IsNullOrEmpty(detail.GetString("Ecom:Product:Detail.Image.Clean")))
        {
            fullImage = imagePrefix + detail.GetString("Ecom:Product:Detail.Image.Clean");

            galleryImages.Add(fullImage);
            imagesCount++;
        }
    }

	string firstImage = galleryImages.FirstOrDefault();

	string galleryImagesArray = string.Join(", ", galleryImages);

}
<!-- Trigger for the gallery modal -->
<input type="checkbox" id="GalleryModalTrigger" class="modal-trigger" />

<!-- Gallery modal -->
<div class="modal-container">
    <label for="GalleryModalTrigger" id="GalleryModalOverlay" class="modal-overlay"></label>
    <div class="modal modal--lg modal--full" id="GalleryModal">
        <div class="modal__body">
            <div class="gallery-slider js-gallery-slider" data-current-image="0" data-total-images="@imagesCount" data-images="@galleryImagesArray">
                <div class="gallery-slider__image">
                    <img id="FullImage" src="@firstImage" class="modal--full__img js-gallery-image" />
                </div>
                <div class="gallery-slider__image-counter">
                    <span class="js-image-list-counter">1</span> / @imagesCount
                </div>
                <label class="gallery-slider__close-btn" for="GalleryModalTrigger"></label>

                @if (imagesCount > 1)
                {
                    <button class="gallery-slider__previous-btn" onclick="ImageList.GetPreviousImage(this)"></button>
                    <button class="gallery-slider__next-btn" onclick="ImageList.GetNextImage(this)"></button>
                }
            </div>
        </div>
    </div>
</div>

<div class="paragraph-container__grid--bleed-x paragraph-container__grid--bleed-y">
    <div class="grid product" id="productGrid">
        @* Image block with optional thumbs *@
        @if (!String.IsNullOrEmpty(GetString("Ecom:Product.ImageLarge.Default.Clean")))
        {
            <div class="grid__col-md-6 grid__col-sm-6">
                <div class="grid grid--bleed">
                    @{ 
                        int thumbCounter = 0;
                    }
                    <div class="grid__col-2 u-hidden-xxs product__thumbs dw-mod">
                        <div class="carousel js-carousel-container u-max-h500px dw-mod">
                            <div class="thumb-list carousel__container dw-mod">
                                <div class="carousel__container__slide carousel__container__slide--vertical dw-mod">

                                    @*Main image thumb*@
                                    <div class="carousel__container__slide dw-mod">
                                        <div class="thumb-list__item thumb-list__item--active dw-mod js-thumb-btn" onmouseover="ImageList.GetImage(this)" data-number="@thumbCounter" data-for="Image_@productId" data-image-path="/Admin/Public/GetImage.ashx?width=550&amp;height=550&amp;crop=5&DoNotUpscale=true&amp;Compression=75&amp;image=@GetString("Ecom:Product.ImageLarge.Default.Clean")">
                                            <label for="GalleryModalTrigger">
                                                <img src="/Admin/Public/GetImage.ashx?width=100&amp;height=100&amp;crop=5&amp;DoNotUpscale=true&amp;Compression=75&amp;image=@GetString("Ecom:Product.ImageLarge.Default.Clean")" alt="@GetString("Ecom:Product.Name")" data-for="FullImage" data-number="@thumbCounter" onclick="ImageList.GetImage(this)">
                                            </label>
                                        </div>
                                    </div>
                                    @{ thumbCounter++; }

                                    @foreach (LoopItem alternativeImage in GetLoop("Ecom:Product.AlternativeImages"))
                                    {
                                        if (!String.IsNullOrEmpty(alternativeImage.GetString("Ecom:Product.AlternativeImages.Image")))
                                        {
                                            string image = "/Admin/Public/GetImage.ashx?width=550&amp;height=550&amp;crop=5&FillCanvas=True&DoNotUpscale=true&amp;Compression=75&amp;image=" + alternativeImage.GetString("Ecom:Product.AlternativeImages.Image");
                                            string thumb = "/Admin/Public/GetImage.ashx?width=100&amp;height=100&amp;crop=5&FillCanvas=True&DoNotUpscale=true&amp;Compression=75&amp;image=" + alternativeImage.GetString("Ecom:Product.AlternativeImages.Image");

                                            <div class="carousel__container__slide dw-mod">
                                                <div class="thumb-list__item dw-mod js-thumb-btn" onmouseover="ImageList.GetImage(this)" data-number="@thumbCounter" data-for="Image_@productId" data-image-path="@image">
                                                    <label for="GalleryModalTrigger">
                                                        <img src="@thumb" alt="@GetString("Ecom:Product.Name")" data-for="FullImage" data-number="@thumbCounter" onclick="ImageList.GetImage(this)">
                                                    </label>
                                                </div>
                                            </div>
                                            thumbCounter++;
                                        }
                                    }

                                    @foreach (LoopItem detail in GetLoop("Details"))
                                    {
                                        if (!String.IsNullOrEmpty(detail.GetString("Ecom:Product:Detail.Image.Clean")))
                                        {
                                            string image = "/Admin/Public/GetImage.ashx?width=550&amp;height=550&amp;crop=5&FillCanvas=True&DoNotUpscale=true&amp;Compression=75&amp;image=" + detail.GetString("Ecom:Product:Detail.Image.Clean");
                                            string thumb = "/Admin/Public/GetImage.ashx?width=100&amp;height=100&amp;crop=5&FillCanvas=True&DoNotUpscale=true&amp;Compression=75&amp;image=" + detail.GetString("Ecom:Product:Detail.Image.Clean");

                                            <div class="carousel__container__slide dw-mod">
                                                <div class="thumb-list__item dw-mod js-thumb-btn" onmouseover="ImageList.GetImage(this)" data-number="@thumbCounter" data-for="Image_@productId" data-image-path="@image">
                                                    <label for="GalleryModalTrigger">
                                                        <img src="@thumb" alt="@GetString("Ecom:Product.Name")" data-for="FullImage" data-number="@thumbCounter" onclick="ImageList.GetImage(this)">
                                                    </label>
                                                </div>
                                            </div>
                                            thumbCounter++;
                                        }
                                    }
                                </div>
                            </div>
                            <div class="js-carousel-data" data-total-slides="@(imagesCount + 1)" data-carousel-slide-time="0" data-current-slide="0" data-direction="vertical" data-sliding-type="items" slides-in-view="6">
                                <div class="carousel-prev-btn carousel-prev-btn--vertical dw-mod" onclick="Carousel.GetPreviousSlide(this)"></div>
                                <div class="carousel-next-btn carousel-next-btn--vertical dw-mod" onclick="Carousel.GetNextSlide(this)"></div>
                            </div>
                        </div>
                    </div>
                    <div class="grid__col-auto">
                        <div class="stickers-container dw-mod">
                            @{
                                if (Converter.ToBoolean(Pageview.Area.Item["EnableSaleTags"]))
                                {
                                    string contentType = Pageview.Area.Item["EcommerceSaleTagContentType"].ToString();
                                    string text = "";
                                    var currency = Dynamicweb.Ecommerce.Services.Currencies.GetDefaultCurrency();

                                    switch (contentType)
                                    {
                                        case "Name":
                                            foreach (LoopItem discount in GetLoop("ProductDiscounts"))
                                            {
                                                text = discount.GetString("Ecom:Product.Discount.Name");
                                                <div class="stickers-container__tag stickers-container__tag--sale dw-mod">@text</div>
                                            }
                                            break;
                                        case "Amount":
                                            if (GetLoop("ProductDiscounts").Count > 0)
                                            {
                                                text = Dynamicweb.Ecommerce.Services.Currencies.Format(currency, GetDouble("Ecom:Product.Discount.Price.Price") - GetDouble("Ecom:Product.Price.Price"));
                                                <div class="stickers-container__tag stickers-container__tag--sale dw-mod">@text</div>
                                            }
                                            break;
                                        case "Percents":
                                            double percents = 0;
                                            foreach (LoopItem discount in GetLoop("ProductDiscounts"))
                                            {
                                                percents += discount.GetDouble("Ecom:Product.Discount.PercentWithoutVAT");
                                            }
                                            if (percents > 0) {
                                                text = Math.Round(percents, 0) + "%";
                                                <div class="stickers-container__tag stickers-container__tag--sale dw-mod">@text</div>
                                            }
                                            break;
                                        case "Amount and percents":
                                            double amount = 0;
                                            double percent = 0;
                                            foreach (LoopItem discount in GetLoop("ProductDiscounts"))
                                            {
                                                if (discount.GetString("Ecom:Product.Discount.Type") == "PERCENT")
                                                {
                                                    percent += discount.GetDouble("Ecom:Product.Discount.PercentWithoutVAT");
                                                }
                                                else if (discount.GetString("Ecom:Product.Discount.Type") == "AMOUNT")
                                                {
                                                    amount += discount.GetDouble("Ecom:Product.Discount.AmountWithVAT");
                                                }
                                            }
                                            if (percent > 0)
                                            {
                                                text = percent + "%";
                                                <div class="stickers-container__tag stickers-container__tag--sale dw-mod">@text</div>
                                            }
                                            if (amount > 0)
                                            {
                                                text = Dynamicweb.Ecommerce.Services.Currencies.Format(currency, amount);
                                                <div class="stickers-container__tag stickers-container__tag--sale dw-mod">@text</div>
                                            }
                                            break;
                                        default:
                                            if (GetLoop("ProductDiscounts").Count > 0)
                                            {
                                                text = Translate("Sale!");
                                                <div class="stickers-container__tag stickers-container__tag--sale dw-mod">@text</div>
                                            }
                                            break;
                                    }
                                }

                                if (Converter.ToBoolean(Pageview.Area.Item["NewStickersEnable"]) && GetDate("Ecom:Product.Created").AddDays(Converter.ToDouble(Pageview.Area.Item["NewStickersExpiration"])) > DateTime.Now)
                                {
                                    <div class="stickers-container__tag stickers-container__tag--new dw-mod">@Translate("New!")</div>
                                }

                                if (!String.IsNullOrEmpty(GetString("Ecom:Product:Field.CustomSticker.Value")))
                                {
                                    <div class="stickers-container__tag stickers-container__tag--custom dw-mod">@GetString("Ecom:Product:Field.CustomSticker.Value")</div>
                                }
                            }
                        </div>
                        <label for="GalleryModalTrigger" class="product__image-container">
                            <img class="thumb-image-view product__image-container__image js-gallery-slider dw-mod b-lazy" src="/Files/Images/placeholder.gif" data-current-image="0" data-total-images="@imagesCount" data-images="@galleryImagesArray" data-src="/Admin/Public/GetImage.ashx?crop=5&height=550&width=550&Compression=75&FillCanvas=True&DoNotUpscale=true&image=@GetString("Ecom:Product.ImageLarge.Default.Clean")" alt="@GetString("Ecom:Product.Name")" id="Image_@productId" data-for="FullImage" data-number="0" onclick="ImageList.GetImage(this)" />
                        </label>
                    </div>
                </div>
            </div>
        }

        @* Primary product informations *@
        <div class="grid__col-auto product__info dw-mod">
            <div class="grid__cell">
                <div class="u-pull--left product__title dw-mod">
                    <h1 class="u-no-margin">@GetString("Ecom:Product.Name") @GetString("Ecom:Product.SelectedVariantComboName")</h1>
                    <div class="item-number dw-mod">@GetString("Ecom:Product.Number")</div>
                </div>
                <div class="u-pull--right">
                    @if (Dynamicweb.Core.Converter.ToBoolean(GetGlobalValue("Global:Extranet.UserName")))
                    {
                        string favoriteId = "Favorite" + GetString("Ecom:Product.ID");
                        <div id="@favoriteId" class="favorites favorites--md u-pull--right dw-mod">
                            <div>
                                @{ string favorite = GetBoolean("Ecom:Product.IsProductInFavoriteList") ? "fa fa-star" : "fa fa-star-o"; }
                                <label for="FavoriteTrigger"><i class="@favorite fa-1_5x"></i></label>
                            </div>
                            <input type="checkbox" id="FavoriteTrigger" class="dropdown-trigger" />

                            <div class="dropdown">
                                <div class="dropdown__content dropdown__content--show-left dropdown__content--padding u-w220px dw-mod">
                                    <ul class="list list--clean dw-mod">
                                        @foreach (LoopItem listType in GetLoop("CustomerCenter.ListTypes"))
                                        {
                                            foreach (LoopItem list in listType.GetLoop("CustomerCenter.ProductLists"))
                                            {
                                            <li>
                                                @{string favLinkType = list.GetString("Ecom:Product.List.IsProductInThisList") == "True" ? list.GetString("Ecom:Product.RemoveFromThisList") : list.GetString("Ecom:Product.AddToThisListAction");}
                                                @{string isInListIcon = list.GetString("Ecom:Product.List.IsProductInThisList") == "True" ? "fa fa-star" : "fa fa-star-o";}
                                                <a href="@favLinkType" class="list__link dw-mod"><i class="@isInListIcon"></i> @list.GetValue("Ecom:CustomerCenter.List.Name")</a>
                                            </li>
                                            }
                                        }
                                    </ul>
                                 </div>
                                 <label class="dropdown-trigger-off" for="FavoriteTrigger"></label>
                            </div>
                        </div>
                    }
                </div>

                <div>
                    <div class="u-border-bottom u-full-width u-pull--left"></div>

                @* Delivery + stock information *@
                @if (!onlyPreview && (!String.IsNullOrEmpty(GetString("Ecom:Product:Stock.Text")) || !String.IsNullOrEmpty(GetString("Ecom:Product:Stock.DeliveryText"))))
                {
                    string stockIcon = GetInteger("Ecom:Product.Stock") > 0 ? "stock-icon--in" : "stock-icon--not";

                        <table class="table table--clean delivery-and-stock-info dw-mod">
                            <tr>
                                <td class="u-no-padding">@GetString("Ecom:Product:Stock.Text") <div class="stock-icon @stockIcon"></div></td>
                                @if (!String.IsNullOrEmpty(GetString("Ecom:Product:Stock.DeliveryText")))
                                {
                                <td class="u-no-padding u-ta-right">@Translate("Shipping") @GetString("Ecom:Product:Stock.DeliveryText") @GetString("Ecom:Product:Stock.DeliveryUnit")</td>
                                }
                            </tr>
                        </table>
                    }

                    @* Short description *@
                    @if (!String.IsNullOrEmpty(GetString("Ecom:Product.ShortDescription")))
                    {
                        <div class="introduction-text">
                            @GetString("Ecom:Product.ShortDescription")
                        </div>
                    }

                    @* Variants *@
                    @if (GetLoop("VariantGroups").Count > 0)
                    {
                        string containerId = "Variants" + productId;
                        <div>
                            <div id="@containerId" data-product-id="@productId">
                                @foreach (LoopItem variantGoup in GetLoop("VariantGroups"))
                                {
                                <div>
                                    <div class="u-bold">@variantGoup.GetString("Ecom:VariantGroup.Name")</div>
                                    <div>
                                        @foreach (LoopItem variantOption in variantGoup.GetLoop("VariantAvailableOptions"))
                                        {
                                            string selected = variantOption.GetBoolean("Ecom:VariantOption.Selected") ? "checked" : "";

                                            if (!string.IsNullOrEmpty(variantOption.GetString("Ecom:VariantOption.ImgSmall.Clean")))
                                            {
                                                <img src="/Admin/Public/GetImage.ashx?width=100&amp;height=50&amp;crop=5&amp;Compression=75&amp;image=/Images/@variantOption.GetString("Ecom:VariantOption.ImgSmall.Clean")" title="@variantOption.GetString("Ecom:VariantOption.Name")" id="@productId@variantOption.GetString("Ecom:VariantOption.ID")" data-variant-id="@variantOption.GetString("Ecom:VariantOption.ID")" data-product-id="@productId" onclick="Variants.UpdateVariants(this, false, true)" class="btn btn--tag @selected" data-check="@selected" />
                                            }
                                            else
                                            {
                                                <button type="button" data-id="@GetString("Ecom:Product.ID")" id="@productId@variantOption.GetString("Ecom:VariantOption.ID")" data-variant-id="@variantOption.GetString("Ecom:VariantOption.ID")" data-product-id="@productId" onclick="Variants.UpdateVariants(this, false, true)" class="btn btn--tag @selected" data-check="@selected">@variantOption.GetString("Ecom:VariantOption.Name")</button>
                                            }
                                        }
                                    </div>
                                </div>
                                }
                            </div>
                            <small id="helpText_@productId" class="help-text @hideHelpText">@Translate("Please select variant!")</small>
                        </div>
                    }

                    @* BOMProducts *@
                    @if (GetLoop("BOMProducts").Count > 0)
                    {
                        <h2 class="section-title">@Translate("Including products")</h2>
                        foreach (LoopItem BOMProductItem in GetLoop("BOMProducts"))
                        {
                            string link = "/" + BOMProductItem.GetString("Ecom:Product.LinkGroup.Clean") + (!String.IsNullOrEmpty(BOMProductItem.GetString("Ecom:Product.VariantID")) ? "&VariantID=" + BOMProductItem.GetString("Ecom:Product.VariantID") : "");
                            <div class="grid__col--border grid">
                                <div class="grid__cell grid__cell--align-middle-left">
                                    <a href="@link" class="u-pull--left u-margin-right">
                                        <img src="/Admin/Public/GetImage.ashx?width=50&image=@BOMProductItem.GetString("Ecom:Product.ImageSmall.Default.Clean")&Compression=99" />
                                    </a>
                                    <a href="@link">@BOMProductItem.GetString("Ecom:Product.Name")</a>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>

            @* Buy block *@
            <div class="grid__cell-footer">
                <div class="grid__cell product__price-actions js-handlebars-root dw-mod" id="PriceAndActions" data-template="PricesAndActionsTemplate" data-json-feed="/Default.aspx?ID=@feedId"></div>
                <input type="hidden" value="@GetString("Ecom:Product.VariantID.Extented")" name="Variant" id="Variant_@GetString("Ecom:Product.ID")" />
            </div>
        </div>
    </div>

    <div class="grid">
        @* Long description *@
        @if (!String.IsNullOrEmpty(GetString("Ecom:Product.LongDescription")))
        {
        <div class="grid__col-12">
            <h2 class="section-title">@Translate("Description")</h2>

            <div class="grid grid--bleed">
                <div class="grid__col-lg-8 grid__col-md-8 grid__col-sm-12 grid__col-xs-12 product__description dw-mod">
                    @GetString("Ecom:Product.LongDescription")
                </div>
            </div>
        </div>
        }

        @* Features lists *@
        @if (featuresCount > 0 && featuresCount < 10)
        {
            <div class="grid__col-12 product__features dw-mod">
                <h2 class="section-title">@Translate("Product information")</h2>
                @ProductProperties()
            </div>
        }


        @if (featuresCount >= 10)
        {
            <div class="grid__col-12 grid__col--bleed-y">
                <h2 class="section-title">@Translate("Product information")</h2>

                <input type="checkbox" id="expandable-text-trigger" class="expandable-text-trigger" />
                <div class="expandable-text-container">

				
				
	
<div class="NAS_TEST">HOOOLA 1</div>
@foreach (LoopItem item in GetLoop("CustomFieldValues")){
    <p>@item.TemplateTags()</p>
}

<div class="NAS_TEST">HOOOLA 2</div>
    <p>@TemplateTags()</p>
	
<div class="NAS_TEST">HOOOLA 3</div>
                    <div class="expandable-text-container__content dw-mod">
                        @ProductProperties()
                    </div>
<div class="NAS_TEST">AAADIOS</div>




                    <div class="u-ta-center">
                        <label for="expandable-text-trigger" class="btn btn--secondary expandable-text-container__btn more dw-mod">@Translate("Show more")</label>
                        <label for="expandable-text-trigger" class="btn btn--secondary expandable-text-container__btn less dw-mod">@Translate("Show less")</label>
                    </div>
                </div>
            </div>
        }

        @* Related products *@
        @foreach (LoopItem relatedGroup in GetLoop("ProductRelatedGroups"))
        {
            string groupId = ToPascalCase(relatedGroup.GetString("Ecom:Product:RelatedGroup.Name"));
            string relatedFeedUrl = feedFullUrl + "&" + groupId + "=" + productId + "&GroupName=" + groupId;

            <div class="grid">
                <div class="grid__col-12">
                    <h2 class="section-title section-title--condensed">@relatedGroup.GetString("Ecom:Product:RelatedGroup.Name")</h2>
                </div>
            </div>

            <div class="js-handlebars-root" id="ProductList_@groupId" data-template="ProductContainer" data-pre-render-template="ProductPreRenderContainer" data-json-feed="@relatedFeedUrl" data-preloader="overlay"></div>
        }
    </div>
</div>

@helper ProductProperties()
{
    <div class="grid grid--bleed">
        <div class="grid__col-lg-8 grid__col-md-8 grid__col-sm-12 grid__col-xs-12">
            @if (GetLoop("CustomFieldValues").Count > 0)
            {
                <table class="table table--clean table--compact">
                    @foreach (LoopItem customField in GetLoop("CustomFieldValues"))
                    {

                        string fieldValue = customField.GetString("Product.CustomField.Value.Clean");

                        if (customField.GetLoop("Product.CustomField.Options").Count > 0)
                        {
                            fieldValue = "";
                            int count = 0;

                            foreach (LoopItem customFieldOptions in customField.GetLoop("Product.CustomField.Options"))
                            {
                                if (customFieldOptions.GetBoolean("Product.CustomField.Option.IsSelected"))
                                {
                                    if (count != 0)
                                    {
                                        fieldValue += ", ";
                                    }

                                    fieldValue += customFieldOptions.GetString("Product.CustomField.Option.Name");
                                    count++;
                                }
                            }
                        }

                        if (fieldValue == "False")
                        {
                            fieldValue = Translate("No");
                        }

                        if (fieldValue == "True")
                        {
                            fieldValue = Translate("Yes");
                        }

                        if (!String.IsNullOrEmpty(customField.GetString("Product.CustomField.Name")) && !String.IsNullOrEmpty(fieldValue) && customField.GetString("Product.CustomField.Name") != "Custom sticker")
                        {
                            <tr>
                                <td width="160">@customField.GetString("Product.CustomField.Name"):</td>
                                @if (!String.IsNullOrEmpty(customField.GetString("Document.FullPath")))
                                {
                                    <td class="u-ta-left"><a href="@customField.GetString("Document.FullPath")" download title="@Translate("Download")" class="product__document"><span property="identifier">@getIconForFile(fieldValue) @Path.GetFileName(fieldValue)</span></a></td>
                                }
                                else
                                {
                                    <td class="u-ta-left"><span property="identifier">@fieldValue</span></td>
                                }
                            </tr>
                        }
                    }
                </table>
            }

            @if (GetLoop("ProductCategories").Count > 0)
            {
                <table class="table table--clean table--compact u-margin-bottom">
                    @foreach (LoopItem categoryGroup in GetLoop("ProductCategories"))
                    {
                        int fieldsCount = 0;
                        foreach (LoopItem categoryField in categoryGroup.GetLoop("ProductCategoryFields"))
                        {
                            if (!String.IsNullOrEmpty(categoryField.GetString("Ecom:Product.CategoryField.Value")))
                            {
                                fieldsCount++;
                            }
                        }

                        if (fieldsCount > 0)
                        {
                            <tr>
                                <td colspan="2" class="u-ta-left table__section-header dw-mod">@categoryGroup.GetString("Ecom:Product.Category.Name")</td>
                            </tr>

                            foreach (LoopItem categoryField in categoryGroup.GetLoop("ProductCategoryFields"))
                            {
                                string fieldValue = categoryField.GetString("Ecom:Product.CategoryField.Value");

                                if (fieldValue == "False")
                                {
                                    fieldValue = Translate("No");
                                }

                                if (fieldValue == "True")
                                {
                                    fieldValue = Translate("Yes");
                                }

                                if (!String.IsNullOrEmpty(categoryField.GetString("Ecom:Product.CategoryField.Label")) && !String.IsNullOrEmpty(fieldValue))
                                {
                                    <tr>
                                        <td width="160">@categoryField.GetString("Ecom:Product.CategoryField.Label"):</td>
                                        @if (categoryField.GetString("Ecom:Product.CategoryField.TypeID") == "9")
                                        {
                                            <td class="u-ta-left"><a href="@fieldValue" download title="@Translate("Download")">@getIconForFile(fieldValue) @Path.GetFileName(fieldValue)</a></td>
                                        }
                                        else if (categoryField.GetString("Ecom:Product.CategoryField.TypeID") == "15")
                                        {
                                            <td class="u-ta-left"><span property="identifier">@categoryField.GetString("Ecom:Product.CategoryField.OptionLabel")</span></td>
                                        }
                                        else if (categoryField.GetString("Ecom:Product.CategoryField.TypeID") == "8")
                                        {
                                            <td class="u-ta-left"><a property="identifier" target="_blank" href="@fieldValue">@fieldValue</a></td>
                                        }
                                        else
                                        {
                                            <td class="u-ta-left"><span property="identifier">@fieldValue</span></td>
                                        }
                                    </tr>
                                }
                            }
                        }
                    }
                </table>
            }
        </div>
    </div>
}

<script id="PricesAndActionsTemplate" type="text/x-template">
    {{#.}}
        @if (!onlyPreview)
        {
            <div class="product__price-actions__price dw-mod">
                <div class="before-price {{onSale}} dw-mod">{{discount}}</div>
                <div class="price dw-mod">{{price}}</div>
            </div>
            <div class="buttons-collection buttons-collection--right product__price-actions__actions dw-mod">
                <button type="button" id="CartButton_{{id}}" class="btn btn--primary btn--condensed dw-mod u-pull--right" name="submit" onclick="Cart.AddToCart(event, '{{productId}}', document.getElementById('Quantity_{{id}}').value, 'Unit_{{id}}', 'Variant_{{productId}}');"><i class="fa fa-shopping-cart"></i><span class="u-hidden-xs u-hidden-xxs"> @Translate("Add to cart")</span></button>
                <input type="number" class="u-w70px u-pull--right" id="Quantity_{{id}}" name="Quantity" value="1" min="1">
                <input type="checkbox" id="UnitOptions_{{id}}" class="dropdown-trigger" />
                <div class="dropdown u-pull--right u-w150px u-w80px--xs dw-mod {{hasUnits}}">
                    <label class="dropdown__header dropdown__btn dw-mod" for="UnitOptions_{{id}}">{{unitName}}</label>
                    <div id="unitOptions" class="dropdown__content dw-mod">
                        {{#unitOptions}}
                            {{>UnitOption}}
                        {{/unitOptions}}
                    </div>
                    <label class="dropdown-trigger-off" for="UnitOptions_{{id}}"></label>
                </div>
                <input type="hidden" value="{{unitId}}" name="Unit" id="Unit_{{id}}" />
            </div>
        }
        else
        {
            <button type="button" id="CartButton_{{id}}" class="u-hidden"></button>
        }
    {{/.}}
</script>

<script id="Units" type="text/x-template">
    <div class="dropdown__item dw-mod" onclick="HandlebarsBolt.UpdateContent('PriceAndActions', '/Default.aspx?ID=@feedId&UnitID={{value}}')">{{name}}</div>
</script>


@* Script templates for related products *@
 <script id="ProductPreRenderContainer" type="text/x-template">
    <div class="u-h600px u-full-width">
        <div class="grid">
            <div class="grid__col-12">
                <div class="pre-render-element pre-render-element--md"></div>
            </div>
        </div>
    </div>
</script>

<script id="ProductContainer" type="text/x-template">
    {{#.}}
        <div class="u-min-h400px u-full-width">
            <div class="grid">
                <div class="grid__col-45px grid__col--bleed-x">
                    <div class="grid__cell grid__cell--align-middle-left">
                        <button class="btn btn--condensed btn--clean {{prevdisabled}} dw-mod" onclick="HandlebarsBolt.UpdateContent('ProductList_{{groupName}}', '{{prevPage}}')" {{prevdisabled}}><i class="fa fa-chevron-left fa-2x"></i></button>
                    </div>
                </div>
                <div class="grid__col-auto grid__col--bleed-x">
                    <div id="ProductsContainer" class="grid product-list dw-mod">
                        {{#ProductsContainer}}
                             <div id="Product{{productId}}" class="grid__col-@relatedProductsColumnWidth product-list__list-item dw-mod">
                                 {{#Product}}
                                    <div class="grid__cell product-list__grid-item__image dw-mod {{noImage}}">
                                        <div class="stickers-container dw-mod">
                                            {{#Stickers}}
                                                {{>Sticker}}
                                            {{/Stickers}}
                                        </div>
                                        <a href="{{link}}" onclick="Scroll.SavePosition(event)"><img class="grid__cell-img grid__cell-img--centered b-lazy" src="/Files/Images/placeholder.gif" data-src="/Admin/Public/GetImage.ashx?width=300&amp;height=300&amp;crop=5&amp;Compression=75&amp;image={{image}}" alt="{{name}}" /></a>
                                    </div>

                                    <div class="grid__cell product-list__grid-item__price-info {{shortGridInfo}} dw-mod">
                                        <a href="{{link}}" onclick="Scroll.SavePosition(event)" title="{{name}}"><h6 class="u-condensed-text">{{name}}</h6></a>
                                        <div class="item-number dw-mod">{{number}}</div>
                                        @if (!onlyPreview)
                                        {
                                            <div class="price dw-mod">{{price}}</div>
                                            <div class="before-price {{onSale}} dw-mod">{{discount}}</div>
                                        }
                                    </div>

                                    <div class="product-list__grid-item__footer dw-mod">
                                        <div class="u-ta-center">
                                            <a href="{{link}}" id="CartButton_{{id}}" class="btn btn--secondary btn--full u-no-margin dw-mod">@Translate("View")</a>
                                        </div>
                                    </div>
                                 {{/Product}}
                             </div>
                        {{/ProductsContainer}}
                    </div>
                </div>
                <div class="grid__col-45px grid__col--bleed-x">
                    <div class="grid__cell grid__cell--align-middle-right">
                        <button class="btn btn--condensed btn--clean {{nextdisabled}} dw-mod" onclick="HandlebarsBolt.UpdateContent('ProductList_{{groupName}}', '{{nextPage}}')" {{nextdisabled}}><i class="fa fa-chevron-right fa-2x"></i></button>
                    </div>
                </div>
            </div>
        </div>
    {{/.}}
</script>

<script id="Sticker" type="text/x-template">
    <div class="stickers-container__tag {{className}} dw-mod">{{text}}</div>
</script>

@* Units templates *@

<script id="UnitOption" type="text/x-template">
    <div class="dropdown__item dw-mod" onclick="HandlebarsBolt.UpdateContent('PriceAndActions', '{{link}}&feed=true&UnitID={{value}}&rid={{id}}')">{{name}}</div>
</script>


@*Variants data generation*@
<script>
    document.addEventListener("DOMContentLoaded", function (event) {
        var variants = [];

        document.getElementById("productGrid").addEventListener('contentLoaded', function (e) {
            if (e.srcElement.classList.contains("js-variants-wrap")) {
                Variants.SetVariantOptionStatesForProductList(e.srcElement);
            }
        }, false);

        @foreach (LoopItem variantgroup in GetLoop("VariantGroups"))
        {
            <text>var optionsArray = [];</text>

            foreach (LoopItem variantoption in variantgroup.GetLoop("VariantAvailableOptions"))
            {
                string variantSelection = variantoption.GetBoolean("Ecom:VariantOption.Selected") ? "checked" : "";

                <text>
        var option = new Variants.VariantOption("@uniqueId", "@GetString("Ecom:Product.ID")", "@variantoption.GetValue("Ecom:VariantOption.ID")", "@variantoption.GetString("Ecom:VariantOption.Name")", "@variantSelection", "", "@variantoption.GetString("Ecom:VariantOption.Color")", "@variantoption.GetString("Ecom:VariantOption.ImgSmall.Clean")");
        optionsArray.push(option);
        </text>
            }

            <text>
        var group = new Variants.VariantGroup("@GetString("Ecom:Product.ID")_@variantgroup.GetValue("Ecom:VariantGroup.ID")", "@variantgroup.GetValue("Ecom:VariantGroup.Name")", optionsArray);
        variants.push(group);
        </text>
        }

        var combinations = [];
        @foreach (LoopItem variantcomb in GetLoop("VariantStockCombinations"))
        {
        <text>
        combinations.push(new Variants.CombinationItem("@variantcomb.GetValue("Ecom:VariantStockCombination.VariantID")"));
        </text>
        }

        variants = variants.sort(function (a, b) {
            var firstVariantId = a.VariantOptions[0].variantId;
            for (var i = 0; i < combinations.length; i++) {
                var combinationIndex = combinations[i].id.indexOf(firstVariantId);
                if (combinationIndex != -1) {
                    return combinationIndex;
                }
            }
            //should never happen
            return 0;
        });

        Variants.SetProductFeedId('@feedId');
        Variants.SetProductUrl('/@GetString("Ecom:Product.VariantLinkGroup.Clean")');

        HandlebarsBolt.SetDataInCache(("Variants" + "@productId"), variants);
        HandlebarsBolt.SetDataInCache(("Combinations" + "@productId"), combinations);

        document.getElementById("PriceAndActions").addEventListener('contentLoaded', function (e) {
            Variants.InitVariants(variants, combinations, "@productId", "@uniqueId");
        }, false);
    });
</script>

@functions {
    string getIconForFile(string fileName)
    {
        string ext = Path.GetExtension(fileName);
        string icon = "";
        switch (ext.ToLower())
        {
            case ".xls":
            case ".xlsx":
                icon = "fa-file-excel-o";
                break;
            case ".ppt":
            case ".pptx":
                icon = "fa-file-powerpoint-o";
                break;
            case ".doc":
            case ".docx":
                icon = "fa-file-word-o";
                break;
            case ".jpg":
            case ".jpeg":
            case ".png":
            case ".gif":
            case ".pdf":
                return "<img class='product__document-icon' src='/Admin/Public/GetImage.ashx?crop=5&height=70&width=120&Compression=75&DoNotUpscale=true&image=" + fileName + "' />";
            default:
                icon = "fa-file-o";
                break;
        }
        return "<i class='fa " + icon + "'></i> ";
    }

    public static string ToPascalCase(string str)
    {
        return CultureInfo.InvariantCulture.TextInfo
        .ToTitleCase(str.ToLowerInvariant())
        .Replace("-", "")
        .Replace("_", "")
        .Replace(" ", "");
    }
}

<script type="application/ld+json">
{
    "@@context": "http://schema.org/",
    "@@type": "Product",
    "name": "@GetString("Ecom:Product.Name")",
    @if (!string.IsNullOrEmpty(GetString("Ecom:Product.ImageLarge.Default.Clean")))
    {
        <text>"image": [
        "@siteURL/Admin/Public/GetImage.ashx?width=400&height=400&crop=0&Compression=75&DoNotUpscale=true&image=@GetString("Ecom:Product.ImageLarge.Default.Clean")",
        "@siteURL/Admin/Public/GetImage.ashx?width=400&height=300&crop=0&Compression=75&DoNotUpscale=true&image=@GetString("Ecom:Product.ImageLarge.Default.Clean")",
        "@siteURL/Admin/Public/GetImage.ashx?width=448&height=225&crop=0&Compression=75&DoNotUpscale=true&image=@GetString("Ecom:Product.ImageLarge.Default.Clean")"
        ],</text>
    }
    "description": "@GetString("Ecom: Product.ShortDescription")",
    "mpn": "925872",
    @if(!string.IsNullOrEmpty(brand))
    {
        <text>"brand": {
            "@@type": "Thing",
            "name": "@brand"
        },</text>
    }
    "offers": {
    "@@type": "Offer",
    "priceCurrency": "@GetString("Ecom:Product.Price.Currency.Code")",
    "price": "@GetString("Ecom:Product.Price.Price")",
    "availability": "@(GetInteger("Ecom:Product.Stock") > 0 ? "InStock" : "OutOfStock")"
    }
}
</script>