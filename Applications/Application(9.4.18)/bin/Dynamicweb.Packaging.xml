<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dynamicweb.Packaging</name>
    </assembly>
    <members>
        <member name="T:Dynamicweb.Packaging.DependencyReferencesFoundException">
            <summary>
            The class DependencyReferencesFoundException represents exception used when package have dependency references.
            </summary>
            <remarks>
            <seealso cref="M:Dynamicweb.Packaging.IPackageService.UninstallPackage(NuGet.IPackage)"/>
            </remarks>
        </member>
        <member name="P:Dynamicweb.Packaging.DependencyReferencesFoundException.Package">
            <summary>
            The target package
            </summary>
        </member>
        <member name="P:Dynamicweb.Packaging.DependencyReferencesFoundException.DependencyReferences">
            <summary>
            The target package dependency references
            </summary>
        </member>
        <member name="T:Dynamicweb.Packaging.DynamicwebCredentialProvider">
            <summary>
            Provider that handles credentials placed in <see cref="T:NuGet.Configuration.PackageSource">package sources</see>
            </summary>
        </member>
        <member name="M:Dynamicweb.Packaging.DynamicwebCredentialProvider.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,NuGet.Configuration.PackageSource}})">
            <summary>
            Constructor
            </summary>
            <param name="packageSources">the key-value collection of the source endpoints and package source</param>
        </member>
        <member name="M:Dynamicweb.Packaging.DynamicwebCredentialProvider.GetCredentials(System.Uri,System.Net.IWebProxy,NuGet.CredentialType,System.Boolean)">
            <summary>
            Call the credential provider to acquire credentials.
            Valid credentials will be returned, or null if the provide cannot provide credentials for the given request.
            </summary>
            <param name="uri">The uri of a web resource for which credentials are needed.</param>
            <param name="proxy">Ignored.  Proxy information will not be used.</param>
            <param name="isRetry">If true, credentials were previously supplied by this provider for the same uri.</param>
            <returns>A credential object or null.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.PackageManager.GetResource(NuGet.Protocol.Core.Types.SourceRepository,System.String)">
            <summary>
            Returns a resource from the SourceRepository if it exists.
            </summary>                
        </member>
        <member name="T:Dynamicweb.Packaging.PackageRestoreException">
            <summary>
            Represents information about package restore fails
            </summary>
        </member>
        <member name="P:Dynamicweb.Packaging.PackageRestoreException.Exception">
            <summary>
            The exception occurred during package restore
            </summary>
        </member>
        <member name="P:Dynamicweb.Packaging.PackageRestoreException.PackageReference">
            <summary>
            Get not restered package restored
            </summary>
        </member>
        <member name="T:Dynamicweb.Packaging.PackageService">
            <summary>
            Class PackageService.
            </summary>
            <seealso cref="T:Dynamicweb.Packaging.IPackageService" />
        </member>
        <member name="M:Dynamicweb.Packaging.PackageService.GetInstalledPackages">
            <summary>
            Gets a list of <see cref="T:NuGet.IPackage">package</see>s currently installed in the solution.
            </summary>
            <returns>A list of installed packages.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.PackageService.GetInstalledPackagesAsync">
            <summary>
            get installed packages as an asynchronous operation.
            </summary>
            <returns>Task&lt;IEnumerable&lt;NuGet.IPackage&gt;&gt;.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.PackageService.FindPackage(System.String,System.String)">
            <summary>
            Tries to find a <see cref="T:NuGet.IPackage">package</see> from the given <paramref name="packageId">id</paramref> and <paramref name="packageVersion">version</paramref>.
            </summary>
            <param name="packageId">The id of the package.</param>
            <param name="packageVersion">The version of the package, e.g. '1.0.0'.</param>
            <returns>A package if one can be found; <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.PackageService.GetPackages">
            <summary>
            Gets a list of <see cref="T:NuGet.IPackage">package</see>s that are available from current feeds.
            </summary>
            <returns>A list of packages.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.PackageService.GetPackagesByTag(System.String)">
            <summary>
            Get a list of <see cref="T:NuGet.IPackage">package</see>s with the given <paramref name="tag" /> from current feeds.
            </summary>
            <param name="tag">A tag that packages must have.</param>
            <returns>A list of packages</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.PackageService.GetUpdates">
            <summary>
            Gets a list of <see cref="T:NuGet.IPackage">package</see>s that are updates for packages that are currently installed.
            </summary>
            <returns>A list of packages.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.PackageService.GetUpdates(System.Collections.Generic.IEnumerable{NuGet.IPackage})">
            <summary>
            Gets a list of <see cref="!:IPackage">package</see>s that are updates for given packages.
            </summary>
            <param name="packages">The list of installed packages.</param>
            <returns>A list of packages.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.PackageService.InstallPackage(NuGet.IPackage)">
            <summary>
            Installs the given <see cref="T:NuGet.IPackage">package</see> and all required dependencies if any.
            Dependencies are resolved using NuGet and missing dependencies are automatically installed as well.
            </summary>
            <param name="package">The package to install.</param>
            <returns>ApplicationResponse.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.PackageService.InstallPackageAsync(NuGet.IPackage)">
            <summary>
            install package as an asynchronous operation.
            </summary>
            <param name="package">The package.</param>
            <returns>Task&lt;ApplicationResponse&gt;.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.PackageService.UpdatePackage(NuGet.IPackage)">
            <summary>
            Updates an installed <see cref="T:NuGet.IPackage">package</see> with the given <see cref="T:NuGet.IPackage">package</see>.
            The package to update is automatically determined based on the given package.
            Dependencies are resolved using NuGet and some dependencies may be updated as well.
            </summary>
            <param name="package">The package to update to.</param>
            <returns>ApplicationResponse.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.PackageService.UpdatePackageAsync(NuGet.IPackage)">
            <summary>
            update package as an asynchronous operation.
            </summary>
            <param name="package">The package.</param>
            <returns>Task&lt;ApplicationResponse&gt;.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.PackageService.UninstallPackage(NuGet.IPackage)">
            <summary>
            Uninstalls the given <see cref="T:NuGet.IPackage">package</see>.
            Dependencies are resolved using NuGet and dependencies that are only used by the given packages
            are uninstalled as well.
            </summary>
            <param name="package">The package.</param>
            <returns>ApplicationResponse.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.PackageService.UninstallPackageAsync(NuGet.IPackage)">
            <summary>
            uninstall package as an asynchronous operation.
            </summary>
            <param name="package">The package.</param>
            <returns>Task&lt;ApplicationResponse&gt;.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.PackageService.GetAvailableUpdatesAsync(NuGet.IPackage)">
            <summary>
            Gets a list of <see cref="!:IPackage">package</see>s that are all updates for given package.
            </summary>
            <param name="packages">The installed package.</param>
            <returns>A list of packages.</returns>
        </member>
        <member name="P:Dynamicweb.Packaging.PackageService.RepositoryPath">
            <summary>
            Gets or sets the NuGet packages install location..
            </summary>
            <remarks>
            A relative path can be used. The root folder of related path is '/Files/System/Packages'. The default value "Installed"
            </remarks>
            <returns>System.String</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dynamicweb.Packaging.DynamicwebDeleteOnRestartManager" -->
        <member name="E:Dynamicweb.Packaging.DynamicwebDeleteOnRestartManager.PackagesMarkedForDeletionFound">
            <summary>
            Occurs when it is detected that the one or more packages are marked for deletion in the current solution.
            </summary>
        </member>
        <member name="M:Dynamicweb.Packaging.DynamicwebDeleteOnRestartManager.CheckAndRaisePackageDirectoriesMarkedForDeletion">
            <summary>
            Checks for any pacakge directories that are pending to be deleted and raises the
            <see cref="E:NuGet.PackageManagement.IDeleteOnRestartManager.PackagesMarkedForDeletionFound" /> event.
            </summary>
        </member>
        <member name="M:Dynamicweb.Packaging.DynamicwebDeleteOnRestartManager.DeleteMarkedPackageDirectories(NuGet.ProjectManagement.INuGetProjectContext)">
            <summary>
            Attempts to remove marked package directories that were unable to be fully deleted during the original
            uninstall.
            </summary>
            <param name="projectContext">The project context.</param>
        </member>
        <member name="M:Dynamicweb.Packaging.DynamicwebDeleteOnRestartManager.GetPackageDirectoriesMarkedForDeletion">
            <summary>
            Gets the list of package directories that are still need to be deleted in the
            local package repository.
            </summary>
            <returns>IReadOnlyList&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.DynamicwebDeleteOnRestartManager.MarkPackageDirectoryForDeletion(NuGet.Packaging.Core.PackageIdentity,System.String,NuGet.ProjectManagement.INuGetProjectContext)">
            <summary>
            Marks package directory for future removal if it was not fully deleted during the normal uninstall process
            if the directory does not contain any added or modified files.
            </summary>
            <param name="package">The package.</param>
            <param name="packageDirectory">The package directory.</param>
            <param name="projectContext">The project context.</param>
        </member>
        <member name="T:Dynamicweb.Packaging.DynamicwebNUGetProject">
            <summary>
            This class represents a NuGetProject based on packages.config file and used a folder configured in packages configuration as package cache storage
            </summary>
            <seealso cref="T:NuGet.ProjectManagement.NuGetProject" />
        </member>
        <member name="M:Dynamicweb.Packaging.DynamicwebNUGetProject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamicweb.Packaging.DynamicwebNUGetProject"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:Dynamicweb.Packaging.DynamicwebNUGetProject.GetInstalledPackagesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the installed packages asynchronous.
            </summary>
            <param name="token">The token.</param>
            <returns>Task&lt;IEnumerable&lt;PackageReference&gt;&gt;.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.DynamicwebNUGetProject.InstallPackageAsync(NuGet.Packaging.Core.PackageIdentity,NuGet.Protocol.Core.Types.DownloadResourceResult,NuGet.ProjectManagement.INuGetProjectContext,System.Threading.CancellationToken)">
            <summary>
            Install package as an asynchronous operation.
            </summary>
            <param name="packageIdentity">The package identity.</param>
            <param name="downloadResourceResult">The download resource result.</param>
            <param name="nuGetProjectContext">The nu get project context.</param>
            <param name="token">The token.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.DynamicwebNUGetProject.UninstallPackageAsync(NuGet.Packaging.Core.PackageIdentity,NuGet.ProjectManagement.INuGetProjectContext,System.Threading.CancellationToken)">
            <summary>
            Uninstall package as an asynchronous operation.
            </summary>
            <param name="packageIdentity">The package identity.</param>
            <param name="nuGetProjectContext">The nu get project context.</param>
            <param name="token">The token.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.DynamicwebNUGetProject.AddPackageToConfigFileAsync(NuGet.Packaging.Core.PackageIdentity,NuGet.Protocol.Core.Types.DownloadResourceResult,NuGet.ProjectManagement.INuGetProjectContext,System.Threading.CancellationToken)">
            <summary>
            // Adds package entry to packages.config
            </summary>
            <param name="packageIdentity">The package identity.</param>
            <param name="downloadResourceResult">The download resource result.</param>
            <param name="nuGetProjectContext">The nu get project context.</param>
            <param name="token">The token.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="T:Dynamicweb.Packaging.DynamicwebSolutionManager">
            <summary>
            Class DynamicwebSolutionManager.
            </summary>
            <seealso cref="T:NuGet.PackageManagement.ISolutionManager" />
        </member>
        <member name="M:Dynamicweb.Packaging.DynamicwebSolutionManager.#ctor(Dynamicweb.Packaging.DynamicwebNUGetProject,NuGet.ProjectManagement.INuGetProjectContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamicweb.Packaging.DynamicwebSolutionManager"/> class.
            </summary>
            <param name="defaultNuGetProject">nuget project.</param>
        </member>
        <member name="P:Dynamicweb.Packaging.DynamicwebSolutionManager.DefaultNuGetProject">
            <summary>
            Gets the default <see cref="T:NuGet.ProjectManagement.NuGetProject" />. Default NuGetProject is the selected NuGetProject in the IDE.
            </summary>
            <value>The default nu get project.</value>
        </member>
        <member name="P:Dynamicweb.Packaging.DynamicwebSolutionManager.DefaultNuGetProjectName">
            <summary>
            Gets the name of the default <see cref="T:NuGet.ProjectManagement.NuGetProject" />. Default NuGetProject is the selected NuGetProject
            in the IDE.
            </summary>
            <value>The default name of the nu get project.</value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Dynamicweb.Packaging.DynamicwebSolutionManager.IsSolutionAvailable">
            <summary>
            Returns true if the solution is available to manage nuget packages.
            That is, if the solution is open and a solution file is available.
            For solutions with only BuildIntegratedProject(s), and a globalPackagesFolder which is
            not a relative path, it will return true, even if the solution file is not available.
            </summary>
            <value><c>true</c> if this instance is solution available; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dynamicweb.Packaging.DynamicwebSolutionManager.IsSolutionOpen">
            <summary>
            Returns true if the solution is open
            </summary>
            <value><c>true</c> if this instance is solution open; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Dynamicweb.Packaging.DynamicwebSolutionManager.NuGetProjectContext">
            <summary>
            Gets or sets the nu get project context.
            </summary>
            <value>The nu get project context.</value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Dynamicweb.Packaging.DynamicwebSolutionManager.SolutionDirectory">
            <summary>
            Gets the current open solution directory, can only be called from the main UI thread.
            </summary>
            <value>The solution directory.</value>
        </member>
        <member name="E:Dynamicweb.Packaging.DynamicwebSolutionManager.ActionsExecuted">
            <summary>
            Event raised after user actions are executed.
            </summary>
        </member>
        <member name="E:Dynamicweb.Packaging.DynamicwebSolutionManager.NuGetProjectAdded">
            <summary>
            Occurs when [nu get project added].
            </summary>
        </member>
        <member name="E:Dynamicweb.Packaging.DynamicwebSolutionManager.NuGetProjectRemoved">
            <summary>
            Occurs when [nu get project removed].
            </summary>
        </member>
        <member name="E:Dynamicweb.Packaging.DynamicwebSolutionManager.NuGetProjectRenamed">
            <summary>
            Occurs when [nu get project renamed].
            </summary>
        </member>
        <member name="E:Dynamicweb.Packaging.DynamicwebSolutionManager.SolutionClosed">
            <summary>
            Occurs when [solution closed].
            </summary>
        </member>
        <member name="E:Dynamicweb.Packaging.DynamicwebSolutionManager.SolutionClosing">
            <summary>
            Occurs when [solution closing].
            </summary>
        </member>
        <member name="E:Dynamicweb.Packaging.DynamicwebSolutionManager.SolutionOpened">
            <summary>
            Occurs when [solution opened].
            </summary>
        </member>
        <member name="E:Dynamicweb.Packaging.DynamicwebSolutionManager.SolutionOpening">
            <summary>
            Occurs when [solution opening].
            </summary>
        </member>
        <member name="M:Dynamicweb.Packaging.DynamicwebSolutionManager.GetNuGetProject(System.String)">
            <summary>
            Gets the <see cref="T:NuGet.ProjectManagement.NuGetProject" /> corresponding to the safe name passed in
            </summary>
            <param name="nuGetProjectSafeName">nuGetProjectSafeName is the nuGetProject's unique name if one is
            available or its name.</param>
            <returns>Returns the <see cref="T:NuGet.ProjectManagement.NuGetProject" /> in this solution manager corresponding to the safe name
            passed in.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.DynamicwebSolutionManager.GetNuGetProjects">
            <summary>
            Gets the nu get projects.
            </summary>
            <returns>IEnumerable&lt;NuGetProject&gt;.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.DynamicwebSolutionManager.GetNuGetProjectSafeName(NuGet.ProjectManagement.NuGetProject)">
            <summary>
            Get the safe name of the specified <see cref="T:NuGet.ProjectManagement.NuGetProject" /> which guarantees not to conflict with other
            projects.
            </summary>
            <param name="nuGetProject">The nu get project.</param>
            <returns>Returns the simple name if there are no conflicts. Otherwise returns the unique name.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.DynamicwebSolutionManager.OnActionsExecuted(System.Collections.Generic.IEnumerable{NuGet.PackageManagement.ResolvedAction})">
            <summary>
            Fires ActionsExecuted event.
            </summary>
            <param name="actions">The actions.</param>
        </member>
        <member name="T:Dynamicweb.Packaging.Extensions">
            <summary>
            Class Extensions with extension methods for the Packaging namespace.
            </summary>
        </member>
        <member name="M:Dynamicweb.Packaging.Extensions.GetPackageService(Dynamicweb.Extensibility.IServiceLocator)">
            <summary>
            Gets the package service.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <returns>IPackageService.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.Extensions.GetPackageIdentity(NuGet.IPackage)">
            <summary>
            Gets the package identity.
            </summary>
            <param name="package">The package.</param>
            <returns>PackageIdentity.</returns>
        </member>
        <member name="T:Dynamicweb.Packaging.IPackageService">
            <summary>
            Interface IPackageService is an abstraction of the service used for retrieving pacakges
            </summary>
        </member>
        <member name="M:Dynamicweb.Packaging.IPackageService.FindPackage(System.String,System.String)">
            <summary>
            Tries to find a <see cref="T:NuGet.IPackage">package</see> from the given <paramref name="packageId">id</paramref> and <paramref name="packageVersion">version</paramref>.
            </summary>
            <param name="packageId">The id of the package.</param>
            <param name="packageVersion">The version of the package, e.g. '1.0.0'.</param>
            <returns>A package if one can be found; <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.IPackageService.GetInstalledPackages">
            <summary>
            Gets a list of <see cref="T:NuGet.IPackage">package</see>s currently installed in the solution.
            </summary>
            <returns>A list of installed packages.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.IPackageService.GetPackages">
            <summary>
            Gets a list of <see cref="T:NuGet.IPackage">package</see>s that are available from current feeds.
            </summary>
            <returns>A list of packages.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.IPackageService.GetPackagesByTag(System.String)">
            <summary>
            Get a list of <see cref="T:NuGet.IPackage">package</see>s with the given <paramref name="tag"/> from current feeds.
            </summary>
            <param name="tag">A tag that packages must have.</param>
            <returns>A list of packages</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.IPackageService.GetUpdates">
            <summary>
            Gets a list of <see cref="T:NuGet.IPackage">package</see>s that are updates for packages that are currently installed.
            </summary>
            <returns>A list of packages.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.IPackageService.GetUpdates(System.Collections.Generic.IEnumerable{NuGet.IPackage})">
            <summary>
            Gets a list of <see cref="T:NuGet.IPackage">package</see>s that are updates for given packages.
            </summary>
            <param name="packages">The list of installed packages.</param>
            <returns>A list of packages.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.IPackageService.InstallPackage(NuGet.IPackage)">
            <summary>
            Installs the given <see cref="T:NuGet.IPackage">package</see> and all required dependencies if any.
            Dependencies are resolved using NuGet and missing dependencies are automatically installed as well.
            </summary>
            <param name="package">The package to install.</param>
        </member>
        <member name="M:Dynamicweb.Packaging.IPackageService.UpdatePackage(NuGet.IPackage)">
            <summary>
            Updates an installed <see cref="T:NuGet.IPackage">package</see> with the given <see cref="T:NuGet.IPackage">package</see>.
            The package to update is automatically determined based on the given package.
            Dependencies are resolved using NuGet and some dependencies may be updated as well.
            </summary>
            <param name="package">The package to update to.</param>
        </member>
        <member name="M:Dynamicweb.Packaging.IPackageService.UninstallPackage(NuGet.IPackage)">
            <summary>
            Uninstalls the given <see cref="T:NuGet.IPackage">package</see>.
            Dependencies are resolved using NuGet and dependencies that are only used by the given packages
            are uninstalled as well.
            </summary>
            <param name="package"></param>
        </member>
        <member name="M:Dynamicweb.Packaging.IPackageService.GetAvailableVersions(NuGet.IPackage)">
            <summary>
            Gets all version as <see cref="T:System.Collections.Generic.IEnumerable`1">package collection</see> for given package.
            </summary>
            <param name="package">The package.</param>
            <returns>A list of packages.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.IPackageService.GetAvailableUpdates(NuGet.IPackage)">
            <summary>
            Gets a list of <see cref="T:NuGet.IPackage">package</see>s that are all updates for given package.
            </summary>
            <param name="packages">The installed package.</param>
            <returns>A list of packages.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.IPackageService.GetAllPackageSources">
            <summary>
            Gets a list of <see cref="T:NuGet.Configuration.PackageSource">package sources</see>.
            </summary>
            <returns>A list of package sources.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.IPackageService.GetActivePackageSources">
            <summary>
            Gets a list of active <see cref="T:NuGet.Configuration.PackageSource">package sources</see>.
            </summary>
            <returns>A list of package sources.</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.IPackageService.EnablePackageSource(System.String,System.Boolean)">
            <summary>
            Enable or disable the package source.
            </summary>
            <param name="packageSourceName">The name of the package source.</param>
            <param name="enable">new state</param>
        </member>
        <member name="P:Dynamicweb.Packaging.IPackageService.RepositoryPath">
            <summary>
            Gets or sets the NuGet packages install location..
            </summary>
            <remarks>
            A relative path can be used. The root folder of related path is '/Files/System/Packages'. The default value "Installed"
            </remarks>
            <returns>System.String</returns>
        </member>
        <member name="M:Dynamicweb.Packaging.IPackageService.GetRootedRepositoryPath">
            <summary>
            Gets NuGet packages install folder path.
            </summary>
        </member>
        <member name="M:Dynamicweb.Packaging.IPackageService.ShouldRestorePackages">
            <summary>
            Check missed installed packages
            </summary>
        </member>
        <member name="M:Dynamicweb.Packaging.IPackageService.RestorePackages">
            <summary>
            Restore missed packages
            </summary>
        </member>
        <member name="M:Dynamicweb.Packaging.IPackageService.InstallDynamicwebAdminPackage">
            <summary>
            Installs Dynamicweb.Admin package
            </summary>
            <returns>True if the package was installed, otherwise false</returns>
        </member>
        <member name="T:Dynamicweb.Packaging.NamespaceDoc">
            <summary>
            The Dynamicweb.Packaging namespace contains the implementation of Dynamicweb package system build on top of Nuget.
            </summary>
        </member>
    </members>
</doc>
