<?xml version="1.0"?>
<doc>
<assembly>
<name>
Dynamicweb
</name>
</assembly>
<members>
<member name="T:Dynamicweb.Content.ApprovalTypeConverter">
 <summary>
 This class is meant for use to wrap the integers indicating approvaltype inside a human-readable enum.
 </summary>
</member>
<member name="M:Dynamicweb.Content.ApprovalTypeConverter.Convert(System.Int32)">
 <summary>
 Converts from an integer to an ApprovalType.
 </summary>
 <remarks>See description of ApprovalType for mappings from integer to ApprovalType</remarks>
 <param name="approvalTypeValue">integer representing an approvaltype</param>
 <exception cref="T:System.ArgumentException">Throws an exception if the integer is not a valid approvaltype</exception>
 <returns>approvalType</returns>
</member>
<member name="M:Dynamicweb.Content.ContentPermissionHelper.HasDefaultAreaAccess(Dynamicweb.Security.Permissions.PermissionLevel)">
 <summary>
 Checks permissions for the root of all websites (base area permissions).
 </summary>
 <param name="permission">Permission level that should be checked</param>
 <returns>hasAccess</returns>
</member>
<member name="T:Dynamicweb.Content.Data.PageStructureValidator">
 <summary>
 The PageStructureValidator is a notification subscriber which checks that there is no bad data in the page tree.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationSubscriber" />
</member>
<member name="T:Dynamicweb.Content.Data.AreaRepository">
 <summary>
 The AreaRepository class is an implementation of the <see cref="T:Dynamicweb.Content.Data.IAreaRepository"/> interface, providing persistence operations for the Area aggregate
 </summary>
</member>
<member name="M:Dynamicweb.Content.Data.AreaRepository.Save(Dynamicweb.Content.Area)">
 <summary>
 Saves the specified area
 </summary>
 <param name="area">The area to save</param>
 <returns>The newly saved area</returns>
</member>
<member name="M:Dynamicweb.Content.Data.AreaRepository.Delete(System.Int32)">
 <summary>
 Deletes the area with the specified id
 </summary>
 <param name="id">The id of the area to delete</param>
</member>
<member name="M:Dynamicweb.Content.Data.AreaRepository.GetArea(System.Int32)">
 <summary>
 Gets the area with the specified id
 </summary>
 <param name="id">The id of the area to get</param>
 <returns>The area with the specified id if it exists, otherwise Nothing</returns>
</member>
<member name="M:Dynamicweb.Content.Data.AreaRepository.GetAreas">
 <summary>
 Gets all areas
 </summary>
 <returns>A list of all areas</returns>
</member>
<member name="M:Dynamicweb.Content.Data.AreaRepository.GetNextSortValue(System.Int32)">
 <summary>
 Get the next available sort value for an area associated with the specified master area 
 </summary>
 <param name="masterAreaId">The id of the master area</param>
 <returns>An integer representing the next available sort value</returns>
 <exception cref="T:System.Data.SqlClient.SqlException"></exception>
</member>
<member name="M:Dynamicweb.Content.Data.AreaRepository.DeleteArea(Dynamicweb.Content.Area)">
 <summary>
 Deletes the specified area
 </summary>
 <param name="area">The area to delete</param>
 <returns>The newly deleted area</returns>
</member>
<member name="M:Dynamicweb.Content.Data.AreaRepository.UpdateArea(Dynamicweb.Content.Area)">
 <summary>
 Updates the specified area
 </summary>
 <param name="area">The area to update</param>
 <returns>The newly updated area</returns>
</member>
<member name="M:Dynamicweb.Content.Data.AreaRepository.InsertArea(Dynamicweb.Content.Area,System.Boolean)">
 <summary>
 Inserts the specified area
 </summary>
 <param name="area">The area to insert</param>
 <returns>The newly inserted area</returns>
</member>
<member name="M:Dynamicweb.Content.Data.AreaRepository.RestoreArea(Dynamicweb.Content.Area)">
 <summary>
 Restores the specified area by reInserting it into persistence with its original ID
 </summary>
 <param name="area">The area to reInsert into persistence</param>
 <returns>The newly reInserted area</returns>
</member>
<member name="T:Dynamicweb.Content.Data.AreaRowExtractor">
 <summary>
 The AreaRowExtractor can extract and map an Area row from a <see cref="T:System.Data.IDataReader"/> to an Area object instance 
 </summary>
</member>
<member name="M:Dynamicweb.Content.Data.AreaRowExtractor.ExtractArea(System.Data.IDataReader)">
 <summary>
 Extracts the data from the dataReader and returns a populated Area Object instance with that data
 </summary>
 <param name="dataReader">The IDataReader holding the data needed to populate an Area Object instance</param>
 <returns>The Area object with the data from the DataReader</returns>
</member>
<member name="M:Dynamicweb.Content.Data.AreaRowExtractor.GetValue(System.Data.IDataReader,System.String)">
 <summary>
 Gets the value for the column in the dataReader if the column exists, otherwise Nothing will be returned
 </summary>
 <param name="dataReader">The dataReader from which to get the value of the column</param>
 <param name="columnName">The name of the column for which to get its value</param>
 <returns>The value of the column if it exists, otherwise Nothing</returns>
</member>
<member name="T:Dynamicweb.Content.Data.DeletedPageResult">
 <summary>
 Represents a summary result of a delete page command
 </summary>
</member>
<member name="M:Dynamicweb.Content.Data.DeletedPageResult.#ctor(Dynamicweb.Content.Page,System.Collections.Generic.IEnumerable{System.Int32})">
 <summary>
 Initializes a new instance of the DeletedPageResult class
 </summary>
 <param name="deletedPage">The page deleted</param>
 <param name="subPagesDeleted">A list of subpages deleted as a result of deleting the page specified</param>
</member>
<member name="P:Dynamicweb.Content.Data.DeletedPageResult.NumberOfPagesDeleted">
 <summary>
 Gets the number of pages deleted as a result of deleting the specified page
 </summary>
 <returns>An integer value indicating the number of pages deleted</returns>
</member>
<member name="P:Dynamicweb.Content.Data.DeletedPageResult.DeletedPagesIdentifiers">
 <summary>
 Gets all identifiers of the subpages deleted
 </summary>
 <returns>A list of integers</returns>
</member>
<member name="P:Dynamicweb.Content.Data.DeletedPageResult.DeletedPage">
 <summary>
 Gets the top level page deleted
 </summary>
 <returns>A page instance</returns>
</member>
<member name="T:Dynamicweb.Content.Data.IAreaRepository">
 <summary>
 The IAreaRepository defines persistence operation for the Area Aggregate
 </summary>
</member>
<member name="M:Dynamicweb.Content.Data.IAreaRepository.GetArea(System.Int32)">
 <summary>
 Gets the area with the specified id
 </summary>
 <param name="id">The id of the area to get</param>
 <returns>The area with the specified id if it exists, otherwise Nothing</returns>
</member>
<member name="M:Dynamicweb.Content.Data.IAreaRepository.GetAreas">
 <summary>
 Gets all areas
 </summary>
 <returns>A list of all areas</returns>
</member>
<member name="M:Dynamicweb.Content.Data.IAreaRepository.Save(Dynamicweb.Content.Area)">
 <summary>
 Saves the specified area
 </summary>
 <param name="area">The area to save</param>
 <returns>The newly saved area</returns>
</member>
<member name="M:Dynamicweb.Content.Data.IAreaRepository.Delete(System.Int32)">
 <summary>
 Deletes the area with the specified id
 </summary>
 <param name="id">The id of the area to delete</param>
</member>
<member name="M:Dynamicweb.Content.Data.IAreaRepository.RestoreArea(Dynamicweb.Content.Area)">
 <summary>
 Re-inserts the specified area
 </summary>
 <param name="area">The area to reinsert into persistence</param>
 <returns>The newly inserted area</returns>
</member>
<member name="M:Dynamicweb.Content.Data.IAreaRepository.GetNextSortValue(System.Int32)">
 <summary>
 Get the next available sort value for an area associated with the specified master area 
 </summary>
 <param name="masterAreaId">The id of the master area</param>
 <returns>An integer representing the next available sort value</returns>
</member>
<member name="T:Dynamicweb.Content.Data.IPageRepository">
 <summary>
 The IPageRepository interface defines persistence operations for the Page Aggregate
 </summary>
</member>
<member name="M:Dynamicweb.Content.Data.IPageRepository.GetPage(System.Int32)">
 <summary>
 Gets the Page with the specified id
 </summary>
 <param name="id">The id of the page to get</param>
 <returns>The page with the specified id</returns>
</member>
<member name="M:Dynamicweb.Content.Data.IPageRepository.Save(Dynamicweb.Content.Page)">
 <summary>
 Saves the pages and other objects that are part of the Page Aggregate
 </summary>
 <param name="page">The page to save</param>
 <returns>The newly save page aggregate</returns>
</member>
<member name="M:Dynamicweb.Content.Data.IPageRepository.Delete(System.Int32)">
 <summary>
 Deletes the page with the specified id
 </summary>
 <param name="pageId">The id of the page to delete</param>
</member>
<member name="M:Dynamicweb.Content.Data.IPageRepository.DeleteAll(System.Collections.Generic.IEnumerable{System.Int32})">
 <summary>
 Deletes the pages with the specified ids
 </summary>
 <param name="pageIds">The ids of the pages to delete</param>
</member>
<member name="M:Dynamicweb.Content.Data.IPageRepository.GetPages">
 <summary>
 Gets all pages in the system
 </summary>
 <returns>A PageCollection with all the pages in the system</returns>
</member>
<member name="M:Dynamicweb.Content.Data.IPageRepository.RestorePage(Dynamicweb.Content.Page)">
 <summary>
 Re-inserts the specified page
 </summary>
 <param name="page">The page to reinsert into persistence</param>
 <returns>The newly inserted page</returns>
</member>
<member name="M:Dynamicweb.Content.Data.IPageRepository.GetSolutionInfo">
 <summary>
 Gets a SolutionInfo instance having general information about the entire solution
 </summary>
 <returns>A SolutionInfo instance having information about the entire solution</returns>
</member>
<member name="M:Dynamicweb.Content.Data.IPageRepository.DeleteAllPages(System.Int32)">
 <summary>
 Deletes all pages in the specified area
 </summary>
 <param name="areaId">The id of the area for which to delete all pages</param>
 <return>A list of ids for all pages deleted during the operation</return>
</member>
<member name="M:Dynamicweb.Content.Data.IPageRepository.GetNextAvailableSortValue(System.Int32,System.Int32)">
 <summary>
 Gets the next available sort value in the list of siblings for this page
 </summary>
 <param name="areaId">The id of the area where the pages are located</param>
 <param name="parentPageId">The id of the page that is the parent of the children for which to get the next available sort value</param>
 <return>An integer representing the next available sort value</return>
</member>
<member name="M:Dynamicweb.Content.Data.IPageRepository.UpdateSortIndex(System.Int32,System.Int32)">
 <summary>
 Updates the page sorting index
 </summary>
 <param name="pageID">The page for which to update sorting</param>
 <param name="sortIndex">The index used for sorting pages</param>
</member>
<member name="M:Dynamicweb.Content.Data.IPageRepository.UpdateTemplateFolderSortIndex(System.Int32)">
 <summary>
 Updates the template folder sorting index
 </summary>
 <param name="areaID">The id of the area where the template folder is located</param>
</member>
<member name="T:Dynamicweb.Content.Data.IParagraphRepository">
 <summary>
 The IParagraphRepository interface defines persistance operations for the Paragraph Aggregate
 </summary>
</member>
<member name="M:Dynamicweb.Content.Data.IParagraphRepository.Get(System.Int32)">
 <summary>
 Gets the Paragraph with the specified id
 </summary>
 <param name="id">The id of the Paragraph to get</param>
 <returns>The Paragraph with the specified id</returns>
</member>
<member name="M:Dynamicweb.Content.Data.IParagraphRepository.GetParagraphs">
 <summary>
 Gets all the paragraphs in the systen
 </summary>
 <returns>A ParagraphCollection with all the paragraphs registred in the systen</returns>
</member>
<member name="M:Dynamicweb.Content.Data.IParagraphRepository.Save(Dynamicweb.Content.Paragraph)">
 <summary>
 Saves the Paragraph to persistance
 </summary>
 <param name="paragraph">The Paragraph to save</param>
 <returns>The newly saved Paragraph</returns>
</member>
<member name="M:Dynamicweb.Content.Data.IParagraphRepository.Delete(System.Int32)">
 <summary>
 Deletes the Paragraph with the specified id
 </summary>
 <param name="paragraphId">The id of the Paragraph to delete</param>
</member>
<member name="M:Dynamicweb.Content.Data.IParagraphRepository.DeleteAllParagraphs(System.Int32)">
 <summary>
 Deletes all paragraphs associated with the specified area
 </summary>
 <param name="areaId">The id of the area for which to delete all associated paragraphs</param>
 <returns>A list of paragraph ids for all deleted paragraphs</returns>
</member>
<member name="M:Dynamicweb.Content.Data.IParagraphRepository.DeleteAllPageParagraphs(System.Int32)">
 <summary>
 Deletes all paragraphs associated with the specified page
 </summary>
 <param name="pageId">The id of the page for which to delete all associated paragraphs</param>
 <returns>A list of paragraph ids for all deleted paragraphs</returns>
</member>
<member name="M:Dynamicweb.Content.Data.IParagraphRepository.RestoreParagraph(Dynamicweb.Content.Paragraph)">
 <summary>
 Re-inserts the specified page
 </summary>
 <param name="paragraph">The paragraph to reinsert into persistence</param>
 <returns>The newly inserted paragraph</returns>
</member>
<member name="M:Dynamicweb.Content.Data.IParagraphRepository.GetLatestModifiedParagraphs(System.Int32)">
 <summary>
 Gets latest modified paragraph
 </summary>
 <param name="count">Max count of paragraphs to returns</param>
</member>
<member name="M:Dynamicweb.Content.Data.IParagraphRepository.ToggleActive(System.Int32,System.Boolean)">
 <summary>
 Include or exclude a paragraph in the layout of the webpage
 </summary>
 <param name="paragraphId">The id of the Paragraph to include or exclude</param>
 <param name="active">Whether a paragraph is included or excluded</param>
</member>
<member name="T:Dynamicweb.Content.Data.PageInsertExtensions">
 <summary>
 The Module PageInsertExtensions handels specific cases of insert values based on business logic
 </summary>
</member>
<member name="M:Dynamicweb.Content.Data.PageInsertExtensions.UseEcomGroupsInsertValue(Dynamicweb.Content.Page)">
 <summary>
 Determines the insert value for the Page.UseEcomGroups depending on other values
 </summary>
 <param name="page">The page for which to determine the insert value</param>
 <returns>null (Nothing) if NavigationSettings has not been set, otherwise true or false</returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageInsertExtensions.NavigationParentTypeInsertValue(Dynamicweb.Content.Page)">
 <summary>
 Determines the insert value for the Page.NavigationParentType depending on other values
 </summary>
 <param name="page">The page for which to determine the insert value</param>
 <returns>null (Nothing) if NavigationSettings has not been set, otherwise a string representation of the <see cref="T:Dynamicweb.Content.EcommerceNavigationParentType"/> enum value</returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageInsertExtensions.NavigationGroupSelectorInsertValue(Dynamicweb.Content.Page)">
 <summary>
 Determines the insert value for the Page.NavigationGroupSelector depending on other values
 </summary>
 <param name="page">The page for which to determine the insert value</param>
 <returns>null (Nothing) if NavigationSettings has not been set, otherwise a string representation of group ids</returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageInsertExtensions.NavigationMaxLevelsInsertValue(Dynamicweb.Content.Page)">
 <summary>
 Determines the insert value for the Page.NavigationMaxLevels depending on other values
 </summary>
 <param name="page">The page for which to determine the insert value</param>
 <returns>null (Nothing) if NavigationSettings has not been set, otherwise a string representation of the number of levels to display in the navigation tree</returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageInsertExtensions.NavigationProductPageInsertValue(Dynamicweb.Content.Page)">
 <summary>
 Determines the insert value for the Page.NavigationProductPage depending on other values
 </summary>
 <param name="page">The page for which to determine the insert value</param>
 <returns>null (Nothing) if NavigationSettings has not been set, otherwise a link to the Product page</returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageInsertExtensions.NavigationShopSelectorInsertValue(Dynamicweb.Content.Page)">
 <summary>
 Determines the insert value for the Page.NavigationShopSelector depending on other values
 </summary>
 <param name="page">The page for which to determine the insert value</param>
 <returns>null (Nothing) if NavigationSettings has not been set, otherwise the id of the shop being the root node</returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageInsertExtensions.NavigationIncludeProductsInsertValue(Dynamicweb.Content.Page)">
 <summary>
 Determines the insert value for the Page.NavigationIncludeProducts depending on other values
 </summary>
 <param name="page">The page for which to determine the insert value</param>
 <returns>null (Nothing) if NavigationSettings has not been set, otherwise a value indicating if navigation should include products</returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageInsertExtensions.NavigationProviderInsertValue(Dynamicweb.Content.Page)">
 <summary>
 Determines the insert value for the Page.NavigationProvider depending on other values
 </summary>
 <param name="page">The page for which to determine the insert value</param>
 <returns>null (Nothing) if NavigationSettings has not been set, otherwise the id of the shop being the navigation provider</returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageInsertExtensions.SerializedCreationRules(Dynamicweb.Content.Page)">
 <summary>
 Determines the insert value for the Page.CreationRules depending on other values
 </summary>
 <param name="page">The page for which to determine the insert value</param>
 <returns>if Page.CreationRules has a value, a serialized representation of that value vill be returned, otherwise an empty string</returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageInsertExtensions.ContentTypeFormattedValue(Dynamicweb.Content.Page)">
 <summary>
 Determines the insert value for the Page.ContentType
 </summary>
 <param name="page">The page for which to determine the insert value</param>
 <returns>null (Nothing) if ContentType has not been set, otherwise the actual value of the ContentType property</returns>
</member>
<member name="T:Dynamicweb.Content.Data.PageRepository">
 <summary>
 The PageRepository class is an implementation of the <see cref="T:Dynamicweb.Content.Data.IPageRepository"/> interface, providing persistence operations for the Page aggregate
 </summary>
</member>
<member name="M:Dynamicweb.Content.Data.PageRepository.Delete(System.Int32)">
 <summary>
 Deletes the page with the specified id
 </summary>
 <param name="pageId">The id of the page to delete</param>
</member>
<member name="M:Dynamicweb.Content.Data.PageRepository.DeleteAll(System.Collections.Generic.IEnumerable{System.Int32})">
 <summary>
 Deletes the pages with the specified ids
 </summary>
 <param name="pageIds">The ids of the pages to delete</param>
</member>
<member name="M:Dynamicweb.Content.Data.PageRepository.DeleteAllPages(System.Int32)">
 <summary>
 Deletes all pages in the specified area
 </summary>
 <param name="areaId">The id of the area for which to delete all pages</param>
 <return>A list of ids for all pages deleted during the operation</return>
</member>
<member name="M:Dynamicweb.Content.Data.PageRepository.GetPage(System.Int32)">
 <summary>
 Gets the Page with the specified id
 </summary>
 <param name="id">The id of the page to get</param>
 <returns>The page with the specified id</returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageRepository.GetPages">
 <summary>
 Gets all pages in the system
 </summary>
 <returns>A PageCollection with all the pages in the system</returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageRepository.GetSolutionInfo">
 <summary>
 Gets a SolutionInfo instance having general information about the entire solution
 </summary>
 <returns>A SolutionInfo instance having information about the entire solution</returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageRepository.Save(Dynamicweb.Content.Page)">
 <summary>
 Saves the pages and other objects that are part of the Page Aggregate
 </summary>
 <param name="page">The page to save</param>
 <returns>The newly save page aggregate</returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageRepository.GetPages(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Extracts and populates Page objects from the result returned from executing the commandBuilder against the database
 </summary>
 <param name="commandBuilder">The commandBuilder ready to be executed</param>
 <returns>A list of pages as the result of the contents of the CommandBuilder</returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageRepository.UpdatePage(Dynamicweb.Content.Page)">
 <summary>
 Updates the specified page in the database
 </summary>
 <param name="page">The page to update</param>
 <returns>The newly updated page</returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageRepository.AddContentTypeUpdateStatement(Dynamicweb.Data.CommandBuilder,Dynamicweb.Content.Page)">
 <summary>
 Adds the update statement of column ContentType of the page, depending on the current value in the page instance
 </summary>
 <param name="commandBuilder">A commandBuilder instance for adding the update statement to</param>
 <param name="page">The page having the state to update</param>
</member>
<member name="M:Dynamicweb.Content.Data.PageRepository.AddCreationRulesUpdateStatement(Dynamicweb.Data.CommandBuilder,Dynamicweb.Content.Page)">
 <summary>
 Serializes the creation rules object and adds it as an update statement to the passed in commandBuilder
 </summary>
 <param name="commandBuilder">The commandBuilder instance to which the update statement should be added</param>
 <param name="page">The page having the CreationRules to serialize</param>
</member>
<member name="M:Dynamicweb.Content.Data.PageRepository.AddNavigationSettingsUpdateStatement(Dynamicweb.Data.CommandBuilder,Dynamicweb.Content.Page)">
 <summary>
 Handles the update statements for the navigationSettings of the specified page
 </summary>
 <param name="commandBuilder">The commandBuilder to which the update statements for navigationSettings should be added</param>
 <param name="page">The page having the navigationSettings to add as Update statements</param>
</member>
<member name="M:Dynamicweb.Content.Data.PageRepository.InsertPage(Dynamicweb.Content.Page,System.Boolean)">
 <summary>
 Inserts the specified page into persistence
 </summary>
 <param name="page">The page to insert</param>
 <param name="restoringPage">A value indicating if the page is being restored and should be reInserted into persistence</param>
 <returns>The newly inserted page</returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageRepository.GetNextAvailableSortValue(System.Int32,System.Int32)">
 <summary>
 Gets the next available sort value in the list of siblings for this page
 </summary>
 <param name="areaId">The id of the area where the pages are located</param>
 <param name="parentPageId">The id of the page that is the parent of the children for which to get the next available sort value</param>
 <return>An integer representing the next available sort value</return>
</member>
<member name="M:Dynamicweb.Content.Data.PageRepository.UpdateSortIndex(System.Int32,System.Int32)">
 <summary>
 Updates the page sorting index
 </summary>
 <param name="pageID">The page for which to update sorting</param>
 <param name="sortIndex">The index used for sorting pages</param>
</member>
<member name="M:Dynamicweb.Content.Data.PageRepository.UpdateTemplateFolderSortIndex(System.Int32)">
 <summary>
 Updates the template folder sorting index
 </summary>
 <param name="areaID">The id of the area where the template folder is located</param>
</member>
<member name="M:Dynamicweb.Content.Data.PageRepository.GetPageTreeSqlWithoutTemplatesAndFolders">
 <summary>
 Gets the sql needed to extract number of pages, without template and folders, for each area currently in the system
 </summary>
 <returns>A string representing the sql for the page tree</returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageRepository.RestorePage(Dynamicweb.Content.Page)">
 <summary>
 Re-inserts the specified page, any subpages and languageversions of those suppages into persistence
 </summary>
 <param name="page">The page to reinsert into persistence</param>
 <returns>The newly inserted page</returns>
</member>
<member name="T:Dynamicweb.Content.Data.PageRowExtractor">
 <summary>
 The PageRowExtractor can extract and map a Page row from a <see cref="T:System.Data.IDataReader"/> to a Page object instance 
 </summary>
</member>
<member name="M:Dynamicweb.Content.Data.PageRowExtractor.ExtractPage(System.Data.IDataReader)">
 <summary>
 Extracts the data from the dataReader and returns a populated Page Object instance with that data
 </summary>
 <param name="dataReader">The IDataReader holding the data needed to populate a Page Object instance</param>
 <returns>The Page object with the data from the DataReader</returns>
</member>
<member name="T:Dynamicweb.Content.Data.PageTree">
 <summary>
 The PageTree class represents a given Top level page and all descendents of that page
 </summary>
</member>
<member name="F:Dynamicweb.Content.Data.PageTree.allItems">
 <summary>
 Private list of PageTreeItem(s)
 </summary>
</member>
<member name="M:Dynamicweb.Content.Data.PageTree.#ctor(System.Int32,Dynamicweb.Content.Page)">
 <summary>
 Initializes a new instance of the PageTree class
 </summary>
</member>
<member name="M:Dynamicweb.Content.Data.PageTree.#ctor(System.Int32)">
 <summary>
 Initializes a new instance of the PageTree class with the specified AreaID
 </summary>
 <param name="areaId">The id of the area for which this PageTree represents the page structure</param>
</member>
<member name="P:Dynamicweb.Content.Data.PageTree.AreaID">
 <summary>
 Gets the Area id to which the root page of this PageTree belongs
 </summary>
 <returns>The area id</returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTree.Count">
 <summary>
 Gets the number of Pages currently in this PageTree
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageTree.PageIds">
 <summary>
 Gets a list of all page ids in the tree
 </summary>
 <returns>A list of page id's</returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTree.RootNodes">
 <summary>
 Gets a list of all root pages for a PageTree representing a complete area
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Data.PageTree.Add(Dynamicweb.Content.Data.PageTreeItem)">
 <summary>
 Adds the PageTreeItem instance to this PageTree and resolves its location in the tree
 </summary>
 <param name="item">The item to add to the tree</param>
</member>
<member name="T:Dynamicweb.Content.Data.PageTreeItem">
 <summary>
 The PageTreeItem class represents a page in a PageTree instance
 </summary>
</member>
<member name="M:Dynamicweb.Content.Data.PageTreeItem.#ctor">
 <summary>
 Initializes a new instance of the PageTreeItem class
 </summary>
</member>
<member name="M:Dynamicweb.Content.Data.PageTreeItem.#ctor(Dynamicweb.Content.Page)">
 <summary>
 Initializes a new instance of the PageTreeItem class encapsulating parts of the data from the page argument
 </summary>
 <param name="page">The page that this PageTreeItem encapsulates</param>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.Children">
 <summary>
 Gets all children in the PageTree Instance
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.Parent">
 <summary>
 Gets the parent of this PageTreeItem
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.ParentId">
 <summary>
 Gets or sets the parent page id of this page tree item
 </summary>
 <returns>The parent id of this page</returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.ID">
 <summary>
 Gets or sets the page id of this page tree item
 </summary>
 <returns>The id of this page</returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.AreaID">
 <summary>
 Gets or sets the id of the area to which this page belongs
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.Title">
 <summary>
 Gets or sets the page title of this page tree item
 </summary>
 <returns>The title of this page</returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.Level">
 <summary>
 Gets or sets the level of this page tree item relative from the root page in a given PageTree
 </summary>
 <returns>The level of this page</returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.Sort">
 <summary>
 Gets or sets the PageSort for this PageTreeItem indicating the sort order between items on the same PageLevel
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.IsFolder">
 <summary>
 Gets or sets a value indiacting if this Page is representing a folder
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.IsTemplate">
 <summary>
 Gets or sets a value if this page is a template
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.IsTemplateFolder">
 <summary>
 Gets a value indicating if this is a template folder
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.TemplateDescription">
 <summary>
 Gets or sets the description of this page if it is a Template
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.ItemType">
 <summary>
 Gets or sets the item type of this page
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.SubpageCount">
 <summary>
 Gets the number of subpages for this PageTreeItem
 </summary>
 <returns>An integer indicating the number of sub pages under this PageTreeItem</returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.IsHidden">
 <summary>
 Gets or sets a value indiacting if this Page is hidden
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.IsPublished">
 <summary>
 Gets or sets a value indiacting if this Page is published
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.IsDraft">
 <summary>
 Gets or sets a value indiacting if this Page is draft
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.IsSplitTest">
 <summary>
 Gets or sets a value indiacting if this Page has split test
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.Restricted">
 <summary>
 Gets or sets a value indiacting if this Page is restricted
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.Scheduled">
 <summary>
 Gets or sets a value indiacting if this Page is scheduled
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.ItemId">
 <summary>
 Gets or sets the item id of this page tree item
 </summary>
 <returns>The item id</returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.IsShortcut">
 <summary>
 Gets or sets a value indicating if this Page is shortcut
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.ParentAreaIsLanguage">
 <summary>
 Gets or sets a value if this page is in website language
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Data.PageTreeItem.DisplayMode">
 <summary>
 Gets or sets the page display mode. 
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Content.Data.ParagraphRepository">
 <summary>
 The ParagraphRepository class is an implementation of the IParagraphRepository interface, providing persistence operations for the Paragraph aggregate
 </summary>
 <seealso cref="T:Dynamicweb.Content.Data.IParagraphRepository" />
</member>
<member name="M:Dynamicweb.Content.Data.ParagraphRepository.Delete(System.Int32)">
 <summary>
 Deletes the Paragraph with the specified id
 </summary>
 <param name="paragraphId">The id of the Paragraph to delete</param>
 <exception cref="T:System.ApplicationException">Sql Exception occurred in ParagraphRepository.Delete</exception>
</member>
<member name="M:Dynamicweb.Content.Data.ParagraphRepository.DeleteAllParagraphs(System.Int32)">
 <summary>
 Deletes all paragraphs associated with the specified area
 </summary>
 <param name="areaId">The id of the area for which to delete all associated paragraphs</param>
 <returns>A list of paragraph ids for all deleted paragraphs</returns>
 <exception cref="T:System.ApplicationException">Sql Exception occurred in ParagraphRepository.DeleteAllParagraphs</exception>
</member>
<member name="M:Dynamicweb.Content.Data.ParagraphRepository.DeleteAllPageParagraphs(System.Int32)">
 <summary>
 Deletes all paragraphs associated with the specified page
 </summary>
 <param name="pageId">The id of the page for which to delete all associated paragraphs</param>
 <returns>A list of paragraph ids for all deleted paragraphs</returns>
 <exception cref="T:System.ApplicationException">Sql Exception occurred in ParagraphRepository.DeleteAllParagraphs</exception>
</member>
<member name="M:Dynamicweb.Content.Data.ParagraphRepository.Get(System.Int32)">
 <summary>
 Gets the Paragraph with the specified id
 </summary>
 <param name="id">The id of the Paragraph to get</param>
 <returns>The Paragraph with the specified id</returns>
 <exception cref="T:System.ApplicationException">Sql Exception occurred in ParagraphRepository.Get</exception>
</member>
<member name="M:Dynamicweb.Content.Data.ParagraphRepository.GetParagraphs">
 <summary>
 Gets all the paragraphs in the system
 </summary>
 <returns>A ParagraphCollection with all the paragraphs registered in the system</returns>
</member>
<member name="M:Dynamicweb.Content.Data.ParagraphRepository.Save(Dynamicweb.Content.Paragraph)">
 <summary>
 Saves the Paragraph to persistence
 </summary>
 <param name="paragraph">The Paragraph to save</param>
 <returns>The newly saved Paragraph</returns>
</member>
<member name="M:Dynamicweb.Content.Data.ParagraphRepository.ToggleActive(System.Int32,System.Boolean)">
 <summary>
 Include or exclude a paragraph in the layout of the webpage
 </summary>
 <param name="paragraphId">The id of the Paragraph to include or exclude</param>
 <param name="active">Whether a paragraph is included or excluded</param>
</member>
<member name="M:Dynamicweb.Content.Data.ParagraphRepository.GetParagraphs(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Gets the paragraphs from the result of the specified commandBuilder
 </summary>
 <param name="commandBuilder">The commandBuilder that when executed returns a list of paragraph rows</param>
 <returns>A list of paragraphs</returns>
 <exception cref="T:System.ApplicationException">Sql Exception occurred In GetParagraphs In the repository</exception>
</member>
<member name="M:Dynamicweb.Content.Data.ParagraphRepository.UpdateParagraph(Dynamicweb.Content.Paragraph)">
 <summary>
 Updates the specified paragraph
 </summary>
 <param name="paragraph">The paragraph to update</param>
 <returns>The newly updated paragraph</returns>
 <exception cref="T:System.ApplicationException">Sql Exception occurred in ParagraphRepository.UpdateParagraph</exception>
</member>
<member name="M:Dynamicweb.Content.Data.ParagraphRepository.InsertParagraph(Dynamicweb.Content.Paragraph,System.Boolean)">
 <summary>
 Inserts the specified page into persistence
 </summary>
 <param name="paragraph">The paragraph to insert</param>
 <param name="restoringParagraph">A value indicating if the paragraph is being restored and hence should be reInserted into persistence</param>
 <returns>The newly inserted page</returns>
 <exception cref="T:System.ApplicationException">Sql Exception occurred in ParagraphRepository.InsertParagraph</exception>
</member>
<member name="M:Dynamicweb.Content.Data.ParagraphRepository.GetNextAvailableSortValue(Dynamicweb.Content.Paragraph)">
 <summary>
 Gets the next available paragraph sort value for the specified paragraph
 </summary>
 <param name="paragraph">The paragraph for which to get the next asvailable sort value</param>
 <returns>An integer representing the next available sort value for the specified paragraph</returns>
 <exception cref="T:System.ApplicationException">Sql Exception occurred in ParagraphRepository.GetNextAvailableSortValue</exception>
</member>
<member name="M:Dynamicweb.Content.Data.ParagraphRepository.RestoreParagraph(Dynamicweb.Content.Paragraph)">
 <summary>
 Re-inserts the specified paragraph into persistence
 </summary>
 <param name="paragraph">The paragraph to reinsert into persistence</param>
 <returns>The newly inserted paragraph</returns>
</member>
<member name="T:Dynamicweb.Content.Data.ParagraphRowExtractor">
 <summary>
 The ParagraphRowExtractor can extract and map a Paragraph row from a <see cref="T:System.Data.IDataReader"/> to a Paragraph object instance 
 </summary>
</member>
<member name="M:Dynamicweb.Content.Data.ParagraphRowExtractor.Extract(System.Data.IDataReader)">
 <summary>
 Extracts the data from the dataReader and returns a populated Paragraph Object instance with that data
 </summary>
 <param name="dataReader">The IDataReader holding the data needed to populate a Paragraph Object instance</param>
 <returns>The Paragraph object with the data from the DataReader</returns>
</member>
<member name="T:Dynamicweb.Content.Data.RecycleFactory">
 <summary>
 The RecycleFactory class helps in serializing and deserializing Page Aggregates from and to the RecycleBin
 </summary>
</member>
<member name="M:Dynamicweb.Content.Data.RecycleFactory.SerializePageToXml(Dynamicweb.Content.Page)">
 <summary>
 Serializes the specified page into xml
 </summary>
 <param name="page">The page to serialize</param>
 <returns>A string containing the xml representation of the page</returns>
</member>
<member name="M:Dynamicweb.Content.Data.RecycleFactory.SerializeAreaToXml(Dynamicweb.Content.Area)">
 <summary>
 Serializes the specified area into xml including the schema
 </summary>
 <param name="area">The area to serialize</param>
 <returns>A string containing the xml representation of the area</returns>
</member>
<member name="M:Dynamicweb.Content.Data.RecycleFactory.SerializeParagraphToXml(Dynamicweb.Content.Paragraph)">
 <summary>
 Serializes the specified paragraph into xml including the schema
 </summary>
 <param name="paragraph">The paragraph to serialize</param>
 <returns>A string containing the xml representation of the paragraph</returns>
</member>
<member name="M:Dynamicweb.Content.Data.RecycleFactory.DeserializeXmlToArea(System.String)">
 <summary>
 Deserializes the area xml data into an Area instance
 </summary>
 <param name="data">The xml data having the needed information to deserialize it into an Area object instance </param>
 <returns>An area instance with state as specified in the xml data</returns>
</member>
<member name="M:Dynamicweb.Content.Data.RecycleFactory.DeserializeXmlToPage(System.String)">
 <summary>
 Deserializes the page xml data into a Page instance
 </summary>
 <param name="xml">The xml data having the needed information to deserialize it into a Page object instance </param>
 <returns>A Page instance with state as specified in the xml data</returns>
</member>
<member name="M:Dynamicweb.Content.Data.RecycleFactory.DeserializeXmlToParagraph(System.String)">
 <summary>
 Deserializes the Paragraph xml data into a Paragraph instance
 </summary>
 <param name="data">The xml data having the needed information to deserialize it into a Paragraph object instance </param>
 <returns>A Paragraph instance with state as specified in the xml data</returns>
</member>
<member name="M:Dynamicweb.Content.Data.RecycleFactory.GetValue(System.Data.IDataReader,System.String)">
 <summary>
 Gets the value for the column in the dataReader if the column exists, otherwise Nothing will be returned
 </summary>
 <param name="dataReader">The dataReader from which to get the value of the column</param>
 <param name="columnName">The name of the column for which to get its value</param>
 <returns>The value of the column if it exists, otherwise Nothing</returns>
</member>
<member name="T:Dynamicweb.Content.Data.NamespaceDoc">
 <summary>
 The Dynamicweb.Content.Data namespace contains the logic used by services in content namespace to get data from the database for pages, paragraphs and websites.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Files.FilesPermissionHelper">
 <summary>
 Represents a helper to work with file and folder permissions.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Files.FilesPermissionHelper.UseNewPermission">
 <summary>
 Gets a value indicating that new permission mode is used.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Files.FilesPermissionHelper.IsAngelOrAdministrator">
 <summary>
 Gets a value indicating if the current user is administrator.
 </summary>
 <value>
 
 <c>true</c> if the current user is administrator; otherwise <c>false</c>.
 
 </value>
</member>
<member name="P:Dynamicweb.Content.Files.FilesPermissionHelper.IsAngelOrSystemAdministrator">
 <summary>
 Gets a value indicating if the current user is angel or system administrator.
 </summary>
 <value>
 
 <c>true</c> if the current user is angel or system administrator; otherwise <c>false</c>.
 
 </value>
</member>
<member name="M:Dynamicweb.Content.Files.FilesPermissionHelper.HasAccess(System.String,Dynamicweb.Security.Permissions.PermissionLevel)">
 <summary>
 Determines whether a user has access to a folder or not.
 </summary>
 <param name="relativePath">Name of the folder.</param>
 <returns>
 <c>true</c> if current user has access to a folder; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.Content.Files.FilesPermissionHelper.GetPermissionLevel(System.String)">
 <summary>
 Determines user permission level to a folder.
 </summary>
 <param name="relativePath">Name of the folder.</param>
 <returns>
 High permission level of current user to a folder.
 </returns>
</member>
<member name="M:Dynamicweb.Content.Files.FilesPermissionHelper.HasAccessToSecureFolder(System.String)">
 <summary>
 Determines whether a user has access to a folder or not.
 </summary>
 <param name="fullPath">Name of the folder.</param>
 <returns>
 <c>true</c> if current user has access to a secure folder; otherwise, <c>false</c>.
 </returns>
 <remarks>
 If folder is not a secure folder function returns <c>true</c>
 </remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesPermissionHelper.GetParentFolderPath(System.String)">
 <summary>
 Gets the parent folder path.
 </summary>
 <param name="folderPath">The folder path.</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Content.Files.FilesPermissionHelper.HasRestrictedContent(System.String)">
 <summary>
 Determines whether a folder has restricted content or not.
 </summary>
 <param name="relativePath">The requested folder.</param>
</member>
<member name="M:Dynamicweb.Content.Files.FilesPermissionHelper.CopyPermissions(System.String,System.String)">
 <summary>
 Copy the permissions of the current folder and its subfolders.
 </summary>
 <param name="sourcePath"></param>
 <param name="targetPath"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesPermissionHelper.MovePermissions(System.String,System.String)">
 <summary>
 Moves the permissions of the current folder and its subfolders.
 </summary>
 <param name="sourcePath"></param>
 <param name="targetPath"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesPermissionHelper.DeletePermissions(System.String)">
 <summary>
 Deletes the permissions of the current folder and its subfolders.
 </summary>
 <param name="sourcePath"></param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Files.Metadata.NamespaceDoc">
 <summary>
 The API for defining and managing meta data for files. Meta data are persisted to disk in XML files
 </summary>
</member>
<member name="T:Dynamicweb.Content.Files.Metadata.EditorFactory">
 <summary>
 Class for editing and managing meta data on files in the file manager.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Files.Metadata.EditorFactory.LoadConfig(System.String)">
 <summary>
 Loads the configuration of meta data definitions of the specified folder.
 </summary>
 <param name="folder">The folder i.e. "/files/images/".</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Files.Metadata.EditorFactory.SaveConfig(System.String,System.Collections.Generic.List{Dynamicweb.Content.Files.Metadata.Field})">
 <summary>
 Saves the configuration of meta data definitions of the specified folder.
 </summary>
 <param name="folder">The folder i.e. "/files/images/".</param>
 <param name="metaFields">The meta fields, see <see cref="T:Dynamicweb.Content.Files.Metadata.Field">Field</see>.</param>
</member>
<member name="M:Dynamicweb.Content.Files.Metadata.EditorFactory.CopyMetadata(System.String,System.String)">
 <summary>
 Copies the metadata from one file to another.
 </summary>
 <param name="file">The file, i.e. /Files/Images/Image.jpg.</param>
 <param name="destinationFile">The destination file, i.e. /Files/Images/AnotherImage.jpg.</param>
</member>
<member name="M:Dynamicweb.Content.Files.Metadata.EditorFactory.MoveMetadata(System.String,System.String)">
 <summary>
 Moves the metadata from one file to another.
 </summary>
 <param name="file">The file, i.e. /Files/Images/Image.jpg.</param>
 <param name="destinationFile">The destination file, i.e. /Files/Images/AnotherImage.jpg.</param>
</member>
<member name="M:Dynamicweb.Content.Files.Metadata.EditorFactory.DeleteMetadata(System.String)">
 <summary>
 Deletes the metadata for a specific file.
 </summary>
 <param name="file">The file, i.e. /Files/Images/Image.jpg.</param>
</member>
<member name="M:Dynamicweb.Content.Files.Metadata.EditorFactory.SaveToMetafile(Dynamicweb.Content.Files.Metadata.Meta,System.String)">
 <summary>
 Saves meta data to a meta data xml file.
 </summary>
 <param name="meta">The meta field values, see <see cref="T:Dynamicweb.Content.Files.Metadata.Meta">Meta</see>.</param>
 <param name="metaPath">The full meta path, i.e. c:\solutionFolder\Files\images\_sys_meta.xml.</param>
</member>
<member name="M:Dynamicweb.Content.Files.Metadata.EditorFactory.GetMetadataForFile(System.String)">
 <summary>
 Gets the meta data from a meta data file.
 </summary>
 <param name="file">The full meta path, i.e. c:\solutionFolder\Files\images\image.jpg</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Files.Metadata.EditorFactory.AddFileMetadataToTemplate(System.String,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Adds file metadata to template. Will set tags like: Ecom:Product.ImageSmall.Metadata.FieldName with field values.
 </summary>
 <param name="filePath">Virtual file path</param>
 <param name="template">Template to update</param>
 <param name="tagPrefix">File metadata tag prefix (like Ecom:Product.ImageSmall)</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Files.Metadata.Field">
 <summary>
 An instance of a field definition in the meta data.
 </summary>
</member>
<member name="F:Dynamicweb.Content.Files.Metadata.Field.Id">
 <summary>
 The identifier
 </summary>
</member>
<member name="F:Dynamicweb.Content.Files.Metadata.Field.Label">
 <summary>
 The label of the field
 </summary>
</member>
<member name="F:Dynamicweb.Content.Files.Metadata.Field.Editor">
 <summary>
 The editor type to use in the administration interface to edit this value
 </summary>
</member>
<member name="F:Dynamicweb.Content.Files.Metadata.Field.Options">
 <summary>
 The options of the field in case of select box
 </summary>
</member>
<member name="T:Dynamicweb.Content.Files.Metadata.Meta">
 <summary>
 An instance of meta data values for a file
 </summary>
</member>
<member name="P:Dynamicweb.Content.Files.Metadata.Meta.File">
 <summary>
 Gets or sets the file that the meta data belongs to.
 </summary>
 <value>
 The file.
 </value>
</member>
<member name="M:Dynamicweb.Content.Files.Metadata.Meta.GetValue(System.String)">
 <summary>
 Gets the value of a field with the specifed field id.
 </summary>
 <param name="fieldId">The field identifier.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Files.Metadata.Meta.SetValue(System.String,System.String)">
 <summary>
 Sets the value of a field with the specifed field id.
 </summary>
 <param name="fieldId">The field identifier.</param>
 <param name="value">The value.</param>
</member>
<member name="M:Dynamicweb.Content.Files.Metadata.Meta.AddTagsToTemplate(Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Adds tags with with values of each filed to template instance.
 </summary>
 <param name="template">The template instance to add the tags to.</param>
 <param name="tagPrefix">The tag prefix used in the tag name, i.e prefix.fieldid.</param>
</member>
<member name="M:Dynamicweb.Content.Files.Metadata.Meta.AddTagsToTemplate(Dynamicweb.Rendering.Template)">
 <summary>
 Adds tags with with values of each filed to template instance in the format File:Metadata.FieldID where FieldID is dynamic.
 </summary>
 <param name="template">The template instance to add the tags to.</param>
</member>
<member name="T:Dynamicweb.Content.Files.PermissionControlledFile">
 <summary>
 A permission controlled file can be used with the permission framework to get the <see cref="T:Dynamicweb.Security.Permissions.PermissionLevel">PermissionLevel</see> for a given user.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Files.PermissionControlledFile.RelativePath">
 <summary>
 The relative path to file.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Files.PermissionControlledFile.#ctor(System.String)">
 <summary>
 Creates a new instance of the class.
 </summary>
 <param name="relativePath">The relative path to file.</param>
</member>
<member name="M:Dynamicweb.Content.Files.PermissionControlledFile.GetParent">
 <summary>
 Gets the parent folder of this file, for the purposes of inherited permissions.
 </summary>
 <remarks>Return null, if no parent permissions exist</remarks>
</member>
<member name="T:Dynamicweb.Content.Files.XsltParser">
 <summary>
 Helper functions to merge XML with XSTL files.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Files.XsltParser.XmlXsltParse(System.Xml.XmlDocument,System.Xml.XmlReader)">
 <summary>
 Parses the XML document using the passed xsltReader.
 </summary>
 <param name="xmlDocument">The document to parse with the transformer</param>
 <param name="xsltReader">A xsltreader with the XSLT to transform on the XML document</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.XsltParser.XmlXsltParse(System.Xml.XmlDocument,System.Xml.Xsl.XslCompiledTransform,System.IO.TextWriter)">
 <summary>
 Parses the XML document using the passed transformer. The passed textwriter contains the parsed data after the sub has been called.
 </summary>
 <param name="xmlDocument">The document to parse with the transformer</param>
 <param name="transformer">Compiled XSLT for the transformation</param>
 <param name="textWriter">The textwriter to parse the data to</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.XsltParser.XmlXsltTransform(System.Xml.XmlDocument,System.Xml.Xsl.XslCompiledTransform,System.IO.TextWriter,System.Xml.Xsl.XsltArgumentList)">
 <summary>
 Parses the XML document using the passed transformer. The passed textwriter contains the parsed data after the sub has been called.
 </summary>
 <param name="xmlDocument">The document to parse with the transformer</param>
 <param name="xslTransformer">Compiled XSLT for the transformation</param>
 <param name="textWriter">The textwriter to parse the data to</param>
 <param name="xsltArguments">The XsltArgumentList to use in the parsing</param>
</member>
<member name="M:Dynamicweb.Content.Files.XsltParser.XmlXsltParse(System.Xml.XmlDocument,System.String)">
 <summary>
 Parses the XML and XSLT file together.
 </summary>
 <param name="xmlDocument">XML document</param>
 <param name="xsltPath">Path to the XSLT file. Eg '/Files/Filer/MyFile.xslt' or E:\xslt\MyFile.xslt</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Files.XsltParser.XmlXsltTransform(System.Xml.XmlDocument,System.String,System.Xml.Xsl.XsltArgumentList)">
 <summary>
 Parses the XML and XSLT file together.
 </summary>
 <param name="xmlDocument">XML document</param>
 <param name="xsltPath">Path to the XSLT file. Eg '/Files/Filer/MyFile.xslt' or E:\xslt\MyFile.xslt</param>
 <param name="xsltArguments">The XsltArgumentList to use in the parsing</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Content.Files.NamespaceDoc">
 <summary>
 API used by the filemanager to handle file operations, meta data and file information.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Files.Information.NamespaceDoc">
 <summary>
 API used by the filemanager to pass action information when file operations are made
 </summary>
</member>
<member name="T:Dynamicweb.Content.Files.Information.Action">
 <summary>
 Determins the current actions.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Files.Information.Action.Move">
 <summary>
 Move
 </summary>
</member>
<member name="F:Dynamicweb.Content.Files.Information.Action.Delete">
 <summary>
 Delete
 </summary>
</member>
<member name="F:Dynamicweb.Content.Files.Information.Action.Restore">
 <summary>
 Restore
 </summary>
</member>
<member name="F:Dynamicweb.Content.Files.Information.Action.Rename">
 <summary>
 Rename
 </summary>
</member>
<member name="F:Dynamicweb.Content.Files.Information.Action.Execute">
 <summary>
 Execute
 </summary>
</member>
<member name="F:Dynamicweb.Content.Files.Information.Action.Create">
 <summary>
 Create
 </summary>
</member>
<member name="F:Dynamicweb.Content.Files.Information.Action.Copy">
 <summary>
 Copy
 </summary>
</member>
<member name="T:Dynamicweb.Content.Files.Information.EntityType">
 <summary>
 Determins the current type.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Files.Information.MessageCollection">
 <summary>
 This class is for message collection handling.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Files.Information.MessageType">
 <summary>
 Determins messages types.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Files.Information.Message">
 <summary>
 This class contains message properties.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Files.Information.Message.MessageType">
 <summary>
 Returns  type of message value.
 </summary>
 <value>MassegeType</value>
 <returns>Type of message.</returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Files.Information.Message.MessageText">
 <summary>
 Returns text of message value.
 </summary>
 <value>String</value>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Files.Information.OperationReport">
 <summary>
 This class used for operation report handling.
 </summary>
 <remarks>
 To switch to using ApplicationResponse one can use the new class as such:
 Dim report As New ApplicationResponse(Of Collection(Of Message))(False, New Collection(Of Message))
 </remarks>
</member>
<member name="P:Dynamicweb.Content.Files.Information.OperationReport.OperationSucceeded">
 <summary>
 Determins whether operation is succeeded or not.
 </summary>
 <value>Boolean</value>
 <returns>True or False</returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Files.Information.OperationReport.Messages">
 <summary>
 Returnes message collection.
 </summary>
 <value>MassageCollection</value>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.Information.OperationReport.AddMessage(Dynamicweb.Content.Files.Information.MessageType,System.String)">
 <summary>
 Adds new message to the Message Collection.
 </summary>
 <param name="MessageType"></param>
 <param name="Message"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.Directory.GetFiles(System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Gets the files.
 </summary>
 <param name="folder">The folder.</param>
 <param name="filter">The filter.</param>
 <param name="loadExtraInformation">if set to <c>true</c> load extra information.</param>
 <param name="searchInSubfolders">if set to <c>true</c> search in subfolders.</param><returns></returns>
</member>
<member name="T:Dynamicweb.Content.Files.Permission">
 <summary>
 Represents a folder permission.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Files.Permission.FolderPermissionAccess">
 <summary>
 Represents a module permission type.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Files.Permission.FolderPermissionAccess.Allow">
 <summary>
 Allows access to a folder.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Files.Permission.FolderPermissionAccess.Deny">
 <summary>
 Denies access to a folder.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Files.Permission.FolderPermissionAccess.Inherit">
 <summary>
 Value indicating that access should be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Files.Permission.AccessType">
 <summary>
 Represents read or write access type
 </summary>
</member>
<member name="F:Dynamicweb.Content.Files.Permission.AccessType.Read">
 <summary>
 Access for read
 </summary>
</member>
<member name="F:Dynamicweb.Content.Files.Permission.AccessType.Write">
 <summary>
 Access for write
 </summary>
</member>
<member name="P:Dynamicweb.Content.Files.Permission.ID">
 <summary>
 Gets or sets permission's ID.
 </summary>
 <remarks></remarks>
 <value>Permission's ID.</value>
</member>
<member name="P:Dynamicweb.Content.Files.Permission.AccessElementPermissionUserID">
 <summary>
 Gets or sets the user ID.
 </summary>
 <value>
 The user ID.
 </value>
</member>
<member name="P:Dynamicweb.Content.Files.Permission.AccessElementPermissionTypeID">
 <summary>
 Gets or sets the type ID.
 </summary>
 <value>
 The type ID.
 </value>
</member>
<member name="P:Dynamicweb.Content.Files.Permission.AccessElementPermissionElementID">
 <summary>
 Gets or sets the element ID.
 </summary>
 <value>
 The element ID.
 </value>
</member>
<member name="P:Dynamicweb.Content.Files.Permission.AccessElementPermissionElementTextID">
 <summary>
 Gets or sets the element text ID.
 </summary>
 <value>
 The element text ID.
 </value>
</member>
<member name="P:Dynamicweb.Content.Files.Permission.AccessElementPermissionTypePermission">
 <summary>
 Gets or sets the type permission.
 </summary>
 <value>
 The type permission.
 </value>
</member>
<member name="P:Dynamicweb.Content.Files.Permission.AccessElementPermissionReadTypePermission">
 <summary>
 Gets or sets the access element permission read type permission.
 </summary>
 <value>The access element permission read type permission.</value>
</member>
<member name="P:Dynamicweb.Content.Files.Permission.AccessElementPermissionWriteTypePermission">
 <summary>
 Gets or sets the access element permission write type permission.
 </summary>
 <value>The access element permission write type permission.</value>
</member>
<member name="P:Dynamicweb.Content.Files.Permission.ToDelete">
 <summary>
 Gets or sets a value indicating whether a permission should be delete or not.
 </summary>
 <value>
   <c>true</c> if to delete; otherwise <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Content.Files.Permission.IsAdministrator">
 <summary>
 Gets a value indicating if the current user is administrator.
 </summary>
 <value>
 
 <c>true</c> if the current user is administrator; otherwise <c>false</c>.
 
 </value>
</member>
<member name="P:Dynamicweb.Content.Files.Permission.IsAngelOrSysAdmin">
 <summary>
 Gets a value indicating if the current user is angel or system administrator.
 </summary>
 <value>
 
 <c>true</c> if the current user is angel or system administrator; otherwise <c>false</c>.
 
 </value>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.#ctor">
 <summary>
 Creates a new instance of the class.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.Fill(System.Data.IDataReader)">
 <summary>
 Fills object properties according to provided IDataReader.
 </summary>
 <param name="reader">Data holder.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.Save">
 <summary>
 Saves current permissions.
 </summary>
 <returns>True if the permission was saved, otherwise false.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.Delete">
 <summary>
 Deletes a permission from the database.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.GetPermissionByID(System.String,System.String)">
 <summary>
 Retrieves a permission by user ID and a folder name.
 </summary>
 <param name="userID">The user ID.</param>
 <param name="folderName">The fodler name.</param>
 <returns>Retrieved permission or Nothing if permission can not be retrieved.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.GetAllPermissions(System.String,System.String)">
 <summary>
 Gets all permissions for current folder and its ancestors.
 </summary>
 <param name="elType">Type of element.</param>
 <param name="path">The path.</param>
 <returns>PermissionCollection.</returns>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.GetPermission(System.String,System.String,System.String)">
 <summary>
 Gets the permission.
 </summary>
 <param name="userID">The user identifier.</param>
 <param name="elType">Type access</param>
 <param name="elName">Name of the element</param>
 <returns>Permission.</returns>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.GetPermissionsByElement(System.String,System.String)">
 <summary>
 Gets the permissions by element.
 </summary>
 <param name="elType">Type of the el.</param>
 <param name="elName">Name of the el.</param>
 <returns>PermissionCollection.</returns>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.GetPermissionsByFolderName(System.String)">
 <summary>
 Gets the permissions by folder name.
 </summary>
 <param name="folderName">Name of the folder.</param><returns></returns>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.GetPermissionsByUserID(System.String)">
 <summary>
 Gets the permissions by user ID.
 </summary>
 <param name="UserID">The user ID.</param><returns></returns>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.GetPermissionsByUserID(System.String,System.String)">
 <summary>
 Gets the permissions by user identifier.
 </summary>
 <param name="elType">Type of the el.</param>
 <param name="UserID">The user identifier.</param>
 <returns>PermissionCollection.</returns>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.GetPermissionBySql(System.String)">
 <summary>
 Retrieves a permission according to provided SQL statement.
 </summary>
 <param name="sql">SQL statement to be used to retrieve a permission.</param>
 <returns>Retrieved the permission.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.GetPermissionsBySql(System.String)">
 <summary>
 Retrieves a collection of permissions according to provided SQL statement.
 </summary>
 <param name="sql">SQL statement to be used to retrieve permissions.</param>
 <returns>Retrieved the permissions.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.HasAccess(System.String)">
 <summary>
 Determines whether a user has access to a folder or not.
 </summary>
 <param name="folderName">Name of the folder.</param>
 <returns>
 <c>true</c> if current user has access to a folder; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.HasReadAccess(System.String)">
 <summary>
 Determines whether a user has read access to a specified folder.
 </summary>
 <param name="folderName">Name of the folder.</param>
 <returns><c>true</c> if user has read access to a specified folder; otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.HasAccessFunction(System.String,System.String)">
 <summary>
 Determines whether a identity has read access to a element in FileManager or not.
 </summary>
 <param name="elType">Type of the element</param>
 <param name="elName">Name of the element</param>
 <returns><c>true</c> if identity has read access to element; otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.HasWriteAccess(System.String)">
 <summary>
 Determines whether user has write access to specified folder.
 </summary>
 <param name="folderName">Name of the folder.</param>
 <returns><c>true</c> if user has write access the specified folder; otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.GetParentFolderPath(System.String)">
 <summary>
 Gets the parent folder path.
 </summary>
 <param name="folderPath">The folder path.</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.HasAccessFrontend(System.String)">
 <summary>
 Determines whether a user has access to an extranet folder or not.
 </summary>
 <param name="folderName">Name of the extranet folder.</param>
 <returns>
 <c>true</c> if current user has access to a folder; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.FrontendHasAccess(Dynamicweb.Content.Files.PermissionCollection,System.String)">
 <summary>
 Determines whether a user has access to a folder or not.
 </summary>
 <param name="allPermissions">All permissions.</param>
 <param name="folderName">Name of the folder.</param>
 <returns>
 <c>true</c> if a user has access to a folder; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.HasRestrictedContent(System.String,System.Boolean@)">
 <summary>
 Determines whether a folder has restricted content or not.
 </summary>
 <param name="requestedFolder">The requested folder.</param>
 <param name="returnValue">The returning value. Should be <c>false</c>.</param><returns>
   <c>true</c> if a folder has restricted content; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.CopyPermissions(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Boolean)">
 <summary>
 Copy the permissions of the current folder and its subfolders.
 </summary>
 <param name="source"></param>
 <param name="root"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.MovePermissions(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Boolean)">
 <summary>
 Moves the permissions of the current folder and its subfolders.
 </summary>
 <param name="source"></param>
 <param name="root"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.DeletePermissions(System.IO.DirectoryInfo,System.String,System.Boolean)">
 <summary>
 Deletes the permissions of the current folder and its subfolders.
 </summary>
 <param name="source"></param>
 <param name="root"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.ClearCache">
 <summary>
 Clears the cache for the permissions.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.AddCacheKeyToDelete(System.String)">
 <summary>
 Adds the cache key to delete.
 </summary>
 <param name="cacheKeyToDelete">The cache key to delete.</param>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.GetRestrictedFolders">
 <summary>
 Gets restricted folders.
 </summary>
 <returns>The <c>HashSet(Of String)</c>.</returns>
</member>
<member name="M:Dynamicweb.Content.Files.Permission.GetAccessElements(System.String)">
 <summary>
 Returns restricted elements (ex. folders).
 </summary>
 <param name="type"></param>
 <returns>Returns a comma separated string.</returns>
</member>
<member name="T:Dynamicweb.Content.Files.PermissionCollection">
 <summary>
 Represents a collection of the permissions.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Files.PermissionCollection.Add(System.String,Dynamicweb.Content.Files.Permission)">
 <summary>
 Adds (or updates) module permission for desired folder.
 </summary>
 <param name="ID">ID for which permission should be set.</param>
 <param name="permission">Folder permission to be set.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Files.FilesAndFolders">
 <summary>
  This class contains the functions to handle whith files and folders.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.TryMakeWritable(System.String)">
 <summary>
 Tries to make the given file writable.
 </summary>
 <param name="path">Physical path to the file.</param>
 <returns>Value indicating whether file has been successfully made writable.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.CreateFile(System.String,System.Boolean,Dynamicweb.Content.Files.Information.OperationReport)">
 <summary>
 Creates the new file.
 </summary>
 <param name="file">File to create.</param>
 <param name="report"></param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.FinalCreateFile(System.String,System.Boolean,Dynamicweb.Content.Files.Information.OperationReport)">
 <summary>
 Creates the new file.
 </summary>
 <param name="file">File to move.</param>
 <param name="report"></param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.CreateFile(System.String,System.Boolean)">
 <summary>
 Creates the new file.
 </summary>
 <param name="file">File to create.</param>
 <param name="template">Whether template can be inserted.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.MoveFile(System.String,System.String,Dynamicweb.Content.Files.Information.OperationReport,System.Boolean,System.Boolean)">
 <summary>
 Moves the current file to the destination file.
 </summary>
 <param name="file">File to move.</param>
 <param name="destinationFolder">Where to move.</param>
 <param name="report"></param>
 <param name="overwrite">Whether destination file can be overwrited.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.FinalMoveFile(System.String,System.String,Dynamicweb.Content.Files.Information.OperationReport,System.Boolean)">
 <summary>
 Moves the current file to the destination file.
 </summary>
 <param name="file">File to move.</param>
 <param name="destinationFile">Where to move.</param>
 <param name="report"></param>
 <param name="overwrite">Whether destination file can be overwrited.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.MoveFile(System.String,System.String)">
 <summary>
 Moves the current file to the destination file.
 </summary>
 <param name="file">File to move.</param>
 <param name="destinationFolder">Where to move.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.TrueDeleteFile(System.String,Dynamicweb.Content.Files.Information.OperationReport)">
 <summary>
 Deletes current file.
 </summary>
 <param name="file">Current file.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.TrueDeleteFiles(System.String[])">
 <summary>
 Deletes all files of the current array.
 </summary>
 <param name="files">Current array of files.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.DeleteFile(System.String,Dynamicweb.Content.Files.Information.OperationReport)">
 <summary>
 Simply moves the current file to another location.
 </summary>
 <param name="file">Phisical path to the current file.</param>
 <param name="report"></param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.DeleteFile(System.String)">
 <summary>
 Simply moves the current file to another location.
 </summary>
 <param name="file">Phisical path to the current file.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.MoveFiles(System.String[],System.String,System.Boolean)">
 <summary>
 Moves the current file to the destination file. 
 </summary>
 <param name="files">File to move.</param>
 <param name="destinationFolder">Where to move.</param>
 <param name="overwrite">Whether destination file can be overwrited.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks>If operation is succeeded then calls the logger.</remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.CopyFiles(System.String[],System.String)">
 <summary>
 Copy the current file to the destination file. 
 </summary>
 <param name="files">File to copy.</param>
 <param name="destinationFolder">Where to copy.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks>If operation is succeeded then calls the logger.</remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.RestoreFiles(System.String[])">
 <summary>
 Restore all files of the current array.
 </summary>
 <param name="files">The current array of files.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks>If operation is succeeded then calls the logger.</remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.RestoreFile(System.String)">
 <summary>
 Restore file.
 </summary>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks>If operation is succeeded then calls the logger.</remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.MoveFiles(System.String[],System.String)">
 <summary>
 Moves the current file to the destination file. 
 </summary>
 <param name="files"></param>
 <param name="destinationFolder"></param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks>Overloads.The overwrite parameter is False.</remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.DeleteFiles(System.String[])">
 <summary>
 Simply moves the current files of array to another location.
 </summary>
 <param name="files">Current array of files.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.RenameFile(System.String,System.String)">
 <summary>
 Renames the current file.
 </summary>
 <param name="file">Current file.</param>
 <param name="newName">New name of the current file.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.CopyFile(System.String,System.String)">
 <summary>
 Copy the current file to another location.
 </summary>
 <param name="file">Current file.</param>
 <param name="destination">Another location.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.CopyFileBrowser(System.String,System.String)">
 <summary>
 Copy the current file to another location.
 </summary>
 <param name="file">Current file.</param>
 <param name="destination">Another location.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.MoveFolder(System.String,System.String,Dynamicweb.Content.Files.Information.OperationReport)">
 <summary>
 Moves current folder and all its subfolders and subfiles to another location. 
 </summary>
 <param name="folder">Current folder.</param>
 <param name="destination">Another location.</param>
 <param name="report">Report as <see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Operation Report</see> class.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.MoveAccessElements(System.String,System.String)">
 <summary>
 Moves permissions from one element to another
 </summary>
 <param name="fromElement">path that the element is being moved from</param>
 <param name="toElement">path that the element is boing moved to</param>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.MoveFolder(System.String,System.String)">
 <summary>
 Moves current folder and all its subfolders and subfiles to another location.
 </summary>
 <param name="folder">Current folder.</param>
 <param name="destination">Another location.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks>If operation is succeeded then calls the logger.</remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.MakeFolder(System.String,System.String)">
 <summary>
 Creates a new folder.
 </summary>
 <param name="destination">Current folder.</param>
 <param name="folderName">New folder.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.CreateRoot(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
 <summary>
 Creates a root folder when move or copy folders with permissions
 </summary>
 <param name="source">Current folder.</param>
 <param name="target">Destination folder.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.CopyFilesRecursively(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Boolean)">
 <summary>
 Copies all subfolders and subfiles of current folder to another location with permissions.
 </summary>
 <param name="source"></param>
 <param name="target"></param>
 <param name="root"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.MoveFilesRecursively(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Boolean)">
 <summary>
 Movies all subfolders and subfiles of current folder to another location with permissions.
 </summary>
 <param name="source"></param>
 <param name="target"></param>
 <param name="root"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.DeleteFoldersRecursively(System.IO.DirectoryInfo,System.String,Dynamicweb.Content.Files.Information.OperationReport,System.Boolean)">
 <summary>
 Deletes all subfolders and subfiles of current folder with permissions.
 </summary>
 <param name="source"></param>
 <param name="root"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.DeleteFolders(System.String)">
 <summary>
 Deletes current folder and all its subfolders and files.
 </summary>
 <param name="folder"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.MoveFolders(System.String,System.String)">
 <summary>
 Moves current folder and all its subfolders and subfiles to another location with permissions.
 </summary>
 <param name="folder"></param>
 <param name="destination"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.CopyFolder(System.String,System.String)">
 <summary>
 Copy current folder and all its subfolders and subfiles to another location with permissions.
 </summary>
 <param name="folder"></param>
 <param name="destination"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.CopyFolder(System.String,System.String,System.String@)">
 <summary>
 Copy current folder and all its subfolders and subfiles to another location with permissions.
 </summary>
 <param name="folder"></param>
 <param name="destination"></param>
 <param name="resultingFolderPath">copyed folder path</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.CopyFolder(System.String,System.String,System.Boolean)">
 <summary>
 Copies the specified folder with files and subfolders to the desired destination.
 </summary>
 <param name="folder">The source path, i.e. C:\somefolder\someSubFolder\.</param>
 <param name="destinationPath">The destination path, i.e. , i.e. C:\anotherfolder\newroot\.</param>
 <param name="continueOnError">if set to <c>true</c> continues if a file or folder cannot be copied.</param>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.RenameFolder(System.String,System.String)">
 <summary>
 Renames the current folder.
 </summary>
 <param name="folder">Current folder.</param>
 <param name="newName">New name.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks>If operation is succeeded then calls the logger.</remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.DeleteFolder(System.String)">
 <summary>
 Deletes the current folder.
 </summary>
 <param name="folder">Current folder.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks>If operation is succeeded then calls the logger.</remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.ReadTextFile(System.String)">
 <summary>
 Reads the current text file.
 </summary>
 <param name="file">Current text file.</param>
 <returns>The string with file's text. Or "File does not exist".</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.WriteTextFile(System.String,System.String)">
 <summary>
 Writes text to the current file.
 </summary>
 <param name="file">Current file.</param>
 <param name="text">Current text.</param>
 <returns><see cref="T:Dynamicweb.Content.Files.Information.OperationReport">Report</see>.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.GetFullFilePath(System.String)">
 <summary>
 Returns the full phisical path to the current file.
 </summary>
 <param name="file">Current file.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.GetValidFileAndFolderName(System.String)">
 <summary>
 Gets the name of the valid file and folder.
 </summary>
 <param name="folderName">Name of the folder.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.IsValidFileAndFolderName(System.String)">
 <summary>
 Determines whether [is valid file and folder name] [the specified folder name].
 </summary>
 <param name="folderName">Name of the folder.</param>
 <returns>
 <c>true</c> if [is valid file and folder name] [the specified folder name]; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.GetImagesFolderName">
 <summary>
 Gets the name of the image folder. I.e "Billeder" in /Files/Billeder/
 </summary>
 <remarks>Specified in GlobalSettings.aspx/config - /Globalsettings/System/Filesystem/ImagesFolderName. Default value is "Billeder"</remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.GetFilesFolderName">
 <summary>
 Gets the name of the files folder. I.e "Filer" in /Files/Filer/
 </summary>
 <remarks>Specified in GlobalSettings.aspx/config - /Globalsettings/System/Filesystem/FilesFolderName. Default value is "Filer"</remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.GetFileEncoding(System.String,System.Text.Encoding@)">
 <summary>
 Returns the file encoding.
 </summary>
 <param name="filePath">The physical path and name of the file.</param>
 <param name="encoding">Reference to the encoding to set.</param>
 <remarks>
 Reads the first bytes of a file to determined the file encoding.
 </remarks>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.GetFileSizeKb(System.Double)">
 <summary>
 Converts bytes to KB string with 2 decimals for UI displaying purpose
 </summary>
 <param name="fileSize">The filesize in bytes.</param>
</member>
<member name="M:Dynamicweb.Content.Files.FilesAndFolders.ValidateFilename(System.String)">
 <summary>
 Checks if the fileNameWithPath contains any characters that are illegal in a filename
 </summary>
 <param name="fileNameWithPath">The file name with it's path.</param>
 <returns>True if fileNameWithPath contains no illegal characters and is valid, otherwise False</returns>
</member>
<member name="T:Dynamicweb.Content.Files.ZipFile">
 <summary>
 Zips and unzip files and folders
 </summary>
</member>
<member name="T:Dynamicweb.Content.Files.ZipFile.RenameFileDelegate">
 <summary>
 Delegate used for naming files when being unzipped
 </summary>
 <param name="params">The parameters.</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Content.Files.ZipFile.Extract(System.String,System.Boolean)">
 <summary>
 Extracts the specified physical path.
 </summary>
 <param name="physicalPath">The physical path.</param>
 <param name="createDirectory">if set to <c>true</c> [create directory].</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Files.ZipFile.Extract(System.String,System.Boolean,Dynamicweb.Content.Files.ZipFile.RenameFileDelegate)">
 <summary>
 Extracts the specified physical path.
 </summary>
 <param name="physicalPath">The physical path.</param>
 <param name="createDirectory">if set to <c>true</c> [create directory].</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Files.ZipFile.ZipFolder(System.IO.DirectoryInfo,System.String)">
 <summary>
 Zips the content of the given folder and places the zip inside that same folder
 </summary>
 <param name="folder">The folder which content will be compressed</param>
 <param name="zipFileName">The name of the zip file</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Files.ZipFile.ZipFolder(System.IO.DirectoryInfo,System.IO.FileInfo)">
 <summary>
 Zips the content of a folder
 </summary>
 <param name="folder">The folder which content will be compressed</param>
 <param name="zipFile">The destination zip file</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.InheritanceAttribute">
 <summary>
 Provides information about the item inheritance.
 </summary>
 <example>
 <code description="Example of code-first item with inheritance attribute" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleProductNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.InheritanceAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.PageDefaultViewAttribute">
 <summary>
 Provides information about the default view for page items.
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.PageDefaultViewAttribute.PageDefaultView">
 <summary>
 Gets or sets the default view for a page item.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.PageDefaultViewAttribute.#ctor(Dynamicweb.Content.Items.Metadata.PageDefaultView)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="pageDefaultView">Default view for page item.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.DoNotIncludeInSearchAttribute">
 <summary>
 Provides information that field isn't included in search index.
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.GeolocationAttribute">
 <summary>
 Provides information about the link to item field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.GeolocationAttribute.AddressFields">
 <summary>
 A comma separated list of item field names (on the same item type) that should be used for looking up the geolocation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.GeolocationAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.GeolocationAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.GoogleFontAttribute">
 <summary>
 Provides information about the Google font field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.GoogleFontAttribute.DefaultFontName">
 <summary>
 Gets or sets the default font name.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.GoogleFontAttribute.DefaultFontWeight">
 <summary>
 Gets or sets the default font weight.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.GoogleFontAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.GoogleFontAttribute.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.GroupVisibilityRule">
 <summary>
 Manage group visibility.
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.GroupVisibilityRule.FieldName">
 <summary>
 Gets or sets the name of the field.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.GroupVisibilityRule.Condition">
 <summary>
 Gets or sets the condition.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.GroupVisibilityRule.ConditionValue">
 <summary>
 Gets or sets the condition value.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.GroupVisibilityRule.GetVisibilityConditionValueType(Dynamicweb.Content.Items.Metadata.FieldMetadataCollection)">
 <summary>
 Gets the type of condition field.
 </summary>
 <param name="fieldsMetadata">The item fields.</param>
 <returns>Type of condition field.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.ItemCacheAttribute">
 <summary>
 Provides information about the item cache setting.
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.UserAttribute">
 <summary>
 Provides information about the user field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.UserAttribute.ShowType">
 <summary>
 Gets or sets the value which defines user objects types to show.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.UserAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.UserAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.CategoryAttribute">
 <summary>
 Provides information about the item category.
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.CategoryAttribute.Category">
 <summary>
 Gets or sets the item category.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.CategoryAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="category">Write path like this: 'folder/sub folder/etc' to create category.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.CheckboxAttribute">
 <summary>
 Provides information about the checkbox field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.CheckboxAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.CheckboxAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.CheckboxListAttribute">
 <summary>
 Provides information about the CheckboxList field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.CheckboxListAttribute.LabelPosition">
 <summary>
 Gets or sets the label position relatively icon.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.CheckboxListAttribute.IconPosition">
 <summary>
 Gets or sets icon count per row.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.CheckboxListAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.CheckboxListAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.CheckboxListAttribute.#ctor(System.String,System.Int32,System.Int32)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <param name="labelPosition">The label position relatively icon.</param>
 <param name="iconPosition">The icon count per row.</param>
 ''' <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.ColorAttribute">
 <summary>
 Provides information about the checkbox field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.ColorAttribute.Presets">
 <summary>
 The set of default colors for the editor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.ColorAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.ColorAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.CustomizedUrlsAttribute">
 <summary>
 Provides information about the item Customized URLs setting.
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.DateAttribute">
 <summary>
 Provides information about the date field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.DateAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.DateAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.DateTimeAttribute">
 <summary>
 Provides information about the date/time field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.DateTimeAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.DateTimeAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.DecimalAttribute">
 <summary>
 Provides information about the decimal field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.DecimalAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.DecimalAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.DropdownListAttribute">
 <summary>
 Provides information about the DropdownList field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.DropdownListAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.DropdownListAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.EditorAttribute">
 <summary>
 Provides information about the editor.
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.EditorAttribute.Name">
 <summary>
 Gets or sets the user-friendly name of the editor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.EditorAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the editor.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.FieldAttribute">
 <summary>
 Provides information about the item field.
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.FieldAttribute.Name">
 <summary>
 Gets or sets the user-friendly name of the field.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.FieldAttribute.Description">
 <summary>
 Gets or sets the user-friendly description of the field.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.FieldAttribute.EditorType">
 <summary>
 Gets or sets the type of an editor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.FieldAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.FieldAttribute.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <param name="description">User-friendly description of the field.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.FieldAttribute.#ctor(System.String,System.Type)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <param name="editorType">Editor type.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.FieldAttribute.#ctor(System.String,System.String,System.Type)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <param name="description">User-friendly description of the field.</param>
 <param name="editorType">Editor type.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.FileAttribute">
 <summary>
 Provides information about the file field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.FileAttribute.BaseDirectory">
 <summary>
 Gets or sets the base directory for file control.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.FileAttribute.AllowFrontendUpload">
 <summary>
 Gets or sets if frontend upload is possible
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.FileAttribute.MaxFilesToAdd">
 <summary>
 Gets or sets how many files can be added to the control in the backend
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.FileAttribute.Extension">
 <summary>
 Gets or sets the extentions to show in file control.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.FileAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.FileAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.FileAttribute.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <param name="baseDirectory">The base directory for file control.</param>
 <param name="extentions">The extentions to show in file control.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.FileAttribute.#ctor(System.String,System.String,System.String,System.Boolean)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <param name="baseDirectory">The base directory for file control.</param>
 <param name="extentions">The extentions to show in file control.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.FolderAttribute">
 <summary>
 Provides information about the folder field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.FolderAttribute.SearchPattern">
 <summary>
 Gets or sets the search patten for files in folder
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.FolderAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.FolderAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.FolderAttribute.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <param name="searchPattern">The search patten for files in folder.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.GroupAttribute">
 <summary>
 Provides information about the named object group.
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.GroupAttribute.Name">
 <summary>
 Gets or sets the user-friendly name of the group.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.GroupAttribute.CollapsibleState">
 <summary>
 Gets or sets the group collapsible state.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.GroupAttribute.VisibilityRule">
 <summary>
 Gets or sets the group visibility condition.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.GroupAttribute.HasAdditionalSettings">
 <summary>
 Gets is group has collapsible or visibility settings.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.GroupAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the group.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.GroupAttribute.#ctor(System.String,Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata.GroupCollapsibleState)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the group.</param>
 <param name="collapsibleState">The group collapsible state.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.GroupAttribute.#ctor(System.String,Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata.GroupCollapsibleState,System.String,Dynamicweb.Content.Items.Annotations.GroupVisibilityRule.VisibilityCondition,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the group.</param>
 <param name="collapsibleState">Group collapsible state.</param>
 <param name="visibilityField">Field to control group visibility.</param>
 <param name="visibilityCondition">Visibility condition.</param>
 <param name="visibilityConditionValue">Condition value.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.HiddenFieldAttribute">
 <summary>
 Provides information about the hidden field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.HiddenFieldAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.HiddenFieldAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.IconAttribute">
 <summary>
 Provides information about the item icons.
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.IconAttribute.Icon">
 <summary>
 Icon name.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.IconAttribute.#ctor(Dynamicweb.Core.UI.Icons.KnownIcon)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="icon">KnownIcon.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.IconAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="icon">Icon name.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.IconAttribute.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="icon">Icon name.</param>
 <param name="largeIcon">Obsolete parameter</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.InputHtml5Attribute">
 <summary>
 Provides information about the html5 input field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.InputHtml5Attribute.Type">
 <summary>
 Gets or sets the type of HTML5 input
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.InputHtml5Attribute.InputType">
 <summary>
 Gets or sets the type of HTML5 input
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.InputHtml5Attribute.Pattern">
 <summary>
 Gets or sets the pattern attribute specifies a regular expression that the input element's value is checked against.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.InputHtml5Attribute.Placeholder">
 <summary>
 Gets or sets a short hint that describes the expected value of an input field.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.InputHtml5Attribute.Size">
 <summary>
 Gets or sets the visible width, in characters, of an input element.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.InputHtml5Attribute.Min">
 <summary>
 Gets or sets the minimum value allowed.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.InputHtml5Attribute.Max">
 <summary>
 Gets or sets the maximum value alloweds.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.InputHtml5Attribute.Step">
 <summary>
 Gets or sets the legal number intervals.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.InputHtml5Attribute.Autocomplete">
 <summary>
 Gets or sets whether or not an input field should have autocomplete enabled.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.InputHtml5Attribute.Required">
 <summary>
 Gets or sets that an input field must be filled out before submitting the form.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.InputHtml5Attribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.InputHtml5Attribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.InputHtml5Attribute.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <param name="type">The type of HTML5 input.</param>
 <param name="pattern">The regular expression that the input element's value is checked against.</param>
 <param name="placeholder">The short hint that describes the expected value of an input field.</param>
 <param name="size">The visible width, in characters, of an input element.</param>
 <param name="min">The minimum value allowed.</param>
 <param name="max">The maximum value alloweds.</param>
 <param name="step">The legal number intervals.</param>
 <param name="autocomplete">Whether or not an input field should have autocomplete enabled.</param>
 <param name="required">The input field must be filled out before submitting the form.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.ItemListAttribute">
 <summary>
 Provides information about the ItemList field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.ItemListAttribute.ItemType">
 <summary>
 Gets or sets the item type to list.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.ItemListAttribute.Fields">
 <summary>
 Gets or sets the item fields to show in list.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.ItemListAttribute.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.ItemListAttribute.#ctor(System.String,System.String,System.String[])">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.ItemRelationListAttribute">
 <summary>
 Provides information about the ItemRelationList field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.ItemRelationListAttribute.ItemType">
 <summary>
 Gets or sets the item type to list.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.ItemRelationListAttribute.ItemSource">
 <summary>
 Gets or sets the source for items.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.ItemRelationListAttribute.Fields">
 <summary>
 Gets or sets the item fields to show in list.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.ItemRelationListAttribute.MinNumber">
 <summary>
 Gets or sets the minumum number of items in list.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.ItemRelationListAttribute.MaxNumber">
 <summary>
 Gets or sets the maximum number of items in list.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.ItemRelationListAttribute.SortBy">
 <summary>
 Gets or sets the field to sort.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.ItemRelationListAttribute.SortOrder">
 <summary>
 Gets or sets the sort order.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.ItemRelationListAttribute.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <param name="itemType">Type of items in the list.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.ItemRelationListAttribute.#ctor(System.String,System.String,Dynamicweb.Content.Items.Editors.ItemRelationListEditor.ItemListSource,System.String[])">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <param name="itemType">Type of items in list.</param>
 <param name="itemSource">Source of items.</param>
 <param name="fields">List of fields to show in list.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.ItemTypeEditorAttribute">
 <summary>
 Provides information about the ItemList field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.ItemTypeEditorAttribute.ItemType">
 <summary>
 Gets or sets the item type to list.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.ItemTypeEditorAttribute.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.LinkToItemAttribute">
 <summary>
 Provides information about the link to item field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.LinkToItemAttribute.EnablePageSelection">
 <summary>
 Gets or sets value indicating whether to enable page selection.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.LinkToItemAttribute.EnableParagraphSelection">
 <summary>
 Gets or sets value indicating whether to enable paragraph selection.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.LinkToItemAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.LinkToItemAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.EditableListAttribute">
 <summary>
 Provides information about the EditableList field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.EditableListAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.EditableListAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.OptionSqlAttribute">
 <summary>
 Provides information about the SQL based field option.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.OptionSqlAttribute.QueryString">
 <summary>
 Gets or sets the SQL query.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.OptionSqlAttribute.NameField">
 <summary>
 Gets or sets options names.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.OptionSqlAttribute.ValueField">
 <summary>
 Gets or sets options values.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.OptionSqlAttribute.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="queryString">SQL query to select from.</param>
 <param name="nameField">ItemType field system name for option name.</param>
 <param name="valueField">ItemType field system name for option value.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.OptionItemAttribute">
 <summary>
 Provides information about the ItemType based field option.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.OptionItemAttribute.ItemSystemName">
 <summary>
 Gets or sets the name of ItemType to use.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.OptionItemAttribute.NameField">
 <summary>
 Gets or sets options names.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.OptionItemAttribute.ValueField">
 <summary>
 Gets or sets options values.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.OptionItemAttribute.SourceType">
 <summary>
 Gets or sets area name to search ItemType instances in.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.OptionItemAttribute.SourceId">
 <summary>
 Gets or sets area Id to search ItemType instances in.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.OptionItemAttribute.IncludeParagraphs">
 <summary>
 Gets or sets IncludeParagraphsItems flag.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.OptionItemAttribute.IncludeChilds">
 <summary>
 Gets or sets IncludeChildItems flag.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.OptionItemAttribute.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="itemSystemName">System name of target ItemType.</param>
 <param name="nameField">ItemType field system name for option name.</param>
 <param name="valueField">ItemType field system name for option value.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.OptionAttribute">
 <summary>
 Provides information about the long text field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.OptionAttribute.Label">
 <summary>
 Gets or sets the labele of the option.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.OptionAttribute.Value">
 <summary>
 Gets or sets the value of the option.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.OptionAttribute.Icon">
 <summary>
 Gets or sets the option icon.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.OptionAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="label">The option label.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.OptionAttribute.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="label">The option label.</param>
 <param name="value">The option value.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.OptionAttribute.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="label">The option label.</param>
 <param name="value">The option value.</param>
 <param name="icon">The option icon.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.RadiobuttonListAttribute">
 <summary>
 Provides information about the RadiobuttonList field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.RadiobuttonListAttribute.LabelPosition">
 <summary>
 Gets or sets the label position relatively icon.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.RadiobuttonListAttribute.IconPosition">
 <summary>
 Gets or sets icon count per row.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.RadiobuttonListAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.RadiobuttonListAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.RadiobuttonListAttribute.#ctor(System.String,System.Int32,System.Int32)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <param name="labelPosition">The label position relatively icon.</param>
 <param name="iconPosition">The icon count per row.</param>
 ''' <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.RuleAttributeBase">
 <summary>
 Provides information about the item.
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.RuleAttributeBase.Rule">
 <summary>
 Gets or sets the creation rule.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.RuleAttributeBase.#ctor(System.Type,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="ruleType">Type of restriction rule.</param>
 <param name="value">value for restriction rule.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.StructureRuleAttribute.#ctor(Dynamicweb.Content.Items.Activation.StructureContextType[])">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="value">value for restriction rule.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.AreaRuleAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.AreaRuleAttribute.#ctor(System.Int32[])">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="value">value for restriction rule.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.ChildRuleAttribute.#ctor(System.String[])">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="value">value for restriction rule.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.ChildRuleAttribute.#ctor(System.Boolean)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.ChildRuleAttribute.#ctor(System.Boolean,System.String[])">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.ParentRuleAttribute.#ctor(Dynamicweb.Content.Items.Activation.ParentRestrictionRule.ParentType[])">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="values">value for restriction rule.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.ModuleAttachmentRuleAttribute">
 <summary>
 Allows to attach a module to an item-based paragraph
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.ModuleAttachmentRuleAttribute.#ctor(System.Boolean)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.SortIndexAttribute">
 <summary>
 Provides information about the position object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.SortIndexAttribute.#ctor(System.Int32)">
 <summary>
  Initializes a new instance of an object.
 </summary>
 <param name="idx">Sort index.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.IntegerAttribute">
 <summary>
 Provides information about the integer field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.IntegerAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.IntegerAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.ItemAttribute">
 <summary>
 Provides information about the item.
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.ItemAttribute.Description">
 <summary>
 Gets or sets the user-friendly description of the field.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.ItemAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.ItemAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the item.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.ItemAttribute.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the item.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.LinkAttribute">
 <summary>
 Provides information about the link field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.LinkAttribute.SelectOnlyID">
 <summary>
 Gets or sets is select only page or paragraph ID
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.LinkAttribute.EnablePageSelection">
 <summary>
 Gets or sets value indicating whether to enable page selection.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.LinkAttribute.EnableParagraphSelection">
 <summary>
 Gets or sets value indicating whether to enable paragraph selection.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.LinkAttribute.EnableFileSelection">
 <summary>
 Gets or sets value indicating whether to enable file selection.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.LinkAttribute.ItemsOnly">
 <summary>
 Gets or sets value indicating whether only item-based pages/paragraphs can be selected.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.LinkAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.LinkAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.LinkAttribute.#ctor(System.String,System.Boolean)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <param name="selectOnlyID">Is select only page or paragraph ID.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.LongTextAttribute">
 <summary>
 Provides information about the long text field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.LongTextAttribute.Rows">
 <summary>
 Gets or sets the number of visible rows.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.LongTextAttribute.Cols">
 <summary>
 Gets or sets the number of visible cols.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.LongTextAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.LongTextAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.LongTextAttribute.#ctor(System.String,System.Int32,System.Int32)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <param name="rows">The number of visible rows.</param>
 <param name="cols">The number of visible cols.</param>
 ''' <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.NameAttribute">
 <summary>
 Provides information about the named object.
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.NameAttribute.Name">
 <summary>
 Gets or sets the user-friendly name of the object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.NameAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the object.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.PasswordAttribute">
 <summary>
 Provides information about the password field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.PasswordAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.PasswordAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.RegExAttribute">
 <summary>
 Provides information about the regular expression validator field.
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.RegExAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="expression">Validation expression.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.RequiredAttribute">
 <summary>
 Provides information about the required field.
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.RequiredAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.RichTextAttribute">
 <summary>
 Provides information about the rich text field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.RichTextAttribute.ConfigurationID">
 <summary>
 Gets or sets the configuration ID.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.RichTextAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.RichTextAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.RichTextAttribute.#ctor(System.String,System.Int32)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <param name="configurationID">The editor configuration ID.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.TextAttribute">
 <summary>
 Provides information about the text field.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.TextAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.TextAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.TitleFieldAttribute">
 <summary>
 Allow to set "Use field as title" parameter for an item.
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.TitleFieldAttribute.FieldSystemName">
 <summary>
 System name of field to use as title.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.TitleFieldAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="fieldSystemName">System name of field to use as title.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.TitlePatternAttribute">
 <summary>
 Allow to define the title by adding parameters like this: {{FieldSystemName}}. 
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.TitlePatternAttribute.TitlePattern">
 <summary>
 Pattern for the title.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.TitlePatternAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="titlePattern">Pattern for the title.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.ValidateAttribute">
 <summary>
 Allows attaching one or several validators to the field.
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.ValidateAttribute.ErrorMessage">
 <summary>
 Gets or sets the error message to display when validation fails.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.ValidateAttribute.Validator">
 <summary>
 Gets or sets the type of the validator.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.ValidateAttribute.Parameters">
 <summary>
 Gets or sets the validator parameters in a query-string notation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.ValidateAttribute.#ctor(System.Type)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="validator">Validator type.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.ValidateAttribute.ParseParameters">
 <summary>
 Parses parameters and returns the collection of key-value pairs representing them.
 </summary>
 <returns>The collection of key-value pairs representing parameters.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.DefaultValueAttribute">
 <summary>
 Provides information about the default value.
 </summary>
 <example>
 <code description="Example of code-first item with some attributes" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleNewsItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Annotations.DefaultValueAttribute.Value">
 <summary>
 Gets or sets the default value.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Annotations.DefaultValueAttribute.#ctor(System.Object)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="value">Default value.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Annotations.NamespaceDoc">
 <summary>
 The Dynamicweb.Content.Items.Annotations namespace contains all the attributes used when creating code first items
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.DynamicControl">
 <summary>
 Represents a dynamic control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Editors.DynamicControl._constructorArgs">
 <summary>
 The constructor arguments for the control
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.DynamicControl.UnderlyingControlType">
 <summary>
 Gets the type of the underlying control.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.DynamicControl.UnderlyingControl">
 <summary>
 Gets the reference to underlying control.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.DynamicControl.ClientInstanceName">
 <summary>
 Gets or sets the name of the JavaScript variable that represents an instance of the client-side supply object for this control.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.DynamicControl.#ctor(System.Type,System.Object[])">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="underlyingType">Underlying control type.</param>
 <param name="constructorArgs">Parameters of the control's constructor</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.DynamicControl.#ctor(System.String,System.Object[])">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="underlyingTypeName">Name of the ynderlying control type.</param>
 <param name="constructorArgs">Parameters of the control's constructor</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.DynamicControl.LoadResources">
 <summary>
 Loads control resources.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.DynamicControl.RenderControl(System.IO.TextWriter)">
 <summary>
 Sends control output to the given writer.
 </summary>
 <param name="writer">Writer that accepts control output.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.DynamicControl.RenderControl(System.Web.UI.HtmlTextWriter)">
 <summary>
 Sends control output to the given writer.
 </summary>
 <param name="writer">Writer that accepts control output.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.DynamicControl.GetPropertyValue(System.String)">
 <summary>
 Returns the value of the given property.
 </summary>
 <param name="name">Property name.</param>
 <returns>Current property value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.DynamicControl.SetPropertyValue(System.String,System.Object)">
 <summary>
 Assigns new value to the given property.
 </summary>
 <param name="name">Property name.</param>
 <param name="value">New property value.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.DynamicControl.InvokeMethod(System.String,System.Object[])">
 <summary>
 Invokes the given method.
 </summary>
 <param name="name">Method name.</param>
 <param name="args">Method arguments.</param>
 <returns>Method's return value.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.GoogleFont">
 <summary>
 Represents a Google font item.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.GoogleFont.Family">
 <summary>
 Gets or sets the name of the family.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.GoogleFont.SubSets">
 <summary>
 Gets or sets a list of scripts supported by the family.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.GoogleFont.Variants">
 <summary>
 Gets or sets the different styles available for the family.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.GoogleFont.SelectedVariant">
 <summary>
 Gets or sets the selected font variant.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.GoogleFont.Version">
 <summary>
 Gets or sets the font family version.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.GoogleFont.LastModified">
 <summary>
 Gets or sets the date the font family was modified for the last time.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.GoogleFont.Files">
 <summary>
 Gets or sets the font family files (with all supported scripts) for each one of the available variants.
 </summary>
 <remarks>
 Key - the variant name from the <see cref="P:Dynamicweb.Content.Items.Editors.GoogleFont.Variants">Variants</see> list.
 Value - the path to the font file.
 </remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.GoogleFontEditor">
 <summary>
 Represents a Google font editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.GoogleFontEditor.DataType">
 <summary>
 Gets the data type for this editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.GoogleFontEditor.DefaultFontName">
 <summary>
 Gets or sets the default font name.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.GoogleFontEditor.DefaultFontWeight">
 <summary>
 Gets or sets the default font weight.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.GoogleFontEditor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.GoogleFontEditor.GetViewModelValue(System.Object)">
 <summary>
 Gets the value as an instance of <see cref="T:Dynamicweb.Frontend.GoogleFontViewModel"/> 
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.CheckboxListEditor`1">
 <summary>
 Represents a checkbox list editor.
 </summary>
 <typeparam name="T">Item value type.</typeparam>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.CheckboxListEditor`1.Mode">
 <summary>
 Gets the list mode.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.CheckboxListEditor`1.LabelPosition">
 <summary>
 Gets or sets the value which defines the option label position.
 </summary>
 <value></value>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.CheckboxListEditor`1.IconPosition">
 <summary>
 Gets or sets the value which defines the option icon position.
 </summary>
 <value></value>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.CheckboxListEditor`1.IconMaxWidth">
 <summary>
 Gets or sets the value of icon max width.
 </summary>
 <value></value>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.CheckboxListEditor`1.IconMaxHeight">
 <summary>
 Gets or sets the value of icon max height.
 </summary>
 <value></value>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.CheckboxListEditor`1.EncodeValues">
 <summary>
 Gets or sets the flag is the values should be encoded in DB.
 </summary>
 <value></value>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.CheckboxListEditor`1.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.EditorRenderingContext">
 <summary>
 Represents an editor rendering context.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditorRenderingContext.TagName">
 <summary>
 Gets or sets tamplates value tag name.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditorRenderingContext.TagNamespace">
 <summary>
 Gets or sets tamplates value tag namespace.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditorRenderingContext.Template">
 <summary>
 Gets or sets target template.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditorRenderingContext.Value">
 <summary>
 Gets or sets value to render.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditorRenderingContext.NestingLevel">
 <summary>
 Gets or sets current nesting level of rendering(link to item, item list).
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditorRenderingContext.PageID">
 <summary>
 Gets or sets current page id.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditorRenderingContext.ParagraphID">
 <summary>
 Gets or sets current paragraph id.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditorRenderingContext.AllowEditing">
 <summary>
 Gets or sets whether editing is allowed.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditorRenderingContext.Item">
 <summary>
 Gets or sets the item.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditorRenderingContext.ItemField">
 <summary>
 Gets or sets the metadata.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.ExtensionValidator">
 <summary>
 Represents a required value validator.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ExtensionValidator.Editor">
 <summary>
 Gets or sets the value editor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ExtensionValidator.#ctor(Dynamicweb.Content.Items.Editors.FileEditor,System.Boolean)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ExtensionValidator.Validate(Dynamicweb.Content.Items.Editors.ValidatorContext)">
 <summary>
 Performs validation and returns value indicating whether validation was successful.
 </summary>
 <param name="context">Validation context.</param>
 <returns>Value indicating whether validation was successful.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ExtensionValidator.RenderValidator(System.String,Dynamicweb.Content.Items.Editors.EditFormField)">
 <summary>
 Render validation script.
 </summary>
 <param name="context">Validation context.</param>
 <param name="field">Field.</param>
 <returns>Value indicating whether validation was successful.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.InputHTML5Editor">
 <summary>
 Represents a HTML 5 input editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.InputHTML5Editor.Type">
 <summary>
 Gets or sets id of configuration settings.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.InputHTML5Editor.DataType">
 <summary>
 Gets the data type for this editor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.InputHTML5Editor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.InputHTML5Editor.BeginEdit(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process.
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.InputHTML5Editor.EndEdit">
 <summary>
 Returns the edited value.
 </summary>
 <returns>The edited value.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.ItemTypeEditor">
 <summary>
 Represents a file editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ItemTypeEditor.DataType">
 <summary>
 Gets the data type for this editor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemTypeEditor.BeginEdit(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process.
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemTypeEditor.EndEdit">
 <summary>
 Returns the edited value.
 </summary>
 <returns>The edited value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemTypeEditor.GetViewModelValue(System.Object)">
 <summary>
 Gets the value as an instance of <see cref="T:Dynamicweb.Frontend.ItemViewModel"/> 
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemTypeEditor.PublishRelatedItems(System.Object)">
 <summary>
 Publishes the related items(version control).
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemTypeEditor.DiscardRelatedItems(System.Object)">
 <summary>
 Publishes the related items(version control).
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.ItemRelationListEditor">
 <summary>
 Represents a Item relation list editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ItemRelationListEditor.DataType">
 <summary>
 Gets the data type for this editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ItemRelationListEditor.Validators">
 <summary>
 Gets or sets the list of editor validators.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ItemRelationListEditor.Items">
 <summary>
 Gets or sets the item fields items.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemRelationListEditor.BeginEdit(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process.
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemRelationListEditor.BeginEditFrontend(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 ItemListEditor frontend rendering
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemRelationListEditor.EndEdit">
 <summary>
 Returns the edited value.
 </summary>
 <returns>The edited value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemRelationListEditor.EndEditFrontend">
 <summary>
 Returns the edited value for frontend
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemRelationListEditor.GetViewModelValue(System.Object)">
 <summary>
 Gets the value as a collection of <see cref="T:Dynamicweb.Frontend.ItemViewModel"/>
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemRelationListEditor.CreateListControl(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.ItemEntry},System.Object,System.Int32,System.Int32,System.Boolean,System.Int32)">
 <summary>
 Returns new List control.
 </summary>
 <returns>New List control.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemRelationListEditor.CreateListColumn(System.String,System.Object,System.Int32,System.Int32,System.Boolean)">
 <summary>
 Create list column.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemRelationListEditor.CreateListRow(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Create list row.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.ItemRelationListMinValidator">
 <summary>
 Represents a min rows number validator.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ItemRelationListMinValidator.Editor">
 <summary>
 Gets or sets the value editor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemRelationListMinValidator.#ctor(Dynamicweb.Content.Items.Editors.ItemRelationListEditor)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="editor">File editor.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemRelationListMinValidator.Validate(Dynamicweb.Content.Items.Editors.ValidatorContext)">
 <summary>
 Performs validation and returns value indicating whether validation was successful.
 </summary>
 <param name="context">Validation context.</param>
 <returns>Value indicating whether validation was successful.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemRelationListMinValidator.RenderValidator(System.String,Dynamicweb.Content.Items.Editors.EditFormField)">
 <summary>
 Render validation script.
 </summary>
 <param name="context">Validation context.</param>
 <param name="field">Field.</param>
 <returns>Value indicating whether validation was successful.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.ItemRelationListMaxValidator">
 <summary>
 Represents a max rows number validator.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ItemRelationListMaxValidator.Editor">
 <summary>
 Gets or sets the value editor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemRelationListMaxValidator.#ctor(Dynamicweb.Content.Items.Editors.ItemRelationListEditor)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="editor">File editor.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemRelationListMaxValidator.Validate(Dynamicweb.Content.Items.Editors.ValidatorContext)">
 <summary>
 Performs validation and returns value indicating whether validation was successful.
 </summary>
 <param name="context">Validation context.</param>
 <returns>Value indicating whether validation was successful.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemRelationListMaxValidator.RenderValidator(System.String,Dynamicweb.Content.Items.Editors.EditFormField)">
 <summary>
 Render validation script.
 </summary>
 <param name="context">The validation context.</param>
 <param name="field">The field.</param>
 <returns>Value indicating whether validation was successful.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.LinkEditorBase">
 <summary>
 Represents a link editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.LinkEditorBase.DataType">
 <summary>
 Gets the data type for this editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.LinkEditorBase.EnablePageSelection">
 <summary>
 Gets or sets value indicating whether to enable page selection.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.LinkEditorBase.EnableParagraphSelection">
 <summary>
 Gets or sets value indicating whether to enable paragraph selection.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.LinkEditorBase.EnableFileSelection">
 <summary>
 Gets or sets value indicating whether to enable file selection.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.LinkEditorBase.ItemsOnly">
 <summary>
 Gets or sets value indicating whether only item-based pages/paragraphs can be selected.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.LinkEditorBase.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.LinkEditorBase.BeginEdit(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process.
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.LinkEditorBase.BeginEditFrontend(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process on forntend.
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.LinkEditorBase.EndEdit">
 <summary>
 Returns the edited value.
 </summary>
 <returns>The edited value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.LinkEditorBase.EndEditFrontend">
 <summary>
 Returns the edited value on frontend.
 </summary>
 <returns>The edited value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.LinkEditorBase.RenderItemListValue(System.String)">
 <summary>
 Render of the Item List value.
 </summary>
 <param name="value">Value</param>
 <returns>Rendered Value</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.LinkEditorBase.GetPageNameByLink(System.String)">
 <summary>
 Returns a page(or paragraph) name by link
 </summary>
 <returns>A page(or paragraph) name by link.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.FolderEditor">
 <summary>
 Represents a file editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.FolderEditor.DataType">
 <summary>
 Gets the data type for this editor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.FolderEditor.BeginEdit(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process.
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.FolderEditor.EndEdit">
 <summary>
 Returns the edited value.
 </summary>
 <returns>The edited value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.FolderEditor.GetViewModelValue(System.Object)">
 <summary>
 Gets the value as a collection of <see cref="T:Dynamicweb.Frontend.FileViewModel"/> 
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.FolderEditor.RenderValue(Dynamicweb.Content.Items.Editors.EditorRenderingContext)">
 <summary>
 Renders the folder editor's value.
 </summary>
 <param name="context">An editor rendering context.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.DateEditor">
 <summary>
 Represents a date editor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.DateEditor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.DateTimeEditor">
 <summary>
 Represents a date and time editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.DateTimeEditor.IncludeTime">
 <summary>
 Gets or sets value indicating whether to allow time editing.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.DateTimeEditor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.DecimalEditor">
 <summary>
 Represents a decimal number editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.DecimalEditor.AllowDecimalPoints">
 <summary>
 Gets or sets value indicating whether to allow decimal points.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.DecimalEditor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.DropDownListEditor`1">
 <summary>
 Represents a dropdown list editor.
 </summary>
 <typeparam name="T">Item value type.</typeparam>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.DropDownListEditor`1.Mode">
 <summary>
 Gets the list mode.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.DropDownListEditor`1.LabelPosition">
 <summary>
 Gets or sets the value which defines the option label position.
 </summary>
 <value></value>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.DropDownListEditor`1.LabelWidth">
 <summary>
 Gets or sets the value of label width.
 </summary>
 <value></value>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.DropDownListEditor`1.IconMaxWidth">
 <summary>
 Gets or sets the value of icon max width.
 </summary>
 <value></value>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.DropDownListEditor`1.IconMaxHeight">
 <summary>
 Gets or sets the value of icon max height.
 </summary>
 <value></value>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.DropDownListEditor`1.EncodeValues">
 <summary>
 Gets or sets the flag is the values should be encoded in DB.
 </summary>
 <value></value>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.DropDownListEditor`1.RemoveNothingSelected">
 <summary>
 Gets or sets the flag is the values should be encoded in DB.
 </summary>
 <value></value>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.DropDownListEditor`1.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.EditableListEditor">
 <summary>
 Represents an editable list editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditableListEditor.Mode">
 <summary>
 Gets the list mode.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditableListEditor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.EditForm">
 <summary>
 Represents an edit form. This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditForm.Name">
 <summary>
 Gets or sets the name of this form.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditForm.Groups">
 <summary>
 Gets or sets the collection of form groups.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditForm.Fields">
 <summary>
 Gets or sets the collection of form fields.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditForm.Renderer">
 <summary>
 Gets or sets the edit form renderer.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditForm.Template">
 <summary>
 Gets or sets renderer template.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditForm.TagNamespace">
 <summary>
 Gets or sets tags namespace.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditForm.ValueConverter">
 <summary>
 Gets the value converter.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditForm.SessionKey">
 <summary>
 Gets the session key used to persist form fields across postbacks.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditForm.IsShouldBePersisted">
 <summary>
 Gets or sets value indicating whether form should be persisted into the session.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditForm.Persisted">
 <summary>
 Gets or sets value indicating whether form fields are persisted into the session.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditForm.Restored">
 <summary>
 Gets or sets value indicating whether form fields are restored from the session.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditForm.RestoredForms">
 <summary>
 Gets the collection of forms restored during the current request.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditForm.NestingLevel">
 <summary>
 Gets or sets nesting level of rendering.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditForm.Location">
 <summary>
 Gets or sets where form is used
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">Form name.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.Render(System.IO.TextWriter)">
 <summary>
 Renders form.
 </summary>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.RenderHeader(System.IO.TextWriter)">
 <summary>
 Renders form header.
 </summary>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.RenderContents(System.IO.TextWriter)">
 <summary>
 Renders form contents.
 </summary>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.RenderFields(System.IO.TextWriter)">
 <summary>
 Renders all form fields fields.
 </summary>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.RenderFields(System.Func{Dynamicweb.Content.Items.Editors.EditFormField,System.Boolean},System.IO.TextWriter)">
 <summary>
 Renders all form fields fields.
 </summary>
 <param name="selector">A function that determines which fields to render</param>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.RenderField(System.Int32,System.IO.TextWriter)">
 <summary>
 Renders form field.
 </summary>
 <param name="index">Zero-based index of the field.</param>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.RenderField(Dynamicweb.Content.Items.Editors.EditFormField,System.IO.TextWriter)">
 <summary>
 Renders form field.
 </summary>
 <param name="field">Field to render.</param>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.Persist">
 <summary>
 Persists form into the session.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.Restore">
 <summary>
 Restores form the session.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.Cleanup">
 <summary>
 Clears temporary data.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.IsGroupCollapsed(System.String)">
 <summary>
 Determine is group collapsed / expanded
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.ReadFromRequest(System.String)">
 <summary>
 Reads form fields from the current request.
 </summary>
 <param name="formName">Form name.</param>
 <returns>Form fields.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.ReadFromRequest(System.String,System.Boolean)">
 <summary>
 Reads form fields from the current request.
 </summary>
 <param name="formName">Form name.</param>
 <param name="cleanup">Value indicating whether to automatically flush the given form state from the current HTTP session.</param>
 <returns>Form fields.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.ReadFromRequestInternal(System.String,System.String,System.Boolean,Dynamicweb.Content.Items.Metadata.ItemType,Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Reads form fields from the current request. If previousState is not null it is used instead restore state from session
 </summary>
 <param name="formName">Form name.</param>
 <param name="cleanup">Value indicating whether to automatically flush the given form state from the current HTTP session.</param>
 <param name="itemMeta">Item metadata.</param>
 <param name="previousState">Previous state of the item (for values that were not populated on the form).</param>
 <returns>Form fields.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.FromItem(Dynamicweb.Content.Items.Metadata.ItemType,Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Creates a form from the given item.
 </summary>
 <param name="item">Item instance.</param>
 <param name="itemMeta">Item metadata.</param>
 <returns>Form.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.FromItem(System.String,Dynamicweb.Content.Items.Metadata.ItemType,Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Creates a form from the given item.
 </summary>
 <param name="parentSystemName">Parent.</param>
 <param name="item">Item instance.</param>
 <param name="itemMeta">Item metadata.</param>
 <returns>Form.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.FromItem(Dynamicweb.Content.Items.Metadata.ItemType,Dynamicweb.Content.Items.ItemEntry,Dynamicweb.Content.Items.Editors.EditFormRenderer)">
 <summary>
 Creates a form from the given item.
 </summary>
 <param name="item">Item instance.</param>
 <param name="itemMeta">Item metadata.</param>
 <returns>Form.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.FromItem(System.String,Dynamicweb.Content.Items.Metadata.ItemType,Dynamicweb.Content.Items.ItemEntry,Dynamicweb.Content.Items.Editors.EditFormRenderer)">
 <summary>
 Creates a form from the given item.
 </summary>
 <param name="item">Item instance.</param>
 <param name="itemMeta">Item metadata.</param>
 <param name="renderer">Item renderer.</param>
 <returns>Form.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.IsNewItem(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Determine if item is a new item. It's new if it's null or if "new=true" is in query string
 </summary>
 <param name="item">The item to check</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.ToItem``1(Dynamicweb.Content.Items.Metadata.ItemType,``0)">
 <summary>
 Reads the current form from the request and constructs the item instance from the form values.
 </summary>
 <typeparam name="T">Item type.</typeparam>
 <param name="itemMeta">Item metadata.</param>
 <param name="previousState">Previous state of the item (for values that were not populated on the form).</param>
 <returns>Item instance.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.ToItem``1(Dynamicweb.Content.Items.Metadata.ItemType,``0,System.Boolean)">
 <summary>
 Reads the current form from the request and constructs the item instance from the form values.
 </summary>
 <typeparam name="T">Item type.</typeparam>
 <param name="itemMeta">Item metadata.</param>
 <param name="previousState">Previous state of the item (for values that were not populated on the form).</param>
 <param name="cleanup">Value indicating whether to automatically flush the given form state from the current HTTP session.</param>
 <returns>Item instance.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.ToItem(Dynamicweb.Content.Items.Metadata.ItemType,Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Reads the current form from the request and constructs the item instance from the form values.
 </summary>
 <param name="itemMeta">Item metadata.</param>
 <param name="previousState">Previous state of the item (for values that were not populated on the form).</param>
 <returns>Item instance.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.ToItem(System.String,Dynamicweb.Content.Items.Metadata.ItemType,Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Reads the current form from the request and constructs the item instance from the form values.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.ToItem(Dynamicweb.Content.Items.Metadata.ItemType,Dynamicweb.Content.Items.ItemEntry,System.Boolean)">
 <summary>
 Reads the current form from the request and constructs the item instance from the form values.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.ToItem(System.String,Dynamicweb.Content.Items.Metadata.ItemType,Dynamicweb.Content.Items.ItemEntry,System.Boolean)">
 <summary>
 Reads the current form from the request and constructs the item instance from the form values.
 </summary>
 <param name="itemMeta">Item metadata.</param>
 <param name="previousState">Previous state of the item (for values that were not populated on the form).</param>
 <param name="cleanup">Value indicating whether to automatically flush the given form state from the current HTTP session.</param>
 <returns>Item instance.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditForm.GetKeyPrefix(System.String)">
 <summary>
 Get the prefix of an edit form key. Used in item field editors to handle the case where they are used in item types included in other item types.
 </summary>
 <param name="key">An editor key</param>
 <returns>The prefix of the key or the empty string if not prefix exists</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.EditFormField">
 <summary>
 Represents an edit form field.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormField.Id">
 <summary>
 Gets or sets the unique identifier of this field.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormField.Name">
 <summary>
 Gets or sets the field name (label).
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormField.Value">
 <summary>
 Gets or sets the field value.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormField.Editor">
 <summary>
 Gets or sets the field value editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormField.Group">
 <summary>
 Gets or sets the name of the field group.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormField.SortIndex">
 <summary>
 Gets or sets the sort index.
 </summary>
 <value></value>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormField.IsVisibilityRule">
 <summary>
 indicates if visibility rule based on field.
 </summary>
 <value></value>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormField.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormField.#ctor(System.String,System.Object)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">Field name (label).</param>
 <param name="value">Field value.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormField.#ctor(System.String,System.Object,Dynamicweb.Content.Items.Editors.Editor)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">Field name (label).</param>
 <param name="value">Field value.</param>
 <param name="editor">Value editor.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.EditFormFieldCollection">
 <summary>
 Represents a collection of edit form fields.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormFieldCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormFieldCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Editors.EditFormField})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="items">Elements to be copied to this collection.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.EditFormGroup">
 <summary>
 Represents an edit form group.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormGroup.Id">
 <summary>
 Gets or sets the unique identifier of this group.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormGroup.Name">
 <summary>
 Gets or sets the field name (label).
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormGroup.Visible">
 <summary>
 Gets or sets visibility of group.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormGroup.VisibilityField">
 <summary>
 Gets or sets visibility of group.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormGroup.VisibilityCondition">
 <summary>
 Gets or sets visibility condition operator.
 </summary>
 <value></value>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormGroup.VisibilityConditionValue">
 <summary>
 Gets or sets visibility condition value.
 </summary>
 <value></value>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormGroup.VisibilityFieldType">
 <summary>
 Gets or sets type of field visibility based on.
 </summary>
 <value></value>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormGroup.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormGroup.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">Group name (label).</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.EditFormGroupCollection">
 <summary>
 Represents a collection of edit form fields.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormGroupCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormGroupCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Editors.EditFormGroup})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="items">Elements to be copied to this collection.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.EditFormRenderer">
 <summary>
 Represents an edit form renderer.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormRenderer.RenderEmptyFields">
 <summary>
 Gets or sets value indicating whether to render empty fields.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormRenderer.Context">
 <summary>
 Gets the context of the rendering process.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormRenderer.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormRenderer.BeginRenderFields(System.IO.TextWriter)">
 <summary>
 Begins rendering a set of fields.
 </summary>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormRenderer.EndRenderFields(System.IO.TextWriter)">
 <summary>
 Ends rendering a set of fields.
 </summary>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormRenderer.RenderField(System.String,System.String,System.IO.TextWriter)">
 <summary>
 Renders the given fields.
 </summary>
 <param name="name">Field name.</param>
 <param name="value">Field value.</param>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormRenderer.BeginRenderFieldGroup(Dynamicweb.Content.Items.Editors.EditFormGroup,System.IO.TextWriter)">
 <summary>
 Begins rendering field group.
 </summary>
 <param name="group">Group</param>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormRenderer.BeginRenderFieldGroup(System.String,System.IO.TextWriter)">
 <summary>
 Begins rendering field group.
 </summary>
 <param name="name">Group name.</param>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormRenderer.EndRenderFieldGroup(System.IO.TextWriter)">
 <summary>
 Ends rendering field group.
 </summary>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.EditFormRendererContext">
 <summary>
 Provides context to the edit form renderer. This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormRendererContext.Item">
 <summary>
 Gets the item being edited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormRendererContext.Type">
 <summary>
 Gets the type of an item being edited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormRendererContext.ItemType">
 <summary>
 Gets the type of an item being edited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormRendererContext.Field">
 <summary>
 Gets the current item field being edited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormRendererContext.Group">
 <summary>
 Gets the current item group being edited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditFormRendererContext.Form">
 <summary>
 Gets the item edit form.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormRendererContext.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormRendererContext.#ctor(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="item">The item being edited.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditFormRendererContext.#ctor(Dynamicweb.Content.Items.ItemEntry,Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="item">The item being edited.</param>
 <param name="type">The type of an item being edited.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.Editor">
 <summary>
 Represents an item field editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.Editor.Key">
 <summary>
 Gets or sets the key that uniquely identifies this editor instance.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.Editor.CssClass">
 <summary>
 Gets or sets the additional css class.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.Editor.DataType">
 <summary>
 Gets the data type for this editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.Editor.HttpContext">
 <summary>
 Gets the HTTP context associated with this editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.Editor.ValueConverter">
 <summary>
 Gets the value converter for converting values from and to string representation.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.Editor.Validators">
 <summary>
 Gets or sets the list of editor validators.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.Editor.Disabled">
 <summary>
 Gets or sets is editor disabled.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.Editor.ItemEntry">
 <summary>
 Gets or sets the item entry - owner of field
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Editor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Editor.BeginEdit(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process.
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Editor.EndEdit">
 <summary>
 Returns the edited value.
 </summary>
 <returns>The edited value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Editor.BeginEditFrontend(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process (for frontend).
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Editor.EndEditFrontend">
 <summary>
 Returns the edited value (for frontend).
 </summary>
 <returns>The edited value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Editor.StringifyValue(System.Object)">
 <summary>
 Returns the string representation of value.
 </summary>
 <param name="value">Object</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Editor.GetViewModelValue(System.Object)">
 <summary>
 Gets the value to use when rendering items in view models - <see cref="M:Dynamicweb.Frontend.ItemViewModel.GetValue(System.String)"/>
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Editor.GetViewModelValue(System.Object,Dynamicweb.Content.Items.Metadata.ItemField)">
 <summary>
 Gets the value to use when rendering items in view models - <see cref="M:Dynamicweb.Frontend.ItemViewModel.GetValue(System.String)"/>
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Editor.RenderValue(Dynamicweb.Content.Items.Editors.EditorRenderingContext)">
 <summary>
 Renders value.
 </summary>
 <param name="context">Editor rendering context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Editor.RenderItemListValue(System.String)">
 <summary>
 Render of the Item List value.
 </summary>
 <param name="value">Value</param>
 <returns>Rendered Value</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Editor.PublishRelatedItems(System.Object)">
 <summary>
 Publishes the related items(version control).
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Editor.DiscardRelatedItems(System.Object)">
 <summary>
 Discards the related items(version control).
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.Editor.RenderedItemListResult">
 <summary>
 Container which contains rendered value of the Item list and its additional information
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.Editor.RenderedItemListResult.Value">
 <summary>
 Rendered value
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.Editor.RenderedItemListResult.CssClass">
 <summary>
 CssClass for column of the Dynamicweb.Controls.List
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Editor.HasValue">
 <summary>
 Tell if this editor returns a value
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Editor.NewKey">
 <summary>
 Returns a new unique key that can be used to identify editor instance.
 </summary>
 <returns>A new unique key that can be used to identify editor instance.</returns>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Editors.Editor._editorTypes">
 <summary>
 Cache editor types
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Editor.GetEditorType(Dynamicweb.Content.Items.Metadata.ItemField)">
 <summary>
 Returns type of item editor
 </summary>
 <param name="field">Item field with editor</param>
 <returns>Type of item editor</returns>
 <remarks>Default returns TextEditor</remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.EditorContext">
 <summary>
 Represents an editor context.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditorContext.Value">
 <summary>
 Gets or sets the value that is being edited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditorContext.Output">
 <summary>
 Gets or sets the UI output stream.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditorContext.Template">
 <summary>
 Gets or sets current tamplate
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditorContext.TagPrefix">
 <summary>
 Gets or sets current TagName
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditorContext.TagNamespace">
 <summary>
 Gets or sets current TagNamespace
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditorContext.NestingLevel">
 <summary>
 Gets or sets current nesting level.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorContext.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.EditorManager">
 <summary>
 Represents an editor manager. This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.EditorManager.Current">
 <summary>
 Gets the current instance of the editor manager.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.GetEditorTypes">
 <summary>
 Returns all editor types.
 </summary>
 <returns>All editor types.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.GetEditorName(Dynamicweb.Content.Items.Editors.Editor)">
 <summary>
 Gets the user-friendly name of the editor.
 </summary>
 <param name="editor">Editor instance.</param>
 <returns>The user-friendly name of the editor.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.GetEditorName(System.Type)">
 <summary>
 Gets the user-friendly name of the editor.
 </summary>
 <param name="editorType">Editor type.</param>
 <returns>The user-friendly name of the editor.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.GetEditorGroup(Dynamicweb.Content.Items.Editors.Editor)">
 <summary>
 Gets the user-friendly name of the editor group.
 </summary>
 <param name="editor">Editor instance.</param>
 <returns>The user-friendly name of the editor group.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.GetEditorGroup(System.Type)">
 <summary>
 Gets the user-friendly name of the editor group.
 </summary>
 <param name="editorType">Editor type.</param>
 <returns>The user-friendly name of the editor group.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.CreateValidator(System.Type)">
 <summary>
 Creates an instance of the specified validator.
 </summary>
 <param name="validatorType">Validator type.</param>
 <returns>An instance of the specified validator.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.CreateValidator(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
 <summary>
 Creates an instance of the specified validator.
 </summary>
 <param name="validatorType">Validator type.</param>
 <param name="parameters">Validator parameters.</param>
 <returns>An instance of the specified validator.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.CreateValidator(Dynamicweb.Content.Items.Metadata.ValidatorMetadata)">
 <summary>
 Creates an instance of the specified validator.
 </summary>
 <param name="validatorMeta">Validator metadata.</param>
 <returns>An instance of the specified validator.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.CreateValidator``1">
 <summary>
 Creates an instance of the specified validator.
 </summary>
 <typeparam name="T">Validator type.</typeparam>
 <returns>An instance of the specified validator.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.CreateValidator``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
 <summary>
 Creates an instance of the specified validator.
 </summary>
 <typeparam name="T">Validator type.</typeparam>
 <param name="parameters">Validator parameters.</param>
 <returns>An instance of the specified validator.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.GetFieldValidators(Dynamicweb.Content.Items.Metadata.ItemField)">
 <summary>
 Get field validators.
 </summary>
 <param name="fieldMeta">Field metadata.</param>
 <returns>An collection of validators for the specified field .</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.CreateEditor(System.Type)">
 <summary>
 Creates an instance of the specified editor.
 </summary>
 <param name="editorType">Editor type.</param>
 <returns>An instance of the specified editor.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.CreateEditor(Dynamicweb.Content.Items.Metadata.EditorMetadata)">
 <summary>
 Creates an instance of the specified editor.
 </summary>
 <param name="editorMeta">Editor metadata.</param>
 <returns>An instance of the specified editor.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.CreateEditor``1">
 <summary>
 Creates an instance of the specified editor.
 </summary>
 <typeparam name="T">Editor type.</typeparam>
 <returns>An instance of the specified editor.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.SelectEditorType(System.Type)">
 <summary>
 Selects the best matching editor type for a given data type.
 </summary>
 <param name="dataType">Data type.</param>
 <returns>Editor type.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.SelectEditorType(System.Type,System.Nullable{System.Int32})">
 <summary>
 Selects the best matching editor type for a given data type.
 </summary>
 <param name="dataType">Data type.</param>
 <param name="storage">Indicates how much storage is required for holding field value.</param>
 <returns>Editor type.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.IsListEditor(Dynamicweb.Content.Items.Metadata.EditorMetadata)">
 <summary>
 Returns value indicating whether the given editor is a list-based editor.
 </summary>
 <param name="editorMeta">Editor metadata.</param>
 <returns>Value indicating whether the given editor is a list-based editor.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.IsListEditor(Dynamicweb.Content.Items.Editors.Editor)">
 <summary>
 Returns value indicating whether the given editor is a list-based editor.
 </summary>
 <param name="editor">Editor instace.</param>
 <returns>Value indicating whether the given editor is a list-based editor.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.IsListEditor(System.Type)">
 <summary>
 Returns value indicating whether the given editor is a list-based editor.
 </summary>
 <param name="editorType">Editor type.</param>
 <returns>Value indicating whether the given editor is a list-based editor.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.IsEditableListEditor(System.Type)">
 <summary>
 Returns value indicating whether the given editor is a list-based editor whose values can be edited dynamically.
 </summary>
 <param name="editorType">Editor type.</param>
 <returns>Value indicating whether the given editor is a list-based editor whose values can be edited dynamically.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.IsPlainTextEditor(System.Type)">
 <summary>
 Returns value indicating whether the given editor is a plain text editor.
 </summary>
 <param name="editorType">Editor type.</param>
 <returns>Value indicating whether the given editor is a plain text editor.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.ConvertValue(System.String,System.Object,Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Converts the value of a given field to its appropriate CLR representation.
 </summary>
 <param name="fieldName">Field name.</param>
 <param name="fieldValue">Field value.</param>
 <param name="item">Item instance.</param>
 <returns>Field value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.ConvertValue(System.String,System.Object,System.String)">
 <summary>
 Converts the value of a given field to its appropriate CLR representation.
 </summary>
 <param name="fieldName">Field name.</param>
 <param name="fieldValue">Field value.</param>
 <param name="itemSystemName">Item system name.</param>
 <returns>Field value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.EditorManager.ConvertValue(Dynamicweb.Content.Items.Metadata.ItemField,System.Object)">
 <summary>
 Converts the value of a given field to its appropriate CLR representation.
 </summary>
 <param name="field">Item field.</param>
 <param name="value">Field value.</param>
 <returns>Field value.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.CheckboxEditor">
 <summary>
 Represents a checkbox editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.CheckboxEditor.DataType">
 <summary>
 Gets the data type for this editor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.CheckboxEditor.#ctor">
 <summary>
 Initialize a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.CheckboxEditor.BeginEdit(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process.
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.CheckboxEditor.EndEdit">
 <summary>
 Returns the edited value.
 </summary>
 <returns>The edited value.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.FileEditor">
 <summary>
 Represents a file editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.FileEditor.DataType">
 <summary>
 Gets the data type for this editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.FileEditor.BaseDirectory">
 <summary>
 Gets or sets the virtual path to the base directory.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.FileEditor.Extensions">
 <summary>
 Gets or sets the allowed extensions.
 </summary>
 <remarks>If extensions are entered, only files of those extensions are passed.</remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.FileEditor.Validators">
 <summary>
 Gets or sets the list of editor validators.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.FileEditor.BeginEdit(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process.
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.FileEditor.BeginEditFrontend(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process on fontend.
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.FileEditor.EndEdit">
 <summary>
 Returns the edited value.
 </summary>
 <returns>The edited value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.FileEditor.EndEditFrontend">
 <summary>
 Returnts the edited value for frontend
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.FileEditor.RenderItemListValue(System.String)">
 <summary>
 Render of the Item List value.
 </summary>
 <param name="value">Value</param>
 <returns>Rendered Value</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.FileEditor.RenderFileEditor(Dynamicweb.Content.Items.Editors.EditorContext,System.Boolean)">
 <summary>
 Renders file editor according to parameters
 </summary>
 <param name="context"></param>
 <param name="IsBackend"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.FileEditor.SetFilesLoop(Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Appends a loop with files in folder to a current template
 </summary>
 <param name="currentTemplate"></param>
 <param name="tagName"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.FileEditor.SetUploaderTags(Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Appends file uploader template tags
 </summary>
 <param name="currentTemplate"></param>
 <param name="tagName"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.FileEditor.UploadFile(System.Web.HttpPostedFile)">
 <summary>
 Uploads file if it's extension is allowed and returns it's name
 </summary>
 <param name="file">File to upload</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.HiddenFieldEditor">
 <summary>
 Represents an editor that renders a hidden field.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.HiddenFieldEditor.Mode">
 <summary>
 Gets the editor mode.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.HiddenFieldEditor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.IList">
 <summary>
 Represents a list.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.IList.Items">
 <summary>
 Gets or sets the list items.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.ItemLinkEditor">
 <summary>
 Represents a link to item editor.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.ItemLinkEditor.ItemReference">
 <summary>
 Represents an item reference. This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ItemLinkEditor.ItemReference.ItemType">
 <summary>
 Gets or sets the item type.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ItemLinkEditor.ItemReference.ItemId">
 <summary>
 Gets or sets the item Id.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemLinkEditor.ItemReference.Parse(System.String)">
 <summary>
 Parses the item reference from the given input string.
 </summary>
 <param name="input">Input string.</param>
 <returns>Parsed item reference.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemLinkEditor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemLinkEditor.GetViewModelValue(System.Object)">
 <summary>
 Get the value as <see cref="T:Dynamicweb.Frontend.ItemViewModel"/> 
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.ItemListEditor">
 <summary>
 Represents a file editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ItemListEditor.DataType">
 <summary>
 Gets the data type for this editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ItemListEditor.Items">
 <summary>
 Gets or sets the item fields items.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemListEditor.BeginEdit(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process.
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemListEditor.BeginEditFrontend(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 ItemListEditor frontend rendering
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemListEditor.EndEdit">
 <summary>
 Returns the edited value.
 </summary>
 <returns>The edited value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemListEditor.EndEditFrontend">
 <summary>
 Returns the edited value for frontend
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemListEditor.GetViewModelValue(System.Object)">
 <summary>
 Gets the value as a collection of <see cref="T:Dynamicweb.Frontend.ItemViewModel"/> 
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemListEditor.RenderValue(Dynamicweb.Content.Items.Editors.EditorRenderingContext)">
 <summary>
 Renders the list of items
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemListEditor.PublishRelatedItems(System.Object)">
 <summary>
 Publishes the related items(version control).
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemListEditor.DiscardRelatedItems(System.Object)">
 <summary>
 Discards the related items(version control).
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemListEditor.GetItems(System.Object)">
 <summary>
 Gets the list of items
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemListEditor.CreateListControl(System.Collections.Generic.IEnumerable{System.String},System.Object)">
 <summary>
 Returns new List control.
 </summary>
 <returns>New List control.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemListEditor.CreateListColumn(System.String,System.Int32,System.Int32)">
 <summary>
 Create list column.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemListEditor.CreateListRow(Dynamicweb.Content.Items.ItemEntry,System.String)">
 <summary>
 Create list row.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ItemListEditor.GetItems(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Returns a list of items that needs to be rendered.
 </summary>
 <returns>A list of items that needs to be rendered.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.LinkEditor">
 <summary>
 Represents a link editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.LinkEditor.DataType">
 <summary>
 Gets the data type for this editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.LinkEditor.EnableFileSelection">
 <summary>
 Gets or sets value indicating whether to enable file selection.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.LinkEditor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.LinkEditor.BeginEdit(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process.
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.ListEditorMode">
 <summary>
 Represents a list editor mode.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Editors.ListEditorMode.DropDown">
 <summary>
 Drop-down list.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Editors.ListEditorMode.Radio">
 <summary>
 Radio-button list.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Editors.ListEditorMode.Checkbox">
 <summary>
 Checkbox list.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Editors.ListEditorMode.Editable">
 <summary>
 Editable list.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.OptionLabelPosition">
 <summary>
 Represents a option label rendering.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Editors.OptionLabelPosition.None">
 <summary>
 Do not render.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Editors.OptionLabelPosition.Left">
 <summary>
 Render to left.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Editors.OptionLabelPosition.Right">
 <summary>
 Render to right.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Editors.OptionLabelPosition.Top">
 <summary>
 Render to above.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Editors.OptionLabelPosition.Bottom">
 <summary>
 Render to below.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.ListEditor`1">
 <summary>
 Represents a list editor.
 </summary>
 <typeparam name="T">Item value type.</typeparam>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ListEditor`1.Items">
 <summary>
 Gets or sets the editor items.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ListEditor`1.Mode">
 <summary>
 Gets the list mode.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ListEditor`1.DataType">
 <summary>
 Gets the data type for this editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ListEditor`1.EncodeValues">
 <summary>
 Gets or sets the flag is the values should be encoded in DB.
 </summary>
 <value></value>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ListEditor`1.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ListEditor`1.BeginEdit(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process.
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ListEditor`1.EndEdit">
 <summary>
 Returns the edited value.
 </summary>
 <returns>The edited value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ListEditor`1.GetViewModelValue(System.Object,Dynamicweb.Content.Items.Metadata.ItemField)">
 <summary>
 Gets the model to use when rendering list viewmodels with included options- <see cref="T:Dynamicweb.Frontend.ListViewModel"/>
 </summary>
 <param name="value">Value</param>
 <param name="field">Field</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ListEditor`1.StringifyValue(System.Object)">
 <summary>
 Returns string representation of editor value.
 </summary>
 <param name="value">Editor value.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ListEditor`1.RenderItemListValue(System.String)">
 <summary>
 Render of the Item List value.
 </summary>
 <param name="value">Value</param>
 <returns>Rendered Value</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ListEditor`1.RenderList(System.IO.TextWriter,`0)">
 <summary>
 Renders list.
 </summary>
 <param name="output">Output.</param>
 <param name="selectedItem">Selected item.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ListEditor`1.RenderValue(Dynamicweb.Content.Items.Editors.EditorRenderingContext)">
 <summary>
 Renders value.
 </summary>
 <param name="context">Editor rendering context.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.ListItem">
 <summary>
 Represents a list item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ListItem.Name">
 <summary>
 Gets or sets the list item name.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ListItem.Value">
 <summary>
 Gets or sets the list item value.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ListItem.Selected">
 <summary>
 Gets or sets value indicating whether list item is selected.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ListItem.Icon">
 <summary>
 Gets or sets the list item icon.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ListItem.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ListItem.#ctor(System.String,System.Object)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">List item name.</param>
 <param name="value">List item value.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ListItem.#ctor(System.String,System.Object,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">List item name.</param>
 <param name="value">List item value.</param>
 <param name="icon">List item icon.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ListItem.#ctor(System.String,System.Object,System.Boolean)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">List item name.</param>
 <param name="value">List item value.</param>
 <param name="selected">Value indicating whether item is selected.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ListItem.#ctor(System.String,System.Object,System.String,System.Boolean)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">List item name.</param>
 <param name="value">List item value.</param>
 <param name="icon">List item icon.</param>
 <param name="selected">Value indicating whether item is selected.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.LongTextEditor">
 <summary>
 Represents a memo (long text) editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.LongTextEditor.Mode">
 <summary>
 Gets the editor mode.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.LongTextEditor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.LongTextEditor.BeginEdit(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process.
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.IntegerEditor">
 <summary>
 Represents a number editor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.IntegerEditor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.NumberEditor">
 <summary>
 Represents a number editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.NumberEditor.AllowDecimalPoints">
 <summary>
 Gets or sets value indicating whether to allow decimal points.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.NumberEditor.DataType">
 <summary>
 Gets the data type for this editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.NumberEditor.NumberCulture">
 <summary>
 Gets the number culture settings.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.NumberEditor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.NumberEditor.BeginEdit(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process.
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.NumberEditor.GetMinValue">
 <summary>
 Returns the minimum value.
 </summary>
 <returns>Minimum value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.NumberEditor.GetMaxValue">
 <summary>
 REturns the maximum value.
 </summary>
 <returns>Maximum value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.NumberEditor.EndEdit">
 <summary>
 Returns the edited value.
 </summary>
 <returns>The edited value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.NumberEditor.CreateNumberSelector(System.String,System.Object)">
 <summary>
 Returns new number selector control.
 </summary>
 <param name="id">Control Id.</param>
 <param name="value">Selected value.</param>
 <returns>New number selector control.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.PasswordEditor">
 <summary>
 Represents a password editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.PasswordEditor.Mode">
 <summary>
 Gets the editor mode.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.PasswordEditor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.UserEditor">
 <summary>
 Represents a User editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.UserEditor.ShowTypes">
 <summary>
 Gets or sets the value which defines user objects types to show.
 </summary>
 <value></value>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.UserEditor.DataType">
 <summary>
 Gets the data type for this editor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.UserEditor.BeginEdit(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process.
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.UserEditor.EndEdit">
 <summary>
 Returns the edited value.
 </summary>
 <returns>The edited value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.UserEditor.GetViewModelValue(System.Object)">
 <summary>
 Gets the value as a collection of <see cref="T:Dynamicweb.Frontend.UserViewModel"/> 
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.UserEditor.RenderItemListValue(System.String)">
 <summary>
 Render of the Item List value.
 </summary>
 <param name="value">Value</param>
 <returns>Rendered Value</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.UserEditor.BeginEditFrontend(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Disable editing in fronted
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.RadioButtonListEditor`1">
 <summary>
 Represents a radio button list editor.
 </summary>
 <typeparam name="T">Item value type.</typeparam>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.RadioButtonListEditor`1.Mode">
 <summary>
 Gets the list mode.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.RadioButtonListEditor`1.LabelPosition">
 <summary>
 Gets or sets the value which defines the option label position.
 </summary>
 <value></value>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.RadioButtonListEditor`1.IconPosition">
 <summary>
 Gets or sets the value which defines the option icon position.
 </summary>
 <value></value>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.RadioButtonListEditor`1.IconMaxWidth">
 <summary>
 Gets or sets the value of icon max width.
 </summary>
 <value></value>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.RadioButtonListEditor`1.IconMaxHeight">
 <summary>
 Gets or sets the value of icon max height.
 </summary>
 <value></value>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.RadioButtonListEditor`1.EncodeValues">
 <summary>
 Gets or sets the flag is the values should be encoded in DB.
 </summary>
 <value></value>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.RadioButtonListEditor`1.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.RadioButtonListEditor`1.GetOptions(System.String)">
 <summary>
 Returns options wich define option label and icon positions.
 </summary>
 <param name="dropdownName">The name of dropdown.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.RegExValidator">
 <summary>
 Represents a regular expression validator.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.RegExValidator.Expression">
 <summary>
 Gets or sets the unescaped validation expression.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.RegExValidator.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.RegExValidator.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="expression">Validation expression.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.RegExValidator.Validate(Dynamicweb.Content.Items.Editors.ValidatorContext)">
 <summary>
 Performs validation and returns value indicating whether validation was successful.
 </summary>
 <param name="context">Validation context.</param>
 <returns>Value indicating whether validation was successful.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.RegExValidator.RenderValidator(System.String,Dynamicweb.Content.Items.Editors.EditFormField)">
 <summary>
 Render validation script.
 </summary>
 <param name="context">Validation context.</param>
 <param name="field">Field.</param>
 <returns>Value indicating whether validation was successful.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.RichTextEditor">
 <summary>
 Represents a rich text editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.RichTextEditor.Mode">
 <summary>
 Gets the editor mode.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.RichTextEditor.ConfgurationId">
 <summary>
 Gets or sets id of configuration settings.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.RichTextEditor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.RichTextEditor.RenderItemListValue(System.String)">
 <summary>
 Render of the Item List value.
 </summary>
 <param name="value">Value</param>
 <returns>Rendered Value</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.StylishFormRenderer">
 <summary>
 Represents a form renderer whose output can be easily styled with CSS.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.StylishFormRenderer.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.StylishFormRenderer.BeginRenderFields(System.IO.TextWriter)">
 <summary>
 Begins rendering a set of fields.
 </summary>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.StylishFormRenderer.EndRenderFields(System.IO.TextWriter)">
 <summary>
 Ends rendering a set of fields.
 </summary>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.StylishFormRenderer.BeginRenderFieldGroup(Dynamicweb.Content.Items.Editors.EditFormGroup,System.IO.TextWriter)">
 <summary>
 Begins rendering field group.
 </summary>
 <param name="group">The group.</param>
 <param name="output">The output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.StylishFormRenderer.EndRenderFieldGroup(System.IO.TextWriter)">
 <summary>
 Ends rendering field group.
 </summary>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.StylishFormRenderer.RenderField(System.String,System.String,System.IO.TextWriter)">
 <summary>
 Renders the given fields.
 </summary>
 <param name="name">Field name.</param>
 <param name="value">Field value.</param>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.TabularFormRenderer">
 <summary>
 Represents a tabular form renderer.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.TabularFormRenderer.LiftFields">
 <summary>
 Gets or sets value indicating whether to lift fields so their names and values are aligned on top.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.TabularFormRenderer.FixedWidth">
 <summary>
 Gets or sets value indicating whether fields will have fixed with.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.TabularFormRenderer.IsTable">
 <summary>
 Gets or sets value indicating whether fields are currently rendered within a table.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.TabularFormRenderer.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.TabularFormRenderer.BeginRenderFields(System.IO.TextWriter)">
 <summary>
 Begins rendering a set of fields.
 </summary>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.TabularFormRenderer.EndRenderFields(System.IO.TextWriter)">
 <summary>
 Ends rendering a set of fields.
 </summary>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.TabularFormRenderer.BeginRenderFieldGroup(Dynamicweb.Content.Items.Editors.EditFormGroup,System.IO.TextWriter)">
 <summary>
 Begins rendering field group.
 </summary>
 <param name="group">The group.</param>
 <param name="output">The output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.TabularFormRenderer.EndRenderFieldGroup(System.IO.TextWriter)">
 <summary>
 Ends rendering field group.
 </summary>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.TabularFormRenderer.RenderField(System.String,System.String,System.IO.TextWriter)">
 <summary>
 Renders the given fields.
 </summary>
 <param name="name">Field name.</param>
 <param name="value">Field value.</param>
 <param name="output">Output stream.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.GeolocationEditor">
 <summary>
 Represents a geolocation editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.GeolocationEditor.DataType">
 <summary>
 Gets the data type for this editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.GeolocationEditor.AddressFields">
 <summary>
 Gets or sets the allowed extensions.
 </summary>
 <remarks>If extensions are entered, only files of those extensions are passed.</remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.GeolocationEditor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.GeolocationEditor.GetViewModelValue(System.Object)">
 <summary>
 Gets the value as an instance of <see cref="T:Dynamicweb.Frontend.GeolocationViewModel"/> 
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.TextEditor">
 <summary>
 Represents a text editor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.TextEditor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.TextEditorMode">
 <summary>
 Represents a text editor mode.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Editors.TextEditorMode.Default">
 <summary>
 Default text box.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Editors.TextEditorMode.Multiline">
 <summary>
 Multiline text box.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Editors.TextEditorMode.Password">
 <summary>
 Password text box.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Editors.TextEditorMode.Hidden">
 <summary>
 Hidden field.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Editors.TextEditorMode.Rich">
 <summary>
 Rich textfield.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.StringEditor">
 <summary>
 Represents an editor that allows editing of strings.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.StringEditor.MaxLength">
 <summary>
 Gets or sets the maximum allowed text length.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.StringEditor.Mode">
 <summary>
 Gets the editor mode.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.StringEditor.DataType">
 <summary>
 Gets the data type for this editor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.StringEditor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.StringEditor.BeginEdit(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process.
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.StringEditor.EndEdit">
 <summary>
 Returns the edited value.
 </summary>
 <returns>The edited value.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.TimestampEditor">
 <summary>
 Represents a timestamp editor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.TimestampEditor.IncludeTime">
 <summary>
 Gets or sets value indicating whether to allow time editing.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Editors.TimestampEditor.MinDate">
 <summary>
 Gets the minimum allowed date.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Editors.TimestampEditor.MaxDate">
 <summary>
 Gets the maximum allowed date.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.TimestampEditor.DataType">
 <summary>
 Gets the data type for this editor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.TimestampEditor.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.TimestampEditor.BeginEdit(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process.
 </summary>
 <param name="context">Editor context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.TimestampEditor.EndEdit">
 <summary>
 Returns the edited value.
 </summary>
 <returns>The edited value.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.Validator">
 <summary>
 Represents a validator.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.Validator.ErrorMessage">
 <summary>
 Gets or sets the error message displayed when validation fails.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Validator.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Validator.Validate(Dynamicweb.Content.Items.Editors.ValidatorContext)">
 <summary>
 Performs validation and returns value indicating whether validation was successful.
 </summary>
 <param name="context">Validation context.</param>
 <returns>Value indicating whether validation was successful.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Validator.RenderValidator(System.String,Dynamicweb.Content.Items.Editors.EditFormField)">
 <summary>
 Render validation script.
 </summary>
 <param name="context">Validation context.</param>
 <param name="field">Field.</param>
 <returns>Value indicating whether validation was successful.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.Validator.RenderValidator(System.String,Dynamicweb.Content.Items.Metadata.ItemField)">
 <summary>
 Render validation script.
 </summary>
 <param name="context">Validation context.</param>
 <param name="fieldMeta">Field metadata.</param>
 <returns>Value indicating whether validation was successful.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.ValidatorCollection">
 <summary>
 Represents a collection of validator metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ValidatorCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ValidatorCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Editors.Validator})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="items">Elements to be copied to this collection.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.ValidatorContext">
 <summary>
 Represents a validator context.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Editors.ValidatorContext.Value">
 <summary>
 Gets or sets the value being validated.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.ValidatorContext.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.RequiredValidator">
 <summary>
 Represents a required value validator.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.RequiredValidator.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.RequiredValidator.Validate(Dynamicweb.Content.Items.Editors.ValidatorContext)">
 <summary>
 Performs validation and returns value indicating whether validation was successful.
 </summary>
 <param name="context">Validation context.</param>
 <returns>Value indicating whether validation was successful.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Editors.RequiredValidator.RenderValidator(System.String,Dynamicweb.Content.Items.Editors.EditFormField)">
 <summary>
 Render validation script.
 </summary>
 <param name="context">Validation context.</param>
 <param name="field">Field.</param>
 <returns>Value indicating whether validation was successful.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Editors.NamespaceDoc">
 <summary>
 The Dynamicweb.Content.Items.Editors namespace contains all item type editors used for rendering an editor for each field type of an item
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.PageDefaultView">
 <summary>
 Defines the default view for page items.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.CreationRuleMetadata">
 <summary>
 Represents a creation rule metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.CreationRuleMetadata.Name">
 <summary>
 Gets or sets the name of the rule.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.CreationRuleMetadata.TypeName">
 <summary>
 Gets or sets tye assembly-qualified name of the rule type.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.CreationRuleMetadata.Value">
 <summary>
 Gets or sets the rule value.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.CreationRuleMetadata.SourceType">
 <summary>
 Gets or sets the activation source type.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.CreationRuleMetadata.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.CreationRuleMetadata.#ctor(Dynamicweb.Content.Items.Metadata.CreationRuleMetadata)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="copyFrom">Object to copy state from.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="copyFrom">copyFrom</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.CreationRuleMetadata.CopyTo(Dynamicweb.Content.Items.Metadata.CreationRuleMetadata)">
 <summary>
 Copies the state of the current object into the given one.
 </summary>
 <param name="target">Object to copy state into.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="target">target</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.CreationRuleMetadata.CompareTo(Dynamicweb.Content.Items.Metadata.CreationRuleMetadata)">
 <summary>
 Compares the current object with the given one and returns the comparison result.
 </summary>
 <param name="other">Object to compare with.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.CreationRuleMetadata.SerializeTo(System.Text.StringBuilder)">
 <summary>
 Serializes the state of the current object into the given source.
 </summary>
 <param name="metadata">Xml string.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.CreationRuleMetadata.SerializeTo(System.Xml.XmlWriter)">
 <summary>
 Serializes the state of the current object into the given source.
 </summary>
 <param name="writer">Xml writer.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.CreationRuleMetadata.DeserializeFrom(System.Text.StringBuilder)">
 <summary>
 Deserializes the state of the current object from a given source.
 </summary>
 <param name="metadata">Xml string.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.CreationRuleMetadata.DeserializeFrom(System.Xml.XmlReader)">
 <summary>
 Deserializes the state of the current object from a given source.
 </summary>
 <param name="reader">Xml reader.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.CreationRuleMetadata.WriteSafe(System.Xml.XmlWriter,System.String,System.String)">
 <summary>
 Writes attribute string.
 </summary>
 <param name="writer">Writer.</param>
 <param name="n">Attribute name.</param>
 <param name="v">Attribute value.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.CreationRuleMetadataCollection">
 <summary>
 Represents a collection of creation rule metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.CreationRuleMetadataCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.CreationRuleMetadataCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Metadata.CreationRuleMetadata})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="items">Elements to be copied to this collection.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.CreationRuleMetadataCollection.Find(System.String)">
 <summary>
 Returns the first element with the given type name.
 </summary>
 <param name="typeName">Type name.</param>
 <returns>The first element with the given type name.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.CreationRuleMetadataCollection.FindIndex(System.String)">
 <summary>
 Returns an index of a first element from the collection with the given type name.
 </summary>
 <param name="typeName">Type name.</param>
 <returns>An index of a first element from the collection with the given type name.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.CreationRuleMetadataCollection.SerializeTo(System.Text.StringBuilder)">
 <summary>
 Serializes the state of the current object into the given source.
 </summary>
 <param name="metadata">Xml string.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.CreationRuleMetadataCollection.SerializeTo(System.Xml.XmlWriter)">
 <summary>
 Serializes the state of the current object into the given source.
 </summary>
 <param name="writer">Xml writer.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.CreationRuleMetadataCollection.DeserializeFrom(System.Text.StringBuilder)">
 <summary>
 Deserializes the state of the current object from a given source.
 </summary>
 <param name="metadata">Xml string.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.CreationRuleMetadataCollection.DeserializeFrom(System.Xml.XmlReader)">
 <summary>
 Deserializes the state of the current object from a given source.
 </summary>
 <param name="reader">Xml reader.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.EditorMetadata">
 <summary>
 Represents field editor metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.EditorMetadata.TypeName">
 <summary>
 Gets or sets tye assembly-qualified name of the editor type.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.EditorMetadata.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.EditorMetadata.#ctor(Dynamicweb.Content.Items.Metadata.EditorMetadata)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="copyFrom">Object to copy state from.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="copyFrom">copyFrom</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.EditorMetadata.CopyTo(Dynamicweb.Content.Items.Metadata.EditorMetadata)">
 <summary>
 Copies the state of the current object into the given one.
 </summary>
 <param name="target">Object to copy state into.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="target">target</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.EditorMetadata.CompareTo(Dynamicweb.Content.Items.Metadata.EditorMetadata)">
 <summary>
 Compares the current object with the given one and returns the comparison result.
 </summary>
 <param name="other">Object to compare with.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSqlSource.#ctor">
 <summary>
 Creates a new instance of a class.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSqlSource.#ctor(System.String)">
 <summary>
 Creates a new instance of a class.
 </summary>
 <param name="queryString">Query string for fetching data.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSqlSource.#ctor(System.String,System.String,System.String)">
 <summary>
 Creates a new instance of a class.
 </summary>
 <param name="queryString">Query string for fetching data.</param>
 <param name="nameField">Field name for representing 'name' field value.</param>
 <param name="valueField">Field name for representing 'value' field value.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSqlSource.#ctor(System.String,System.String,System.String,System.String)">
 <summary>
 Creates a new instance of a class.
 </summary>
 <param name="queryString">Query string for fetching data.</param>
 <param name="nameField">Field name for representing 'name' field value.</param>
 <param name="valueField">Field name for representing 'value' field value.</param>
 <param name="database">Access database.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSource">
 <summary>
 Represents a source of field options.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSource.Type">
 <summary>
 Type of source.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSource.SourceType">
 <summary>
 Type of source.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSource.Values">
 <summary>
 Collection of field options.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSource.CreateEncodedOption(System.String,System.Object)">
 <summary>
 Creates field option with url encoded fields.
 </summary>
 <param name="name">Value for name field.</param>
 <param name="value">Value for value field.</param>
 <returns>FieldOptionMetadata.</returns>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSource.CreateEncodedOption(System.String,System.Object,System.String)">
 <summary>
 Creates field option with url encoded fields.
 </summary>
 <param name="name">Value for name field.</param>
 <param name="value">Value for value field.</param>
 <param name="icon">Value for icon field.</param>
 <returns>FieldOptionMetadata.</returns>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSource.CreateDecodedOption(System.String,System.Object)">
 <summary>
 Creates field option with url decoded fields.
 </summary>
 <param name="name">Value for name field.</param>
 <param name="value">Value for value field.</param>
 <returns>FieldOptionMetadata.</returns>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSource.CreateDecodedOption(System.String,System.Object,System.String)">
 <summary>
 Creates field option with url decoded fields.
 </summary>
 <param name="name">Value for name field.</param>
 <param name="value">Value for value field.</param>
 <param name="icon">Value for icon field.</param>
 <returns>FieldOptionMetadata.</returns>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSource.SerializeTo(System.Xml.XmlWriter)">
 <summary>
 Serializes a current instance of class to specific source.
 </summary>
 <param name="writer">Xml Writer</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSource.DeserializeFrom(System.Xml.XmlReader)">
 <summary>
 Deserializes a current instance of a class from specific source.
 </summary>
 <param name="reader">Xml Reader</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSource.CopyTo(Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSource)">
 <summary>
 Copies the state of the current object into the given one.
 </summary>
 <param name="target">Object to copy state into.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="target">target</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSource.CompareTo(Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSource)">
 <summary>
 Compares the current object with the given one and returns the comparison result.
 </summary>
 <param name="other">Object to compare with.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSource.Update">
 <summary>
 Updates source collection
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.GroupVisibilityHandler">
 <summary>
 Represents functionality for handling group visibility settings.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.GroupVisibilityHandler.GetGroupVisibility(System.Object,System.String,System.String,System.String)">
 <summary>
 Determine is group visible
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.ItemField">
 <summary>
 Represents an item field metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemField.Parent">
 <summary>
 Gets or sets the system name of parent item type.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemField.Name">
 <summary>
 Gets or sets the user-friendly name of the field.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemField.Description">
 <summary>
 Gets or sets the field description.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemField.SystemName">
 <summary>
 Gets or sets the system name of the field.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemField.Editor">
 <summary>
 Gets or sets the editor metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemField.EditorConfiguration">
 <summary>
 Gets or sets the editor configuration (ConfigurableAddin extensibility).
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemField.Type">
 <summary>
 Gets or sets the underlying type of the item field.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemField.UnderlyingType">
 <summary>
 Gets or sets the underlying type of the item field.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemField.Validators">
 <summary>
 Gets or sets the list of field validators.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemField.DefaultValue">
 <summary>
 Gets or sets the default value for the field.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemField.DefaultValueExpression">
 <summary>
 Gets or sets the default value expression for the field.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemField.DefaultValueCulture">
 <summary>
 Gets the culture information that indicates under which culture the default value was saved.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemField.Options">
 <summary>
 Gets or sets the value options setup for this field.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemField.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemField.#ctor(Dynamicweb.Content.Items.Metadata.ItemField)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="copyFrom">Object to copy state from.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="copyFrom">copyFrom</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemField.CopyTo(Dynamicweb.Content.Items.Metadata.ItemField)">
 <summary>
 Copies the state of the current object into the given one.
 </summary>
 <param name="target">Object to copy state into.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="target">target</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemField.CheckRequired">
 <summary>
 Returns value indicating whether this field is required.
 </summary>
 <returns>Value indicating whether this field is required.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemField.CompareTo(Dynamicweb.Content.Items.Metadata.ItemField)">
 <summary>
 Compares the current object with the given one and returns the comparison result.
 </summary>
 <param name="other">Object to compare with.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemField.CreateEditorInstance(System.Boolean)">
 <summary>
 Gets the field editor instance with loaded configuration 
 </summary>
 <param name="isEditing">If editor is needed for editing.</param>
 <returns>Editor instance.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemField.ParseFrom(System.Reflection.PropertyInfo)">
 <summary>
 Returns the field metadata that is parsed from the metadata of the given property.
 </summary>
 <param name="property">Property to examine.</param>
 <returns>Field metadata.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.FieldMetadataCollection">
 <summary>
 Represents a collection of item field metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldMetadataCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldMetadataCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Metadata.ItemField})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="items">Elements to be copied to this collection.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldMetadataCollection.Find(System.String)">
 <summary>
 Returns the first element with the given system name.
 </summary>
 <param name="systemName">System name.</param>
 <returns>The first element with the given system name.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldMetadataCollection.FindIndex(System.String)">
 <summary>
 Returns an index of a first element from the collection with the given system name.
 </summary>
 <param name="systemName">System name.</param>
 <returns>An index of a first element from the collection with the given system name.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.FieldOptionMetadata">
 <summary>
 Represents a field option metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.FieldOptionMetadata.Name">
 <summary>
 Gets or sets the option name (label).
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.FieldOptionMetadata.Value">
 <summary>
 Gets or sets the option value.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.FieldOptionMetadata.Icon">
 <summary>
 Gets or sets the option icon.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadata.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadata.#ctor(System.String,System.Object)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">Option name.</param>
 <param name="value">Option value.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadata.#ctor(System.String,System.Object,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">Option name.</param>
 <param name="value">Option value.</param>
 <param name="icon">Option icon.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadata.#ctor(Dynamicweb.Content.Items.Metadata.FieldOptionMetadata)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="copyFrom">Object to copy state from.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="copyFrom">copyFrom</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadata.CopyTo(Dynamicweb.Content.Items.Metadata.FieldOptionMetadata)">
 <summary>
 Copies the state of the current object into the given one.
 </summary>
 <param name="target">Object to copy state into.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="target">target</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadata.CompareTo(Dynamicweb.Content.Items.Metadata.FieldOptionMetadata)">
 <summary>
 Compares the current object with the given one and returns the comparison result.
 </summary>
 <param name="other">Object to compare with.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataCollection">
 <summary>
 Represents a collection of item field options metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionMetadataCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Metadata.FieldOptionMetadata})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="items">Elements to be copied to this collection.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.FieldOptionSourceType">
 <summary>
 Represents a field option source type.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Metadata.FieldOptionSourceType.Static">
 <summary>
 Static list of options.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Metadata.FieldOptionSourceType.Sql">
 <summary>
 List of options fetched from DB using SQL.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Metadata.FieldOptionSourceType.ItemType">
 <summary>
 List of options fetched from specific Item Type.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Metadata.FieldOptionSourceType.None">
 <summary>
 No options
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.FieldOptionSetupMetadata">
 <summary>
 Represents a field options setup metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.FieldOptionSetupMetadata.SourceType">
 <summary>
 Gets or sets the source type.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.FieldOptionSetupMetadata.Values">
 <summary>
 Gets or sets the list of options.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.FieldOptionSetupMetadata.Source">
 <summary>
 Returns current source of field options.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionSetupMetadata.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionSetupMetadata.#ctor(Dynamicweb.Content.Items.Metadata.FieldOptionMetadataSource)">
 <summary>
 Initializes a new instance of an object with specific option source.
 </summary>
 <param name="source"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionSetupMetadata.#ctor(Dynamicweb.Content.Items.Metadata.FieldOptionSetupMetadata)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="copyFrom">Object to copy state from.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="copyFrom">copyFrom</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionSetupMetadata.CopyTo(Dynamicweb.Content.Items.Metadata.FieldOptionSetupMetadata)">
 <summary>
 Copies the state of the current object into the given one.
 </summary>
 <param name="target">Object to copy state into.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="target">target</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionSetupMetadata.CompareTo(Dynamicweb.Content.Items.Metadata.FieldOptionSetupMetadata)">
 <summary>
 Compares the current object with the given one and returns the comparison result.
 </summary>
 <param name="other">Object to compare with.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionSetupMetadata.SerializeTo(System.Xml.XmlWriter)">
 <summary>
 Serializes options to xml.
 </summary>
 <param name="writer"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.FieldOptionSetupMetadata.DeserializeFrom(System.Xml.XmlReader)">
 <summary>
 Deserializes options from xml.
 </summary>
 <param name="reader"></param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.ItemType">
 <summary>
 Represents an item metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemType.Base">
 <summary>
 Gets or sets the system name of item type inherits from.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemType.Name">
 <summary>
 Gets or sets the user-friendly name of the item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemType.Description">
 <summary>
 Gets or sets the description of the item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemType.SystemName">
 <summary>
 Gets or sets the system name of the item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemType.Title">
 <summary>
 Gets or sets the title.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemType.FieldForTitle">
 <summary>
 Gets or sets the system name of field to use as title.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemType.Fields">
 <summary>
 Gets or sets the collection of item field metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemType.Layout">
 <summary>
 Gets or sets the item layout.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemType.Rules">
 <summary>
 Gets or sets the collection of creation rules.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemType.Icon">
 <summary>
 Gets or sets the icon.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemType.IconColor">
 <summary>
 Gets or sets the icon.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemType.LargeIcon">
 <summary>
 Gets or sets the large icon.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemType.IsEmpty">
 <summary>
 Gets value indicating whether this item is empty and doesn't contain any fields.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemType.Category">
 <summary>
 Gets or sets item type category.
 </summary>
 <value>Item type category.</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemType.IncludeInUrlIndex">
 <summary>
 Gets or sets the value indicating whether generate user friendly urls for this item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemType.SourceType">
 <summary>
 Gets or sets the activation source type.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemType.PageDefaultView">
 <summary>
 Gets or sets the value indicating whether use Item or Paragraph view for newly created page-item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemType.UseCache">
 <summary>
 Gets or sets the value indicating whether item should be cached.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemType.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemType.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="systemName">System name of an item type.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemType.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="systemName">System name of an item type.</param>
 <param name="name">User-friendly name of an item type.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemType.#ctor(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="copyFrom">Object to copy state from.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="copyFrom">copyFrom</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemType.CopyTo(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Copies the state of the current object into the given one.
 </summary>
 <param name="target">Object to copy state into.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="target">target</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemType.CompareTo(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Compares the current object with the given one and returns the comparison result.
 </summary>
 <param name="other">Object to compare with.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemType.ParseFrom(System.Type)">
 <summary>
 Returns the item metadata that is parsed from the metadata of the given type.
 </summary>
 <param name="type">Type to examine.</param>
 <returns>Item metadata.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.ItemTypeCategory">
 <summary>
 Represents an category of item metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemTypeCategory.FullName">
 <summary>
 Gets or sets the path of the category.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemTypeCategory.Name">
 <summary>
 Gets the user-friendly name of the category.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ItemTypeCategory.Location">
 <summary>
 Gets the location of the category.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemTypeCategory.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemTypeCategory.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="fullName">Category full name.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemTypeCategory.#ctor(Dynamicweb.Content.Items.Metadata.ItemTypeCategory)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="copyFrom">Object to copy state from.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="copyFrom">copyFrom</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemTypeCategory.CompareTo(Dynamicweb.Content.Items.Metadata.ItemTypeCategory)">
 <summary>
 Compares the current object with the given one and returns the comparison result.
 </summary>
 <param name="other">Object to compare with.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemTypeCategory.CopyTo(Dynamicweb.Content.Items.Metadata.ItemTypeCategory)">
 <summary>
 Copies the state of the current object into the given one.
 </summary>
 <param name="target">Object to copy state into.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="target">target</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemTypeCategory.IsValid(System.String)">
 <summary>
 Returns whether category full name is valid.
 </summary>
 <param name="name">Category full name.</param>
 <returns>Boolean.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.ItemMetadataCollection">
 <summary>
 Represents a collection of item metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemMetadataCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemMetadataCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Metadata.ItemType})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="items">Elements to be copied to this collection.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemMetadataCollection.Find(System.String)">
 <summary>
 Returns the first element with the given system name.
 </summary>
 <param name="systemName">System name.</param>
 <returns>The first element with the given system name.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ItemMetadataCollection.FindIndex(System.String)">
 <summary>
 Returns an index of a first element from the collection with the given system name.
 </summary>
 <param name="systemName">System name.</param>
 <returns>An index of a first element from the collection with the given system name.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.LayoutFieldMetadata">
 <summary>
 Represents a layout field metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.LayoutFieldMetadata.SystemName">
 <summary>
 Gets or sets the system name of the field.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutFieldMetadata.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutFieldMetadata.#ctor(Dynamicweb.Content.Items.Metadata.LayoutFieldMetadata)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="copyFrom">Object to copy state from.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="copyFrom">copyFrom</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutFieldMetadata.CopyTo(Dynamicweb.Content.Items.Metadata.LayoutFieldMetadata)">
 <summary>
 Copies the state of the current object into the given one.
 </summary>
 <param name="target">Object to copy state into.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="target">target</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutFieldMetadata.CompareTo(Dynamicweb.Content.Items.Metadata.LayoutFieldMetadata)">
 <summary>
 Compares the current object with the given one and returns the comparison result.
 </summary>
 <param name="other">Object to compare with.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.LayoutFieldMetadataCollection">
 <summary>
 Represents a collection of layout field metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutFieldMetadataCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutFieldMetadataCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Metadata.LayoutFieldMetadata})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="items">Elements to be copied to this collection.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutFieldMetadataCollection.Find(System.String)">
 <summary>
 Returns the first element with the given system name.
 </summary>
 <param name="systemName">Tab system name.</param>
 <returns>The first element with the given system name.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutFieldMetadataCollection.FindIndex(System.String)">
 <summary>
 Returns an index of a first element from the collection with the given system name.
 </summary>
 <param name="systemName">System name.</param>
 <returns>An index of a first element from the collection with the given system name.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata">
 <summary>
 Represents a layout group metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata.Name">
 <summary>
 Gets or sets the user-friendly name of the group.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata.SystemName">
 <summary>
 Gets or sets the system name of the group.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata.CollapsibleState">
 <summary>
 Gets or sets the collapsible state of the group.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata.Fields">
 <summary>
 Gets or sets the collection of fields within the given group.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata.VisibilityField">
 <summary>
 Gets or sets the visibility field of the group
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata.VisibilityCondition">
 <summary>
 Gets or sets the visibility condition operator of the group
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata.VisibilityConditionValueType">
 <summary>
 Gets or sets the type of visibility condition value of the group
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata.VisibilityConditionValue">
 <summary>
 Gets or sets the visibility condition value of the group
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata.#ctor(Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="copyFrom">Object to copy state from.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="copyFrom">copyFrom</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata.CopyTo(Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata)">
 <summary>
 Copies the state of the current object into the given one.
 </summary>
 <param name="target">Object to copy state into.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="target">target</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata.CompareTo(Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata)">
 <summary>
 Compares the current object with the given one and returns the comparison result.
 </summary>
 <param name="other">Object to compare with.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.LayoutGroupMetadataCollection">
 <summary>
 Represents a collection of layout group metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutGroupMetadataCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutGroupMetadataCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Metadata.LayoutGroupMetadata})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="items">Elements to be copied to this collection.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutGroupMetadataCollection.Find(System.String)">
 <summary>
 Returns the first element with the given system name.
 </summary>
 <param name="systemName">Tab system name.</param>
 <returns>The first element with the given system name.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutGroupMetadataCollection.FindIndex(System.String)">
 <summary>
 Returns an index of a first element from the collection with the given system name.
 </summary>
 <param name="systemName">System name.</param>
 <returns>An index of a first element from the collection with the given system name.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.LayoutMetadata">
 <summary>
 Represents an item layout metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.LayoutMetadata.Groups">
 <summary>
 Gets or sets the collection of groups.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.LayoutMetadata.IsEmpty">
 <summary>
 Gets value indicating whether this layout is empty.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutMetadata.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutMetadata.#ctor(Dynamicweb.Content.Items.Metadata.LayoutMetadata)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="copyFrom">Object to copy state from.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="copyFrom">copyFrom</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutMetadata.CopyTo(Dynamicweb.Content.Items.Metadata.LayoutMetadata)">
 <summary>
 Copies the state of the current object into the given one.
 </summary>
 <param name="target">Object to copy state into.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="target">target</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.LayoutMetadata.CompareTo(Dynamicweb.Content.Items.Metadata.LayoutMetadata)">
 <summary>
 Compares the current object with the given one and returns the comparison result.
 </summary>
 <param name="other">Object to compare with.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.MetadataContainer">
 <summary>
 Represents a metadata container.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.MetadataContainer.Items">
 <summary>
 Gets or sets the metadata for each item.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataContainer.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataContainer.#ctor(Dynamicweb.Content.Items.Metadata.MetadataContainer)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="copyFrom">Object to copy state from.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="copyFrom">copyFrom</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataContainer.CopyTo(Dynamicweb.Content.Items.Metadata.MetadataContainer)">
 <summary>
 Copies the state of the current object into the given one.
 </summary>
 <param name="target">Object to copy state into.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="target">target</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataContainer.CompareTo(Dynamicweb.Content.Items.Metadata.MetadataContainer)">
 <summary>
 Compares the current object with the given one and returns the comparison result.
 </summary>
 <param name="other">Object to compare with.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.MetadataManager">
 <summary>
 Represents a metadata manager. This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.MetadataManager.PrimarySource">
 <summary>
 Gets the primary metadata source.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.MetadataManager.Current">
 <summary>
 Gets the current instance of the metadata manager.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.MetadataManager.SourceLocation">
 <summary>
 Gets or sets the value which indicates the location of metadata storage.
 </summary>
 <returns>The value which indicates the location of metadata storage.</returns>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.GetMetadata">
 <summary>
 Returns the item metadata.
 </summary>
 <returns>Item metadata.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.UpdateMetadata(Dynamicweb.Content.Items.Metadata.MetadataContainer)">
 <summary>
 Updates the metadata.
 </summary>
 <param name="data">Metadata to update.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.DeleteMetadata(Dynamicweb.Content.Items.Metadata.MetadataContainer)">
 <summary>
 Deletes the metadata.
 </summary>
 <param name="data">Metadata to delete.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.GetItemType(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Returns the item metadata by its instance.
 </summary>
 <param name="item">Item.</param>
 <returns>Item metadata.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.GetItemType(System.String)">
 <summary>
 Returrn the item metadata by its system name.
 </summary>
 <param name="systemName">System name of an item type.</param>
 <returns>itemType</returns>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.GetItemFields(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Returns the item fields metadata by using the item instance.
 </summary>
 <param name="item">Item.</param>
 <returns>Item fields.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.GetItemFields(System.String)">
 <summary>
 Returns the item fields metadata by using the item system name.
 </summary>
 <param name="systemName">System name of an item type.</param>
 <returns>Item fields.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.GetItemFields(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Returns the item fields metadata by using the metadata.
 </summary>
 <param name="meta">The metadata.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.GetItemLayout(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Returns the metadata layout.
 </summary>
 <param name="meta">The target metadata.</param>
 <returns>The metadata layout.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.GetInheritanceChain(System.String)">
 <summary>
 Returns the list of item types which represents the inheritence chain of specified item type.
 </summary>
 <param name="systemName">The system name of item type.</param>
 <returns>The list of item types which represents the inheritence chain of specified item type</returns>
 <remarks>Collection also contains the target metadata.</remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.GetInheritanceChain(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Returns the list of item types which represents the inheritence chain of specified item type.
 </summary>
 <param name="meta">The item type.</param>
 <returns>The list of item types which represents the inheritence chain of specified item type.</returns>
 <remarks>Collection also contains the target metadata.</remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.GetInheritanceRoot(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Returns the root metadata in inheritance chain.
 </summary>
 <param name="meta">The target metadata.</param>
 <returns>The root metadata in inheritance chain.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.GetBaseItems(System.String)">
 <summary>
 Returns the list of item types the specified item is derived from.
 </summary>
 <param name="systemName">The item type system name.</param>
 <returns>The list of item types the specified item is derived from.</returns>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.GetBaseItems(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Returns the list of item types the specified item is derived from.
 </summary>
 <param name="meta">The item type.</param>
 <returns>The list of item types the specified item is derived from.</returns>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.CheckItemInheritance(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Returns the result of the integrity check of item parents
 </summary>
 <param name="meta">The item type.</param>
 <returns>The result of the integrity check of item parents</returns>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.CheckItemIntegrity(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Returns the result of the item integrity check
 </summary>
 <param name="meta">The item type.</param>
 <returns>The result of the item integrity check</returns>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.GetDerivedItems(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Returns the list of derived items metadata.
 </summary>
 <param name="meta">The target base metadata.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.Translate(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Returns a translated copy of item if translations are exists. 
 </summary>
 <param name="item">Item to translate</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.Sync">
 <summary>
 Synchronizes metadata of all sources.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.Sync(Dynamicweb.Content.Items.Metadata.MetadataContainer)">
 <summary>
 Synchronizes metadata of all sources for specified item types.
 </summary>
 <param name="data">Item types metadata to synchronize.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.ClearCache">
 <summary>
 Clear metadata cache.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.ClearOptionMetadataCache(Dynamicweb.Content.Items.Metadata.FieldOptionSourceType)">
 <summary>
 Clear metadata cache for selected item source type
 </summary>
 <param name="itemSourceType">FieldOptionSourceType.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.Initialize">
 <summary>
 Initialized metadata manager.
 </summary>
 <remarks>Do NOT use properties. Use members instead.</remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataManager.GetTranslationSource(System.String)">
 <summary>
 Get TranslationKeys source
 </summary>
 <param name="cacheKey">CacheKey for caching Source file</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.MetadataSource">
 <summary>
 Represents an item metadata source.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.MetadataSource.CacheKey">
 <summary>
 Get the source cache key.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.MetadataSource.Exists">
 <summary>
 Gets value indicating whether underlying metadata store exists.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataSource.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataSource.Read">
 <summary>
 Reads metadata from the underlying store.
 </summary>
 <returns>Metadata.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataSource.Read(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Reads metadata from the underlying store.
 </summary>
 <param name="systemNames">Metadata system names to read.</param>
 <returns>Metadata.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataSource.Write(Dynamicweb.Content.Items.Metadata.MetadataContainer)">
 <summary>
 Writes metadata to the underlying store.
 </summary>
 <param name="data">Metadata to write.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataSource.Write(Dynamicweb.Content.Items.Metadata.MetadataContainer,System.DateTime)">
 <summary>
 Writes metadata to the underlying store.
 </summary>
 <param name="data">Metadata to write.</param>
 <param name="timeStamp">Last write time stamp.</param>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataSource.Delete">
 <summary>
 Deletes the metadata from the underlying store.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataSource.Delete(Dynamicweb.Content.Items.Metadata.MetadataContainer)">
 <summary>
 Deletes the metadata from the underlying store.
 </summary>
 <param name="data">Metadata to delete.</param>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataSource.ClearCache">
 <summary>
 Clear metadata source cache.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataSource.GetLastWriteTime">
 <summary>
 Gets the list of system names and their last write time.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataSource.GetLastWriteTime(Dynamicweb.Content.Items.Metadata.MetadataContainer)">
 <summary>
 Gets the list of system names and their last write time for specified item types.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.MetadataSynchronizer">
 <summary>
 Represents metadata synchronizer class.  This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.MetadataSynchronizer.Sources">
 <summary>
 Gets or sets the metadata sources to sync.
 </summary>
 <value>The metadata sources to sync.</value>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataSynchronizer.Sync">
 <summary>
 Synchronizes all sources.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataSynchronizer.Sync(Dynamicweb.Content.Items.Metadata.MetadataContainer)">
 <summary>
 Synchronizes all sources for specific metadata.
 </summary>
 <param name="data">Item types metadata to synchronize.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataSynchronizer.SyncFrom(Dynamicweb.Content.Items.Metadata.MetadataSource)">
 <summary>
 Synchronizes all sources from specific source.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataSynchronizer.SyncFrom(Dynamicweb.Content.Items.Metadata.MetadataSource,Dynamicweb.Content.Items.Metadata.MetadataContainer)">
 <summary>
 Synchronizes all sources from specific source and metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataSynchronizer.UpdateMetadataSources(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Metadata.MetadataSource},Dynamicweb.Content.Items.Metadata.MetadataContainer,System.DateTime)">
 <summary>
 Updates specified sources.
 </summary>
 <param name="toUpdate">List of sources to update.</param>
 <param name="metadata">Metadata to update.</param>
 <param name="timeStamp">The last write time.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataSynchronizer.GetSourcesSyncTo(System.Collections.Generic.IEnumerable{System.Type})">
 <summary>
 Gets list of sources to update.
 </summary>
 <param name="from">List of sources from update.</param>
 <returns>List of sources to update.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataSynchronizer.GetSourceSyncFrom(System.String,System.Collections.Generic.Dictionary{System.Type,System.DateTime})">
 <summary>
 Determines the latest updated source for specifed item type.
 </summary>
 <param name="systemName">List of sources and their write time for specified item type.</param>
 <param name="sources">Item type's system name.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.MetadataSynchronizer.GetLastWriteTime(Dynamicweb.Content.Items.Metadata.MetadataContainer)">
 <summary>
 Gets the last time of write info from all sources.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.PerItemTypeXmlMetadataSource">
 <summary>
 Represents a metadata source that stores information about each item in a separate XML document.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.PerItemTypeXmlMetadataSource.FileNameFormat">
 <summary>
 Gets or sets the format for the item type file name.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.PerItemTypeXmlMetadataSource.BaseDirectory">
 <summary>
 Gets or sets the base directory for XML files containing item types.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.PerItemTypeXmlMetadataSource.Exists">
 <summary>
 Gets value indicating whether underlying metadata store exists.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.PerItemTypeXmlMetadataSource.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.PerItemTypeXmlMetadataSource.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="baseDirectory">A base directory for XML files containing item types.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.PerItemTypeXmlMetadataSource.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="fileNameFormat">The format for the item type file name.</param>
 <param name="baseDirectory">A base directory for XML files containing item types.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.PerItemTypeXmlMetadataSource.Delete">
 <summary>
 Deletes the metadata from the underlying store.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.PerItemTypeXmlMetadataSource.GetFiles">
 <summary>
 Returns a list of files from which to read item metadata.
 </summary>
 <returns>A list of files from which to read item metadata.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.PerItemTypeXmlMetadataSource.GetFiles(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Returns a list of files from which to read item metadata for specified item types.
 </summary>
 <returns>A list of files from which to read item metadata.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.PerItemTypeXmlMetadataSource.ReadDirectory(System.Collections.Generic.IEnumerable{System.String},System.Action{System.String,System.String})">
 <summary>
 Reads files and invokes specified method.
 </summary>
 <param name="systemNames">Collection of system names need to get paths for</param>
 <param name="action">First arguments is system name and second is path</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.SqlMetadataSource.GetLastWriteTime">
 <summary>
 Gets the last time of writing metadata for all item types.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.SqlMetadataSource.GetLastWriteTime(Dynamicweb.Content.Items.Metadata.MetadataContainer)">
 <summary>
 Gets the last time of writing metadata for specified item types.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.ValidatorMetadata">
 <summary>
 Represents a validator metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ValidatorMetadata.TypeName">
 <summary>
 Gets or sets tye assembly-qualified name of the validator type.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ValidatorMetadata.ErrorMessage">
 <summary>
 Gets or sets the error message displayed when validation fails.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.ValidatorMetadata.Parameters">
 <summary>
 Gets or sets the validator parameters.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ValidatorMetadata.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ValidatorMetadata.#ctor(Dynamicweb.Content.Items.Metadata.ValidatorMetadata)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="copyFrom">Object to copy state from.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="copyFrom">copyFrom</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ValidatorMetadata.CopyTo(Dynamicweb.Content.Items.Metadata.ValidatorMetadata)">
 <summary>
 Copies the state of the current object into the given one.
 </summary>
 <param name="target">Object to copy state into.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="target">target</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ValidatorMetadata.CompareTo(Dynamicweb.Content.Items.Metadata.ValidatorMetadata)">
 <summary>
 Compares the current object with the given one and returns the comparison result.
 </summary>
 <param name="other">Object to compare with.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.ValidatorMetadataCollection">
 <summary>
 Represents a collection of validator metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ValidatorMetadataCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ValidatorMetadataCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Metadata.ValidatorMetadata})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="items">Elements to be copied to this collection.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.ValidatorMetadataCollection.Find(System.String)">
 <summary>
 Returns the first element with the given type name.
 </summary>
 <param name="typeName">Assembly-qualified name of the validator.</param>
 <returns>The first element with the given type name.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.WebsiteItemTypeLayoutCollection.XmlKeyValue">
 <summary>
 Helper struct to control XmlSerialization process.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.XmlMetadataSource">
 <summary>
 Represents an XML metadata source.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.Path">
 <summary>
 Gets or sets the physical path to the metadata XML file.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.Exists">
 <summary>
 Gets value indicating whether underlying metadata store exists.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.ReaderSettings">
 <summary>
 Gets the reader settings.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.WriterSettings">
 <summary>
 Gets the writer settings.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.ValueConverter">
 <summary>
 Gets the value converter.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="path">The physical path to the metadata XML file.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.Read">
 <summary>
 Reads metadata from the underlying store.
 </summary>
 <returns>Metadata.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.Write(Dynamicweb.Content.Items.Metadata.MetadataContainer)">
 <summary>
 Writes metadata to the underlying store.
 </summary>
 <param name="data">Metadata to write.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.Delete">
 <summary>
 Deletes the metadata from the underlying store.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.ClearCache">
 <summary>
 Clear metadata source cache.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.ReadItems(System.Xml.XmlReader)">
 <summary>
 Reads all item metadata by using the given XML reader.
 </summary>
 <param name="reader">XML reader.</param>
 <returns>All item metadata read using the given XML reader.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.ReadLayout(System.Xml.XmlReader)">
 <summary>
 Reads layout by using the given XML reader.
 </summary>
 <param name="reader">XML reader to use.</param>
 <returns>Layout read using the given XML reader.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.ReadLayoutGroups(System.Xml.XmlReader)">
 <summary>
 Reads layout groups by using the given XML reader.
 </summary>
 <param name="reader">XML reader to use.</param>
 <returns>Layout groups read using the given XML reader.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.ReadLayoutFields(System.Xml.XmlReader)">
 <summary>
 Reads layout fields by using the given XML reader.
 </summary>
 <param name="reader">XML reader to use.</param>
 <returns>Layout fields read using the given XML reader.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.ReadCreationRules(System.Xml.XmlReader)">
 <summary>
 Reads all creation rules by using the given XML reader.
 </summary>
 <param name="reader">XML reader to use.</param>
 <returns>All creation rules read using the given XML reader.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.ReadFields(System.Xml.XmlReader,Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Reads all fields by using the given XML reader.
 </summary>
 <param name="reader">XML reader to use.</param>
 <returns>All fields read using the given XML reader.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.ReadOptionSetup(System.Xml.XmlReader)">
 <summary>
 Reads field options setup.
 </summary>
 <param name="reader">XML reader to use.</param>
 <returns>Field options setup read using the given XML reader.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.ReadValidators(System.Xml.XmlReader)">
 <summary>
 Reads validation by using the given XML reader.
 </summary>
 <param name="reader">XML reader to use.</param>
 <returns>Validation read using the given XML reader.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.ReadValidatorParameters(System.Xml.XmlReader)">
 <summary>
 Reads validator parameters by using the given XML reader.
 </summary>
 <param name="reader">XML reader to use.</param>
 <returns>Validator parameters read using the given XML reader.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.WriteItems(System.Xml.XmlWriter,Dynamicweb.Content.Items.Metadata.ItemMetadataCollection)">
 <summary>
 Writes all item metadata by using the given XML writer.
 </summary>
 <param name="writer">XML writer.</param>
 <param name="items">Items to write.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.WriteLayout(System.Xml.XmlWriter,Dynamicweb.Content.Items.Metadata.LayoutMetadata)">
 <summary>
 Writes all item layout metadata by using the given XML writer.
 </summary>
 <param name="writer">XML writer.</param>
 <param name="layout">Layout to write.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.WriteLayoutGroups(System.Xml.XmlWriter,Dynamicweb.Content.Items.Metadata.LayoutGroupMetadataCollection)">
 <summary>
 Writes all item layout groups metadata by using the given XML writer.
 </summary>
 <param name="writer">XML writer.</param>
 <param name="groups">Layout groups to write.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.WriteLayoutFields(System.Xml.XmlWriter,Dynamicweb.Content.Items.Metadata.LayoutFieldMetadataCollection)">
 <summary>
 Writes all item layout fields metadata by using the given XML writer.
 </summary>
 <param name="writer">XML writer.</param>
 <param name="fields">Layout fields to write.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.WriteCreationRules(System.Xml.XmlWriter,Dynamicweb.Content.Items.Metadata.CreationRuleMetadataCollection)">
 <summary>
 Writes all item creation rule metadata by using the given XML writer.
 </summary>
 <param name="writer">XML writer.</param>
 <param name="rules">Rules to write.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.WriteFields(System.Xml.XmlWriter,Dynamicweb.Content.Items.Metadata.FieldMetadataCollection)">
 <summary>
 Writes all item field metadata by using the given XML writer.
 </summary>
 <param name="writer">XML writer.</param>
 <param name="fields">Fields to write.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.WriteOptionSetup(System.Xml.XmlWriter,Dynamicweb.Content.Items.Metadata.FieldOptionSetupMetadata)">
 <summary>
 Writes item field options setup by using the given XML writer.
 </summary>
 <param name="writer">XML writer.</param>
 <param name="setup">Field options setup.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.WriteValidators(System.Xml.XmlWriter,Dynamicweb.Content.Items.Metadata.ValidatorMetadataCollection)">
 <summary>
 Writes all item field validators by using the given XML writer.
 </summary>
 <param name="writer">XML writer.</param>
 <param name="validators">Validators to write.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlMetadataSource.WriteSafe(System.Xml.XmlWriter,System.String,System.String)">
 <summary>
 Writes attribute string.
 </summary>
 <param name="writer">Writer.</param>
 <param name="n">Attribute name.</param>
 <param name="v">Attribute value.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.XmlWebsiteItemTypeLayouts">
 <summary>
 Represents a metadata source that stores information about each website item layouts in a separate XML document.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.XmlWebsiteItemTypeLayouts.FileNameFormat">
 <summary>
 Gets or sets the format for the item type file name.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Metadata.XmlWebsiteItemTypeLayouts.BaseDirectory">
 <summary>
 Gets or sets the base directory for XML files containing item types.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Metadata.XmlWebsiteItemTypeLayouts.#ctor(System.Int32)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Metadata.NamespaceDoc">
 <summary>
 The Dynamicweb.Content.Items.Metadata namespace handles the metadata information of an item type definition and describes how an item type is constructed
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.AccessBuilder">
 <summary>
 Represents an MS Access database builder.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.AccessBuilder.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.AccessBuilder.SelectTables">
 <summary>
 Selects all table names that correspond to items.
 </summary>
 <returns>All table names that correspond to items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.AccessBuilder.GetSqlColumnDefinition(Dynamicweb.Content.Items.Metadata.ItemField)">
 <summary>
 Returns a MS Access table column definition based on a given item field metadata.
 </summary>
 <param name="field">Item field metadata.</param>
 <returns>MS Access table column definition.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.AccessBuilder.GetSqlColumnDefinition(System.Data.DataTable,System.String,System.String)">
 <summary>
 Returns as MS Access table column definition based on a given table schema and column name.
 </summary>
 <param name="schema">Table schema.</param>
 <param name="tableName">Table name.</param>
 <param name="columnName">Column name.</param>
 <returns>MS Access table column definition based on a given table schema and column name.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.AccessBuilder.EnsureColumnConstraints(System.String)">
 <summary>
 Ensures that column constraints are loaded of a given table.
 </summary>
 <param name="tableName">Table name.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.AccessBuilder.GetSqlType(System.Type,System.Nullable{System.Int32})">
 <summary>
 Returns the name of the best matching MS Access type for a given CLR type.
 </summary>
 <param name="type">CLR type.</param>
 <param name="storage">Value indicating how much storage to allocate for a value of a given type. Passing null (Nothing in Visual Basic) indicates the best match.</param>
 <returns>The name of the best matching MS Access type for a given CLR type.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.AccessBuilder.GetRuntimeType(System.String,System.Nullable{System.Int32})">
 <summary>
 Returns the best matching CLR type that corresponds to a given MS Access type.
 </summary>
 <param name="type">MS Access type.</param>
 <param name="storage">Value indicating how much storage to allocate for a value of a given type. Passing null (Nothing in Visual Basic) indicates the best match.</param>
 <returns>The name of the best matching CLR type for a given MS Access type.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.AccessBuilder.GetDbSchemaTable(System.Guid,System.Object[])">
 <summary>
 Returns schema information from a data source as indicated by a GUID, and after it applies the specified restrictions.
 </summary>
 <param name="schema">One of the OleDbSchemaGuid values that specifies the schema table to return.</param>
 <param name="restrictions">An Object array of restriction values.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.ActivationManager">
 <summary>
 Represents an activation manager. This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.ActivationManager.Current">
 <summary>
 Gets the current instance of the activation manager.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.GetWorkflowTypes">
 <summary>
 Returns all workflow types.
 </summary>
 <returns>All workflow types.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.CreateWorkflow(System.Type)">
 <summary>
 Creates an instance of the specified activation workflow.
 </summary>
 <param name="workflowType">Workflow type.</param>
 <returns>An instance of the specified activation workflow.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.CreateWorkflow``1">
 <summary>
 Creates an instance of the specified activation workflow.
 </summary>
 <typeparam name="T">Workflow type.</typeparam>
 <returns>An instance of the specified activation workflow.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.GetRuleTypes">
 <summary>
 Returns all creation rule types.
 </summary>
 <returns>All creation rule types.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.GetRuleTypes(System.String)">
 <summary>
 Returns all creation rule types for specified target.
 </summary>
 <returns>All creation rule types for specified target.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.GetRuleName(Dynamicweb.Content.Items.Activation.CreationRule)">
 <summary>
 Gets the user-friendly name of the given creation rule.
 </summary>
 <param name="rule">Creation rule.</param>
 <returns>The user-friendly name of the creation rule.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.GetRuleName(System.Type)">
 <summary>
 Gets the user-friendly name of the given creation rule.
 </summary>
 <param name="ruleType">Rule type.</param>
 <returns>The user-friendly name of the creation rule.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.GetRuleSortIndex(System.Type)">
 <summary>
 Gets the sort index of the given creation rule.
 </summary>
 <param name="ruleType">Rule type.</param>
 <returns>The sort index of the given creation rule.</returns>
 <remarks>It's only for editor rendering.</remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.CreateRule(System.Type)">
 <summary>
 Creates an instance of the specified creation rule.
 </summary>
 <param name="ruleType">Rule type.</param>
 <returns>An instance of the specified creation rule.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.CreateRule``1">
 <summary>
 Creates an instance of the specified creation rule.
 </summary>
 <typeparam name="T">Rule type.</typeparam>
 <returns>An instance of the specified creation rule.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.GetAllowedItems(Dynamicweb.Content.Items.Activation.CreationRuleContext)">
 <summary>
 Returns value indicating whether items can be created according to the given creation rule context.
 </summary>
 <param name="context">Creation rule context.</param>
 <returns>Value indicating whether items can be created according to the given creation rule context.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.GetAllowedItems(Dynamicweb.Content.Items.Activation.CreationRuleContext,System.Collections.Generic.IEnumerable{System.Type})">
 <summary>
 Returns value indicating whether items can be created according to the given rules and context.
 </summary>
 <param name="context">Creation rule context.</param>
 <param name="ruleTypes">List of creation rule types.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.GetAllowedItemsForPagesAndParagraphs">
 <summary>
 Get items that can be created on page or paragraph.
 </summary>
 <returns>Returns items that can be created on page or paragraph.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.GetAllowedItemsByStructureType(Dynamicweb.Content.Items.Activation.StructureContextType)">
 <summary>
 Get items that can be created on specified StructureContextType (page/paragraph/ItemList etc.)
 </summary>
 <param name="structureType">Structure context type.</param>
 <returns>Returns items that can be created on specified StructureContextType.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.GetAllowedItemsByStructureTypes(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Activation.StructureContextType})">
 <summary>
 Get items that can be created on specified StructureContextType (page/paragraph/ItemList etc.)
 </summary>
 <returns>Returns items that can be created on specified StructureContextType.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.GetAllowedItemsForArea(Dynamicweb.Content.Area)">
 <summary>
 Get items that can be created on specified area.
 </summary>
 <returns>Returns items that can be created on specified area.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.GetAllowedItemsForArea(System.Int32)">
 <summary>
 Get items that can be created on specified area.
 </summary>
 <returns>Returns items that can be created on specified area.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.GetAllowedItemsForUserGroup">
 <summary>
 Get items that can be created on user group.
 </summary>
 <returns>Returns items that can be created on user group.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.GetAllowedItemsForUser">
 <summary>
 Get items that can be created on user.
 </summary>
 <returns>Returns items that can be created on user.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.GetAllowedChildTypes(Dynamicweb.Content.Items.Activation.CreationRuleContext)">
 <summary>
 Get structure type that can be created as child of specified item.
 </summary>
 <returns>Returns  structure type that can be created as child of specified item.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.GetAllowedChildTypes(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Get structure type that can be created as child of specified item.
 </summary>
 <returns>Returns  structure type that can be created as child of specified item.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationManager.CreateDatabaseBuilder">
 <summary>
 Creates new database builder.
 </summary>
 <returns>New database builder.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.ActivationSourceType">
 <summary>
 Defines where the item type comes from.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.ActivationWorkflow">
 <summary>
 Represents an item activation workflow.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.ActivationWorkflow.ValueConverter">
 <summary>
 Gets the value converter for converting values from and to string representation.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.ActivationWorkflow.IsUpdateError">
 <summary>
 Gets the value which shows is error happened during last operation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationWorkflow.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationWorkflow.Select">
 <summary>
 Read all item metadata that is currently available under this workflow.
 </summary>
 <returns>All item metadata that is currently available under this workflow.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationWorkflow.Update(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Metadata.ItemType})">
 <summary>
 Updates the underlying schema according to the given item metadata.
 </summary>
 <param name="items">Item metadata.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationWorkflow.Delete(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Metadata.ItemType})">
 <summary>
 Deletes parts of the underlying schema according to the given item metadata.
 </summary>
 <param name="items">Item metadata.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationWorkflow.LogError(Dynamicweb.Content.Items.Metadata.ItemType,System.Exception,System.String,System.Object[])">
 <summary>Logs an error. This is written in the error log and in the event log</summary>
 <param name="item">The item type</param>
 <param name="ex">Exception that caused the error</param>
 <param name="message">The message to log</param>
 <param name="args">String.Format args to the message</param>
 <remarks>
  <para>The LogError methods creates a text file with error description.</para>
 </remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.ActivationWorkflowCollection">
 <summary>
 Represents a collection of activation workflows.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationWorkflowCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ActivationWorkflowCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Activation.ActivationWorkflow})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="items">Elements to be copied to this collection.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.AreaRestrictionRule">
 <summary>
 Represents an area restriction rule.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.AreaRestrictionRule.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.AreaRestrictionRule.CanCreate(Dynamicweb.Content.Items.Activation.CreationRuleContext)">
 <summary>
 Returns value indicating whether item of can be created according to the given creation context.
 </summary>
 <param name="context">Creation context.</param>
 <returns>Value indicating whether item of can be created according to the given creation context.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.AreaRestrictionRule.CreateEditor(Dynamicweb.Content.Items.Activation.CreationRuleEditorContext)">
 <summary>
 Returns an instance of an object that is responsible for editing rule value.
 </summary>
 <returns>An instance of an object that is responsible for editing rule value.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.ChildItemTypeRestrictionRule">
 <summary>
 Represents a child item type restriction rule.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.ChildItemTypeRestrictionRule.IsBroadcast">
 <summary>
 Gets value indicating whether the calling context must be aware of this rule rather than a rule aware of the context.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ChildItemTypeRestrictionRule.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ChildItemTypeRestrictionRule.CreateEditor(Dynamicweb.Content.Items.Activation.CreationRuleEditorContext)">
 <summary>
 Returns an instance of an object that is responsible for editing rule value.
 </summary>
 <returns>An instance of an object that is responsible for editing rule value.</returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.ChildRestrictionRule.IsBroadcast">
 <summary>
 Gets value indicating whether the calling context must be aware of this rule rather than a rule aware of the context.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ChildRestrictionRule.CreateEditor(Dynamicweb.Content.Items.Activation.CreationRuleEditorContext)">
 <summary>
 Returns an instance of an object that is responsible for editing rule value.
 </summary>
 <returns>An instance of an object that is responsible for editing rule value.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.ChildRestrictionType">
 <summary>
 Defines what type of child can't be created.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.CodeFirstActivationWorkflow">
 <summary>
 Represents a code first activation workflow.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.CodeFirstActivationWorkflow.KnownTypes">
 <summary>
 Gets the mappings between item system names and CLR types corresponding to them.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.CodeFirstActivationWorkflow.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.CodeFirstActivationWorkflow.Select">
 <summary>
 Read all item metadata that is currently available under this workflow.
 </summary>
 <returns>All item metadata that is currently available under this workflow.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.CodeFirstActivationWorkflow.Select(System.Collections.Generic.IEnumerable{System.Type})">
 <summary>
 Read item metadata that is currently available for the given item types.
 </summary>
 <param name="itemTypes">Item types to examine.</param>
 <returns>All item metadata that is currently available for the given item types.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.CodeFirstActivationWorkflow.Update(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Metadata.ItemType})">
 <summary>
 Updates the underlying schema according to the given item metadata.
 </summary>
 <param name="items">Item metadata.</param>
 <exception cref="T:System.NotSupportedException">This operation is not supported.</exception>
 <remarks>This method always throws <see cref="T:System.NotSupportedException">NotSupportedException</see> because CLR item types cannot be altered at runtime.</remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.CodeFirstActivationWorkflow.Delete(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Metadata.ItemType})">
 <summary>
 Deletes parts of the underlying schema according to the given item metadata.
 </summary>
 <param name="items">Item metadata.</param>
 <exception cref="T:System.NotSupportedException">This operation is not supported.</exception>
 <remarks>This method always throws <see cref="T:System.NotSupportedException">NotSupportedException</see> because CLR item types cannot be altered at runtime.</remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.CodeFirstActivationWorkflow.SelectItem(System.Type)">
 <summary>
 Selects item metadata.
 </summary>
 <param name="t">Type.</param>
 <returns>Item metadata.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.CodeFirstActivationWorkflow.SelectLayout(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Dynamicweb.Content.Items.Metadata.FieldMetadataCollection)">
 <summary>
 Selects item layout.
 </summary>
 <param name="properties">Properties.</param>
 <param name="fieldsMetadata">The item fields.</param>
 <returns>Item layout.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.CodeFirstActivationWorkflow.SelectField(System.Reflection.PropertyInfo)">
 <summary>
 Selects field metadata.
 </summary>
 <param name="p">Property information.</param>
 <returns>Field metadata.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.CodeFirstActivationWorkflow.SelectFieldInternal(System.Reflection.PropertyInfo,System.Boolean,System.Type)">
 <summary>
 Selects field metadata.
 </summary>
 <param name="p">Property information.</param>
 <param name="validateDeclaringType">Value indicating whether to validate declaring type.</param>
 <returns>Field metadata.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.CodeFirstActivationWorkflow.MapValidatorParameters(System.Type,System.Collections.Specialized.NameValueCollection)">
 <summary>
 Maps parsed validator parameters to a dictionary of trongly typed values.
 </summary>
 <param name="validatorType">Validator type.</param>
 <param name="parsedParameters">Parsed parameters.</param>
 <returns>Mapped parameters.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.CreationRule">
 <summary>
 Represents an item instance creation rule.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.CreationRule.Value">
 <summary>
 Gets or sets the currently selected rule value.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.CreationRule.Item">
 <summary>
 Gets or sets the item to which this rule applies.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.CreationRule.IsBroadcast">
 <summary>
 Gets value indicating whether the calling context must be aware of this rule rather than a rule aware of the context.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.CreationRule.CssClass">
 <summary>
 Gets or sets the editor's additional CSS class.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.CreationRule.SourceType">
 <summary>
 Gets or sets the activation source type.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.CreationRule.CachedLayout">
 <summary>
 Gets or sets the cached layout.
 </summary>
 <value>
 The cached layout.
 </value>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.CreationRule.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.CreationRule.CanCreate(Dynamicweb.Content.Items.Activation.CreationRuleContext)">
 <summary>
 Returns value indicating whether item of can be created according to the given creation context.
 </summary>
 <param name="context">Creation context.</param>
 <returns>Value indicating whether item of can be created according to the given creation context.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.CreationRule.CreateEditor(Dynamicweb.Content.Items.Activation.CreationRuleEditorContext)">
 <summary>
 Returns an instance of an object that is responsible for editing rule value.
 </summary>
 <returns>An instance of an object that is responsible for editing rule value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.CreationRule.Parse(System.Object)">
 <summary>
 Converts value to Collection.
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.CreationRuleBase.CachedMetadata">
 <summary>
 Gets or sets the cached metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.CreationRuleContext">
 <summary>
 Represents a creation rule context.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.CreationRuleContext.AreaId">
 <summary>
 Gets or sets the Id of the language area under which the item is about to created.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.CreationRuleContext.PageId">
 <summary>
 Gets or sets the Id of the page to which the item is about to be attached.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.CreationRuleContext.ParentPageId">
 <summary>
 Gets or sets the Id of the parent page to which the item as about to be attached.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.CreationRuleContext.StructureType">
 <summary>
 Gets or sets the type of structure to which the item is about to be attached.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.CreationRuleContext.Container">
 <summary>
 Gets or sets the name of container to which the item is about to be attached.
 </summary>
 <remarks>Only for paragraph based items.</remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.CreationRuleContext.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.CreationRuleEditorContext">
 <summary>
 Represents a editor context.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.CreationRuleEditorContext.Object">
 <summary>
 Gets or sets context object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.CreationRuleEditorContext.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.DatabaseBuilder">
 <summary>
 Represents a database builder.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.DatabaseBuilder.Connection">
 <summary>
 Gets or sets the connection to reuse when building database.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.DatabaseBuilder.Transaction">
 <summary>
 Gets or sets the transaction to reuse when building database.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.DatabaseBuilder.TableNamePrefix">
 <summary>
 Gets the table name prefix.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.DatabaseBuilder.PrimaryKeyFieldName">
 <summary>
 Gets the key field name
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.DatabaseBuilder.PrimaryKeyFieldDefinition">
 <summary>
 Gets the key field definition
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.DatabaseBuilder.TypeFieldName">
 <summary>
 Gets the type field name
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.DatabaseBuilder.ColumnConstraints">
 <summary>
 Gets the list of column constraint names for each of the tables processed so far.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Activation.DatabaseBuilder._disposedValue">
 <summary>
 Indicates whether the call to object disposal was made.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.DatabaseBuilder.ItemBaseFields">
 <summary>
 Gets or sets the item base fields.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.DatabaseBuilder.CanAlterDefaultValues">
 <summary>
 Gets value indicating whether default values can be altered.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.DatabaseBuilder.ValueConverter">
 <summary>
 Gets the value converter.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.GetTableName(System.String)">
 <summary>
 Returns the name of the database table for a given item system name.
 </summary>
 <param name="systemName">Item system name.</param>
 <returns>Database table name.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.GetColumnName(System.String)">
 <summary>
 Returns the name of the database table column for a given field system name.
 </summary>
 <param name="systemName">Field system name.</param>
 <returns>Database table column name.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.TableExists(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Determines whether the database table associated with the given item exists.
 </summary>
 <param name="item">Item metadata.</param>
 <returns>Value indicating whether table exists.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.DropTable(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Deletes the database table associated with the given
 </summary>
 <param name="item">Item metadata that corresponds to a target database table.</param>
 <returns>Value indicating whether operation succeeded.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.CreateTable(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Creates new database table for the given item.
 </summary>
 <param name="item">Item metadata.</param>
 <returns>Value indicating whether operation succeeded.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.SyncTable(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Synchronizes the corresponding database table according to the given item.
 </summary>
 <param name="item">Item metadata.</param>
 <returns>Value indicating whether operation succeeded.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.SelectTables">
 <summary>
 Selects all table names that correspond to items.
 </summary>
 <returns>All table names that correspond to items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.GetSqlColumnDefinition(Dynamicweb.Content.Items.Metadata.ItemField)">
 <summary>
 Returns a db specific table column definition based on a given item field metadata.
 </summary>
 <param name="field">Item field metadata.</param>
 <returns>db specific table column definition.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.GetSqlColumnDefinition(System.Data.DataTable,System.String,System.String)">
 <summary>
 Returns as db specific table column definition based on a given table schema and column name.
 </summary>
 <param name="schema">Table schema.</param>
 <param name="tableName">Table name.</param>
 <param name="columnName">Column name.</param>
 <returns>db specific table column definition based on a given table schema and column name.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.OnBeforeExecute(System.String,System.Data.IDbConnection)">
 <summary>
 Occurs before the given T-SQL command is executed against the given database connection.
 </summary>
 <param name="commandText">Command text.</param>
 <param name="connection">Database connection.</param>
 <returns>Command to execute.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.GetRuntimeType(System.String,System.Nullable{System.Int32})">
 <summary>
 Returns the best matching CLR type that corresponds to a given database type.
 </summary>
 <param name="type">database type.</param>
 <param name="storage">Value indicating how much storage to allocate for a value of a given type. Passing null (Nothing in Visual Basic) indicates the best match.</param>
 <returns>The name of the best matching CLR type for a given database type.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.EnsureColumnConstraints(System.String)">
 <summary>
 Ensures that column constraints are loaded of a given table.
 </summary>
 <param name="tableName">Table name.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.DropConstraints(System.String,System.String)">
 <summary>
 Drops constraints on a given column.
 </summary>
 <param name="tableName">Table name.</param>
 <param name="columnName">Column name.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.Dispose(System.Boolean)">
 <summary>
 Disposes builder resources.
 </summary>
 <param name="disposing">Value indicating whether managed disposing takes place.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.Dispose">
 <summary>
 Disposes builder resources.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.TrimMatching(System.String,System.Char,System.Char)">
 <summary>
 Trims matching characters from the given string.
 </summary>
 <param name="input">Input string.</param>
 <param name="start">Start character.</param>
 <param name="end">End character.</param>
 <returns>Trimmed string.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.GetStorage(System.Type)">
 <summary>
 Returns a storage required by the given editor type.
 </summary>
 <param name="editorType">Editor type.</param>
 <returns>A storage required by the given editor type.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.GetColumnNameBySchema(System.Data.DataRow)">
 <summary>
 Returns the value of the "ColumnName" cell.
 </summary>
 <param name="row">Row.</param>
 <returns>The value of the "ColumnName" cell.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.FindSchemaRow(System.Data.DataTable,System.String)">
 <summary>
 Returns the data table schema row that corresponds to a given column.
 </summary>
 <param name="schema">Table schema.</param>
 <param name="columnName">Column name.</param>
 <returns>The data table schema row that corresponds to a given column.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseBuilder.DropConstraintsOnItem(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 TFS task 15621 - remove constraints and default values from item tables
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.IdGenerator">
 <summary>
 Represents an item Id generator. This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.IdGenerator.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.IdGenerator.Next``1">
 <summary>
 Generates the new Id for a given item type.
 </summary>
 <typeparam name="T">Item type.</typeparam>
 <returns>New Id for a given item type.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.IdGenerator.Next(System.String)">
 <summary>
 Generates the new Id for a given item type.
 </summary>
 <param name="itemType">Item type.</param>
 <returns>New Id for a given item type.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.IdGenerator.Next``1(System.Int32)">
 <summary>
 Generates new Ids for a given item type.
 </summary>
 <typeparam name="T">Item type.</typeparam>
 <param name="amount">The number of Ids to generate.</param>
 <returns>New Ids for a given item type.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.IdGenerator.Next(System.String,System.Int32)">
 <summary>
 Generates new Ids for a given item type.
 </summary>
 <param name="itemType">Item type.</param>
 <param name="amount">The number of Ids to generate.</param>
 <returns>New Ids for a given item type.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.IdGenerator.Peek``1">
 <summary>
 Returns the next available Id for a given item type.
 </summary>
 <typeparam name="T">Item type.</typeparam>
 <returns>The next available Id for a given item type.</returns>
 <remarks>This method does not update the Id counter and should not be used for assigning Ids to items.</remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.IdGenerator.Peek(System.String)">
 <summary>
 Returns the next available Id for a given item type.
 </summary>
 <param name="itemType">Item type.</param>
 <returns>The next available Id for a given item type.</returns>
 <remarks>This method does not update the Id counter and should not be used for assigning Ids to items.</remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.IdGenerator.SelectNext(System.String,System.Int32)">
 <summary>
 Selectes the next available Ids for a given item type.
 </summary>
 <param name="itemType">Item type.</param>
 <param name="amount">The number of Ids to include into the sequence.</param>
 <returns>The sequence representing the next available Ids for a given item type.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.IdGenerator.UpdateCurrent(System.Boolean,System.String,System.Int32)">
 <summary>
 Updates the current Id for a given item type with the given one.
 </summary>
 <param name="hasRecords">Value indicating whether table already contains record for a given type.</param>
 <param name="itemType">Item type.</param>
 <param name="current">New Id.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ModuleAttachmentRestrictionRule.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ModuleAttachmentRestrictionRule.CreateEditor(Dynamicweb.Content.Items.Activation.CreationRuleEditorContext)">
 <summary>
 Returns an instance of an object that is responsible for editing rule value.
 </summary>
 <returns>An instance of an object that is responsible for editing rule value.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.ParagraphItemTypeRestrictionRule">
 <summary>
 Class ParagraphItemTypeRestrictionRule used for restricting where paragraph items can be created in the page structure.
 </summary>
 <seealso cref="T:Dynamicweb.Content.Items.Activation.ChildItemTypeRestrictionRule" />
</member>
<member name="T:Dynamicweb.Content.Items.Activation.SubPageItemTypeRestrictionRule">
 <summary>
 Class SubPageItemTypeRestrictionRule used for restricting where page items can be created in the page structure.
 </summary>
 <seealso cref="T:Dynamicweb.Content.Items.Activation.ChildItemTypeRestrictionRule" />
</member>
<member name="T:Dynamicweb.Content.Items.Activation.ParentRestrictionRule">
 <summary>
 Represents an restriction rule which allows to limit parent type for item.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Activation.ParentRestrictionRule.ParentType.RootOfWebsite">
 <summary>
 Do not allow in root of website
 </summary>
</member>
<member name="F:Dynamicweb.Content.Items.Activation.ParentRestrictionRule.ParentType.RegularPage">
 <summary>
 Do not allow under a regular page
 </summary>
</member>
<member name="F:Dynamicweb.Content.Items.Activation.ParentRestrictionRule.ParentType.ItemType">
 <summary>
 Do not allow under an item type page
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ParentRestrictionRule.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ParentRestrictionRule.CanCreate(Dynamicweb.Content.Items.Activation.CreationRuleContext)">
 <summary>
 Returns value indicating whether item of can be created according to the given creation context.
 </summary>
 <param name="context">Creation context.</param>
 <returns>Value indicating whether item of can be created according to the given creation context.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ParentRestrictionRule.CreateEditor(Dynamicweb.Content.Items.Activation.CreationRuleEditorContext)">
 <summary>
 Returns an instance of an object that is responsible for editing rule value.
 </summary>
 <returns>An instance of an object that is responsible for editing rule value.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.ItemTypeRestrictionRule">
 <summary>
 Represents a item type restriction rule.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.ItemTypeRestrictionRule.IsBroadcast">
 <summary>
 Gets value indicating whether the calling context must be aware of this rule rather than a rule aware of the context.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.SqlBuilder">
 <summary>
 Represents an SQL Server database builder.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.SqlBuilder.ColumnDefault">
 <summary>
 Provides information about column default value.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.SqlBuilder.ColumnDefault.DefaultValue">
 <summary>
 Gets or sets the default value of a column.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.SqlBuilder.ColumnDefault.DefaultValueConstraint">
 <summary>
 Gets or sets the name of the default value constraint.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.SqlBuilder.ColumnDefault.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Activation.SqlBuilder.CanAlterDefaultValues">
 <summary>
 Gets value indicating whether default values can be altered.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.SqlBuilder.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.SqlBuilder.SelectTables">
 <summary>
 Selects all table names that correspond to items.
 </summary>
 <returns>All table names that correspond to items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.SqlBuilder.GetSqlColumnDefinition(Dynamicweb.Content.Items.Metadata.ItemField)">
 <summary>
 Returns a T-SQL table column definition based on a given item field metadata.
 </summary>
 <param name="field">Item field metadata.</param>
 <returns>T-SQL table column definition.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.SqlBuilder.GetSqlColumnDefinition(System.Data.DataTable,System.String,System.String)">
 <summary>
 Returns as T-SQL table column definition based on a given table schema and column name.
 </summary>
 <param name="schema">Table schema.</param>
 <param name="tableName">Table name.</param>
 <param name="columnName">Column name.</param>
 <returns>T-SQL table column definition based on a given table schema and column name.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.SqlBuilder.EnsureColumnConstraints(System.String)">
 <summary>
 Ensures that column constraints are loaded of a given table.
 </summary>
 <param name="tableName">Table name.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.SqlBuilder.GetSqlType(System.Type,System.Nullable{System.Int32})">
 <summary>
 Returns the name of the best matching T-SQL type for a given CLR type.
 </summary>
 <param name="type">CLR type.</param>
 <param name="storage">Value indicating how much storage to allocate for a value of a given type. Passing null (Nothing in Visual Basic) indicates the best match.</param>
 <returns>The name of the best matching T-SQL type for a given CLR type.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.SqlBuilder.GetRuntimeType(System.String,System.Nullable{System.Int32})">
 <summary>
 Returns the best matching CLR type that corresponds to a given T-SQL type.
 </summary>
 <param name="type">T-SQL type.</param>
 <param name="storage">Value indicating how much storage to allocate for a value of a given type. Passing null (Nothing in Visual Basic) indicates the best match.</param>
 <returns>The name of the best matching CLR type for a given T-SQL type.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.DatabaseFirstActivationWorkflow">
 <summary>
 Represents a database first activation workflow.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Activation.DatabaseFirstActivationWorkflow._itemBaseFields">
 <summary>
 Gets or sets the item base fields.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseFirstActivationWorkflow.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseFirstActivationWorkflow.Select">
 <summary>
 Read all item metadata that is currently available under this workflow.
 </summary>
 <returns>All item metadata that is currently available under this workflow.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseFirstActivationWorkflow.Update(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Metadata.ItemType})">
 <summary>
 Updates the underlying schema according to the given item metadata.
 </summary>
 <param name="items">Item metadata.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.DatabaseFirstActivationWorkflow.Delete(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Metadata.ItemType})">
 <summary>
 Deletes parts of the underlying schema according to the given item metadata.
 </summary>
 <param name="items">Item metadata.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.ModelFirstActivationWorkflow">
 <summary>
 Represents a model first activation workflow.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ModelFirstActivationWorkflow.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ModelFirstActivationWorkflow.Select">
 <summary>
 Read all item metadata that is currently available under this workflow.
 </summary>
 <returns>All item metadata that is currently available under this workflow.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ModelFirstActivationWorkflow.Update(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Metadata.ItemType})">
 <summary>
 Updates the underlying schema according to the given item metadata.
 </summary>
 <param name="items">Item metadata.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.ModelFirstActivationWorkflow.Delete(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Metadata.ItemType})">
 <summary>
 Deletes parts of the underlying schema according to the given item metadata.
 </summary>
 <param name="items">Item metadata.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.StructureContextType">
 <summary>
 Defines what the item should be used for.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.StructureRestrictionRule">
 <summary>
 Represents an restriction rule which allows to select what the item should be used for website, page and/or paragraph.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.StructureRestrictionRule.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.StructureRestrictionRule.CanCreate(Dynamicweb.Content.Items.Activation.CreationRuleContext)">
 <summary>
 Returns value indicating whether item of can be created according to the given creation context.
 </summary>
 <param name="context">Creation context.</param>
 <returns>Value indicating whether item of can be created according to the given creation context.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Activation.StructureRestrictionRule.CreateEditor(Dynamicweb.Content.Items.Activation.CreationRuleEditorContext)">
 <summary>
 Returns an instance of an object that is responsible for editing rule value.
 </summary>
 <returns>An instance of an object that is responsible for editing rule value.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Activation.NamespaceDoc">
 <summary>
 The Dynamicweb.Content.Items.Activation namespace handles the logic that registers item types and the rule base for where and when items can be created in the data structure
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Collection`1">
 <summary>
 Represents a collection of elements.
 </summary>
 <typeparam name="T">Element type.</typeparam>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Collection`1.Comparer">
 <summary>
 Represents a collection element comparer.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Collection`1.Comparer.Comparison">
 <summary>
 Gets or sets the comparison.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Collection`1.Comparer.#ctor(System.Comparison{`0})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="comparison">Comparison.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="comparison">comparison</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Collection`1.Comparer.Compare(`0,`0)">
 <summary>
 Compares two objects and returns the comparison result.
 </summary>
 <param name="x">First object.</param>
 <param name="y">Second object.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Collection`1.Data">
 <summary>
 Gets the underlying data storage.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Collection`1.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Collection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="items">Elements to be copied to this collection.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Collection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
 <summary>
 Adds a given elements to the end of the collection.
 </summary>
 <param name="items">Elements to add.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Collection`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
 <summary>
 Removes a given elements from the collection.
 </summary>
 <param name="items">Elements to remove.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Collection`1.Find(System.Func{`0,System.Boolean})">
 <summary>
 Returns a first element from the collection that satisfies the condition.
 </summary>
 <param name="predicate">Condition.</param>
 <returns>A first element from the collection that satisfies the condition.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Collection`1.FindIndex(System.Func{`0,System.Boolean})">
 <summary>
 Returns an index of a first element from the collection that satisfies the condition.
 </summary>
 <param name="predicate">Condition.</param>
 <returns>An index of a first element from the collection that satisfies the condition.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Collection`1.FindAll(System.Func{`0,System.Boolean})">
 <summary>
 Returns all elements from the collection that satisfies the condition.
 </summary>
 <param name="predicate">Condition.</param>
 <returns>All elements from the collection that satisfies the condition.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Collection`1.Sort(System.Comparison{`0})">
 <summary>
 Sorts elements according to the given comparison.
 </summary>
 <param name="comparison">Comparison.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Collection`1.Sort(System.Collections.Generic.IComparer{`0})">
 <summary>
 Sorts elements according to the given comparer.
 </summary>
 <param name="comparer">Comparer.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Item">
 <summary>
 Represents an item whose fields can be dynamically added and removed at run time. This class cannot be inherited.
 </summary>
 <remarks>For implementing your own item types, use <see cref="T:Dynamicweb.Content.Items.ItemEntry">ItemEntry</see> as a base type.</remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Item.Data">
 <summary>
 Gets the underlying field data.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Item.SystemName">
 <summary>
 Gets or sets the system name of the associated item type.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Item.Id">
 <summary>
 Gets or sets the item Id.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Item.Sort">
 <summary>
 Gets or sets the number indicating the position of the item within a list of items.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Item.Count">
 <summary>
 Gets the total number of fields within the given item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Item.IsReadOnly">
 <summary>
 Gets value indicating whether this item is read-only and no more fields can be added or removed.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Item.Names">
 <summary>
 Gets all field names.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Item.Values">
 <summary>
 Gets all field values.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Item.Item(System.String)">
 <summary>
 Gets or sets the field with the given name.
 </summary>
 <param name="key">Field name.</param>
 <value>Field value.</value>
 <returns>Field value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="systemName">Item system name.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="systemName">Item system name.</param>
 <param name="id">Item Id.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.#ctor(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="item">Item whose data is used to fill this object with.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="fields">Fields to fill this object with.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="reader">A data reader to read fields from.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.#ctor(System.Data.DataRow)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="row">A data row to reader fields from.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.DeserializeFrom(System.Data.IDataReader)">
 <summary>
 Deserializes the state of the current object from a given data reader.
 </summary>
 <param name="reader">A data reader to deserialize this object from.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.DeserializeFrom(System.Data.DataRow)">
 <summary>
 Deserializes the state of the current object from a given data row.
 </summary>
 <param name="row">A data row to deserialize this object from.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.DeserializeFrom(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Deserializes the state of the current object from a given item.
 </summary>
 <param name="item">Item to to deserialize this object from.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.DeserializeFrom(System.Collections.Generic.IDictionary{System.String,System.Object})">
 <summary>
 Deserializes the state of the current object from a given set of key-value pairs.
 </summary>
 <param name="dictionary">A set of key-value pairs to deserialize this object from.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.SerializeTo(System.Data.DataRow)">
 <summary>
 Serializes the state of the current object into the given data row.
 </summary>
 <param name="row">Data row to serialize this object into.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.SerializeTo(System.Collections.Generic.IDictionary{System.String,System.Object})">
 <summary>
 Serializes the state of the current object into the given dictionary.
 </summary>
 <param name="dictionary">Dictionary to serialize this object into.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
 <summary>
 Adds new field to this item.
 </summary>
 <param name="item">Field to add.</param>
 <remarks>If the field with the given name already exists, its value will be overwritten.</remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.Clear">
 <summary>
 Removes all fields from this item.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
 <summary>
 Returns value indicating whether the given field is defined on a given item.
 </summary>
 <param name="item">Field to search for.</param>
 <returns>Value indicating whether the given field is defined on a given item.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
 <summary>
 Copies all fields from the given item into the given array.
 </summary>
 <param name="array">Array to copy to.</param>
 <param name="arrayIndex">Array index.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
 <summary>
 Removes the given field from the item.
 </summary>
 <param name="item">Field to remove.</param>
 <returns>Value indicating whether field has been removed successfully.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.AddHidden(System.String,System.Object)">
 <summary>
 Adds new field to this item.
 </summary>
 <param name="fieldName">Field name.</param>
 <param name="fieldValue">Field value.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.ContainsKey(System.String)">
 <summary>
 Returns value indicating whether item contains the field with the given name.
 </summary>
 <param name="key">Field name.</param>
 <returns>Value indicating whether item contains the field with the given name.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.RemoveHidden(System.String)">
 <summary>
 Removes the given field.
 </summary>
 <param name="fieldName">Field name.</param>
 <returns>Value indicating whether field has been removed.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.TryGetValue(System.String,System.Object@)">
 <summary>
 Tries to get the value of a given field.
 </summary>
 <param name="key">Field name.</param>
 <param name="value">Field value.</param>
 <returns>Value indicating whether field value was successfully retrieved.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.GetEnumerator">
 <summary>
 Returns an enumerator object that is used to iterate over the fields of this item.
 </summary>
 <returns>An enumerator object that is used to iterate over the fields of this item.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.GetEnumeratorHidden">
 <summary>
 Returns an enumerator object that is used to iterate over the fields of this item.
 </summary>
 <returns>An enumerator object that is used to iterate over the fields of this item.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.GetItemById(System.String,System.String)">
 <summary>
 Returns the item by its Id.
 </summary>
 <param name="itemType">Item type.</param>
 <param name="id">Item Id.</param>
 <returns>The item.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.GetItemsByPageId(System.Int32)">
 <summary>
 Returns items by their page Id.
 </summary>
 <param name="pageId">Page Id.</param>
 <returns>The items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Item.GetItemsByPageId(System.String,System.Int32)">
 <summary>
 Returns items by their page Id.
 </summary>
 <param name="itemType">Item type.</param>
 <param name="pageId">Page Id.</param>
 <returns>The items.</returns>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.ItemContext.PerformCleanup">
 <summary>
 Clean item info from related page/paragraph entry or not.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.ItemContext.#ctor(Dynamicweb.Data.DbObject)">
 <summary>
 Creates an items context instance
 </summary>
 <param name="context">Item based object</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemContext.IsContext(Dynamicweb.Core.Entity{System.Int32})">
 <summary>
 Determines whether the specified object is context.
 </summary>
 <param name="obj">Instance of item based type.</param>
 <returns>True/False</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemContext.IsContext(Dynamicweb.Data.DbObject)">
 <summary>
 Determines whether the specified object is context.
 </summary>
 <param name="obj">Instance of item based type.</param>
 <returns>True/False</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.ItemEntry">
 <summary>
 Represents a base class for all strongly-typed items.
 </summary>
 <example>
 <code description="Example of code-first item with all fields" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ExampleAllFieldTypesItem.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.ItemEntry.Id">
 <summary>
 Gets or sets the item Id.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.ItemEntry.Sort">
 <summary>
 Gets or sets the number indicating the position of the item within a list of items.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.ItemEntry.IsDraft">
 <summary>
 Gets or sets is item in draft state
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.ItemEntry.VersionDate">
 <summary>
 Gets or sets date of item's draft state
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntry.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntry.DeserializeFrom(System.Collections.Generic.IDictionary{System.String,System.Object})">
 <summary>
 Deserializes the state of the current object from a given set of key-value pairs.
 </summary>
 <param name="dictionary">A set of key-value pairs to deserialize this object from.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntry.SerializeTo(System.Collections.Generic.IDictionary{System.String,System.Object})">
 <summary>
 Serializes the state of the current object into the given dictionary.
 </summary>
 <param name="dictionary">Dictionary to serialize this object into.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntry.Save">
 <summary>
 Saves the current item.
 </summary>
 <exception cref="T:System.InvalidOperationException">Cannot resolve the system name for the given item type.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntry.Save(Dynamicweb.Content.Items.ItemContext)">
 <summary>
 Saves the current item.
 </summary>
 <param name="context">Context of the current item.</param>
 <exception cref="T:System.InvalidOperationException">Cannot resolve the system name for the given item type.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntry.Delete">
 <summary>
 Deletes the curren item.
 </summary>
 <exception cref="T:System.InvalidOperationException">Cannot resolve the system name for the given item type.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntry.Delete(Dynamicweb.Content.Items.ItemContext)">
 <summary>
 Deletes the curren item.
 </summary>
 <exception cref="T:System.InvalidOperationException">Cannot resolve the system name for the given item type.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntry.Copy">
 <summary>
 Creates a copy of current item which empty ID(unsaved)
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntry.Copy``1">
 <summary>
 Creates a copy of current item which empty ID(unsaved)
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntry.Copy(Dynamicweb.Content.Items.ItemContext)">
 <summary>
 Creates a copy of current item which empty ID(unsaved)
 </summary>
 <param name="context">Context of the current item.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntry.ToCodeFirstItem``1">
 <summary>
 Yields the code first item representation of this object.
 </summary>
 <typeparam name="T">Code first item type</typeparam>
 <returns>codeFirstItem</returns>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntry.GetCodeFirstInstance(System.String)">
 <summary>
 Returns an instance an item whose type is the one which was used by Code-first activation workflow.
 </summary>
 <param name="systemName">Item system name.</param>
 <returns>Item instance or null (Nothing in Visual Basic) if no item Code-first type was found.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntry.GetItemById``1(System.String)">
 <summary>
 Returns the item by its Id.
 </summary>
 <typeparam name="T">Item type.</typeparam>
 <param name="id">Item Id.</param>
 <returns>The item.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntry.GetItemsByPageId``1(System.Int32)">
 <summary>
 Returns items by their page Id.
 </summary>
 <typeparam name="T">Item type.</typeparam>
 <param name="pageId">Page Id.</param>
 <returns>The items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntry.Create(System.String)">
 <summary>
 Creates a new instance of an item with the given system name.
 </summary>
 <param name="systemName">Item system name.</param>
 <returns>A new instance of an item with the given system name.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.ItemEntryCollection`1">
 <summary>
 Represents a strongly-typed collection of item entries.
 </summary>
 <typeparam name="T">Item type.</typeparam>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntryCollection`1.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntryCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="items">Elements to be copied to this collection.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.ItemEntryCollection">
 <summary>
 Represents a collection of item entries.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntryCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemEntryCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.ItemEntry})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="items">Elements to be copied to this collection.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.ItemList">
 <summary>
 ItemList holds the item relations.
 </summary>
 <example>
 <code description="Using of ItemList class" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ItemListSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Content.Items.ItemList.ItemType">
 <summary>
 Gets or sets the type of the related items.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.ItemList.SortBy">
 <summary>
 Gets or sets the field to sort the items
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.ItemList.SortOrder">
 <summary>
 Gets or sets the sort order
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.ItemList.Relations">
 <summary>
 Gets or sets the related items.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.Fill(System.Data.IDataReader)">
 <summary>
 Fills object properties with data from the given <see cref="T:System.Data.IDataReader">IDataReader</see> object.
 </summary>
 <param name="reader">Reader to read data from.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.FillRow(System.Data.DataRow)">
 <summary>
 Fills the given <see cref="T:System.Data.DataRow">DataRow</see> object with object state values.
 </summary>
 <param name="row">Row to write data into.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.Save">
 <summary>
 Saves current data to the data base.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.SaveRelations(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Int32)">
 <summary>
 Saves only specified relations.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.DeleteWithRelations(System.Boolean)">
 <summary>
 Delete list with relations.
 </summary>
 <param name="deleteItems">Delete related item entries or not.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.AddRelation(System.Int32,System.String,System.Int32)">
 <summary> 
 Add specified relation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.DeleteRelation(System.Int32,System.String)">
 <summary>
 Delete specified relation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.DeleteRelation(System.Int32,System.String,System.Boolean,System.String)">
 <summary>
 Delete specified relation.
 </summary>
 <param name="itemListId">The item list identifier.</param>
 <param name="itemId">The relation item identifier.</param>
 <param name="deleteItem">Delete related item entry or not.</param>
 <param name="itemType">Type of the item to cleanup.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.DeleteRelations(System.Int32)">
 <summary>
 Delete all itemlist relations.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.Copy(System.Int32,System.Data.IDbConnection,System.Data.IDbTransaction,Dynamicweb.Content.Items.Editors.ItemRelationListEditor)">
 <summary>
 Creates a copy of list by its Id.
 </summary>
 <param name="id">ItemList Id.</param>
 <returns>The id of new list.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.Copy(System.Int32,Dynamicweb.Content.Items.Editors.ItemRelationListEditor)">
 <summary>
 Creates a copy of list by its Id.
 </summary>
 <param name="id">ItemList Id.</param>
 <returns>The id of new list.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.GetItemListById(System.Int32)">
 <summary>
 Returns the ItemList by its Id.
 </summary>
 <param name="id">ItemList Id.</param>
 <returns>A ItemList with the given Id or null (Nothing in Visual Basic) if the ItemList with the given Id doesn't exist.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.GetRelatedItemLists(System.String,System.String)">
 <summary>
 Gets lists containing item with spicified ID and item type system name.
 </summary>
 <param name="itemTypeName">The item type system name.</param>
 <param name="itemId">The item ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.isItemHasItemRelatedList(System.String)">
 <summary>
 Checks if there is any item list ralated to given item type.
 </summary>
 <param name="itemTypeName">item type system name.</param>
 <returns>A ItemList with the given itemTypeName or null (Nothing in Visual Basic) if the ItemList with the given Id doesn't exist.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.SearchRelatedItems(Dynamicweb.Content.Items.Metadata.ItemType,System.Int32,System.String,System.String,System.String,System.Int32)">
 <summary>
 Gets related items for list by search query.
 </summary>
 <param name="itemType">Type of the item.</param>
 <param name="itemListId">The item list identifier.</param>
 <param name="searchQuery">The search query.</param>
 <param name="sortBy">The sort by.</param>
 <param name="sortOrder">The sort order.</param>
 <param name="topLimit">The top limit.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.SearchRelatedItems(Dynamicweb.Content.Items.Metadata.ItemType,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
 <summary>
 Gets related items for list by search query.
 </summary>
 <param name="itemType">Type of the item.</param>
 <param name="itemListId">The item list identifier.</param>
 <param name="searchQuery">The search query.</param>
 <param name="sortBy">The sort by.</param>
 <param name="sortOrder">The sort order.</param>
 <param name="topLimit">The top limit.</param>
 <param name="pageNumber">The page index.</param>
 <param name="pageSize">The page size.</param>
 <param name="totalItems">Total items count.</param>
 <remarks>
 If top limit > 0, then paging settings will not take any effect
 </remarks>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.BuildSearchSqlForItemType(Dynamicweb.Content.Items.Metadata.ItemType,System.String[],System.Boolean,System.Boolean)">
 <summary>
 Builds the search SQL for the ItemType.
 </summary>
 <param name="itemType">Type of the item.</param>
 <param name="searchItems">The search items.</param>
 <param name="includeItemTypeName">if set to <c>true</c> [include item type name].</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.BuildSearchSqlForItemType(Dynamicweb.Content.Items.Metadata.ItemType,System.String[],System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Builds the search SQL for the ItemType.
 </summary>
 <param name="itemType">Type of the item.</param>
 <param name="searchItems">The search items.</param>
 <param name="includeItemTypeName">if set to <c>true</c> [include item type name].</param>
 <param name="itemIds">Limit search by given items.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Items.ItemList.BuildSearchSqlForItemType(Dynamicweb.Content.Items.Metadata.ItemType,System.String[],System.Boolean,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Int32@,System.Boolean,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Builds the search SQL for the ItemType.
 </summary>
 <param name="itemType">Type of the item.</param>
 <param name="searchItems">The search items.</param>
 <param name="includeItemTypeName">if set to <c>true</c> [include item type name].</param>
 <param name="topLimit">The top limit.</param>
 <param name="itemListId">The item list identifier.</param>
 <param name="sortBy">The sort by.</param>
 <param name="sortOrder">The sort order.</param>
 <param name="itemIds">Limit search by given items.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Content.Items.ItemManager">
 <summary>
 Represents an item manager. This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.ItemManager.Metadata">
 <summary>
 Gets the metadata manager.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.ItemManager.Activation">
 <summary>
 Gets the activation manager.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.ItemManager.Editors">
 <summary>
 Gets the editor manager.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.ItemManager.Storage">
 <summary>
 Gets the storage manager.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.ItemManager.IsUpdateError">
 <summary>
 Gets the editor manager.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemManager.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemManager.UpdateMetadata">
 <summary>
 Updates item metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemManager.Initialize">
 <summary>
 Initializes the item manager.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemManager.CreateValueConverter">
 <summary>
 Creates a default value converter.
 </summary>
 <returns>A default value converter.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemManager.CreateValueConverter(System.Boolean)">
 <summary>
 Creates a default value converter.
 </summary>
 <param name="frontend">Value indicating whether value converter is used in the frontend.</param>
 <returns>A default value converter.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemManager.GetDefaultGroupName">
 <summary>
 Returns the name of the default group.
 </summary>
 <returns>The name of the default group.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemManager.IsValidSystemName(System.String)">
 <summary>
 Determines whether the given system name is valid.
 </summary>
 <param name="name">System name.</param>
 <returns>Value indicating whether the given system name is valid.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemManager.MakeSystemName(System.String)">
 <summary>
 Makes a system name out of a given name.
 </summary>
 <param name="name">Name.</param>
 <returns>System name.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemManager.MakeName(System.String)">
 <summary>
 Resolves the user-friendly name from the given system name by using Camel Casing rules.
 </summary>
 <param name="systemName">System name.</param>
 <returns>User-friendly name.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemManager.GetSystemName(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Returns the system name for the corresponding item type by examining the item instance.
 </summary>
 <param name="i">Item instance.</param>
 <returns>System name of the corresponding item type.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemManager.GetSystemName(System.Type)">
 <summary>
 Returns the system name for the corresponding item type by examining the item instance.
 </summary>
 <param name="itemType">Item instance.</param>
 <returns>System name of the corresponding item type.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemManager.InitializeMetadata">
 <summary>
 Initializes metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemManager.InitializeStorage">
 <summary>
 Initializes the storage.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemManager.DropConstraintsOnItemTypeTables">
 <summary>
 TFS task 15621 - remove constraints and default values from item tables
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemManager.Log(System.String,System.Exception)">
 <summary>
 Logs the message to the log file.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.ItemRuleChecker">
 <summary>
 Class ItemRuleChecker used for checking item rules when copying items.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.ItemRuleChecker.CanCopyPageWithItems(Dynamicweb.Content.Items.Activation.CreationRuleContext,System.String)">
 <summary>
 Determines whether an item instance can copy items in the specified creation context.
 </summary>
 <param name="creationContext">The creation context.</param>
 <param name="itemType">Type of the item.</param>
 <returns>ApplicationResponse(Of CreationRuleContext).</returns>
</member>
<member name="M:Dynamicweb.Content.Items.ItemStoreContainer.ParseJsonDate(System.String)">
 <summary>
 Parse Json Date
 </summary>
 <param name="originalDateTimeValue"></param>
 <returns></returns>
 <remarks>
 Algorithm taken from System.Runtime.Serialization.dll, 
 namespace: System.Runtime.Serialization.Json, 
 class: JsonReaderDelegator,
 method: ParseJsonDateInDefaultFormat,
 </remarks>
</member>
<member name="T:Dynamicweb.Content.Items.ITransferable`1">
 <summary>
 Represents an object whose state can be completely copied to another object.
 </summary>
 <typeparam name="T">Target object type.</typeparam>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ITransferable`1.CopyTo(`0)">
 <summary>
 Copies the state of the current object into the given one.
 </summary>
 <param name="target">Object to copy state into.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="target">target</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.NamedItemList">
 <summary>
 NamedItemList connects an ItemList to a something (a Page, an Area, ...)
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.NamedItemList.Name">
 <summary>
 Gets or sets the name of the named item list.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.NamedItemList.SourceType">
 <summary>
 Gets or sets the type of the owner(a Page, an Area, an Item ...).
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.NamedItemList.SourceId">
 <summary>
 Gets or sets the id of the owner.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.NamedItemList.ItemListId">
 <summary>
 Gets or sets the id of the item list.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.NamedItemList.ItemList">
 <summary>
 Gets or sets the item list.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.NamedItemList.Fill(System.Data.IDataReader)">
 <summary>
 Fills object properties with data from the given <see cref="T:System.Data.IDataReader">IDataReader</see> object.
 </summary>
 <param name="reader">Reader to read data from.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.NamedItemList.FillRow(System.Data.DataRow)">
 <summary>
 Fills the given <see cref="T:System.Data.DataRow">DataRow</see> object with object state values.
 </summary>
 <param name="row">Row to write data into.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.NamedItemList.Create(System.String,System.String,Dynamicweb.Content.Items.NamedItemList.ListSourceType,System.Int32)">
 <summary>
 Create a new named list with all required properties
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.NamedItemList.Delete(System.Int32)">
 <summary>
 Deletes the named list 
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.NamedItemList.GetListById(System.Int32)">
 <summary>
 Gets named item list by ID
 </summary>
 <param name="listId">The item list  id</param>
</member>
<member name="M:Dynamicweb.Content.Items.NamedItemList.GetListByName(System.String,Dynamicweb.Content.Items.NamedItemList.ListSourceType,System.Int32)">
 <summary>
 Gets named item lists by source
 </summary>
 <param name="sourceType">The source type</param>
 <param name="sourceId">The source id</param>
</member>
<member name="M:Dynamicweb.Content.Items.NamedItemList.GetNamedItemListByListId(System.Int32)">
 <summary>
 Gets named item lists by his list Id
 </summary>
 <param name="listId">The list id</param>
</member>
<member name="M:Dynamicweb.Content.Items.NamedItemList.GetListsBySource(Dynamicweb.Content.Items.NamedItemList.ListSourceType,System.Int32)">
 <summary>
 Gets named item lists by source
 </summary>
 <param name="sourceType">The source type</param>
 <param name="sourceId">The source id</param>
</member>
<member name="M:Dynamicweb.Content.Items.NamedItemList.GetListsByArea(System.Int32)">
 <summary>
 Gets named item lists by area 
 </summary>
 <param name="areaId">The area id</param>
</member>
<member name="M:Dynamicweb.Content.Items.NamedItemList.GetNamedItemListsBySourceType(Dynamicweb.Content.Items.NamedItemList.ListSourceType)">
 <summary>
 Gets named item lists by source type
 </summary>
 <param name="sourceType">The source type</param>        
</member>
<member name="M:Dynamicweb.Content.Items.NamedItemList.Add(Dynamicweb.Content.Items.Item,System.String,Dynamicweb.Content.Page)">
 <summary>
 Add an item to a named item list
 </summary>
 <param name="item">The item</param>
 <param name="listName">List name for new item</param>
 <param name="page">Page with list name</param>
</member>
<member name="M:Dynamicweb.Content.Items.NamedItemList.Add(Dynamicweb.Content.Items.Item,System.String,Dynamicweb.Content.Page,System.Int32)">
 <summary>
 Add an item to a named item list
 </summary>
 <param name="item">The item</param>
 <param name="listName">List name for new item</param>
 <param name="page">Page with list name</param>
 <param name="sortIndex">Index of item in list</param>
</member>
<member name="F:Dynamicweb.Content.Items.NamedItemList.CacheKey">
 <summary>
 NamedItemList cache
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Queries.ItemEventsObserver">
 <summary>
 Represents event handler for clear Items cache
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.ItemEventsObserver.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Event handler for clear Items cache
 </summary>
 <param name="notification">Event name</param>
 <param name="args">Event argument</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Queries.ItemFilterRulesProvider.ItemFieldDataSource">
 <summary>
 Represents the item field data source
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.ItemFilterRulesProvider.ItemFieldDataSource.SetData(System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
 Set the owner data.
 </summary>
 <param name="OwnerData"></param>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.ItemFilterRulesProvider.ItemFieldDataSource.GetData">
 <summary>
 Returns the data.
 </summary>
 <returns>
 Data returned by the source.
 </returns>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.ItemFilterRulesProvider.GetRulesDataFields(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Get data fields for rules
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.ItemFilterRulesProvider.GetItemFieldDataSource(Dynamicweb.Content.Items.Metadata.ItemField)">
 <summary>
 Gets the custom field data source.
 </summary>
 <param name="itemfield">The item field.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.ItemFilterRulesProvider.ComposeQuery(Dynamicweb.Modules.Searching.Rules.RulesGroup,System.String)">
 <summary>
 Composes the query.
 </summary>
 <param name="rulesGroups">The rules groups.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.ItemFilterRulesProvider.ComposeSimpleQuery(System.String,Dynamicweb.Modules.Searching.Rules.RuleOperator,System.Object)">
 <summary>
 Composes the simple query.
 </summary>
 <param name="fieldName">Name of the field.</param>
 <param name="ruleOperator">The rule operator.</param>
 <param name="val">The val.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.ItemFilterRulesProvider.ComposeDateQuery(System.String,Dynamicweb.Modules.Searching.Rules.RuleOperator,System.Object)">
 <summary>
 Composes the date query.
 </summary>
 <param name="fieldName">Name of the field.</param>
 <param name="ruleOperator">The rule operator.</param>
 <param name="val">The val.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.ItemFilterRulesProvider.ComposeNumericQuery(System.String,Dynamicweb.Modules.Searching.Rules.RuleOperator,System.Object)">
 <summary>
 Composes the simple numeric query.
 </summary>
 <param name="fieldName">Name of the field.</param>
 <param name="ruleOperator">The rule operator.</param>
 <param name="val">The val.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.ItemFilterRulesProvider.ComposeRangeQuery(System.String,System.Object,System.Object)">
 <summary>
 Composes the range query.
 </summary>
 <param name="fieldName">Name of the field.</param>
 <param name="fromVal">From val.</param>
 <param name="toVal">To val.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.ItemFilterRulesProvider.ComposeListQuery(System.String,Dynamicweb.Modules.Searching.Rules.RuleOperator,System.Object)">
 <summary>
 Compose a list query to find an item (val) in a comma separated list
 </summary>
 <param name="fieldName">Name of the field.</param>
 <param name="ruleOperator">The operator</param>
 <param name="val">The value</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.ItemFilterRulesProvider.FetchRuleData(Dynamicweb.Modules.Searching.Rules.Rule,System.String@,System.Type@,Dynamicweb.Modules.Searching.Rules.RuleOperator@,System.Boolean@,System.Object[]@)">
 <summary>
 Fetches the rule data.
 </summary>
 <param name="rule">The rule.</param>
 <param name="fieldName">Name of the field.</param>
 <param name="fielType">Type of the fiel.</param>
 <param name="operatorRule">The operator rule.</param>
 <param name="isRange">if set to <c>true</c> is range.</param>
 <param name="values">The values.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.ItemFilterRulesProvider.TryParseType(System.String,System.Type@)">
 <summary>
 Tries the type of the parse.
 </summary>
 <param name="fieldType">Type of the field.</param>
 <param name="outType">Type of the out.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.ItemFilterRulesProvider.TryConvertValue(System.String,System.Type,System.Object@)">
 <summary>
 Tries the convert value.
 </summary>
 <param name="value">The value.</param>
 <param name="typeValue">The type value.</param>
 <param name="outValue">The out value.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Content.Items.Queries.OrderByDirection">
 <summary>
 Represents a direction of order.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Queries.OrderByDirection.Ascending">
 <summary>
 Present results in ascending order.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Queries.OrderByDirection.Descending">
 <summary>
 Present results in descending order.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Queries.OrderBy">
 <summary>
 Represents an object that specifies how query results must be ordered.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Queries.OrderBy.Field">
 <summary>
 Gets or sets the name of the field.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Queries.OrderBy.Direction">
 <summary>
 Gets or sets the direction of order.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.OrderBy.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.OrderBy.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="field">The name of the field to order resuts by.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.OrderBy.#ctor(System.String,Dynamicweb.Content.Items.Queries.OrderByDirection)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="field">The name of the field to order resuts by.</param>
 <param name="direction">The direction of order.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Queries.OrderByCollection">
 <summary>
 Represents a collection of item field metadata.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.OrderByCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.OrderByCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Queries.OrderBy})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="items">Elements to be copied to this collection.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.OrderByCollection.Find(System.String)">
 <summary>
 Returns the first element with the given field name.
 </summary>
 <param name="field">Field name.</param>
 <returns>The first element with the given field name.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.OrderByCollection.FindIndex(System.String)">
 <summary>
 Returns an index of a first element from the collection with the given field name.
 </summary>
 <param name="field">Field name.</param>
 <returns>An index of a first element from the collection with the given field name.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Queries.Query">
 <summary>
 Represents an item query.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Queries.Query.Fields">
 <summary>
 Gets or sets the list of fields to be selected.
 </summary>
 <remarks>Empty list or null value indicates that all fields will be selected.</remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Queries.Query.OrderBy">
 <summary>
 Gets or sets the collection of objects specifying how results must be ordered.
 </summary>
 <remarks>Empty list or null value indicates that results will be ordered by row Id.</remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Queries.Query.Where">
 <summary>
 Gets or sets the collection of objects specifying where conditions.
 </summary>
 <remarks>Empty list or null value indicates that there are no additional where conditions.</remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Queries.Query.Offset">
 <summary>
 Gets or sets the number of results so skip during the selection process.
 </summary>
 <remarks>The value lower or equal to zero indicates that no items will be skipped.</remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Queries.Query.Amount">
 <summary>
 Gets or sets the amount of records to select.
 </summary>
 <remarks>The value lower or equal to zero indicates that all results will be selected.</remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Query.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Queries.SystemField">
 <summary>
 Represents a system field (column).
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Queries.SystemField.Partition">
 <summary>
 1-based partition number.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Queries.SystemField.Row">
 <summary>
 1-based row number.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Items.Queries.SystemField.Total">
 <summary>
 The total number of records available.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Queries.Repository">
 <summary>
 Represents a relational database repository.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Queries.Repository.Builder">
 <summary>
 Gets or sets the database builder.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Queries.Repository.Metadata">
 <summary>
 Gets the metadata of an item this repository is currently working with.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Queries.Repository.BaseMetadata">
 <summary>
 Gets the collection of base metadata of an metadata this repository is currently working with.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Queries.Repository.DerivedMetadata">
 <summary>
 Gets the collection of detived metadata of an metadata this repository is currently working with.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Queries.Repository.ValueConverter">
 <summary>
 Gets the value converter that is used to convert values from one representation into another one.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Queries.Repository.Collaction">
 <summary>
 Gets the SQL collection name according to the current culture.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="systemName">System name of the target item.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.#ctor(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="metadata">Metadata of an item this repository is currently working with.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="metadata">metadata</paramref> is null.</exception>
 <exception cref="T:System.ArgumentException">The SysteName property of a given item metadata is null or an empty string.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.Delete(Dynamicweb.Content.Items.ItemEntry,Dynamicweb.Content.Items.ItemContext)">
 <summary>
 Deletes the given item.
 </summary>
 <param name="item">Item to delete.</param>
 <param name="context">Execution context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.Delete(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Deletes the given item.
 </summary>
 <param name="item">Item to delete.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.Delete(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.ItemEntry})">
 <summary>
 Deletes the given items.
 </summary>
 <param name="items">Items to delete.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.Delete(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.ItemEntry},Dynamicweb.Content.Items.ItemContext)">
 <summary>
 Deletes the given items.
 </summary>
 <param name="items">Items to delete.</param>
 <param name="context">Execution context.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.DeleteInternal(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.ItemEntry},System.Boolean,Dynamicweb.Content.Items.ItemContext)">
 <summary>
 Deletes the given items.
 </summary>
 <param name="items">Items to delete.</param>
 <param name="cleanup">Clean item info from related page/paragraph entry or not.</param>
 <param name="context">Execution context.</param>
 <returns>A list of item Ids that correspond to items that were deleted.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.Execute``1(System.String)">
 <summary>
 Executes the given named command and returns the result of an execution.
 </summary>
 <typeparam name="TResult">Result type.</typeparam>
 <param name="command">Command name.</param>
 <returns>The result of a command execution.</returns>
 <exception cref="T:System.NotSupportedException">Specified command is not supported.</exception>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.Execute``1(System.String,System.Object[])">
 <summary>
 Executes the given named command and returns the result of an execution.
 </summary>
 <typeparam name="TResult">Result type.</typeparam>
 <param name="command">Command name.</param>
 <param name="parameters">Command parameters.</param>
 <returns>The result of a command execution.</returns>
 <exception cref="T:System.NotSupportedException">Specified command is not supported.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.Update(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Either inserts new or updates existing record that correspond to the given item.
 </summary>
 <param name="item">Item to insert/update.</param>
 <returns>An Id of the item that was inserted/updated.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.Update(Dynamicweb.Content.Items.ItemEntry,Dynamicweb.Content.Items.ItemContext)">
 <summary>
 Either inserts new or updates existing record that correspond to the given item.
 </summary>
 <param name="item">Item to insert/update.</param>
 <param name="context">Context of the item.</param>
 <returns>An Id of the item that was inserted/updated.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.Update(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.ItemEntry})">
 <summary>
 Either inserts new or updates existing records that correspond to the given items.
 </summary>
 <param name="items">Items to insert/update.</param>
 <remarks>If the list contains only one item, the Id of the item is updated in case it was inserted.</remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.Update(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.ItemEntry},Dynamicweb.Content.Items.ItemContext)">
 <summary>
 Either inserts new or updates existing records that correspond to the given items.
 </summary>
 <param name="items">Items to insert/update.</param>
 <param name="context">Context of the items.</param>
 <remarks>If the list contains only one item, the Id of the item is updated in case it was inserted.</remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.Update(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.ItemEntry},Dynamicweb.Content.Items.ItemContext,System.Boolean)">
 <summary>
 Either inserts new or updates existing records that correspond to the given items.
 </summary>
 <param name="items">Items to insert/update.</param>
 <param name="context">Context of the items.</param>
 <param name="synchronizePages">Synchronize pages after update</param>
 <remarks>If the list contains only one item, the Id of the item is updated in case it was inserted.</remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SynchronizePageStructure(Dynamicweb.Content.Items.Item,System.Boolean,Dynamicweb.Content.Items.Item)">
 <summary>
 Synchronize changes in items with pages
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SynchronizePageStructure(Dynamicweb.Content.Items.Item,System.Boolean,Dynamicweb.Content.Items.Item,Dynamicweb.Content.Items.ItemContext)">
 <summary>
 Synchronize changes in items with pages
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.UpdateRelatedItems(Dynamicweb.Content.Items.Item,Dynamicweb.Content.Items.Item,Dynamicweb.Content.Items.ItemContext)">
 <summary>
 Copy updated item data to a language item. 
 </summary>
 <param name="languageItem">Language item.</param>
 <param name="updatedItem">Updated item.</param>
 <param name="context">Context of the item.</param>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.UpdateRelatedItems(Dynamicweb.Content.Items.Item,Dynamicweb.Content.Items.Item,Dynamicweb.Content.Items.Item,Dynamicweb.Content.Items.ItemContext,System.Boolean)">
 <summary>
 Copy updated item data to a language item. Handles "inherit changes" feature.
 </summary>
 <param name="languageItem">Language item.</param>
 <param name="updatedItem">Updated item.</param>
 <param name="originalItem">Original item(without updates).</param>
 <param name="context">Context of the item.</param>
 <param name="inheritChanges">Enable "inherit changes" feature.</param>
 <remarks>
 The "inherit changes" feature doesn't work for fields of ItemTypeEditor and ItemRelationListEditor types. 
 For such fields is performed complete copying of refferenced items.
 </remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectAll">
 <summary>
 Selects all items.
 </summary>
 <returns>All items.</returns>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectById``1(System.String)">
 <summary>
 Selects the item by its Id.
 </summary>
 <param name="id">Item Id.</param>
 <returns>Item with the given Id.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectById``1(System.String,Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Selects the item by its Id.
 </summary>
 <param name="id">Item Id.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <returns>Item with the given Id.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectById(System.String)">
 <summary>
 Selects the item by its Id.
 </summary>
 <param name="id">Item Id.</param>
 <returns>Item with the given Id.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectById(System.String,Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Selects the item by its Id.
 </summary>
 <param name="id">Item Id.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <returns>Item with the given Id.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByIds``1(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Selects items by their Ids.
 </summary>
 <param name="ids">Item Ids.</param>
 <returns>Items with the given Ids.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByIds``1(System.Collections.Generic.IEnumerable{System.String},Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Selects items by their Ids.
 </summary>
 <typeparam name="T">Item type.</typeparam>
 <param name="ids">Item Ids.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <returns>Items with the given Ids.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByIds(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Selects items by their Ids.
 </summary>
 <param name="ids">Item Ids.</param>
 <returns>Items with the given Ids.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByIds(System.Collections.Generic.IEnumerable{System.String},Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Selects items by their Ids.
 </summary>
 <param name="ids">Item Ids.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <returns>Items with the given Ids.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByIds(System.Collections.Generic.IEnumerable{System.String},Dynamicweb.Content.Items.Queries.Query,System.Boolean)">
 <summary>
 Selects items by their Ids.
 </summary>
 <param name="ids">Item Ids.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <param name="checkPermissions">To check permissions of current user.</param>
 <returns>Items with the given Ids.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByIds(System.Collections.Generic.IEnumerable{System.String},Dynamicweb.Content.Items.Queries.Query,System.Boolean,System.Boolean)">
 <summary>
 Selects items by their Ids.
 </summary>
 <param name="ids">Item Ids.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <param name="checkPermissions">To check permissions of current user.</param>
 <param name="includeInheritedItems"></param>
 <returns>Items with the given Ids.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByNamedListId(System.Int32,Dynamicweb.Content.Items.Queries.Query,System.Boolean)">
 <summary>
 Selects all items by the given named list Id.
 </summary>
 <param name="namedListId">Named list id.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByPageId``1(System.Collections.Generic.IEnumerable{System.Int32})">
 <summary>
 Selects all items by the given page Id.
 </summary>
 <param name="pageIds">Page Ids.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByPageId``1(System.Collections.Generic.IEnumerable{System.Int32},Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Selects all items by the given page Id.
 </summary>
 <param name="pageIds">Page Ids.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByPageId(System.Collections.Generic.IEnumerable{System.Int32})">
 <summary>
 Selects all items by the given page Id.
 </summary>
 <param name="pageIds">Page Ids.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByPageId``1(System.Int32)">
 <summary>
 Selects all items by the given page Id.
 </summary>
 <param name="pageId">Page Id.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByPageId``1(System.Int32,Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Selects all items by the given page Id.
 </summary>
 <param name="pageId">Page Id.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByPageId(System.Int32)">
 <summary>
 Selects all items by the given page Id.
 </summary>
 <param name="pageId">Page Id.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByPageId(System.Int32,Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Selects all items by the given page Id.
 </summary>
 <param name="pageId">Page Id.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByPageId(System.Collections.Generic.IEnumerable{System.Int32},Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Selects all items by the given page Id.
 </summary>
 <param name="pageIds">Page Ids.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByParagraphId``1(System.Collections.Generic.IEnumerable{System.Int32})">
 <summary>
 Selects all items by the given paragraph Id.
 </summary>
 <param name="paragraphIds">Paragraph Ids.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByParagraphId``1(System.Collections.Generic.IEnumerable{System.Int32},Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Selects all items by the given paragraph Id.
 </summary>
 <param name="paragraphIds">Paragraph Ids.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByParagraphId(System.Collections.Generic.IEnumerable{System.Int32})">
 <summary>
 Selects all items by the given page Id.
 </summary>
 <param name="paragraphIds">Paragraph Ids.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByParagraphId``1(System.Int32)">
 <summary>
 Selects all items by the given paragraph Id.
 </summary>
 <param name="paragraphId">Paragraph Id.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByParagraphId``1(System.Int32,Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Selects all items by the given paragraph Id.
 </summary>
 <param name="paragraphId">Paragraph Id.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByParagraphId(System.Int32)">
 <summary>
 Selects all items by the given page Id.
 </summary>
 <param name="paragraphId">Paragraph Id.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByParagraphId(System.Int32,Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Selects all items by the given paragraph Id.
 </summary>
 <param name="paragraphId">Paragraph Id.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByParagraphId(System.Collections.Generic.IEnumerable{System.Int32},Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Selects all items by the given paragraph Id.
 </summary>
 <param name="paragraphIds">Paragraph Ids.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByParentPageId``1(System.Int32)">
 <summary>
 Selects all items by the given parent page Id.
 </summary>
 <param name="pageId">Page Id.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByParentPageId``1(System.Int32,Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Selects all items by the given parent page Id.
 </summary>
 <param name="pageId">Page Id.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByParentPageId(System.Int32)">
 <summary>
 Selects all items by the given parent page Id.
 </summary>
 <param name="pageId">Page Id.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByParentPageId(System.Int32,Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Selects all items by the given parent page Id.
 </summary>
 <param name="pageId">Page Id.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByParentPageId(System.Int32,Dynamicweb.Content.Items.Queries.Query,System.Boolean,System.Boolean)">
 <summary>
 Selects all items by the given parent page Id including all childs.
 </summary>
 <param name="pageId">Page Id.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <param name="includeParagraphs">Are paragraphs included.</param>
 <param name="includeAllChildItems">Are all childs included.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByParentPageId(System.Int32,Dynamicweb.Content.Items.Queries.Query,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Selects all items by the given parent page Id including all childs.
 </summary>
 <param name="pageId">Page Id.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <param name="includeParagraphs">Are paragraphs included.</param>
 <param name="includeAllChildItems">Are all childs included.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByParentPageIds(System.Collections.Generic.IEnumerable{System.Int32},Dynamicweb.Content.Items.Queries.Query,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Selects all items by the given a list of parent pages Ids including all children.
 </summary>
 <param name="parentIds">List of parent Ids.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <param name="includeParagraphs">Are paragraphs included.</param>
 <param name="includeChildItems">Are all children included.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByParentPageIds(System.Collections.Generic.IEnumerable{System.Int32},Dynamicweb.Content.Items.Queries.Query,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Selects all items by the given a list of parent pages Ids including all childs.
 </summary>
 <param name="parentIds">List of parent Ids.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <param name="includeParagraphs">Are paragraphs included.</param>
 <param name="includeChildItems">Are all children included.</param>
 <param name="includeInheritedItems"></param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByReference(System.String,System.String,System.String,Dynamicweb.Content.Items.Queries.Query,System.Boolean,System.Boolean)">
 <summary>
 Find all items that references a given item in a given field.
 
 Example: Given a Person with id 87 (the target), we can find all ConferenceSessions (the sources) where this person is in the Speakers list:
 <code>
 var sources = new Dynamicweb.Content.Items.Queries.Repository("ConferenceSession").SelectByReference("Speakers", "Person", "87", null, false, false)
 </code>
 </summary>
 <param name="sourceFieldName">Name of the field on the source item</param>
 <param name="targetItemType">Item type of the target item</param>
 <param name="targetItemId">Id of the target item</param>
 <param name="query"></param>
 <param name="includeParagraphs"></param>
 <param name="checkPermissions"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.FindChildPagesId(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
 <summary>
 Find all child pages by parent page Ids
 </summary>
 <param name="pids">Parent page Ids.</param>
 <param name="includeAllChildItems">Is find all child items.</param>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByAreaId``1(System.Int32)">
 <summary>
 Selects all items by the given language/area Id.
 </summary>
 <param name="areaId">Area Id.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByAreaId``1(System.Int32,Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Selects all items by the given language/area Id.
 </summary>
 <param name="areaId">Area Id.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByAreaId(System.Int32)">
 <summary>
 Selects all items by the given language/area Id.
 </summary>
 <param name="areaId">Area Id.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByAreaId(System.Int32,Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Selects all items by the given language/area Id.
 </summary>
 <param name="areaId">Area Id.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByAreaId(System.Int32,Dynamicweb.Content.Items.Queries.Query,System.Boolean)">
 <summary>
 Selects all items by the given language/area Id.
 </summary>
 <param name="areaId">Area Id.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <param name="includeParagraphs">Are paragraphs included.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByAreaId(System.Int32,Dynamicweb.Content.Items.Queries.Query,System.Boolean,System.Boolean)">
 <summary>
 Selects all items by the given language/area Id.
 </summary>
 <param name="areaId">Area Id.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <param name="includeParagraphs">Are paragraphs included.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectByAreaId(System.Int32,Dynamicweb.Content.Items.Queries.Query,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Selects all items by the given language/area Id.
 </summary>
 <param name="areaId">Area Id.</param>
 <param name="query">Query that is used to provide additional constraints.</param>
 <param name="includeParagraphs">Are paragraphs included.</param>
 <param name="checkPermissions"></param>
 <param name="includeInheritedItems"></param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.DeleteById(System.String)">
 <summary>
 Deletes an item with the given Id.
 </summary>
 <param name="id">Item Id.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.DeleteById(System.String,System.Boolean)">
 <summary>
 Deletes an item with the given Id.
 </summary>
 <param name="id">Item Id.</param>
 <param name="cleanup">Clean item info from related page/paragraph entry or not.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.DeleteById(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Deletes all items with the given Ids.
 </summary>
 <param name="ids">Item Ids.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.DeleteById(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
 <summary>
 Deletes all items with the given Ids.
 </summary>
 <param name="ids">Item Ids.</param>
 <param name="cleanup">Clean item info from related page/paragraph entry or not.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.DeleteByPageId(System.Int32)">
 <summary>
 Deletes all items with the given page Id.
 </summary>
 <param name="pageId">Page Id.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.DeleteByPageId(System.Collections.Generic.IEnumerable{System.Int32})">
 <summary>
 Deletes all items with the given page Ids.
 </summary>
 <param name="pageIds">Page Ids.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.DeleteByParagraphId(System.Int32)">
 <summary>
 Deletes all items with the given paragraph Id.
 </summary>
 <param name="paragraphId">Paragraph Id.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.DeleteByParagraphId(System.Collections.Generic.IEnumerable{System.Int32})">
 <summary>
 Deletes all items with the given paragraph Ids.
 </summary>
 <param name="paragraphIds">Paragraph Ids.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.Dispose">
 <summary>
 Disposes all managed resources used by this repository.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.OnDisposing">
 <summary>
 Called when the managed resources needs to be disposed.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.Dispose(System.Boolean)">
 <summary>
 Disposes all managed resources used by this repository.
 </summary>
 <param name="disposing">Value indicating whether actual disposing takes place.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.SelectInternal(System.Collections.Generic.IEnumerable{System.String},Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Selects either items by specified ids or all.
 </summary>
 <param name="ids"></param>
 <param name="query"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.Cleanup(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Performs cleanup of the deleted items.
 </summary>
 <param name="ids">Item Ids.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.ExecuteCount(System.Object[])">
 <summary>
 Executes the "Count" command.
 </summary>
 <param name="parameters">Command parameters.</param>
 <returns>Command result.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.GetTableName">
 <summary>
 Returns the table name for the current item.
 </summary>
 <returns>The table name for the current item.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.FillRow(System.Data.DataRow,System.Data.DataColumnCollection,Dynamicweb.Content.Items.Item,Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Fills the given database row with data from the given item.
 </summary>
 <param name="row">Database row.</param>
 <param name="columns">Available columns.</param>
 <param name="item">Item to take data from.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.AddRequiredAndDefaultValues(System.Collections.Generic.IDictionary{System.String,System.Object},Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Adds values for fields that have DEFAULT value but that are currently missing values.
 </summary>
 <param name="data">Current values.</param>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.GetFrom(Dynamicweb.Content.Items.Queries.Repository.MetadataTableInfo)">
 <summary>
 Returns the SQL "FROM" definition according to the given metadata.
 </summary>
 <param name="table">The metadata.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.GetOrder(Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Returns the SQL "ORDER BY" definition according to the given query.
 </summary>
 <param name="query">Query.</param>
 <returns>The SQL "ORDER BY" definition according to the given query.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.GetOrder(Dynamicweb.Content.Items.Queries.Query,System.String)">
 <summary>
 Returns the SQL "ORDER BY" definition according to the given query.
 </summary>
 <param name="query">Query.</param>
 <param name="prefix">Field prefix.</param>
 <returns>The SQL "ORDER BY" definition according to the given query.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.GetWhere(Dynamicweb.Content.Items.Queries.Query,System.String)">
 <summary>
 Returns the SQL "WHERE" definition according to the given query.
 </summary>
 <param name="query">Query.</param>
 <param name="prefix">Field prefix.</param>
 <returns>The SQL "WHERE" definition according to the given query.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.GetRange(Dynamicweb.Content.Items.Queries.Query)">
 <summary>
 Returns the range specifying how many results needs to be selected.
 </summary>
 <param name="query">Query.</param>
 <returns>The range specifying how many results needs to be selected.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.GetDelete(Dynamicweb.Content.Items.Metadata.ItemType,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Returns the SQL "DELETE" definition according to the given metadata and items id.
 </summary>
 <param name="meta">The metadata.</param>
 <param name="id">Items id.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.CanCollate(System.String)">
 <summary>
 Returns value indicating whether the COLLATE statement can be applied to the given field.
 </summary>
 <param name="fieldName">Field name.</param>
 <returns>Value indicating whether the COLLATE statement can be applied to the given field.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.GetTitle(Dynamicweb.Content.Items.Item)">
 <summary>
 Returns page title.
 </summary>
 <param name="item">The item.</param>
 <returns>Value to use as page title.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.GetTitleInternal(Dynamicweb.Content.Items.Item)">
 <summary>
 Returns page title.
 </summary>
 <param name="item">The item.</param>
 <returns>Value to use as page title.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.GetFieldForTitleValue(Dynamicweb.Content.Items.Item,System.String,System.String)">
 <summary>
 Returns value of the specified field.
 </summary>
 <param name="item">The item.</param>
 <param name="fieldName">The name of field.</param>
 <returns>Value of the specified field.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.ReadValue(Dynamicweb.Content.Items.ItemEntry,Dynamicweb.Content.Items.Queries.SystemField)">
 <summary>
 Reads field value from the given item.
 </summary>
 <param name="item">Item to read field value from.</param>
 <param name="field">Field.</param>
 <returns>Field value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.ReadValue(Dynamicweb.Content.Items.ItemEntry,System.String)">
 <summary>
 Reads field value from the given item.
 </summary>
 <param name="item">Item to read field value from.</param>
 <param name="field">Field.</param>
 <returns>Field value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.ReadValue``1(Dynamicweb.Content.Items.ItemEntry,Dynamicweb.Content.Items.Queries.SystemField)">
 <summary>
 Reads field value from the given item.
 </summary>
 <typeparam name="T">Value type.</typeparam>
 <param name="item">Item to read field value from.</param>
 <param name="field">Field.</param>
 <returns>Field value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.Repository.ReadValue``1(Dynamicweb.Content.Items.ItemEntry,System.String)">
 <summary>
 Reads field value from the given item.
 </summary>
 <typeparam name="T">Value type.</typeparam>
 <param name="item">Item to read field value from.</param>
 <param name="field">Field.</param>
 <returns>Field value.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Queries.StorageFactory">
 <summary>
 Represents a storage factory.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageFactory.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageFactory.CreateRepository(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Creates and opens a new repository.
 </summary>
 <param name="metadata">Information about the item for which the repository is being created.</param>
 <returns>Created and opened repository.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Queries.StorageManager">
 <summary>
 Represents a storage manager. This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Queries.StorageManager.Current">
 <summary>
 Gets the current instance of the storage manager.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Queries.StorageManager.Factory">
 <summary>
 Gets or sets the storage factory.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageManager.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageManager.Open(System.String)">
 <summary>
 Opens new repository.
 </summary>
 <param name="systemName">Item system name.</param>
 <returns>Repository.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageManager.Open(Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Opens new repository.
 </summary>
 <param name="metadata">Item metadata.</param>
 <returns>Repository.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="metadata">metadata</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageManager.Open``1">
 <summary>
 Opens new repository.
 </summary>
 <typeparam name="T">Item type.</typeparam>
 <returns>Repository.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageManager.GetById(System.String,System.String)">
 <summary>
 Selects the item by its Id.
 </summary>
 <param name="systemName">Item system name.</param>
 <param name="id">Item Id.</param>
 <returns>Item with the given Id.</returns>
 <remarks>Item is cached for 15 minutes</remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageManager.GetById(System.String,System.String,System.Boolean,System.DateTime)">
 <summary>
 Selects the item by its Id.
 </summary>
 <param name="systemName">Item system name.</param>
 <param name="id">Item Id.</param>
 <param name="draft">Is item in a draft mode</param>
 <param name="previewDate">Date to preview the content from</param>
 <returns>Item with the given Id.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageManager.GetById(Dynamicweb.Content.Items.Metadata.ItemType,System.String,System.Boolean,System.DateTime)">
 <summary>
 Selects the item by its Id.
 </summary>
 <param name="itemType">Item type.</param>
 <param name="id">Item Id.</param>
 <param name="draft">Is item in a draft mode</param>
 <param name="previewDate">Date to preview the content from</param>
 <returns>Item with the given Id.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageManager.GetById``1(System.String)">
 <summary>
 Selects the item by its Id.
 </summary>
 <typeparam name="T">Item type.</typeparam>
 <param name="id">Item Id.</param>
 <returns>Item with the given Id.</returns>
 <remarks>Uses the db to find the item</remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageManager.GetByPageId(System.String,System.Int32)">
 <summary>
 Selects all items by the given page Id.
 </summary>
 <param name="systemName">Item system name.</param>
 <param name="pageId">Page Id.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageManager.GetByPageId``1(System.Int32)">
 <summary>
 Selects all items by the given page Id.
 </summary>
 <typeparam name="T">Item type.</typeparam>
 <param name="pageId">Page Id.</param>
 <returns>Items.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageManager.GetByParentPageId(System.String,System.Int32)">
 <summary>
 Selects all items by the given parent page Id.
 </summary>
 <param name="systemName">Item system name.</param>
 <param name="pageId">Parent page Id.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageManager.GetByParentPageId``1(System.Int32)">
 <summary>
 Selects all items by the given parent page Id.
 </summary>
 <typeparam name="T">Item type.</typeparam>
 <param name="pageId">Parent page Id.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageManager.GetByParagraphId(System.String,System.Int32)">
 <summary>
 Selects all items by the given paragraph Id.
 </summary>
 <param name="systemName">Item system name.</param>
 <param name="paragraphId">Paragraph Id.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageManager.GetByParagraphId``1(System.Int32)">
 <summary>
 Selects all items by the given paragraph Id.
 </summary>
 <typeparam name="T">Item type.</typeparam>
 <param name="paragraphId">Paragraph Id.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageManager.GetItemType(System.Int32)">
 <summary>
 Returns the item type that corresponds to the given page.
 </summary>
 <param name="pageId">Page Id.</param>
 <returns>Item type.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageManager.GetByIds(System.String,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Get items by their Ids.
 </summary>
 <param name="systemName">Item system name.</param>
 <param name="ids">Item Ids.</param>
 <returns>Items with the given Ids.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Queries.StorageManager.GetByIds(Dynamicweb.Content.Items.Metadata.ItemType,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Get items by their Ids.
 </summary>
 <param name="itemType">Item type.</param>
 <param name="ids">Item Ids.</param>
 <returns>Items with the given Ids.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Queries.NamespaceDoc">
 <summary>
 The Dynamicweb.Content.Items.Queries reads and writes data for items to the database and makes it possible to search, filter and sort the data
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Rendering.ItemEditSettings">
 <summary>
 Represents an item edit frontend settings.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemEditSettings.FormId">
 <summary>
 Gets or sets edit form id form.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemEditSettings.Template">
 <summary>
 Gets or sets the template used to render the form.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemEditSettings.ItemType">
 <summary>
 Gets or sets information about the item type.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemEditSettings.Fields">
 <summary>
 Gets or sets the list of fields to render.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.ItemEditSettings.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Rendering.ItemEditTemplateExtender">
 <summary>
 Represents an item edit template extender.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemEditTemplateExtender.Item">
 <summary>
 Gets or sets the item that is being rendered.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemEditTemplateExtender.Settings">
 <summary>
 Gets or sets the item settings.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.ItemEditTemplateExtender.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Rendering.ItemListSettings">
 <summary>
 Represents an item list settings.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemListSettings.Template">
 <summary>
 Gets or sets the template used to render the list.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemListSettings.TotalItems">
 <summary>
 Gets or sets the total number of items available.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemListSettings.CurrentPage">
 <summary>
 Gets or sets the current page number.
 </summary>
 <remarks>This value is 1-based and if it's lower than 1, the first page is assumed.</remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemListSettings.TotalPages">
 <summary>
 Gets or sets the total number of pages available.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemListSettings.ItemType">
 <summary>
 Gets or sets information about the item type.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemListSettings.AllowEditing">
 <summary>
 Gets or sets value indicating whether items can be edited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemListSettings.GenericTagsOnly">
 <summary>
 Gets or sets value indicating whether to only render generic tags and ommit publisher-specific ones.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemListSettings.Fields">
 <summary>
 Gets or sets the list of fields to render.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.ItemListSettings.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Rendering.ItemListTemplateExtender">
 <summary>
 Represents an item list template extender.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemListTemplateExtender.Items">
 <summary>
 Gets or sets the items that are being rendered.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemListTemplateExtender.Settings">
 <summary>
 Gets or sets the list settings.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.ItemListTemplateExtender.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Rendering.ItemSettings">
 <summary>
 Renresents an item settings.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemSettings.Template">
 <summary>
 Gets or sets the template used to render the item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemSettings.TagPrefix">
 <summary>
 Gets or sets the tag prefix.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemSettings.Fields">
 <summary>
 Gets or sets the list of fields to render (in the order the must be rendered).
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemSettings.AllowEditing">
 <summary>
 Gets or sets value indicating whether item can be edited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemSettings.GenericTagsOnly">
 <summary>
 Gets or sets value indicating whether to only render generic tags and ommit publisher-specific ones.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemSettings.ValidationErrors">
 <summary>
 Gets or sets fields validation error messages.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.ItemSettings.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Rendering.ItemTemplateExtender">
 <summary>
 Represents an item template extender.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemTemplateExtender.Item">
 <summary>
 Gets or sets the item that is being rendered.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemTemplateExtender.Settings">
 <summary>
 Gets or sets the item settings.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.ItemTemplateExtender.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Rendering.ItemTypeSettings">
 <summary>
 Represents item type settings.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemTypeSettings.Template">
 <summary>
 Gets or sets the template used to render the item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemTypeSettings.TagPrefix">
 <summary>
 Gets or sets the tag prefix.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemTypeSettings.AllowEditing">
 <summary>
 Gets or sets value indicating whether items of the corresponding item type can be edited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemTypeSettings.GenericTagsOnly">
 <summary>
 Gets or sets value indicating whether to only render generic tags and ommit publisher-specific ones.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemTypeSettings.Fields">
 <summary>
 Gets or sets the list of fields to render.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.ItemTypeSettings.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Rendering.ItemTypeTemplateExtender">
 <summary>
 Represents an item type template extender.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemTypeTemplateExtender.ItemType">
 <summary>
 Gets or sets the item type that is being rendered.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.ItemTypeTemplateExtender.Settings">
 <summary>
 Gets or sets the item settings.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.ItemTypeTemplateExtender.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Rendering.PagingSettings">
 <summary>
 Represents paging settings.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.PagingSettings.Template">
 <summary>
 Gets or sets the target template.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.PagingSettings.TagPrefix">
 <summary>
 Gets or sets the tag prefix.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.PagingSettings.CurrentPage">
 <summary>
 Gets or sets the 1-based value representing the current page number.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.PagingSettings.TotalPages">
 <summary>
 Gets or sets the 1-based value representing the total number of pages.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.PagingSettings.LinkGenerator">
 <summary>
 Gets or sets the function that generates the URL to the given page.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.PagingSettings.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Rendering.Renderer">
 <summary>
 Provides methods and properties for rendering items in the frontend.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.Renderer.CachedItemTypes">
 <summary>
 Gets the item types cached for the current HTTP request.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.Renderer.PageId">
 <summary>
 Gets or sets the page Id.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.Renderer.ParagraphId">
 <summary>
 Gets or sets the paragraph Id.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.Renderer.DetailsParagraphId">
 <summary>
 Gets or sets the paragraph Id for details.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.Renderer.DetailsPageId">
 <summary>
 Gets or sets the page Id for details.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.Renderer.PagingPosition">
 <summary>
 Gets number of current page according to paging position
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.Renderer.TagNamespace">
 <summary>
 Gets or sets the tag namespace for all tags.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.Renderer.ValueConverter">
 <summary>
 Gets or sets the value converter.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Items.Rendering.Renderer.NestingLevel">
 <summary>
 Gets or sets current nesting level of rendering(increased by link to item, item list).
 </summary>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="tagNamespace">Tag namespace.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderItems(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.ItemEntry},Dynamicweb.Rendering.Template)">
 <summary>
 Renders items list.
 </summary>
 <param name="items">Items to render.</param>
 <param name="template">Template.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderItems(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.ItemEntry},Dynamicweb.Content.Items.Rendering.ItemListSettings)">
 <summary>
 Renders items list.
 </summary>
 <param name="items">Items to render.</param>
 <param name="settings">List settings.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderAreaItem(Dynamicweb.Content.Items.ItemEntry,Dynamicweb.Rendering.Template)">
 <summary>
 Renders the given item.
 </summary>
 <param name="item">Item.</param>
 <param name="template">Template.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderPagePropertyItem(Dynamicweb.Content.Items.ItemEntry,Dynamicweb.Rendering.Template)">
 <summary>
 Renders the given item.
 </summary>
 <param name="item">Item.</param>
 <param name="template">Template.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderPropertyItem(Dynamicweb.Content.Items.ItemEntry,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the given item.
 </summary>
 <param name="item">Item.</param>
 <param name="template">Template.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderItem(Dynamicweb.Content.Items.ItemEntry,Dynamicweb.Rendering.Template)">
 <summary>
 Renders the given item.
 </summary>
 <param name="item">Item.</param>
 <param name="template">Template.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderItem(Dynamicweb.Content.Items.ItemEntry,Dynamicweb.Content.Items.Rendering.ItemSettings)">
 <summary>
 Renders the given item.
 </summary>
 <param name="item">Item.</param>
 <param name="settings">Item settings.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderItemType(Dynamicweb.Content.Items.Metadata.ItemType,Dynamicweb.Rendering.Template)">
 <summary>
 Renders item type details.
 </summary>
 <param name="itemType">Item type.</param>
 <param name="template">Template.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderItemType(Dynamicweb.Content.Items.Metadata.ItemType,Dynamicweb.Content.Items.Rendering.ItemTypeSettings)">
 <summary>
 Renders item type details.
 </summary>
 <param name="itemType">Item type.</param>
 <param name="settings">Settings.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderEditForm(Dynamicweb.Content.Items.ItemEntry,Dynamicweb.Content.Items.Rendering.ItemEditSettings)">
 <summary>
 Renders item edit form.
 </summary>
 <param name="item">Item.</param>
 <param name="settings">Item settings.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderValidationError(Dynamicweb.Rendering.Template,System.Collections.Generic.List{System.Tuple{System.String,System.String,System.String}})">
 <summary>
 Renders validation error.
 </summary>
 <param name="template">Template.</param>
 <param name="errorMessages">Error messages.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderPaging(Dynamicweb.Content.Items.Rendering.PagingSettings)">
 <summary>
 Renders paging tags.
 </summary>
 <param name="settings">Paging settings.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderValue(System.Object,System.Type,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the value.
 </summary>
 <param name="value">Value to render.</param>
 <param name="valueType">Value type.</param>
 <param name="template">Template.</param>
 <param name="tagName">Tag name.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderEditFormBegin(System.IO.StringWriter,Dynamicweb.Content.Items.Rendering.ItemEditSettings)">
 <summary>
 Renders the begin of edit form.
 </summary>
 <param name="settings"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderEditFormContent(System.IO.StringWriter,Dynamicweb.Content.Items.ItemEntry,Dynamicweb.Content.Items.Rendering.ItemEditSettings)">
 <summary>
 Renders the content of edit form.
 </summary>
 <param name="settings"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderEditFormEnd(System.IO.StringWriter,Dynamicweb.Content.Items.Rendering.ItemEditSettings)">
 <summary>
 Renders the end of edit form.
 </summary>
 <param name="settings"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderGlobalTags(Dynamicweb.Rendering.Template)">
 <summary>
 Renders global tags.
 </summary>
 <param name="template">Template.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderPagingSequence(Dynamicweb.Rendering.Template,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Func{System.Int32,System.String})">
 <summary>
 Render paging loop.
 </summary>
 <param name="template">Loop.</param>
 <param name="startPage">Start page.</param>
 <param name="endPage">End page.</param>
 <param name="currentPage">Current page.</param>
 <param name="totalPages">Total pages.</param>
 <param name="tagPrefix">Tag prefix.</param>
 <param name="linkGenerator">Page URL generator.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderLink(System.String,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders action link.
 </summary>
 <param name="query">Query.</param>
 <param name="template">Template.</param>
 <param name="tagName">Tag name.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.NormalizeTagPrefix(System.String)">
 <summary>
 Normalizes tag prefix by removing reduntnat "." and ":" and cleaning leading and trailing whitespaces.
 </summary>
 <param name="prefix">Tag prefix to normalize.</param>
 <returns>Normalized tag prefix.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderValueInternal(System.Object,System.Type,Dynamicweb.Rendering.Template,System.String,Dynamicweb.Content.Items.Metadata.ItemField)">
 <summary>
 Renders the value.
 </summary>
 <param name="value">Value to render.</param>
 <param name="valueType">Value type.</param>
 <param name="template">Template.</param>
 <param name="tagName">Tag name.</param>
 <param name="meta">Meta information.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderValueInternal(System.Object,System.Type,Dynamicweb.Rendering.Template,System.String,Dynamicweb.Content.Items.Metadata.ItemField,System.Boolean)">
 <summary>
 Renders the value.
 </summary>
 <param name="value">Value to render.</param>
 <param name="valueType">Value type.</param>
 <param name="template">Template.</param>
 <param name="tagName">Tag name.</param>
 <param name="meta">Meta information.</param>
 <param name="tryRenderLinkedItem">Value indicating whether to try to render linked item if the field is of type "Link to item".</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderValueInternal(System.Object,System.Type,Dynamicweb.Rendering.Template,System.String,Dynamicweb.Content.Items.Metadata.ItemField,System.Boolean,Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Renders the value.
 </summary>
 <param name="value">Value to render.</param>
 <param name="valueType">Value type.</param>
 <param name="template">Template.</param>
 <param name="tagName">Tag name.</param>
 <param name="meta">Meta information.</param>
 <param name="tryRenderLinkedItem">Value indicating whether to try to render linked item if the field is of type "Link to item".</param>
 <param name="itemEntry">Item entry.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderRichText(Dynamicweb.Content.Items.ItemEntry,System.String,System.String,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders rich text editor's
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.RenderItemPageLink(Dynamicweb.Content.Items.Item,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders Item page link
 </summary>
 <param name="entry">Item value</param>
 <param name="template">Template value</param>
 <param name="tagName">Tag name value</param>
 <returns>Returns true if Item page link is rendered</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.Rendering.Renderer.GetItemType(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Returns the item type for a given item.
 </summary>
 <param name="item">Item instance.</param>
 <returns>Item type.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Items.Rendering.NamespaceDoc">
 <summary>
 The Dynamicweb.Content.Items.Rendering contains logic to render the fields of an item type when published in the frontend and also contains the template extender for items
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.NamespaceDoc">
 <summary>
 The Dynamicweb.Content.Items namespace contains the core infrastucture for managing and working with items. It contains the base data objects, the services and infrastructure to handle metadata, data access, querying items, the item type editors and more.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.Searching.NamespaceDoc">
 <summary>
 The Dynamicweb.Content.Items.Searching contains and indexing implementation of items used by the old index in Dynamicweb. Deprecated.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Items.ItemCollection">
 <summary>
 Represents a collection of items.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Items.ItemCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Item})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="items">Elements to be copied to this collection.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Management.CleanDatabase">
 <summary>
 Internal class to clean the Dynamicweb SQL-Server database to be SQL-Server 2012/Azure ready.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Management.CleanDatabase.#ctor">
 <summary>
 Prevents a default instance of the <see cref="T:Dynamicweb.Content.Management.CleanDatabase"/> class from being created.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Management.CleanDatabase.RemoveTriggers">
 <summary>
 Removes the triggers.
 </summary>
 <returns>The amount of triggers removed</returns>
</member>
<member name="M:Dynamicweb.Content.Management.CleanDatabase.DeleteTablesIfModuleIsNotInstalled(System.String,System.Collections.Generic.List{System.String},System.Boolean)">
 <summary>
 Deletes the tables if module is not installed.
 </summary>
 <param name="systemName">System name of the module.</param>
 <param name="tableNames">The table names to delete in a list.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.CleanDatabase.DeleteTable(System.String)">
 <summary>
 Deletes the table.
 </summary>
 <param name="tableName">Name of the table.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.CleanDatabase.RemoveExtendedPropertiesOnTables">
 <summary>
 Removes extended properties.
 </summary>
 <returns>
 The amount of properties removed
 </returns>
</member>
<member name="M:Dynamicweb.Content.Management.CleanDatabase.RemoveExtendedPropertiesOnColumns">
 <summary>
 Removes extended properties.
 </summary>
 <returns>
 The amount of properties removed
 </returns>
</member>
<member name="T:Dynamicweb.Content.Management.DatabaseIndex">
 <summary>
 Class DatabaseIndex used for managing and updating indexes on the database. This class cannot be inherited.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Management.FallbackApplicationAssembly">
 <summary>
 This class ensures that we always get an executing assembly to display version numbers.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Management.LicenseApplicationStartSubscriber">
 <summary>
 This notification subscriber handles to check if the license needs updating, when the application has been started after a IISRESET
 </summary>
</member>
<member name="T:Dynamicweb.Content.Management.Setup">
 <summary>
 Used for configuring and setting up Dynamicweb from the setup guide at /Admin/Access/Setup or from service desk installation tool.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Management.Setup.GlobalsettingsExists">
 <summary>
 Does the /files exists on this solution.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.Setup.SetupCompleted">
 <summary>
 Determines whether setup has been completed.
 </summary>
 <returns><c>True</c> if the solution has a /Files folder and a database connection</returns>
</member>
<member name="M:Dynamicweb.Content.Management.Setup.DatabaseSetupExists">
 <summary>
 Determines if there is a valid database setup.
 </summary>
 <returns><c>True</c> if server, database, username and password is set, or if server, database and trusted connection is set, or if a connection string is set.</returns>
</member>
<member name="M:Dynamicweb.Content.Management.Setup.CanConnectToDatabase">
 <summary>
 Determines whether Dynamicweb can connect to the database.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.Setup.CanConnectToDatabase(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Determines whether Dynamicweb can connect to the database.
 </summary>
 <param name="server">The server.</param>
 <param name="database">The database.</param>
 <param name="username">The username.</param>
 <param name="password">The password.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.Setup.CanConnectToDatabaseServer">
 <summary>
 Determines whether this instance can connect to the database server using the settings from GlobalSettings.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.Setup.CanConnectToDatabaseServer(System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Determines whether this instance can connect to the database server.
 </summary>
 <param name="server">The server.</param>
 <param name="username">The username.</param>
 <param name="password">The password.</param>
 <param name="connectionString">The connection string.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.Setup.HasDatabaseSchema">
 <summary>
 Determines whether the database a schema.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.Setup.GetConnectionString(System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Gets the connection string based on the passed parameters.
 </summary>
 <param name="server">The server.</param>
 <param name="database">The database.</param>
 <param name="username">The username.</param>
 <param name="password">The password.</param>
 <param name="useIntegratedSecurity">Use integrated security.</param>
 <returns>
 A connection string. If username and password are empty, trusted connection is returned.
 </returns>
</member>
<member name="M:Dynamicweb.Content.Management.Setup.SetupDatabaseSettings(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
 <summary>
 Setups the database settings in Global settings.
 </summary>
 <param name="server">The server.</param>
 <param name="database">The database.</param>
 <param name="username">The username.</param>
 <param name="password">The password.</param>
 <param name="integrated">if set to <c>true</c> use integrated mode.</param>
 <param name="forAzure">if set to <c>true</c> configure for azure SQL-Server (tcp:dbServerHostName,1433).</param>
 <param name="connectionString">The connection string.</param><remarks>
 If a connection string is specified all other parameters are ignored
 </remarks>
</member>
<member name="M:Dynamicweb.Content.Management.Setup.SetupDatabaseSchemaAndData(System.Boolean)">
 <summary>
 Sets up the database schema and data.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.Setup.SetupAdministrator(System.String,System.String,System.String,System.String)">
 <summary>
 Sets up the administrator user.
 </summary>
 <param name="username">The username.</param>
 <param name="password">The password.</param>
 <param name="email">The email.</param>
 <param name="name">The name.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.Setup.SetupFilesFolder">
 <summary>
 Sets up the files folder by copying the /Admin/Update/Files/ to /Files.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.Setup.SetupLicense(System.String)">
 <summary>
 Sets up the selected licenses.
 </summary>
 <param name="licenses">The licenses in the format "cmsLicense,ecomLicense", i.e. "cmsProfessional2014,ecomProfessional2014" or "cmsFree2014" or "cmsExpress2014,ecomBasic250".</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.Setup.HandleAction(System.String)">
 <summary>
 Handles the action from the setup wizard.
 </summary>
 <param name="action">The action.</param>
</member>
<member name="T:Dynamicweb.Content.Management.Setup.ActionResult">
 <summary>
 Returns a result of testing if Dynamicweb can connect to databases etc.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Management.Setup.ActionResult.Success">
 <summary>
 Gets or sets a value indicating whether the test was successful.
 </summary>
 <value>
   <c>true</c> if successful; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Content.Management.Setup.ActionResult.Exception">
 <summary>
 Gets or sets the exception that caused the test to not succeed.
 </summary>
 <value>
 The exception. <c>String.Empty</c> if <see cref="P:Dynamicweb.Content.Management.Setup.ActionResult.Success">Success</see>
 </value>
</member>
<member name="P:Dynamicweb.Content.Management.Setup.ActionResult.Message">
 <summary>
 Gets or sets the message of the exception.
 </summary>
 <value>
 The message.<c>String.Empty</c> if <see cref="P:Dynamicweb.Content.Management.Setup.ActionResult.Success">Success</see>
 </value>
</member>
<member name="M:Dynamicweb.Content.Management.Solution.GetInstalledSolutionSettings">
 <summary>
 Gets the installed solution settings from global settings.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.Solution.GetCMSSolutionDescription(System.String)">
 <summary>
 Gets the installed CMS solution description.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.Solution.GetCMSSolutionDescription">
 <summary>
 Gets the installed CMS solution description.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.Solution.GetEcomSolutionDescription">
 <summary>
 Gets the installed Ecom solution description.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.Solution.SaveInstalledSolutionSettings(System.Collections.Hashtable)">
 <summary>
 Saves the installed solution settings in global settings.
 </summary>
 <param name="settings">The settings.</param>
</member>
<member name="M:Dynamicweb.Content.Management.Solution.GetInstalledSolutions">
 <summary>
 Gets the installed solutions from the xml file.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.SolutionCollection.GetTypeDescriptions">
 <summary>
 Gets the type descriptions from xml file.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.SolutionCollection.GetSolutionDescriptions">
 <summary>
 Gets the solution descriptions from xml file.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.SolutionCollection.GetSolutionByDescription(Dynamicweb.Content.Management.TypeDescription,Dynamicweb.Content.Management.SolutionDescription)">
 <summary>
 Gets the solution by description
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Management.SolutionDescriptionCollection.Item(System.String)">
 <summary>
 Gets the solution description by id
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.UpdateScripts.FixItemTypeRestrictionNames">
 <summary>
 TFS task 13510
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Management.UpdateScripts.MakeInheritableItemTypes">
 <summary>
 TFS task 12991
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Management.UpdateScripts.FixSmartSearchCategoryRules">
 <summary>
 TFS task 16550. Remove _langID from Smartsearch rules for product categories fields
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Management.UpdateScripts.Fix20388">
 <summary>
 TFS task 20388. Clean [Page].PagePropertyItemId if item not found
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Management.UpdateScripts.UpdateDw8IconsToDw9KnownIcons">
 <summary>
 TFS task 23740
 </summary>
</member>
<member name="M:Dynamicweb.Content.Management.UpdateScripts.FixItemTypeProductEditorOnDw9Upgrade">
 <summary>
 TFS task 29652
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Management.UpdateScripts.FixQueryWidgetsQueryID">
 <summary>
 TFS#42279
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Management.UpdateScripts.FixBrokenGiftCardCodes">
 <summary>
 TFS task 44807
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Management.ModuleCollection">
 <summary>
 A collection of <see cref="T:Dynamicweb.Modules.Module"></see>
 </summary>
</member>
<member name="M:Dynamicweb.Content.Management.ModuleCollection.Contains(Dynamicweb.Modules.Module)">
 <summary>
 Determines whether the collection contains the specified module.
 </summary>
 <param name="module">The module.</param><returns>
   <c>true</c> if collection contains the specified module; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.Content.Management.ModuleCollection.Contains(System.String)">
 <summary>
 Determines whether contains a module with the specified system name.
 </summary>
 <param name="systemName">Name of the system.</param><returns>
   <c>true</c> if collection contains the specified system name; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.Content.Management.ModuleCollection.Remove(Dynamicweb.Modules.Module)">
 <summary>
 Removes the specified module.
 </summary>
 <param name="moduleInstance">The module.</param>
</member>
<member name="P:Dynamicweb.Content.Management.ModuleCollection.Item(System.String)">
 <summary>
 Gets or sets the element at the specified index.
 </summary>
 <returns>The element at the specified index.</returns>
 <exception cref="T:System.ArgumentOutOfRangeException">
 <paramref name="systemName" /> is less than 0.-or-<paramref name="systemName" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />. </exception>
</member>
<member name="M:Dynamicweb.Content.Management.ModuleCollection.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Content.Management.ModuleCollection" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Management.ModuleCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Modules.Module})">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Content.Management.ModuleCollection" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Management.ModuleCollection.Localize">
 <summary>
 Localizes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Management.ModuleCollection.Sort">
 <summary>
 Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the default comparer.
 </summary>
 <exception cref="T:System.InvalidOperationException">The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <c>T</c>.</exception>
</member>
<member name="T:Dynamicweb.Content.Management.ModuleCollection.ModuleComparer">
 <summary>
 Class helps to compare Module objects
 </summary>
</member>
<member name="M:Dynamicweb.Content.Management.ModuleCollection.ModuleComparer.Compare(Dynamicweb.Modules.Module,Dynamicweb.Modules.Module)">
 <summary>
 Defines a method that helps to compare two Module objects
 </summary>
 <param name="x">The first module to compare</param>
 <param name="y">The second module to compare</param>
 <returns>Integer that indicates the relative values of x and y</returns>
</member>
<member name="T:Dynamicweb.Content.Management.NamespaceDoc">
 <summary>
 Internal api for handling installation, solution, iis, licenses and other management specific features
 </summary>
</member>
<member name="T:Dynamicweb.Content.Management.AspNetLicense">
 <summary>
 This class contains function to return Asp.net email licence.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Management.AspNetLicense.GetAspNetMXLicence">
 <summary>
 Returns an AspNetMX licence.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Management.TypeDescriptionCollection.Item(System.String)">
 <summary>
 Gets the type description by id 
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.TypeDescriptionCollection.GetTypeDescriptionByModule(System.String)">
 <summary>
 Gets the type description by module 
 </summary>
 <returns></returns>
</member>
<member name="F:Dynamicweb.Content.Management.EcomLicense.Type.Basic">
 <summary>
 Basic edition.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Management.EcomLicense.Type.Professional">
 <summary>
 Professional edition.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Management.EcomLicense.Type.Enterprise">
 <summary>
 Enterprise edition.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Management.EcomLicense.GetLicense">
 <summary>
 Returns the current ecom license of this site
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Management.EcomLicense.GetCountOfAllProductsWithoutVariants">
 <summary>
 Gets the count of all products without variants.
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Content.Management.Installation">
 <summary>
 Class Installation is used to provide information on the installation of the solution
 </summary>
</member>
<member name="P:Dynamicweb.Content.Management.Installation.IsCustomSolution">
 <summary>
 Returns a value indicating if this solution is custom
 </summary>
 <value>The is custom solution.</value>
</member>
<member name="P:Dynamicweb.Content.Management.Installation.DynamicwebAssemblyVersion">
 <summary>
 The Dynamicweb assembly version
 </summary>
 <value>The dynamicweb assembly version.</value>
</member>
<member name="M:Dynamicweb.Content.Management.Installation.DynamicwebAssemblyVersionInformation">
 <summary>
 The Dynamicweb assembly version information.
 </summary>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Content.Management.Installation.CurrentVersion">
 <summary>
 Returns the current version of Dynamicweb.
 </summary>
 <returns>A string containing the current version number.</returns>
</member>
<member name="M:Dynamicweb.Content.Management.Installation.HasVersion(System.String)">
 <summary>
 Checks whether the current version number meets a minimum version requirement.
 </summary>
 <param name="varVersion">The minimum required version number in dotted IP format (ie. xxx.xxx.xxx.xxx).</param>
 <returns>True if the current version is greater than or equal to the minimum required version</returns>
 <remarks>The maximum version is 255.255.255.255!</remarks>
</member>
<member name="M:Dynamicweb.Content.Management.Installation.CQuad(System.String)">
 <summary>
 Converts a IPv4 address to Quad.
 </summary>
 <param name="varIPv4">The address to convert.</param>
 <remarks>
 The address must be in dotted decimal notation.
 E.g. 192.168.10.1
 </remarks>
</member>
<member name="P:Dynamicweb.Content.Management.Installation.SqlServerVersion">
 <summary>
 Gets the SQL server version.
 </summary>
 <value>The SQL server version.</value>
</member>
<member name="T:Dynamicweb.Content.Management.License">
 <summary>
 Class License used by Dynamicweb to handle license limitations and information.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Management.License.Type">
 <summary>
 Solution type Enum
 </summary>
</member>
<member name="F:Dynamicweb.Content.Management.License.Type.Corporate">
 <summary>
 The corporate
 </summary>
</member>
<member name="F:Dynamicweb.Content.Management.License.Type.Business">
 <summary>
 The business
 </summary>
</member>
<member name="F:Dynamicweb.Content.Management.License.Type.LightStandard">
 <summary>
 The light standard
 </summary>
</member>
<member name="F:Dynamicweb.Content.Management.License.Type.LightMicro15">
 <summary>
 The light micro15
 </summary>
</member>
<member name="F:Dynamicweb.Content.Management.License.Type.LightMicro30">
 <summary>
 The light micro30
 </summary>
</member>
<member name="F:Dynamicweb.Content.Management.License.Type.LightFree">
 <summary>
 The light free
 </summary>
</member>
<member name="F:Dynamicweb.Content.Management.License.Type.LightExpress">
 <summary>
 The light express
 </summary>
</member>
<member name="F:Dynamicweb.Content.Management.License.Type.Professional">
 <summary>
 Professional license.
 </summary>
</member>
<member name="F:Dynamicweb.Content.Management.License.Type.Enterprise">
 <summary>
 Enterprise license.
 </summary>
</member>
<member name="F:Dynamicweb.Content.Management.License.Type.Free2014">
 <summary>
 The free2014
 </summary>
</member>
<member name="F:Dynamicweb.Content.Management.License.Type.Express2014">
 <summary>
 The express2014
 </summary>
</member>
<member name="F:Dynamicweb.Content.Management.License.Type.Standard2014">
 <summary>
 The standard2014
 </summary>
</member>
<member name="F:Dynamicweb.Content.Management.License.Type.Professional2014">
 <summary>
 The professional2014
 </summary>
</member>
<member name="F:Dynamicweb.Content.Management.License.Type.Premium2014">
 <summary>
 The premium2014
 </summary>
</member>
<member name="F:Dynamicweb.Content.Management.License.Type.Corporate2014">
 <summary>
 The corporate2014
 </summary>
</member>
<member name="F:Dynamicweb.Content.Management.License.Type.Enterprise2014">
 <summary>
 The enterprise2014
 </summary>
</member>
<member name="M:Dynamicweb.Content.Management.License.GetLicense">
 <summary>
 Returns the current license of this site
 </summary>
 <returns>Type.</returns>
</member>
<member name="M:Dynamicweb.Content.Management.License.GetLicenseName">
 <summary>
 Gets the name of the license.
 </summary>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Content.Management.License.GetMaxNumberOfPages">
 <summary>
 Returns the max number of pages this site can have
 </summary>
 <returns>System.Double.</returns>
</member>
<member name="M:Dynamicweb.Content.Management.License.CanCopyPage(Dynamicweb.Content.CopyPageInfo)">
 <summary>
 Checks the page copying possibility.
 </summary>
 <param name="copyPageInfo">The <see cref="T:Dynamicweb.Content.CopyPageInfo"/>.</param>
 <returns>True, if pages and items license limitation was not exceeded, otherwise, False.</returns>
</member>
<member name="M:Dynamicweb.Content.Management.License.GetTotalItemsCount">
 <summary>
 Gets the total items count.
 </summary>
 <returns>System.Int32.</returns>
</member>
<member name="M:Dynamicweb.Content.Management.License.CanCreateMoreItems">
 <summary>
 Returns if it is allowed to create more pages or paragraphs with items
 </summary>
 <returns><c>true</c> if this instance [can create more items]; otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Content.Management.License.LightVersionPages">
 <summary>
 Returns the number of pages in solution
 </summary>
 <remarks>Return an integer with the count of pages in page table</remarks>
</member>
<member name="M:Dynamicweb.Content.Management.License.CreateLightVersionPages">
 <summary>
 Returns true if the site can create more pages
 </summary>
 <returns><c>true</c> if the license still permits more pages to be created, <c>false</c> otherwise.</returns>
</member>
<member name="M:Dynamicweb.Content.Management.License.CanCreateLightVersionPages">
 <summary>
 Returns true if the site can create more pages.
 </summary>
 <returns><c>true</c> if the license still permits more pages to be created, <c>false</c> otherwise.</returns>
</member>
<member name="M:Dynamicweb.Content.Management.License.GetStandardModules(Dynamicweb.Content.Management.License.Type)">
 <summary>
 Gets the standard modules.
 </summary>
 <param name="License">The license.</param>
 <returns>Generic.List(Of System.String).</returns>
</member>
<member name="M:Dynamicweb.Content.Management.License.CanCreateMoreWebsites">
 <summary>
 Determines whether this instance [can create more websites].
 </summary>
 <returns><c>true</c> if this instance [can create more websites]; otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Content.Management.License.GetCountOfExistingWebsites">
 <summary>
 Gets the count of existing websites.
 </summary>
 <returns>System.Int32.</returns>
</member>
<member name="M:Dynamicweb.Content.Management.License.GetCountOfExistingSubscribers">
 <summary>
 Gets the count of existing subscribers.
 </summary>
 <returns>System.Int32.</returns>
</member>
<member name="M:Dynamicweb.Content.Management.License.GetMaxSubscribers">
 <summary>
 Gets the maximum subscribers.
 </summary>
 <returns>System.Int32.</returns>
</member>
<member name="M:Dynamicweb.Content.Management.License.CanCreateMoreSubscribers">
 <summary>
 Determines whether this instance [can create more subscribers].
 </summary>
 <returns><c>true</c> if this instance [can create more subscribers]; otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Content.Management.License.CheckLicense">
 <summary>
 Check current license and update to relevant if needed(Saas2014 to Professional2014)
 </summary>        
</member>
<member name="M:Dynamicweb.Content.Management.License.InstallWebSitesModule">
 <summary>
 Installs Websites module to Free, Express, Standard 2014 solutions when upgrade to 8.7
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Management.Version.CompareTo(System.String)">
 <summary>
 Compares this instance to the given version number.
 If the given version number is empty string or <c>null</c>, this instance is greater.
 </summary>
 <param name="other">The version number to compare to.</param>
 <returns>
 -1 if this instance is less than the the given version number.
 0 if this instance is equal to the given version numbers.
 1 if this instance is greater than the given version number.
 </returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Management.Version.CompareTo(Dynamicweb.Content.Management.Version)">
 <summary>
 Compares this instance to the given <see cref="P:Dynamicweb.Content.Management.Version.Version" />.
 If the given <see cref="P:Dynamicweb.Content.Management.Version.Version" /> is <c>null</c>, this instance is greater.
 </summary>
 <param name="other">The <see cref="P:Dynamicweb.Content.Management.Version.Version" /> to compare to.</param>
 <returns>
 -1 if this instance is less than the the given <see cref="P:Dynamicweb.Content.Management.Version.Version" />.
 0 if this instance is equal to the given <see cref="P:Dynamicweb.Content.Management.Version.Version" />.
 1 if this instance is greater than the given <see cref="P:Dynamicweb.Content.Management.Version.Version" />.
 </returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Management.Version.GetDynamicwebDllVersion">
 <summary>
 Gets dynamicweb.dll version object
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Management.Version.HasDynamicwebVersion(System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 Checks whether the current version number meets a minimum version requirement.
 </summary>
 <param name="major">The major version number.</param>
 <param name="minor">The minor version number.</param>
 <param name="build">The build number.</param>
 <param name="revision">The revision number.</param>
 <returns>True if the current version is greater than or equal to the minimum required version</returns>
</member>
<member name="M:Dynamicweb.Content.Management.VersionCollection.SortByVersion">
 <summary>
 Sorts the list based on the <see cref="P:Dynamicweb.Content.Management.Version.Version">Version</see> of the category.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Management.VersionCollection.VersionSorter.Compare(Dynamicweb.Content.Management.Version,Dynamicweb.Content.Management.Version)">
 <summary>
 Compares two instances of <see cref="T:Dynamicweb.Content.Management.Version" /> by looking at their <see cref="P:Dynamicweb.Content.Management.Version.Version">Version</see>.
 </summary>
 <param name="x">The left hand side object in the comparison.</param>
 <param name="y">The right hand side object in the comparison.</param>
 <remarks><seealso cref="T:System.String">String.Compare</seealso></remarks>
</member>
<member name="T:Dynamicweb.Content.ApprovalType">
<summary>
-2 = Draft, -1 = versions, 0 = normal, >0 = Some workflow
</summary>
</member>
<member name="T:Dynamicweb.Content.Social.Channel">
 <summary>
 Represents a channel.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Channel.Name">
 <summary>
 Gets or sets the name of the channel.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Channel.IsActive">
 <summary>
 Gets or sets value indicating whether channel is active.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Channel.Parameters">
 <summary>
 Gets or sets the XML string representing channel parameters.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Channel.Type">
 <summary>
 Gets or sets the type of the channel.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Channel.ChannelType">
 <summary>
 Gets or sets the type of the channel.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Channel.Created">
 <summary>
 Gets the date and time when the channel was created.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Channel.Updated">
 <summary>
 Gets the date and time when the channel was updated.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Channel.Posts">
 <summary>
 Gets the list of all posts related to this channel.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Channel.Adapter">
 <summary>
 Gets or sets the reference to <see cref="T:Dynamicweb.Content.Social.Adapter">Adapter</see> that handles the actual communication with the social media platform.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Channel.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Channel.Fill(System.Data.IDataReader)">
 <summary>
 Fills object properties with data from the given <see cref="T:System.Data.IDataReader">IDataReader</see> object.
 </summary>
 <param name="reader">Reader to read data from.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Channel.FillRow(System.Data.DataRow)">
 <summary>
 Fills the given <see cref="T:System.Data.DataRow">DataRow</see> object with object state values.
 </summary>
 <param name="row">Row to write data into.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Channel.GetChannelById(System.Int32)">
 <summary>
 Returns the channel by its Id.
 </summary>
 <param name="id">Channel Id.</param>
 <returns>A channel with the given Id or null (Nothing in Visual Basic) if the channel with the given Id doesn't exist.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Channel.GetChannels">
 <summary>
 Returns a list of all available channels.
 </summary>
 <returns>A list of all available channels.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Channel.GetActiveChannels">
 <summary>
 Returns a list of all active channels.
 </summary>
 <returns>A list of all active channels.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Channel.GetAvailableChannels">
 <summary>
 Returns a list of all active and available channels.
 </summary>
 <returns>A list of all active and available channels.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Channel.GetChannels(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Returns a list of all channels that match the given SQL query.
 </summary>
 <param name="commandBuilder">The <see cref="T:Dynamicweb.Data.CommandBuilder" />.</param>
 <returns>A list of all channels that match the given SQL query.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Social.ChannelAvailabilityStatus">
 <summary>
 Represents social media platform availability status through the given channel.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Social.ChannelAvailabilityStatus.Available">
 <summary>
 Channel is available.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Social.ChannelAvailabilityStatus.ConnectionError">
 <summary>
 Error connecting to the social media platform.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Social.ChannelAvailabilityStatus.InvalidCredentials">
 <summary>
 Invalid credentials (OAuth access key).
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Social.ChannelAvailabilityStatus.UnknownError">
 <summary>
 Unknown error occured.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Social.ChannelAvailability">
 <summary>
 Represents a channel availability.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.ChannelAvailability.Available">
 <summary>
 Gets the availability that corresponds to the "Available" state of the channel.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.ChannelAvailability.Status">
 <summary>
 Gets or sets the availability status.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.ChannelAvailability.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.ChannelAvailability.#ctor(Dynamicweb.Content.Social.ChannelAvailabilityStatus)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="status">Availability status.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.ChannelAvailability.ToString">
 <summary>
 Returns a string representation of the current object.
 </summary>
 <returns>A string representation of the current object.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.ChannelAvailability.CompareTo(Dynamicweb.Content.Social.ChannelAvailability)">
 <summary>
 Compares the current object to the given one.
 </summary>
 <param name="other">Object to compare to.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.ChannelAvailability.CompareToHidden(System.Object)">
 <summary>
 Compares the current object to the given one.
 </summary>
 <param name="obj">Object to compare to.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Social.ChannelCollection">
 <summary>
 Represents a collection of channels.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.ChannelCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Social.SocialFolder.SMP_SYSTEM_FOLDER_DRAFTS">
 <summary>
 The name for system folder "Drafts"
 </summary>
</member>
<member name="F:Dynamicweb.Content.Social.SocialFolder.SMP_SYSTEM_FOLDER_PUBLISHED">
 <summary>
 The name for system folder "Published"
 </summary>
</member>
<member name="F:Dynamicweb.Content.Social.SocialFolder.SMP_SYSTEM_FOLDER_SCHEDULED">
 <summary>
 The name for system folder "Scheduled"
 </summary>
</member>
<member name="M:Dynamicweb.Content.Social.SocialFolder.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Content.Social.SocialFolder" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Social.SocialFolder.GetAllCustomFolders(System.Boolean,System.Int32)">
 <summary>
 Gets all custom folders.
 </summary>
 <param name="onlyParent">if set to <c>true</c> parent only.</param>
 <param name="topFolderId">The top folder id.</param>
 <returns>The colection of folders</returns>
</member>
<member name="M:Dynamicweb.Content.Social.SocialFolder.IsSystemFolder(System.String,System.Int32)">
 <summary>
 Determines whether is system folder by specified folder name or folder id.
 </summary>
 <param name="folderName">Name of the folder.</param>
 <param name="folderId">The folder id.</param><returns>
   <c>true</c> if system folder; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.Content.Social.SocialFolder.GetSocialFolderIdByFolderName(System.String,System.Int32)">
 <summary>
 Gets the name of the social folder id by folder.
 </summary>
 <param name="folderName">Name of the folder.</param>
 <param name="topFolderId">The top folder id.</param>
 <returns>The id of folder</returns>
</member>
<member name="M:Dynamicweb.Content.Social.SocialFolder.GetSocialFolderById(System.String)">
 <summary>
 Gets the social folder by id.
 </summary>
 <param name="folderId">The folder id.</param>
 <returns>The folder</returns>
</member>
<member name="M:Dynamicweb.Content.Social.SocialFolder.GetSocialFolderTopFolderId(System.String)">
 <summary>
 Gets the social folder top folder id.
 </summary>
 <param name="folderId">The folder id.</param>
 <returns>The id of top folder</returns>
</member>
<member name="M:Dynamicweb.Content.Social.SocialFolder.GetSocialFoldersByParentId(System.Int32)">
 <summary>
 Gets the social folders by parent id.
 </summary>
 <param name="parentId">The parent id.</param>
 <returns>The colection of folders</returns>
</member>
<member name="M:Dynamicweb.Content.Social.SocialFolder.GetSocialFoldersByTopFolderId(System.Int32)">
 <summary>
 Gets the social folders by top folder id.
 </summary>
 <param name="topFolderId">The top folder id.</param>
 <returns>The colection of folders</returns>
</member>
<member name="M:Dynamicweb.Content.Social.SocialFolder.GetAllSocialFolders">
 <summary>
 Gets all social folders.
 </summary>
 <returns>All folders</returns>
</member>
<member name="M:Dynamicweb.Content.Social.SocialFolder.GetFolder(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Gets the social by SQL query.
 </summary>
 <param name="commandBuilder">The <see cref="T:Dynamicweb.Data.CommandBuilder" />.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Content.Social.SocialFolderCollection">
 <summary>
 Represents collection of folders
 </summary>
</member>
<member name="T:Dynamicweb.Content.Social.Metrics.ReactionDynamics">
 <summary>
 Represents reaction dynamics. This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Metrics.ReactionDynamics.Item(System.DateTime)">
 <summary>
 Gets or sets the number of reactions for a given date.
 </summary>
 <param name="date">Date.</param>
 <returns>The number of reactions.</returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Metrics.ReactionDynamics.Count">
 <summary>
 Gets the total number of elements.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Metrics.ReactionDynamics.MinDate">
 <summary>
 Gets the current minimum date.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Metrics.ReactionDynamics.MaxDate">
 <summary>
 Gets the current maximum date.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Metrics.ReactionDynamics.Dates">
 <summary>
 Gets the list of ordered dates.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Metrics.ReactionDynamics.Reactions">
 <summary>
 Gets the list of reactions ordered by dates.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.ReactionDynamics.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.ReactionDynamics.#ctor(System.Collections.Generic.IDictionary{System.DateTime,System.Int32})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="data">Initial data.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.ReactionDynamics.Add(System.DateTime,System.Int32)">
 <summary>
 Adds new element.
 </summary>
 <param name="date">Date.</param>
 <param name="reactions">Number of reactions.</param>
 <returns>Value indicating whether element was added.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.ReactionDynamics.AddOrUpdate(System.DateTime,System.Int32)">
 <summary>
 Adds new or updates existing element.
 </summary>
 <param name="date">Date.</param>
 <param name="reactions">Number of reactions.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.ReactionDynamics.AddRange(System.Collections.Generic.IDictionary{System.DateTime,System.Int32})">
 <summary>
 Adds new elements according to the given values.
 </summary>
 <param name="values">Values.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.ReactionDynamics.AddOrUpdateRange(System.Collections.Generic.IDictionary{System.DateTime,System.Int32})">
 <summary>
 Adds new or updates existing elements according to the given values.
 </summary>
 <param name="values">Values.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.ReactionDynamics.Accumulate(System.DateTime,System.Int32)">
 <summary>
 Accumulates the number of reactions for the given element.
 </summary>
 <param name="time">Date.</param>
 <param name="reactions">Reactions.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.ReactionDynamics.AccumulateRange(System.Collections.Generic.IDictionary{System.DateTime,System.Int32})">
 <summary>
 Accumulates the number of reactions for every element in a given sequence.
 </summary>
 <param name="values">Values.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.ReactionDynamics.Remove(System.DateTime)">
 <summary>
 Removes the element with the given date.
 </summary>
 <param name="date">Date.</param>
 <returns>The number of reactions for the removed date or -1, if the given date was not found.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.ReactionDynamics.RemoveRange(System.Collections.Generic.IEnumerable{System.DateTime})">
 <summary>
 Removes all elements with given dates.
 </summary>
 <param name="dates">Dates.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.ReactionDynamics.Clear">
 <summary>
 Removes all elements.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.ReactionDynamics.ContainsDate(System.DateTime)">
 <summary>
 Returns value indicating whether this object contains any elements with the given date.
 </summary>
 <param name="date">Date.</param>
 <returns>Value indicating whether this object contains any elements with the given dates.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.ReactionDynamics.ContainsReactionCount(System.Int32)">
 <summary>
 Returns value indicating whether this object contains any elements with the given number of reactions.
 </summary>
 <param name="reactions">Number of reactions.</param>
 <returns>Value indicating whether this object contains any elements with the given number of reactions.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.ReactionDynamics.ToDictionary">
 <summary>
 Returns a dictionary representation of the current object.
 </summary>
 <returns>A dictionary representation of the current object.</returns>
 <remarks>Dictionary elements are sorted by keys.</remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.ReactionDynamics.ToList">
 <summary>
 Returns a list representation of the current object.
 </summary>
 <returns>A list representation of the current object.</returns>
 <remarks>List elements are sorted by keys.</remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.ReactionDynamics.GetEnumerator">
 <summary>
 Returns an object that can be used to iterate over the elements in the collection.
 </summary>
 <returns>An object that can be used to iterate over the elements in the collection.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.ReactionDynamics.GetEnumeratorHidden">
 <summary>
 Returns an object that can be used to iterate over the elements in the collection.
 </summary>
 <returns>An object that can be used to iterate over the elements in the collection.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Social.Metrics.PostMetricsRequest">
 <summary>
 Represents a post metrics request. This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Metrics.PostMetricsRequest.Post">
 <summary>
 Gets or sets the target post.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Metrics.PostMetricsRequest.Filters">
 <summary>
 Gets or sets the filters.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Metrics.PostMetricsRequest.IsValid">
 <summary>
 Gets value indicating whether this request is valid.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.PostMetricsRequest.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.PostMetricsRequest.#ctor(Dynamicweb.Content.Social.Post)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="post">The target post.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.PostMetricsRequest.#ctor(Dynamicweb.Content.Social.Post,System.Collections.Generic.IDictionary{System.String,System.Object})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="post">The target post.</param>
 <param name="filters">The filters.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Social.Metrics.FactCollection">
 <summary>
 Represents a collection of facts.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.FactCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.FactCollection.AddOrUpdate``1(System.String,``0)">
 <summary>
 Adds new or updates existing fact value.
 </summary>
 <typeparam name="T">Value type.</typeparam>
 <param name="name">Fact name.</param>
 <param name="newValue">New value.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.FactCollection.AddOrUpdate``1(System.String,System.Func{``0},System.Func{System.String,``0})">
 <summary>
 Adds new or updates existing fact value.
 </summary>
 <typeparam name="T">Value type.</typeparam>
 <param name="name">Fact name.</param>
 <param name="addValueFactory">Add value factory.</param>
 <param name="updateValueFactory">Update value factory.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.FactCollection.GetOrDefault``1(System.String,``0)">
 <summary>
 Returns the value of the fact with the given name or a specified default value is the given fact cannot be found.
 </summary>
 <typeparam name="T">Value type.</typeparam>
 <param name="name">Fact name.</param>
 <param name="defaultValue">Default value.</param>
 <returns>Fact value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.FactCollection.GetOrDefault(System.String,System.Object)">
 <summary>
 Returns the value of the fact with the given name or a specified default value is the given fact cannot be found.
 </summary>
 <param name="name">Fact name.</param>
 <param name="defaultValue">Default value.</param>
 <returns>Fact value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.FactCollection.GetOrDefault``1(System.String,System.Func{``0})">
 <summary>
 Returns the value of the fact with the given name or a specified default value is the given fact cannot be found.
 </summary>
 <typeparam name="T">Value type.</typeparam>
 <param name="name">Fact name.</param>
 <param name="defaultValueFactory">Default value factory.</param>
 <returns>Fact value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.FactCollection.GetKeyForItem(Dynamicweb.Content.Social.Metrics.Fact)">
 <summary>
 Gets the item key.
 </summary>
 <param name="item">Item.</param>
 <returns>Item key.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Social.Metrics.Fact">
 <summary>
 Represents a fact. This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Metrics.Fact.Name">
 <summary>
 Gets the fact name.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Metrics.Fact.Value">
 <summary>
 Gets the fact value.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.Fact.#ctor(System.String,System.Object)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">Fact name.</param>
 <param name="value">Fact value.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.Fact.ToString">
 <summary>
 Returns a string representation of the current object.
 </summary>
 <returns>A string representation of the current object.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.Fact.Equals(System.Object)">
 <summary>
 Returns value indicating whether this object is equal to the given one.
 </summary>
 <param name="obj">Object to compare to.</param>
 <returns>Value indicating whether this object is equal to the given one.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.Fact.GetHashCode">
 <summary>
 Returns a hash code of the given instance.
 </summary>
 <returns>A hash code of the given instance.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.Fact.GetInt32">
 <summary>
 Returns an <see cref="T:System.Int32">Int32</see> value of this object.
 </summary>
 <returns>Value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.Fact.GetInt64">
 <summary>
 Returns an <see cref="T:System.Int64">Int64</see> value of this object.
 </summary>
 <returns>Value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.Fact.GetDouble">
 <summary>
 Returns a <see cref="T:System.Double">Double</see> value of this object.
 </summary>
 <returns>Value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.Fact.GetBoolean">
 <summary>
 Returns a <see cref="T:System.Boolean">Boolean</see> value of this object.
 </summary>
 <returns>Value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.Fact.GetString">
 <summary>
 Returns a <see cref="T:System.String">String</see> value of this object.
 </summary>
 <returns>Value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.Fact.GetString(System.String)">
 <summary>
 Returns a <see cref="T:System.String">String</see> value of this object.
 </summary>
 <param name="format">Format.</param>
 <returns>Value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.Fact.GetString(System.String,System.IFormatProvider)">
 <summary>
 Returns a <see cref="T:System.String">String</see> value of this object.
 </summary>
 <param name="format">Format.</param>
 <param name="provider">Format provider.</param>
 <returns>Value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.Fact.CompareTo(Dynamicweb.Content.Social.Metrics.Fact)">
 <summary>
 Compares the current object with the given one.
 </summary>
 <param name="other">Object to compare to.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.Fact.CompareToHidden(System.Object)">
 <summary>
 Compares the current object with the given one.
 </summary>
 <param name="obj">Object to compare to.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Social.Metrics.PostMetrics">
 <summary>
 Represents a post metrics. 
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Metrics.PostMetrics.Facts">
 <summary>
 Gets or sets the facts.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Metrics.PostMetrics.Dynamics">
 <summary>
 Gets or sets reaction dynamics.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Metrics.PostMetrics.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Social.Metrics.NamespaceDoc">
 <summary>
 Metrics used by the social media publishing engine
 </summary>
</member>
<member name="T:Dynamicweb.Content.Social.FieldType">
 <summary>
 Represents a channel field type.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Social.FieldType.Body">
 <summary>
 The message body.
 </summary>
</member>
<member name="F:Dynamicweb.Content.Social.FieldType.Title">
 <summary>
 The title of the message.
 </summary>
</member>
<member name="F:Dynamicweb.Content.Social.FieldType.Link">
 <summary>
 The link attached to the message.
 </summary>
</member>
<member name="F:Dynamicweb.Content.Social.FieldType.Image">
 <summary>
 The image attached to the message.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Social.Field">
 <summary>
 Represents object that describes a field which can be used to create a post for a channel.
 The <see cref="T:Dynamicweb.Content.Social.Adapter">Adapter</see> returns a list of fields it supports.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Social.Field.Validate">
 <summary>
 Gets or sets the is validate the field value.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Social.Field.MinLength">
 <summary>
 Gets or sets the minimum length of the field value.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Social.Field.MaxLength">
 <summary>
 Gets or sets the maximum length of the field value.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Social.Field.Label">
 <summary>
 Gets or sets the field label.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Social.Field.Type">
 <summary>
 Gets or sets the field type.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Social.Field.FieldType">
 <summary>
 Gets or sets the field type.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Social.Field.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Field.#ctor(System.String,Dynamicweb.Content.Social.FieldType)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="label">Field label.</param>
 <param name="type">Field type.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Field.#ctor(System.Boolean,System.Int32,System.Int32,System.String,Dynamicweb.Content.Social.FieldType)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="validate">Is validate the field value.</param>
 <param name="minLength">Minimum field value length.</param>
 <param name="maxLength">Maximum field value length.</param>
 <param name="label">Field label.</param>
 <param name="type">Field type.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Field.ToString">
 <summary>
 Returns a string representation of the current object.
 </summary>
 <returns>A string representation of the current object.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Social.Adapter">
 <summary>
 Represents a base class for implmenting social media adapters for publishing in Online Marketing Center.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Social.Adapter.Name">
 <summary>
 Gets the name of the channel.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Adapter.Icon">
 <summary>
 Gets the virtual path to the small (16x16 pixels) icon for this adapter.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Adapter.GetMetrics(Dynamicweb.Content.Social.Metrics.PostMetricsRequest)">
 <summary>
 Get post metrics data
 </summary>
 <param name="request">The request post metrics</param>
 <returns>Returns the post metrics data</returns>
</member>
<member name="M:Dynamicweb.Content.Social.Adapter.Publish(Dynamicweb.Content.Social.PublishData)">
 <summary>
 Publishes the specified message.
 </summary>
 <param name="data">The message data.</param>
 <returns>The result of publishing a message.</returns>
</member>
<member name="M:Dynamicweb.Content.Social.Adapter.OnValidate(Dynamicweb.Content.Social.PublishData,System.Collections.Generic.IEnumerable{Dynamicweb.Content.Social.Field})">
 <summary>
 Validates the specified message.
 </summary>
 <param name="data">The message.</param>
 <returns>Validation result.</returns>
</member>
<member name="M:Dynamicweb.Content.Social.Adapter.ValidateField(Dynamicweb.Content.Social.PublishData,Dynamicweb.Content.Social.Field)">
 <summary>
 Validate field
 </summary>
 <param name="data">The publish data.</param>
 <param name="field">The validation field.</param>
 <returns>Nothing is succesfully, otherwise filled the ValidationResult</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Adapter.Validate(Dynamicweb.Content.Social.PublishData)">
 <summary>
 Validates the specified message.
 </summary>
 <param name="data">The message.</param>
 <returns>Validation result.</returns>
</member>
<member name="M:Dynamicweb.Content.Social.Adapter.GetAvailability">
 <summary>
 Returns the availability status of the social media platform associated with the given adapter.
 </summary>
 <returns>The availability status of the social media platform associated with the given adapter.</returns>
</member>
<member name="M:Dynamicweb.Content.Social.Adapter.GetFields">
 <summary>
 Gets a list of fields that this adapter can publish to the target social media platform.
 </summary>
 <returns>a list of fields that this adapter can publish to the target social media platform.</returns>
</member>
<member name="M:Dynamicweb.Content.Social.Adapter.GetFieldsJson">
 <summary>
 Gets a list of fields that this adapter can publish to the target social media platform.
 </summary>
 <returns>a list of fields that this adapter can publish to the target social media platform.</returns>
</member>
<member name="M:Dynamicweb.Content.Social.Adapter.CanPublish(Dynamicweb.Content.Social.PublishData)">
 <summary>
 Returns value indicating whether the given message can be published.
 </summary>
 <param name="data">Message data.</param>
 <returns>Value indicating whether the given message can be published.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Adapter.IsAvailable">
 <summary>
 Returns value indicating whether the social media platform is available.
 </summary>
 <returns>Value indicating whether the social media platform is available.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Social.Message">
 <summary>
 Represents a message to be published.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Message.LinkID">
 <summary>
 Gets or sets the link ID returned from the adapter when message is posted.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Message.DisableParseLinks">
 <summary>
 Gets or sets the option to disable/enable parse message links
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Message.Posts">
 <summary>
 Gets the list of all posts related to this message.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Message.Domain">
 <summary>
 Gets or sets the domain name for the link url.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Message.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Social.Message.Fill(System.Data.IDataReader)">
 <summary>
 Fills object properties with data from the given <see cref="T:System.Data.IDataReader">IDataReader</see> object.
 </summary>
 <param name="reader">Reader to read data from.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Message.FillRow(System.Data.DataRow)">
 <summary>
 Fills the given <see cref="T:System.Data.DataRow">DataRow</see> object with object state values.
 </summary>
 <param name="row">Row to write data into.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Message.DeletePostsByChannelsReverse(System.Collections.Generic.IEnumerable{System.Int32})">
 <summary>
 Deletes posts that don't belong to the given channels.
 </summary>
 <param name="channelIds">A list of channel Ids.</param>
</member>
<member name="M:Dynamicweb.Content.Social.Message.CreateScheduledTask(System.String,Dynamicweb.Content.Social.SocialTask.SocialTaskType,System.DateTime)">
 <summary>
 Creates the scheduled task for email sending.
 </summary>
 <param name="startDateTime">The start date.</param>
</member>
<member name="M:Dynamicweb.Content.Social.Message.Publish">
 <summary>
 Publishes this messages posts to the related channels.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Social.Message.GetValidationErrorMessages(System.Boolean)">
 <summary>
 Returns the validation error messages for every channel.
 </summary>
 <param name="checkIsChannelAvailble">Check is channel availble.</param>
 <returns>The validation error messages for every channel.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Message.GetMessagesByTopFolderId(System.Int32)">
 <summary>
 Gets the emails by top folder id.
 </summary>
 <param name="topFolderId">The id of the top folder</param>
 <returns>The collection of emails for specified top folder</returns>
</member>
<member name="M:Dynamicweb.Content.Social.Message.GetMessagesByFolderId(System.Int32)">
 <summary>
 Gets the emails by folder id.
 </summary>
 <param name="folderId">The id of the folder</param>
 <returns>The collection of emails for specified top folder</returns>
</member>
<member name="M:Dynamicweb.Content.Social.Message.GetMessageCountByFolderName(System.String,System.Int32)">
 <summary>
 Gets the count of messages by folder name.
 </summary>
 <param name="folderName">The name of the folder</param>
 <returns>The count of messages in specified folder</returns>
</member>
<member name="M:Dynamicweb.Content.Social.Message.GetMessageById(System.Int32)">
 <summary>
 Returns the message by its Id.
 </summary>
 <param name="id">Message Id.</param>
 <returns>A message with the given Id or null (Nothing in Visual Basic) if the message with the given Id doesn't exist.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Message.GetMessagesWithFailedPosts">
 <summary>
 Returns a list of all available messages.
 </summary>
 <returns>A list of all available messages.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Message.GetMessages">
 <summary>
 Returns a list of all available messages.
 </summary>
 <returns>A list of all available messages.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Message.GetPublishedMessages">
 <summary>
 Returns a list of all published messages.
 </summary>
 <returns>A list of all published messages.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Message.GetPublishedMessages(System.Int32)">
 <summary>
 Returns a list of all published messages.
 </summary>
 <returns>A list of all published messages.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Message.GetUnpublishedMessages">
 <summary>
 Returns a list of all unpublished messages.
 </summary>
 <returns>A list of all unpublished messages.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Message.GetUnpublishedMessagesWithoutScheduled">
 <summary>
 Returns a list of all unpublished messages.
 </summary>
 <returns>A list of all unpublished messages.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Message.GetUnpublishedMessagesWithoutScheduled(System.Int32)">
 <summary>
 Returns a list of all unpublished messages.
 </summary>
 <returns>A list of all unpublished messages.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Message.GetScheduledMessages">
 <summary>
 Returns a list of all scheduled messages.
 </summary>
 <returns>A list of all scheduled messages.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Message.GetScheduledMessages(System.Int32)">
 <summary>
 Returns a list of all scheduled messages.
 </summary>
 <returns>A list of all scheduled messages.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Message.GetUnpublishedMessagesCount">
 <summary>
 Returns a total number of all unpublished messages.
 </summary>
 <returns>A total number of all unpublished messages.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Message.GetMessages(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Returns a list of all messages that match the given SQL query.
 </summary>
 <param name="commandBuilder">The <see cref="T:Dynamicweb.Data.CommandBuilder" />.</param>
 <returns>A list of all messages that match the given SQL query.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Social.MessageCollection">
 <summary>
 Represents a collection of messages.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.MessageCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Social.Post">
 <summary>
 A post is a representation of the data used to submit to particular social channels (e.g. Twitter Corporate, Twitter Marketing, Facebook, etc). 
 A post is a child item of the Message class. A message can have multiple posts. Therefore, you should access 
 this through Message.Posts rather than accessing it directly.
 It is possible to have more than one post per social media type, for example, if the user has two Facebook channels and selects
 both of them when publishing a message, then there will be one message (the parent) and two posts (one for each social channel).
 </summary>
</member>
<member name="F:Dynamicweb.Content.Social.Post.SocialMediaPublishingLinkReferenceType">
 <summary>
 Gets the link type for link parsers.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Post.MessageID">
 <summary>
 Gets or sets the message Id.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Post.Message">
 <summary>
 Gets the message which is the parent object for this post.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Post.ChannelID">
 <summary>
 Gets or sets the channel ID.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Post.Channel">
 <summary>
 Gets the channel object that this post was published on.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Post.PublishResult">
 <summary>
 Gets or sets the result of publishing this post.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.Post.ParsedText">
 <summary>
 Gets or sets the parsed post body.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Post.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Social.Post.Fill(System.Data.IDataReader)">
 <summary>
 Fills object properties with data from the given <see cref="T:System.Data.IDataReader">IDataReader</see> object.
 </summary>
 <param name="reader">Reader to read data from.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Post.FillRow(System.Data.DataRow)">
 <summary>
 Fills the given <see cref="T:System.Data.DataRow">DataRow</see> object with object state values.
 </summary>
 <param name="row">Row to write data into.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Post.GetPublishData(System.Boolean)">
 <summary>
 Returns the publish data to publish to the channel.
 </summary>
 <returns>Publish data.</returns>
</member>
<member name="M:Dynamicweb.Content.Social.Post.GetPublishedLink(System.Boolean,System.String)">
 <summary>
 Returns the parsed link.
 </summary>
 <returns>Object type of Analytics.Links.Link</returns>
</member>
<member name="M:Dynamicweb.Content.Social.Post.Validate">
 <summary>
 Validate the post.
 </summary>
 <returns>Validation result.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Post.Publish">
 <summary>
 Publishes this post to the specified channel.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Social.Post.GetPostById(System.Int32)">
 <summary>
 Returns the post by its Id.
 </summary>
 <param name="id">Post Id.</param>
 <returns>A post with the given Id or null (Nothing in Visual Basic) if the post with the given Id doesn't exist.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.Post.GetPostsByMessageId(System.Int32)">
 <summary>
 Gets all posts by the given message Id.
 </summary>
 <param name="MessageID">The message Id.</param>
 <returns>All posts with the given message Id.</returns>
</member>
<member name="M:Dynamicweb.Content.Social.Post.GetPostsByChannelId(System.Int32)">
 <summary>
 Gets all posts by the given channel Id.
 </summary>
 <param name="channelID">The channel Id.</param>
 <returns>All posts with the given channel Id.</returns>
</member>
<member name="M:Dynamicweb.Content.Social.Post.GetPosts">
 <summary>
 Gets all posts available posts.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Social.Post.GetPosts(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Returns a list of all posts that match the given SQL query.
 </summary>
 <param name="commandBuilder">The <see cref="T:Dynamicweb.Data.CommandBuilder" />.</param>
 <returns>A list of all posts that match the given SQL query.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Social.PostBase">
 <summary>
 Provides base functionality for social media posts.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.PostBase.Title">
 <summary>
 Gets or sets the post title.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.PostBase.Body">
 <summary>
 Gets or sets the post body.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.PostBase.Image">
 <summary>
 Gets or sets the URI of the image that should be associated with the post.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.PostBase.Link">
 <summary>
 Gets or sets the URI that should be associated with the post.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.PostBase.Published">
 <summary>
 Gets or sets the date and time this message was published.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.PostBase.Created">
 <summary>
 Gets the date and time when the message was created.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.PostBase.Updated">
 <summary>
 Gets the date and time when the message was updated.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.PostBase.IsPublished">
 <summary>
 Gets value indicating whether this post is published.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.Social.PostBase.ColumnPrefix">
 <summary>
 Gets the column prefix.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.PostBase.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="tableName">Table name.</param>
 <param name="keyColumn">Key column.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.PostBase.Fill(System.Data.IDataReader)">
 <summary>
 Fills object properties with data from the given <see cref="T:System.Data.IDataReader">IDataReader</see> object.
 </summary>
 <param name="reader">Reader to read data from.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.PostBase.FillRow(System.Data.DataRow)">
 <summary>
 Fills the given <see cref="T:System.Data.DataRow">DataRow</see> object with object state values.
 </summary>
 <param name="row">Row to write data into.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.PostBase.Column(System.String)">
 <summary>
 Returns the full name of the column.
 </summary>
 <param name="localName">Local name of the column.</param>
 <returns>The full name of the column.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Social.PostCollection">
 <summary>
 Represents a collection of psots.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.PostCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Social.PublishData">
 <summary>
 An object of the data that is handed over to the Channel handlers publish method
 </summary>
</member>
<member name="P:Dynamicweb.Content.Social.PublishData.Title">
 <summary>
 Gets or sets the post title.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.PublishData.Body">
 <summary>
 Gets or sets the post body.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.PublishData.Image">
 <summary>
 Gets or sets the URI of the image that should be associated with the post.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.PublishData.Link">
 <summary>
 Gets or sets the URI that should be associated with the post.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.PublishData.ParsedLinks">
 <summary>
 Gets or sets the collection of links parsed (and replaced) from the original body text.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.PublishData.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Social.PublishResult">
 <summary>
 Represents a post publish result.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Social.PublishResult.Success">
 <summary>
 Gets or sets value indicating whether post was published successfully.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.PublishResult.StatusText">
 <summary>
 Gets or sets the status text.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.PublishResult.PostLink">
 <summary>
 Gets or sets the URI to the remote published post.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.PublishResult.PostID">
 <summary>
 Gets or sets the Id of the remote published post.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.PublishResult.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.SocialTask.FillRow(System.Data.DataRow)">
 <summary>
 Fills this instance with data from the data row.
 </summary>
 <param name="row">The row.</param>
</member>
<member name="M:Dynamicweb.Content.Social.SocialTask.Fill(System.Data.IDataReader)">
 <summary>
 Fills this instance with data from the specified datareader.
 </summary>
 <param name="reader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Content.Social.SocialTask.Save">
 <summary>
 Saves current data to the database.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Social.SocialTask.GetSocialTaskByMessageID(System.Int32)">
 <summary>
 Gets the social task by message identifier.
 </summary>
 <param name="messageID">The message identifier.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Social.SocialTask.GetActiveTasks">
 <summary>
 Gets the active tasks.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Social.SocialTask.GetSocialTask(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Gets the social task.
 </summary>
 <param name="commandBuilder">The command builder.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Social.SocialTask.GetSocialTasks(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Gets the social tasks.
 </summary>
 <param name="commandBuilder">The command builder.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Social.SocialTopFolder.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Content.Social.SocialTopFolder" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Social.SocialTopFolder.GetDefaultTopFolderId">
 <summary>
 Gets the default top folder id.
 </summary>
 <returns>The id of top folder</returns>
</member>
<member name="M:Dynamicweb.Content.Social.SocialTopFolder.GetTopFolderById(System.Int32)">
 <summary>
 Gets the top folder by id.
 </summary>
 <param name="folderId">The folder id.</param>
 <returns>The top folder</returns>
</member>
<member name="M:Dynamicweb.Content.Social.SocialTopFolder.GetAllTopFolders">
 <summary>
 Gets all top folders.
 </summary>
 <returns>The collection of top folders</returns>
</member>
<member name="M:Dynamicweb.Content.Social.SocialTopFolder.GetTopFolders(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Gets the top folders by SQL query.
 </summary>
 <param name="commandBuilder">The <see cref="T:Dynamicweb.Data.CommandBuilder" />.</param>
 <returns>The collection of top folders</returns>
</member>
<member name="T:Dynamicweb.Content.Social.SocialTopFolderCollection.Comparer">
 <summary>
 Represents a collection element comparer.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.SocialTopFolderCollection.Comparer.Comparison">
 <summary>
 Gets or sets the comparison.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.SocialTopFolderCollection.Comparer.#ctor(System.Comparison{Dynamicweb.Content.Social.SocialTopFolder})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="comparison">Comparison.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="comparison">comparison</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.SocialTopFolderCollection.Comparer.Compare(Dynamicweb.Content.Social.SocialTopFolder,Dynamicweb.Content.Social.SocialTopFolder)">
 <summary>
 Compares two objects and returns the comparison result.
 </summary>
 <param name="x">First object.</param>
 <param name="y">Second object.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Social.SocialTopFolderCollection.Data">
 <summary>
 Gets the underlying data storage.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.SocialTopFolderCollection.Sort(System.Comparison{Dynamicweb.Content.Social.SocialTopFolder})">
 <summary>
 Sorts elements according to the given comparison.
 </summary>
 <param name="comparison">Comparison.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.SocialTopFolderCollection.Sort(System.Collections.Generic.IComparer{Dynamicweb.Content.Social.SocialTopFolder})">
 <summary>
 Sorts elements according to the given comparer.
 </summary>
 <param name="comparer">Comparer.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Social.SocialTopFolderCollection.SortByFolderName(System.String)">
 <summary>
 Sorts email folders by folder name (ascending).
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Social.NamespaceDoc">
 <summary>
 Base implementation of social media publishing and abstraction of social media providers
 </summary>
</member>
<member name="T:Dynamicweb.Content.Versioning.CheckOutService">
 <summary>
 The CheckOutService class provides usecase specific operations for interacting with the CheckOutRepository functionality
 </summary>
</member>
<member name="F:Dynamicweb.Content.Versioning.CheckOutService.CheckOutCacheKey">
 <summary>
 Cache key for the <see cref="T:Dynamicweb.Content.Versioning.CheckOutRepository"/>
 </summary>
</member>
<member name="P:Dynamicweb.Content.Versioning.CheckOutService.Cache">
 <summary>
 Gets the CacheManager for caching the <see cref="T:Dynamicweb.Content.Versioning.CheckOutRepository"/>
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Versioning.CheckOutService.CheckOut(Dynamicweb.Content.Versioning.CheckOutObject)">
 <summary>
 Checks out the specified object
 </summary>
 <param name="checkOutObject">The object to check out</param>
 <exception cref="T:System.ArgumentNullException"></exception>
 <exception cref="T:System.InvalidOperationException">Thrown if the objects is already checkout by other user</exception>
</member>
<member name="M:Dynamicweb.Content.Versioning.CheckOutService.CheckIn(Dynamicweb.Content.Versioning.CheckOutObject)">
 <summary>
 Checks in the specified object
 </summary>
 <param name="checkedOutObject">The lock information instance indicating the object to lock</param>
 <exception cref="T:System.ArgumentNullException"></exception>
</member>
<member name="M:Dynamicweb.Content.Versioning.CheckOutService.CanCheckOut(Dynamicweb.Content.Versioning.CheckOutObject)">
 <summary>
 Returns a value indicating if the specified object can be checked out
 </summary>
 <param name="checkOutObject">The object to check out</param>
 <returns>True if the object can be checked out, otherwise false</returns>
</member>
<member name="T:Dynamicweb.Content.Versioning.ICheckOutService">
 <summary>
 The ICheckOutService defines usecase operations for interacting with the <see cref="T:Dynamicweb.Content.Versioning.CheckOutRepository"/>
 </summary>
</member>
<member name="M:Dynamicweb.Content.Versioning.ICheckOutService.CheckOut(Dynamicweb.Content.Versioning.CheckOutObject)">
 <summary>
 Checks out the specified object
 </summary>
 <param name="checkOutObject">The object to check out</param>
 <exception cref="T:System.ArgumentNullException"></exception>
 <exception cref="T:System.InvalidOperationException">Thrown if the objects is already checkout by other user</exception>
</member>
<member name="M:Dynamicweb.Content.Versioning.ICheckOutService.CheckIn(Dynamicweb.Content.Versioning.CheckOutObject)">
 <summary>
 Checks in the specified object
 </summary>
 <param name="checkedOutObject">The lock information instance indicating the object to lock</param>
 <exception cref="T:System.ArgumentNullException"></exception>
</member>
<member name="M:Dynamicweb.Content.Versioning.ICheckOutService.CanCheckOut(Dynamicweb.Content.Versioning.CheckOutObject)">
 <summary>
 Returns a value indicating if the specified object can be checked out
 </summary>
 <param name="checkOutObject">The object to check out</param>
 <returns>True if the object can be checked out, otherwise false</returns>
</member>
<member name="T:Dynamicweb.Content.Versioning.CheckOutObject">
 <summary>
 The CheckOutObject class provides information about an object to checkout and the user requesting the checkout
 </summary>
</member>
<member name="P:Dynamicweb.Content.Versioning.CheckOutObject.UserId">
 <summary>
 Gets the id of the user who is requesting the check out
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Versioning.CheckOutObject.Username">
 <summary>
 Gets the username of the user who is requesting the check out
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Versioning.CheckOutObject.CheckOutTime">
 <summary>
 Gets the date and time the object was checked out
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Versioning.CheckOutObject.Type">
 <summary>
 Gets the type of object to checkout
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Versioning.CheckOutObject.ObjectType">
 <summary>
 Gets the type of object to checkout
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Versioning.CheckOutObject.ObjectId">
 <summary>
 Gets the identifier of the object to check out
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Versioning.CheckOutObject.MaxCheckOutTimeInMinutes">
 <summary>
 Gets the max number of minutes the object will be checked out, the default is 30 minutes
 </summary>
 <returns>An integer indicating how many minutes the object at most will be checked out</returns>
</member>
<member name="M:Dynamicweb.Content.Versioning.CheckOutObject.#ctor(System.Type,System.String,System.String)">
 <summary>
 Initializes a new instance of the CheckOutObject class with a default maximum check out time of 30 minutes
 </summary>
 <param name="type">The type of object to checkout</param>
 <param name="objectId">The unique id of the object to checkout</param>
 <param name="userId">The id of the user who is requesting the checkout</param>
 <exception cref="T:System.ArgumentException"></exception>
 <exception cref="T:System.ArgumentNullException">a</exception>
</member>
<member name="M:Dynamicweb.Content.Versioning.CheckOutObject.#ctor(System.Type,System.String,System.String,System.Int32)">
 <summary>
 Initializes a new instance of the CheckOutObject class
 </summary>
 <param name="type">The type of object to checkout</param>
 <param name="objectId">The unique id of the object to checkout</param>
 <param name="userId">The id of the user who is requesting the checkout</param>
 <param name="maxCheckOutTimeInMinutes">The maximum number of minutes the object will be checked out</param>
 <exception cref="T:System.ArgumentException"></exception>
 <exception cref="T:System.ArgumentNullException">a</exception>
</member>
<member name="P:Dynamicweb.Content.Versioning.CheckOutObject.Key">
 <summary>
 Gets a unique Key for this object based on the checked out objects type and id
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Versioning.CheckOutObject.HasCheckOutExpired">
 <summary>
 Gets a value indicating if the lock on the object has expired
 </summary>
 <returns>True if the lock has expired, otherwise false</returns>
</member>
<member name="T:Dynamicweb.Content.Versioning.NamespaceDoc">
 <summary>
 Version handling of content used for drafts, the workflow and general versioning of content - i.e. pages, paragraph and items.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Versioning.CheckOutRepository">
 <summary>
 The CheckOutRepository class provides the ability to register objects as checked out, preventing other users to edit the checked out object.
 </summary>
</member>
<member name="F:Dynamicweb.Content.Versioning.CheckOutRepository.CheckOutObjects">
 <summary>
 Dictionary of currently checked out objectss
 </summary>
</member>
<member name="M:Dynamicweb.Content.Versioning.CheckOutRepository.CheckOut(Dynamicweb.Content.Versioning.CheckOutObject)">
 <summary>
 Checks out the specified object
 </summary>
 <param name="checkOutObject">The object to check out</param>
 <exception cref="T:System.ArgumentNullException"></exception>
 <exception cref="T:System.InvalidOperationException">Thrown if the objects is already checkout by other user</exception>
</member>
<member name="M:Dynamicweb.Content.Versioning.CheckOutRepository.CheckIn(Dynamicweb.Content.Versioning.CheckOutObject)">
 <summary>
 Checks in the specified object
 </summary>
 <param name="checkedOutObject">The lock information instance indicating the object to lock</param>
 <exception cref="T:System.ArgumentNullException"></exception>
</member>
<member name="M:Dynamicweb.Content.Versioning.CheckOutRepository.CanCheckOut(Dynamicweb.Content.Versioning.CheckOutObject)">
 <summary>
 Returns a value indicating if the specified object can be checked out
 </summary>
 <param name="checkOutObject">The object to check out</param>
 <returns>True if the object can be checked out, otherwise false</returns>
</member>
<member name="M:Dynamicweb.Content.Versioning.CheckOutRepository.IsCheckedOutByUser(Dynamicweb.Content.Versioning.CheckOutObject)">
 <summary>
 Returns a value indicating if the specified object is currently checked out by the requesting user
 </summary>
 <param name="checkOutObject">The object to check out</param>
 <returns>True if the object is currently checked out by the requesting user, otherwise false</returns>
</member>
<member name="T:Dynamicweb.Content.Versioning.Diff">
 <summary>
 This Class implements the Difference Algorithm published in
 "An O(ND) Difference Algorithm and its Variations" by Eugene Myers
 Algorithmica Vol. 1 No. 2, 1986, p 251.  
 
 There are many C, Java, Lisp implementations public available but they all seem to come
 from the same source (diffutils) that is under the (unfree) GNU public License
 and cannot be reused as a sourcecode for a commercial application.
 There are very old C implementations that use other (worse) algorithms.
 Microsoft also published sourcecode of a diff-tool (windiff) that uses some tree data.
 Also, a direct transfer from a C source to C# is not easy because there is a lot of pointer
 arithmetic in the typical C solutions and i need a managed solution.
 These are the reasons why I implemented the original published algorithm from the scratch and
 make it avaliable without the GNU license limitations.
 I do not need a high performance diff tool because it is used only sometimes.
 I will do some performace tweaking when needed.
 
 The algorithm itself is comparing 2 arrays of numbers so when comparing 2 text documents
 each line is converted into a (hash) number. See DiffText(). 
 
 Some chages to the original algorithm:
 The original algorithm was described using a recursive approach and comparing zero indexed arrays.
 Extracting sub-arrays and rejoining them is very performance and memory intensive so the same
 (readonly) data arrays are passed arround together with their lower and upper bounds.
 This circumstance makes the LCS and SMS functions more complicate.
 I added some code to the LCS function to get a fast response on sub-arrays that are identical,
 completely deleted or inserted.
 
 The result from a comparisation is stored in 2 arrays that flag for modified (deleted or inserted)
 lines in the 2 data arrays. These bits are then analysed to produce a array of Item objects.
 
 Further possible optimizations:
 (first rule: don't do it; second: don't do it yet)
 The arrays DataA and DataB are passed as parameters, but are never changed after the creation
 so they can be members of the class to avoid the paramter overhead.
 In SMS is a lot of boundary arithmetic in the for-D and for-k loops that can be done by increment
 and decrement of local variables.
 The DownVector and UpVector arrays are alywas created and destroyed each time the SMS gets called.
 It is possible to reuse tehm when transfering them to members of the class.
 See TODO: hints.
 
 diff.cs: A port of the algorythm to C#
 Copyright (c) by Matthias Hertel, http://www.mathertel.de
 This work is licensed under a BSD style license. See http://www.mathertel.de/License.aspx
 
 Changes:
 2002.09.20 There was a "hang" in some situations.
 Now I undestand a little bit more of the SMS algorithm. 
 There have been overlapping boxes; that where analyzed partial differently.
 One return-point is enough.
 A assertion was added in CreateDiffs when in debug-mode, that counts the number of equal (no modified) lines in both arrays.
 They must be identical.
 
 2003.02.07 Out of bounds error in the Up/Down vector arrays in some situations.
 The two vetors are now accessed using different offsets that are adjusted using the start k-Line. 
 A test case is added. 
 
 2006.03.05 Some documentation and a direct Diff entry point.
 
 2006.03.08 Refactored the API to static methods on the Diff class to make usage simpler.
 2006.03.10 using the standard Debug class for self-test now.
            compile with: csc /target:exe /out:diffTest.exe /d:DEBUG /d:TRACE /d:SELFTEST Diff.cs
 2007.01.06 license agreement changed to a BSD style license.
 2007.06.03 added the Optimize method.
 2007.09.23 UpVector and DownVector optimization by Jan Stoklasa ().
 2008.05.31 Adjusted the testing code that failed because of the Optimize method (not a bug in the diff algorithm).
 2008.10.08 Fixing a test case and adding a new test case.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Versioning.Diff.Item">
 <summary>details of one difference.</summary>
</member>
<member name="F:Dynamicweb.Content.Versioning.Diff.Item.StartA">
 <summary>Start Line number in Data A.</summary>
</member>
<member name="F:Dynamicweb.Content.Versioning.Diff.Item.StartB">
 <summary>Start Line number in Data B.</summary>
</member>
<member name="F:Dynamicweb.Content.Versioning.Diff.Item.deletedA">
 <summary>Number of changes in Data A.</summary>
</member>
<member name="F:Dynamicweb.Content.Versioning.Diff.Item.insertedB">
 <summary>Number of changes in Data B.</summary>
</member>
<member name="T:Dynamicweb.Content.Versioning.Diff.SMSRD">
 <summary>
 Shortest Middle Snake Return Data
 </summary>
</member>
<member name="M:Dynamicweb.Content.Versioning.Diff.DiffText(System.String,System.String)">
 <summary>
 Find the difference in 2 texts, comparing by textlines.
 </summary>
 <param name="TextA">A-version of the text (usualy the old one)</param>
 <param name="TextB">B-version of the text (usualy the new one)</param>
 <returns>Returns a array of Items that describe the differences.</returns>
</member>
<member name="M:Dynamicweb.Content.Versioning.Diff.DiffText(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Find the difference in 2 text documents, comparing by textlines.
 The algorithm itself is comparing 2 arrays of numbers so when comparing 2 text documents
 each line is converted into a (hash) number. This hash-value is computed by storing all
 textlines into a common hashtable so i can find dublicates in there, and generating a 
 new number each time a new textline is inserted.
 </summary>
 <param name="TextA">A-version of the text (usualy the old one)</param>
 <param name="TextB">B-version of the text (usualy the new one)</param>
 <param name="trimSpace">When set to true, all leading and trailing whitespace characters are stripped out before the comparation is done.</param>
 <param name="ignoreSpace">When set to true, all whitespace characters are converted to a single space character before the comparation is done.</param>
 <param name="ignoreCase">When set to true, all characters are converted to their lowercase equivivalence before the comparation is done.</param>
 <returns>Returns a array of Items that describe the differences.</returns>
</member>
<member name="M:Dynamicweb.Content.Versioning.Diff.Optimize(Dynamicweb.Content.Versioning.DiffData)">
 <summary>
 If a sequence of modified lines starts with a line that contains the same content
 as the line that appends the changes, the difference sequence is modified so that the
 appended line and not the starting line is marked as modified.
 This leads to more readable diff sequences when comparing text files.
 </summary>
 <param name="Data">A Diff data buffer containing the identified changes.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.Diff.DiffInt(System.Int32[],System.Int32[])">
 <summary>
 Find the difference in 2 arrays of integers.
 </summary>
 <param name="ArrayA">A-version of the numbers (usualy the old one)</param>
 <param name="ArrayB">B-version of the numbers (usualy the new one)</param>
 <returns>Returns a array of Items that describe the differences.</returns>
</member>
<member name="M:Dynamicweb.Content.Versioning.Diff.DiffCodes(System.String,System.Collections.Hashtable,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 This function converts all textlines of the text into unique numbers for every unique textline
 so further work can work only with simple numbers.
 </summary>
 <param name="aText">the input text</param>
 <param name="h">This extern initialized hashtable is used for storing all ever used textlines.</param>
 <param name="trimSpace">ignore leading and trailing space characters</param>
 <returns>a array of integers.</returns>
</member>
<member name="M:Dynamicweb.Content.Versioning.Diff.SMS(Dynamicweb.Content.Versioning.DiffData,System.Int32,System.Int32,Dynamicweb.Content.Versioning.DiffData,System.Int32,System.Int32,System.Int32[],System.Int32[])">
 <summary>
 This is the algorithm to find the Shortest Middle Snake (SMS).
 </summary>
 <param name="DataA">sequence A</param>
 <param name="LowerA">lower bound of the actual range in DataA</param>
 <param name="UpperA">upper bound of the actual range in DataA (exclusive)</param>
 <param name="DataB">sequence B</param>
 <param name="LowerB">lower bound of the actual range in DataB</param>
 <param name="UpperB">upper bound of the actual range in DataB (exclusive)</param>
 <param name="DownVector">a vector for the (0,0) to (x,y) search. Passed as a parameter for speed reasons.</param>
 <param name="UpVector">a vector for the (u,v) to (N,M) search. Passed as a parameter for speed reasons.</param>
 <returns>a MiddleSnakeData record containing x,y and u,v</returns>
</member>
<member name="M:Dynamicweb.Content.Versioning.Diff.LCS(Dynamicweb.Content.Versioning.DiffData,System.Int32,System.Int32,Dynamicweb.Content.Versioning.DiffData,System.Int32,System.Int32,System.Int32[],System.Int32[])">
 <summary>
 This is the divide-and-conquer implementation of the longes common-subsequence (LCS) 
 algorithm.
 The published algorithm passes recursively parts of the A and B sequences.
 To avoid copying these arrays the lower and upper bounds are passed while the sequences stay constant.
 </summary>
 <param name="DataA">sequence A</param>
 <param name="LowerA">lower bound of the actual range in DataA</param>
 <param name="UpperA">upper bound of the actual range in DataA (exclusive)</param>
 <param name="DataB">sequence B</param>
 <param name="LowerB">lower bound of the actual range in DataB</param>
 <param name="UpperB">upper bound of the actual range in DataB (exclusive)</param>
 <param name="DownVector">a vector for the (0,0) to (x,y) search. Passed as a parameter for speed reasons.</param>
 <param name="UpVector">a vector for the (u,v) to (N,M) search. Passed as a parameter for speed reasons.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.Diff.CreateDiffs(Dynamicweb.Content.Versioning.DiffData,Dynamicweb.Content.Versioning.DiffData)">
 <summary>Scan the tables of which lines are inserted and deleted,
 producing an edit script in forward order.  
 </summary>
 dynamic array
</member>
<member name="T:Dynamicweb.Content.Versioning.DiffData">
 <summary>Data on one input file being compared.  
 </summary>
</member>
<member name="F:Dynamicweb.Content.Versioning.DiffData.Length">
 <summary>Number of elements (lines).</summary>
</member>
<member name="F:Dynamicweb.Content.Versioning.DiffData.data">
 <summary>Buffer of numbers that will be compared.</summary>
</member>
<member name="F:Dynamicweb.Content.Versioning.DiffData.modified">
 <summary>
 Array of booleans that flag for modified data.
 This is the result of the diff.
 This means deletedA in the first Data or inserted in the second Data.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Versioning.DiffData.#ctor(System.Int32[])">
 <summary>
 Initialize the Diff-Data buffer.
 </summary>
 <param name="initData">reference to the buffer</param>
</member>
<member name="T:Dynamicweb.Content.Versioning.VersionControl">
 <summary>
 Handles version data
 </summary>
 <remarks>Used internally by <see cref="T:Dynamicweb.Content.Paragraph">Paragraph</see>.</remarks>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.Save(System.Data.DataSet,System.String,System.Int32)">
 <summary>
 Saves the specified version data from the dataset.
 </summary>
 <param name="ds">The ds.</param>
 <param name="Type">The type.</param>
 <param name="Key">The key.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.Save(System.Data.DataSet,System.String,System.String)">
 <summary>
 Saves the specified version data from the dataset.
 </summary>
 <param name="ds">The ds.</param>
 <param name="Type">The type.</param>
 <param name="Key">The key.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.Save(System.Data.DataSet,System.String,System.String,System.DateTime)">
 <summary>
 Saves the specified version data from the dataset.
 </summary>
 <param name="ds">The ds.</param>
 <param name="Type">The type.</param>
 <param name="Key">The key.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.Save(Dynamicweb.Content.Items.ItemEntry,Dynamicweb.Content.Items.Metadata.ItemType,System.Int32)">
 <summary>
 Saves the specified version data from the dictionary.
 </summary>
 <param name="item">The item entry.</param>
 <param name="itemMeta">The item type.</param>
 <param name="pageId">The page id.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.Save(Dynamicweb.Content.Items.ItemEntry,Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Saves the specified version data from the dictionary.
 </summary>
 <param name="item">The item entry.</param>
 <param name="itemMeta">The item type.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.Load(System.Data.DataSet,System.Int32)">
 <summary>
 Loads the specified ds org.
 </summary>
 <param name="dsOrg">The ds org.</param>
 <param name="versionKey">The version key.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.LoadItem(System.Int32)">
 <summary>
 Loads the specified item.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.LoadItem(System.Int32,System.DateTime)">
 <summary>
 Loads the specified item.
 </summary>
 <param name="previewDate">The preview date.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.LoadItem(System.String,System.String,System.DateTime)">
 <summary>
 Loads the specified item.
 </summary>
 <param name="previewDate">The preview date.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.CleanUpVersions(System.String[],System.Int32,System.Int32)">
 <summary>
 Cleans version older then specified days with specified threshold.
 </summary>
 <param name="versionDataTypes">e.g. "Product", "CategoryFields".</param>
 <param name="days">Specifies the days older than that the versions are going to be deleted.</param>
 <param name="versions">Specifies the versions threshhold.</param>
 <remarks>Works only with objects using VersionDataTypeIdString, but not VersionDataTypeId!!</remarks>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.DeserializeItem(System.String)">
 <summary>
 Deserialize item entry from version table
 </summary>
 <param name="serializedItem">Serialized data set.</param>
 <returns>ItemEntry</returns>
 <remarks>Creates class based on class type information that exists in serialized data table </remarks>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.SerializeItem(Dynamicweb.Content.Items.ItemEntry,Dynamicweb.Content.Items.Metadata.ItemType)">
 <summary>
 Serializes item entry for saving in version table
 </summary>
 <param name="itemEntry">Item Entry</param>
 <param name="itemType">Item type</param>
 <returns>Serialized data set with 2 data tables. </returns>
 <remarks>First data table contains item entry data. 
 Second table contains item entry meta information such as class type, system name.</remarks>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.Load(System.Data.DataSet,System.String,System.Int32,System.DateTime)">
 <summary>
 Loads the specified ds.
 </summary>
 <param name="ds">Copied dataset</param>
 <param name="type">The type.</param>
 <param name="key">The key.</param>
 <param name="previewDate">The preview date.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.Load(System.Data.DataSet,System.String,System.String,System.DateTime)">
 <summary>
 Loads the specified ds.
 </summary>
 <param name="ds">Copied dataset</param>
 <param name="type">The type.</param>
 <param name="key">The key.</param>
 <param name="previewDate">The preview date.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.FillPreviewData(System.Data.DataSet@)">
 <summary>
 Fills the preview data.
 </summary>
 <param name="ds">The ds.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.FillPreviewData(System.Data.DataSet@,System.DateTime)">
 <summary>
 Fills the preview data.
 </summary>
 <param name="ds">The ds.</param>
 <param name="PreviewDate">The preview date.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.MergeRows(System.Data.DataRow@,System.Data.DataRow@,System.Boolean)">
 <summary>
 Merges the rows.
 </summary>
 <param name="ToRow">To row.</param>
 <param name="FromRow">From row.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.SaveParagraph(System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 Saves the paragraph with a new state
 </summary>
 <param name="approvalState">State of the approval.</param>
 <param name="paragraphId">The paragraph ID.</param>
 <param name="pageId">The page ID.</param>
 <param name="approvalStep">The approval step.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.SaveParagraph(System.Data.IDbConnection,System.Data.IDbTransaction,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 Saves the paragraph with a new state
 </summary>
 <param name="objConn">The Connection.</param>
 <param name="objTrans">The Transaction.</param>
 <param name="approvalState">State of the approval.</param>
 <param name="paragraphId">The paragraph ID.</param>
 <param name="pageId">The page ID.</param>
 <param name="approvalStep">The approval step.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.DiscardChanges(System.String,System.String)">
 <summary>
 Discards the version changes for the version data .
 </summary>
 <param name="versionDataType">The type of version data object i.e. "Page", "Product" etc.</param>
 <param name="versionDataTypeId">The version data object id.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.DiscardChanges(System.String,System.Int32)">
 <summary>
 Discards the version changes for the version data .
 </summary>
 <param name="versionDataType">The type of version data object i.e. "Page", "Product" etc.</param>
 <param name="versionDataTypeId">The version data object id.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.DiscardChanges(System.Int32)">
 <summary>
 Discards the version changes for the given page.
 </summary>
 <param name="pageId">The page ID.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.DiscardChanges(Dynamicweb.Content.Page)">
 <summary>
 Discards the version changes for the given page.
 </summary>
 <param name="Page">The page.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.PublishItem(System.Int32)">
 <summary>
 Publishes the item.
 </summary>
 <param name="pageId">The page ID where the item is located.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.DiscardItemChanges(Dynamicweb.Content.Items.ItemEntry,System.String,Dynamicweb.Content.Items.ItemContext)">
 <summary>
 Publishes the item.
 </summary>
 <param name="item">The ID of the item to be published.</param>
 <param name="itemTypeSystemName">The item type system name.</param>
 <param name="context">The item context.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.PublishItem(Dynamicweb.Content.Items.ItemEntry,System.String,Dynamicweb.Content.Items.ItemContext)">
 <summary>
 Publishes the item.
 </summary>
 <param name="item">The ID of the item to be published.</param>
 <param name="itemTypeSystemName">The item type system name.</param>
 <param name="context">The item context.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionControl.PublishParagraph(System.Int32,System.Int32)">
 <summary>
 Publishes the paragraph.
 </summary>
 <param name="paragraphId">The paragraph ID.</param>
 <param name="pageId">The page ID where the paragraph is located.</param>
</member>
<member name="T:Dynamicweb.Content.Versioning.VersionData">
 <summary>
 Version data record. Holds a XML representation of datarow data.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Versioning.VersionData.DataId">
 <summary>
 Gets or sets the ID of the data.
 </summary>
 <value>The data ID.</value>
</member>
<member name="P:Dynamicweb.Content.Versioning.VersionData.DataType">
 <summary>
 Gets or sets the type of the data.
 </summary>
 <value>The type of the data.</value>
</member>
<member name="P:Dynamicweb.Content.Versioning.VersionData.DataTypeID">
 <summary>
 Gets or sets the data type ID.
 </summary>
 <value>The data type ID.</value>
</member>
<member name="P:Dynamicweb.Content.Versioning.VersionData.DataTypeIDString">
 <summary>
 Gets or sets the data type ID.
 </summary>
 <value>The data type ID.</value>
</member>
<member name="P:Dynamicweb.Content.Versioning.VersionData.DataEdit">
 <summary>
 Gets or sets the data edit time.
 </summary>
 <value>The data edit.</value>
</member>
<member name="P:Dynamicweb.Content.Versioning.VersionData.DataCreated">
 <summary>
 Gets or sets the data created time.
 </summary>
 <value>The data created.</value>
</member>
<member name="P:Dynamicweb.Content.Versioning.VersionData.DataPublished">
 <summary>
 Gets or sets a value indicating whether [data published].
 </summary>
 <value><c>true</c> if [data published]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Versioning.VersionData.DataPublishedTime">
 <summary>
 Gets or sets the data published time.
 </summary>
 <value>The data published time.</value>
</member>
<member name="P:Dynamicweb.Content.Versioning.VersionData.DataXML">
 <summary>
 Gets or sets the data XML. An XML string representing the data from the datarow in XML.
 </summary>
 <value>The data XML.</value>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionData.#ctor(System.String,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Content.Versioning.VersionData" /> class.
 </summary>
 <param name="type">The type.</param>
 <param name="versionDataId">The version data ID. A valid VersionDataID from the table VersionData</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionData.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Content.Versioning.VersionData" /> class.
 </summary>
 <param name="type">The type.</param>
 <param name="versionDataId">The version data ID. A valid VersionDataID from the table VersionData</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionData.#ctor(System.String,System.Int32,System.DateTime)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Content.Versioning.VersionData" /> class.
 </summary>
 <param name="type">The type. On of <c>'Page'</c> or <c>'Paragraph'</c></param>
 <param name="versionDataId">The version data ID. A valid VersionDataID from the table VersionData</param>
 <param name="publishedDate">The latest published date.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionData.#ctor(System.String,System.String,System.DateTime)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Content.Versioning.VersionData" /> class.
 </summary>
 <param name="type">The type. On of <c>'Page'</c> or <c>'Paragraph'</c></param>
 <param name="versionDataId">The version data ID. A valid VersionDataID from the table VersionData</param>
 <param name="publishedDate">The latest published date.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionData.#ctor(System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Content.Versioning.VersionData" /> class.
 </summary>
 <param name="versionDataId">The version data ID. A valid VersionDataID from the table VersionData</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionData.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Content.Versioning.VersionData" /> class.
 </summary>
 <param name="dataReader">The datareader.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionData.Save">
 <summary>
 Saves the data of this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionData.Save(System.Data.IDbConnection,System.Data.IDbTransaction)">
 <summary>
 Saves the data of this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionData.UpdateDatafield(System.String,System.String)">
 <summary>
 Updates the datafield in the version XML.
 </summary>
 <param name="fieldName">Name of the field.</param>
 <param name="newValue">The new value.</param>
</member>
<member name="M:Dynamicweb.Content.Versioning.VersionData.GetAsDatarow">
 <summary>
 Gets the version XML as a datarow.
 </summary>
 <returns>A <see cref="T:System.Data.DataRow">Data.DataRow</see> with the values of the XML.</returns>
</member>
<member name="T:Dynamicweb.Content.AreaDomainRelation">
 <summary>
 Represents an area domain relation.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.AreaDomainRelation.AreaID">
 <summary>
 Gets or sets the area ID.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.AreaDomainRelation.Domain">
 <summary>
 Gets or sets the domain.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.AreaDomainRelation.IsPrimaryDomain">
 <summary>
 Gets or sets value indicating whether given domain is a primary domain for the given area.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.AreaDomainRelation.IsLockedToDomain">
 <summary>
 Gets or sets value indicating whether "Lock pages to the given domain" flag is set for the given area.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.AreaDomainRelation.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.AreaDomainRelation.#ctor(System.Int32,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="areaID">Area ID.</param>
 <param name="domain">Domain.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.AreaDomainRelation.#ctor(Dynamicweb.Content.AreaDomainRelation)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="copyFrom">Object to copy state from.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="copyFrom">copyFrom</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.AreaDomainRelation.CopyTo(Dynamicweb.Content.AreaDomainRelation)">
 <summary>
 Copies the state of the given object into the current one.
 </summary>
 <param name="target">Object to copy state from.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="target">target</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.AreaDomainRelation.GetHashCode">
 <summary>
 Returns a hash code of a given object.
 </summary>
 <returns>A hash code of a given object.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.AreaDomainRelation.Equals(System.Object)">
 <summary>
 Determines whether current object is equal to the given one.
 </summary>
 <param name="obj">Object to compere to.</param>
 <returns>Value indicating whether current object is equal to the given one.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.AreaDomainRelation.ToString">
 <summary>
 Returns a string representation of the current object.
 </summary>
 <returns>String representation of the current object.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.AreaDomainRelation.NormalizeDomain(System.String)">
 <summary>
 Normalizes the given domain.
 </summary>
 <param name="domain">Domain to normalize.</param>
 <returns>Normalized domain.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.AreaDomainRelationSet">
 <summary>
 Represents a set of area domain relations.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.AreaDomainRelationSet.Items">
 <summary>
 Gets all items in this set.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.AreaDomainRelationSet.Data">
 <summary>
 Gets the underlying data storage.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.AreaDomainRelationSet.AreaIndex">
 <summary>
 Gets the underlying data storage for area IDs.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.AreaDomainRelationSet.DomainIndex">
 <summary>
 Gets the underlying data storage for domains.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.AreaDomainRelationSet.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.AreaDomainRelationSet.Clear">
 <summary>
 Removes all items from this set.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.AreaDomainRelationSet.Add(System.Int32,System.String)">
 <summary>
 Adds new item to this set.
 </summary>
 <param name="areaID">Area ID.</param>
 <param name="domain">Domain.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.AreaDomainRelationSet.Add(Dynamicweb.Content.AreaDomainRelation)">
 <summary>
 Adds new item to this set.
 </summary>
 <param name="relation">Relation.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.AreaDomainRelationSet.Contains(Dynamicweb.Content.AreaDomainRelation)">
 <summary>
 Returns value indicating whether the given item is in this set.
 </summary>
 <param name="relation">Relation.</param>
 <returns>Value indicating whether the given item is in this set.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.AreaDomainRelationSet.Contains(System.Int32)">
 <summary>
 Returns value indicating whether there are one or more items with the given Area ID in this set.
 </summary>
 <param name="areaID">Area ID.</param>
 <returns>Value indicating whether there are one or more items with the given Area ID in this set.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.AreaDomainRelationSet.Contains(System.String)">
 <summary>
 Returns value indicating whether there are one or more items with the given domain in this set.
 </summary>
 <param name="domain">Domain.</param>
 <returns>Value indicating whether there are one or more items with the given domain in this set.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.AreaInfo">
 <summary>
 The AreaInfo class provides information about a specific Area in a given Solution
 </summary>
</member>
<member name="M:Dynamicweb.Content.AreaInfo.#ctor(System.Int32,System.Int32)">
 <summary>
 Initializes a new instance of the AreaInfo classa with the provided arguments
 </summary>
 <param name="areaId">The id of the Area that this instance holds information about</param>
 <param name="webPages">The number of Web Pages that the area currently have</param>
</member>
<member name="P:Dynamicweb.Content.AreaInfo.AreaId">
 <summary>
 Gets the id of the area that this instance represents
 </summary>
 <returns>An integer indicating the id of the area</returns>
</member>
<member name="P:Dynamicweb.Content.AreaInfo.PageCount">
 <summary>
 Gets the number of web pages that this area has, where template and folders is not considered a valid web page
 </summary>
 <returns>An integer indicating the number of web pages in the area</returns>
</member>
<member name="T:Dynamicweb.Content.AreaLanguageService">
 <summary>
 The AreaLanguageService class is a Domain Service responsible for resolving and creating language versions of areas of a given master area
 </summary>
</member>
<member name="M:Dynamicweb.Content.AreaLanguageService.GetLanguageVersionsOfPage(Dynamicweb.Content.Page)">
 <summary>
 Gets all language versions of the given page
 </summary>
 <param name="page">The page for which to get it's language versions if any</param>
 <returns>A list of language versions for the specified page</returns>
</member>
<member name="M:Dynamicweb.Content.AreaLanguageService.GetLanguageVersionsOfPage(System.Int32)">
 <summary>
 Gets all language versions of the page with the specified id
 </summary>
 <param name="pageId">The id of the page for which to get its language versions</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.AreaLanguageService.CreatePageLanguageVersions(Dynamicweb.Content.Page)">
 <summary>
 Creates a new transient version (not persisted) of the page for each language registered on the Area (website)
 </summary>
 <param name="page">The page for which to create language versions</param>
 <returns>A list of pages for each language registered on the pages area (website)</returns>
</member>
<member name="M:Dynamicweb.Content.AreaLanguageService.CreateFromMaster(Dynamicweb.Content.Page,System.Int32)">
 <summary>
 Creates a new language version of this page from the master page.
 </summary>
 <param name="masterPage">The master page</param>
 <param name="languageAreaId">The id of the language on which a copy of the master page should be created</param>
 <returns>The ID of the new page</returns>
</member>
<member name="M:Dynamicweb.Content.AreaLanguageService.GetLanguageVersionOfPage(System.Int32,System.Int32)">
 <summary>
 Gets the language version for the specified page on the specified language area
 </summary>
 <param name="pageId">The id of the page for which to get it's specific language version</param>
 <param name="languageAreaId">The language area for which to get the version of the page with the given id</param>
 <returns>The page version of the page with the specified id</returns>
</member>
<member name="T:Dynamicweb.Content.AreaService">
 <summary>
 The AreaService class is an implementation of the <see cref="T:Dynamicweb.Content.IAreaService"/> interface providing methods for querying and saving The Area Aggregate to and from persistence.
 </summary>
 <see cref="T:Dynamicweb.Content.IAreaService"/>
 <see cref="T:Dynamicweb.Core.IRecyclable`1"/>
</member>
<member name="F:Dynamicweb.Content.AreaService._areaRepository">
 <summary>
 The repository implementation providing access to persistence
 </summary>
</member>
<member name="P:Dynamicweb.Content.AreaService.Repository">
 <summary>
 Gets the repository for working with the Area aggregate
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.AreaService.DomainRelationsIndex">
 <summary>
 Gets or sets the domain names mapped to the list of areas where they're defined.
 </summary>
</member>
<member name="M:Dynamicweb.Content.AreaService.ClearCache">
 <summary>
 Clears the indexes.
 </summary>
</member>
<member name="M:Dynamicweb.Content.AreaService.GetArea(System.Int32)">
 <summary>
 Gets the area with the specified id
 </summary>
 <param name="id">The id of the area to get</param>
 <returns>The area with the specified id if it exists, otherwise Nothing</returns>
</member>
<member name="M:Dynamicweb.Content.AreaService.GetAreas">
 <summary>
 Gets all areas default sorted by their Name property
 </summary>
 <returns>A list of areas sorted by their name property</returns>
</member>
<member name="M:Dynamicweb.Content.AreaService.GetAreas(Dynamicweb.Content.AreaSort)">
 <summary>
 Gets all areas sorted by the indicated property
 </summary>
 <param name="sortBy">Indicates what property of the Area the resulting list of areas should be sorted by</param>
 <returns>A list sorted by the indicated property</returns>
</member>
<member name="M:Dynamicweb.Content.AreaService.SaveArea(Dynamicweb.Content.Area)">
 <summary>
 Saves the specified area
 </summary>
 <param name="area">The area to save</param>
 <returns>The newly saved area</returns>
</member>
<member name="M:Dynamicweb.Content.AreaService.GetMasterArea(Dynamicweb.Content.Area)">
 <summary>
 Gets the master area for the specified area
 </summary>
 <param name="area">The area for which to get it's master area</param>
 <returns>The master area of the specified area</returns>
</member>
<member name="M:Dynamicweb.Content.AreaService.GetMasterArea(System.Int32)">
 <summary>
 Gets the master area for the area with the specified id
 </summary>
 <param name="areaId">The id of the area for which to get its master area</param>
 <returns>The master area for the area with the specified id</returns>
</member>
<member name="M:Dynamicweb.Content.AreaService.GetAreasByDomain(System.String,System.Boolean)">
 <summary>
 Get all areas that have an associated domain as specified
 </summary>
 <param name="domain">The domain for which all associated areas should be returned</param>
 <param name="onlyLocked">If true only areas with pages locked to the specified domain will be returned</param>
 <returns>A list of areas associated with a given domain</returns>
</member>
<member name="M:Dynamicweb.Content.AreaService.GetAreasByDomain(System.String)">
 <summary>
 Get all areas that have an associated domain as specified
 </summary>
 <param name="domain">The domain for which all associated areas should be returned</param>
 <returns>A list of areas associated with a given domain</returns>
</member>
<member name="M:Dynamicweb.Content.AreaService.GetNewSortValue(System.Int32)">
 <summary>
 Get the next available sort value for an area associated with the specified master area 
 </summary>
 <param name="masterAreaId">The id of the master area</param>
 <returns>An integer representing the next available sort value</returns>
</member>
<member name="M:Dynamicweb.Content.AreaService.DeleteArea(System.Int32)">
 <summary>
 Deletes the area with the specified id
 </summary>
 <param name="areaId">The id of the area to delete</param>
</member>
<member name="M:Dynamicweb.Content.AreaService.CanDeleteArea(Dynamicweb.Content.Area)">
 <summary>
 Returns a value indicating if the specified area can be deleted.
 </summary>
 <param name="area">The area for which to determine if it can be deleted.</param>
 <returns>True if the area can be deleted, otherwise false.</returns>
 <remarks>
 If the Area is a master area (The primary version of a website in contrast to language versions of the same website), 
 and it has language versions. The area cannot be deleted until the language versions has been deleted.
 
 If it is not a master area, the area can be deleted.
 </remarks>
</member>
<member name="M:Dynamicweb.Content.AreaService.CopyArea(Dynamicweb.Content.CopyAreaInfo)">
 <summary>
 
 </summary>
 <param name="copyAreaInfo"></param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.AreaService.MoveToBin(Dynamicweb.Content.Area)">
 <summary>
 Moves the specified area to the RecycleBin if the current user has the needed permisssions, otherwise nothing is done
 </summary>
 <param name="obj">The area to move to the Bin</param>
</member>
<member name="M:Dynamicweb.Content.AreaService.MoveToExistingBin(Dynamicweb.Content.Area,System.Guid)">
 <summary>
 Moves the specified area to an existing RecycleBin with the specified unit id
 </summary>
 <param name="obj">The area to move to an existing bin</param>
 <param name="unitId">The id of the existing recycle bin to which this area should be moved</param>
</member>
<member name="M:Dynamicweb.Content.AreaService.MoveToBin(Dynamicweb.Content.Area,Dynamicweb.SystemTools.RecycleBin.RecycleBin)">
 <summary>
 Moves the specified area to the given RecycleBin.
 If the bin is a non existing bin, the area will be assigned as the Primary Item of the RecycleBin, otherwise it will just be a part of the items in the bin
 </summary>
 <param name="area">The area to move to a bin</param>
 <param name="bin">The bin to which the Area should be moved</param>
</member>
<member name="M:Dynamicweb.Content.AreaService.CreateRecycleItem(Dynamicweb.Content.Area)">
 <summary>
 Creates a RecycleItem for the area
 </summary>
 <param name="area">The area for which to create a RecycleItem</param>
 <returns>A RecycleItem containing the information needed to Restore the area at a later time</returns>
</member>
<member name="M:Dynamicweb.Content.AreaService.CanMoveToBin(Dynamicweb.Content.Area)">
 <summary>
 Returns a value indicating if the current user can move the area to the Bin
 </summary>
 <param name="area">The area to move to the Bin</param>
 <returns>True if the current user can move the area to the Bin, otherwise false</returns>
</member>
<member name="M:Dynamicweb.Content.AreaService.CanRestore(System.Int32)">
 <summary>
 Returns a value indicating if the current user can restore the area with the specified id
 </summary>
 <param name="id">The id of the area to restore</param>
 <returns>True if the current user can restore the area with the specified id, otherwise false</returns>
</member>
<member name="M:Dynamicweb.Content.AreaService.Restore(System.Object)">
 <summary>
 Restores the area with the specified id if the current user has the needed permissions, otherwise nothing is done
 </summary>
 <param name="id">The id of the area to restore</param>
</member>
<member name="T:Dynamicweb.Content.AreaService.ItemLinkInformation">
 <summary>
 Contains information needed to update links 
 </summary>
</member>
<member name="P:Dynamicweb.Content.AreaService.ItemLinkInformation.ItemOwner">
 <summary>
 Gets or sets the item owner.
 </summary>
 <value>
 The item owner.
 </value>
</member>
<member name="P:Dynamicweb.Content.AreaService.ItemLinkInformation.ItemId">
 <summary>
 Gets or sets the item identifier, for the item attached to the item owner.
 </summary>
 <value>
 The item identifier.
 </value>
</member>
<member name="P:Dynamicweb.Content.AreaService.ItemLinkInformation.ItemType">
 <summary>
 Gets or sets the type of the item, for the item attached to the item owner.
 </summary>
 <value>
 The type of the item.
 </value>
</member>
<member name="T:Dynamicweb.Content.Commenting.Comment">
 <summary>
 Represents comments and ratings of items in Dynamicweb
 </summary>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.Replies">
 <summary>
 Gets the replies.
 </summary>
 <value>
 The replies.
 </value>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.Name">
 <summary>
 Gets or sets the name of the user who comments.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.Email">
 <summary>
 Gets or sets the email of the user who comments.
 </summary>
 <value>The email.</value>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.Website">
 <summary>
 Gets or sets the website of the user who comments.
 </summary>
 <value>The website.</value>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.Rating">
 <summary>
 Gets or sets the rating made by the user who comments.
 </summary>
 <value>The rating.</value>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.Text">
 <summary>
 Gets or sets the text/comment of the user who comments.
 </summary>
 <value>The text.</value>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.ItemType">
 <summary>
 Gets or sets the type of the item. I.e. page, product, news
 </summary>
 <value>The type of the item.</value>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.ItemID">
 <summary>
 Gets or sets the ID of the item commented. I.e. the productID, newsid or pageid
 </summary>
 <value>The item ID.</value>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.LangID">
 <summary>
 Gets or sets the language identifier - LANG1 for eCommerce, AreaID from pages etc.
 </summary>
 <value>The language identifier.</value>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.CreatedDate">
 <summary>
 Gets or sets the created date.
 </summary>
 <value>The created date.</value>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.EditedDate">
 <summary>
 Gets or sets the edited date.
 </summary>
 <value>The edited date.</value>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.CreatedBy">
 <summary>
 Gets or sets the user id that created this comment, if logged in.
 </summary>
 <value>The created by.</value>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.EditedBy">
 <summary>
 Gets or sets the user id that edited this comment, if logged in.
 </summary>
 <value>The edited by.</value>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.Ip">
 <summary>
 Gets or sets the ip address of the user who commented.
 </summary>
 <value>
 The ip.
 </value>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.Likes">
 <summary>
 Gets or sets the number of likes of this comment.
 </summary>
 <value>
 The number of likes.
 </value>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.NumberOfLikes">
 <summary>
 Gets or sets the number of nolikes of this comment.
 </summary>
 <value>
 The number of nolikes.
 </value>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.ParentID">
 <summary>
 Gets or sets the ID of the parent comment.
 </summary>
 <value>
 The parent comment ID.
 </value>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.Active">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Content.Commenting.Comment" /> is active.
 </summary>
 <value>
   <c>true</c> if active; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Content.Commenting.Comment.Token">
 <summary>
 Gets a token that can be used to verify actions, i.e. delete, likes etc from querystring.
 </summary>
 <value>
 The token in a form of a MD5 hash.
 </value>
</member>
<member name="M:Dynamicweb.Content.Commenting.Comment.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Content.Commenting.Comment" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Commenting.Comment.FillRow(System.Data.DataRow)">
 <summary>
 Fills the row with the values of the properties.
 </summary>
 <param name="row">The row.</param>
</member>
<member name="M:Dynamicweb.Content.Commenting.Comment.Fill(System.Data.IDataReader)">
 <summary>
 Fills the object with data from the specified datareader.
 </summary>
 <param name="reader">The datareader.</param>
</member>
<member name="M:Dynamicweb.Content.Commenting.Comment.Save">
 <summary>
 Saves current data to the data base.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.Commenting.Comment.Delete(System.Int32)">
 <summary>
 Deletes the comment with specified ID.
 </summary>
 <param name="id">Comment ID to delete.</param>
</member>
<member name="M:Dynamicweb.Content.Commenting.Comment.GetCommentById(System.Int32)">
 <summary>
 Gets a comment by Comment id.
 </summary>
 <param name="id">The id of the comment to retrieve.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Commenting.Comment.GetComments">
 <summary>
 Gets all the comments.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Commenting.Comment.GetCommentsByTypeAndId(System.String,System.String)">
 <summary>
 Gets the comments by type and id.
 </summary>
 <param name="itemType">Type of the item, i.e "ecomProduct".</param>
 <param name="itemId">The item ID, i.e. "Prod1".</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Commenting.Comment.GetComments(System.String,System.String,System.String)">
 <summary>
 Gets the comments by type, language and id.
 </summary>
 <param name="itemType">Type of the item, i.e "ecomProduct".</param>
 <param name="itemID">The item ID, i.e. "PROD1".</param>
 <param name="languageID">The langugage ID, i.e. "LANG1".</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Commenting.Comment.GetComments(System.String,System.String,System.String,System.Boolean)">
 <summary>
 Gets the comments by type, language and id.
 </summary>
 <param name="itemType">Type of the item, i.e "ecomProduct".</param>
 <param name="itemID">The item ID, i.e. "PROD1".</param>
 <param name="languageID">The langugage ID, i.e. "LANG1".</param>
 <param name="onlyActive">If set to true, only return comments marked as active (approved)</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Commenting.Comment.GetCommentsBySql(System.String)">
 <summary>
 Gets the comments by SQL.
 </summary>
 <param name="sql">The SQL.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Commenting.Comment.CommentHandler">
 <summary>
 Creates the comment from form post.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Commenting.Comment.NotifyOnNewComment(Dynamicweb.Content.Commenting.Comment)">
 <summary>
 Notifies via email on new comments.
 </summary>
 <param name="comment">The comment.</param>
</member>
<member name="M:Dynamicweb.Content.Commenting.Comment.DeleteCommentByUrl">
 <summary>
 Deletes the comment by URL if it has comment.id and comment.token as querystring parameters with the Comment ID as its matching token as values.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Commenting.Comment.ActivateCommentByUrl">
 <summary>
 Deletes the comment by URL if it has comment.id and comment.token as querystring parameters with the Comment ID as its matching token as values.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Commenting.Comment.LikeNolikeCommentByUrl">
 <summary>
 Likes or Nolikes the comment by URL if it has comment.id and comment.token as querystring parameters with the Comment ID as its matching token as values.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Commenting.CommentCollection">
 <summary>
 A collection of <see cref="T:Dynamicweb.Content.Commenting.Comment" />
 </summary>
</member>
<member name="M:Dynamicweb.Content.Commenting.CommentCollection.RatingAverage">
 <summary>
 Returns the average of the ratings in the collection with one decimal, i.e 3.2
 </summary>
 <returns>Rating average with one decimal</returns>
</member>
<member name="P:Dynamicweb.Content.Commenting.CommentCollection.TotalComments">
 <summary>
 Gets the total number of comments and replies.
 </summary>
 <value>
 The total number of comments and replies.
 </value>
</member>
<member name="M:Dynamicweb.Content.Commenting.CommentCollection.GetCommentById(System.Int32)">
 <summary>
 Finds the comment item specified by the comment id.
 </summary>
 <param name="commentId">The comment id.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Content.Commenting.NamespaceDoc">
 <summary>
 The comments and rating implementation used for commenting pages, items, products and other content in the system.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Commenting.Renderer">
 <summary>
 Renders comments and ratings.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Commenting.Renderer.RenderComments(Dynamicweb.Rendering.Template,Dynamicweb.Content.Commenting.CommentCollection)">
 <summary>
 Renders a comment collection in a loop called "Comments".
 </summary>
 <param name="template">The template.</param>
 <param name="comments">The comments.</param>
</member>
<member name="M:Dynamicweb.Content.Commenting.Renderer.RenderComments(Dynamicweb.Rendering.Template,Dynamicweb.Content.Commenting.CommentCollection,System.String)">
 <summary>
 Renders a comment collection in a loop called "Comments".
 </summary>
 <param name="template">The template.</param>
 <param name="comments">The comments.</param>
 <param name="loopName">Name of the loop.</param>
</member>
<member name="M:Dynamicweb.Content.Commenting.Renderer.RenderComment(Dynamicweb.Rendering.Template,Dynamicweb.Content.Commenting.Comment)">
 <summary>
 Renders a comment.
 </summary>
 <param name="template">The template.</param>
 <param name="comment">The comment.</param>
</member>
<member name="M:Dynamicweb.Content.Commenting.Renderer.RenderComment(Dynamicweb.Rendering.Template,Dynamicweb.Content.Commenting.Comment,System.String)">
 <summary>
 Renders a comment.
 </summary>
 <param name="template">The template.</param>
 <param name="comment">The comment.</param>
 <param name="tagPrefix">The tag prefix.</param>
</member>
<member name="M:Dynamicweb.Content.Commenting.Renderer.RenderStars(System.Double)">
 <summary>
 Renders the stars.
 </summary>
 <param name="rating">The rating.</param>
 <returns>A piece of html of 5 stars either full, half or blank</returns>
</member>
<member name="M:Dynamicweb.Content.Commenting.Renderer.RenderStars(System.Int32)">
 <summary>
 Renders the stars.
 </summary>
 <param name="rating">The rating.</param>
 <returns>A piece of html of 5 stars either full, half or blank</returns>
</member>
<member name="T:Dynamicweb.Content.ContentIndexBuilder">
 <summary>
 ContentIndexProvider implements a <seealso cref="T:Dynamicweb.Indexing.IndexBuilderBase" /> that indexes Pages, paragraphs and items to the index.
 </summary>
 <seealso cref="T:Dynamicweb.Indexing.IndexBuilderBase" />
</member>
<member name="M:Dynamicweb.Content.ContentIndexBuilder.Build(Dynamicweb.Indexing.IIndexWriter,Dynamicweb.Diagnostics.Tracking.Tracker)">
 <summary>
 Builds the index to the specified writer.
 </summary>
 <param name="writer">The indexing writer.</param>
 <param name="tracker">The tracker instance to log what happens.</param>
</member>
<member name="M:Dynamicweb.Content.ContentIndexBuilder.GetFields">
 <summary>
 Returns the fields that this provider supports - a list of page, paragraph and item fields.
 </summary>
 <returns>IList(Of FieldDefinition).</returns>
</member>
<member name="P:Dynamicweb.Content.ContentIndexBuilder.SupportedActions">
 <summary>
 List of supported actions, currently just supports full indexing.
 </summary>
 <value>The supported actions.</value>
</member>
<member name="P:Dynamicweb.Content.ContentIndexBuilder.DefaultSettings">
<summary>
 Gets default settings collection
 </summary>
</member>
<member name="T:Dynamicweb.Content.ContentIndexSchemaExtender">
 <summary>
 The ContentIndexSchemaExtender returns the fields that the pages, paragraphs and items support.
 </summary>
 <seealso cref="T:Dynamicweb.Indexing.IIndexSchemaExtender" />
</member>
<member name="M:Dynamicweb.Content.ContentIndexSchemaExtender.GetFields">
 <summary>
 Returns the fields that this provider supports - a list of page, paragraph and item fields.
 </summary>
 <returns>Generic.IEnumerable(Of Indexing.Schemas.FieldDefinitionBase).</returns>
</member>
<member name="T:Dynamicweb.Content.CopyAreaInfo">
 <summary>
 The CopyAreaInfo class holds information needed to perform a copy operation for a given Area
 </summary>
</member>
<member name="M:Dynamicweb.Content.CopyAreaInfo.#ctor(System.Int32,Dynamicweb.Content.CopyMode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Action{System.String})">
 <summary>
 Initializes a new instance of the CopyAreaInfo class with the provided arguments
 </summary>
 <param name="areaId">The id of the area to copy</param>
 <param name="mode">Indicates what should be copied from the specified page</param>
 <param name="copyPermissions">Indicates if permissions should be copied</param>
 <param name="updateContentLinks">Indicates if content links should be updated as part of the copy operation</param>
 <param name="updateShortcuts">Indicates if shortcuts should be updated as part of the copy operation</param>
 <param name="updateGlobalParagraphs">Indicates if global paragraphs should be updated as part of the copy operation</param>
 <param name="isLanguage"></param>
 <param name="callBack">A call back to provide feed back to the calling client about the progress of the actual copy operation</param>
</member>
<member name="P:Dynamicweb.Content.CopyAreaInfo.Culture">
 <summary>
 Contains the culture for the copy of the area.
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.CopyAreaInfo.AreaID">
 <summary>
 Gets the AreaID of the area to copy
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.CopyAreaInfo.CopyName">
 <summary>
 Gets or sets the area copy name
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.CopyAreaInfo.CopyMode">
 <summary>
 Gets the CopyMode indicating what should be copied
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.CopyAreaInfo.IsLanguage">
 <summary>
 Gets a value indicating if the area to copy is a language version of another master Area
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.CopyAreaInfo.CopyPermissions">
 <summary>
 Gets a value indicating if permissions should be copied
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.CopyAreaInfo.UpdateShortcuts">
 <summary>
 Gets a value indicating if shortcuts should be updated as part of the copy operation
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.CopyAreaInfo.UpdateContentLinks">
 <summary>
 Gets a value indicating if content links should be updated as part of the copy operation
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.CopyAreaInfo.UpdateGlobalParagraphs">
 <summary>
 Gets a value indicating if global paragraphs should be updated as part of the copy operation
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.CopyAreaInfo.StatusCallback">
 <summary>
 Gets the call back used for providing feedback to the calling client about the progress of the actual copy operation
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Content.CopyPageInfo">
 <summary>
 The CopyPageInfo class carries the information needed to copy a page to another parent page
 </summary>
</member>
<member name="M:Dynamicweb.Content.CopyPageInfo.#ctor(System.Int32,System.Int32)">
 <summary>
 Initializes a new instance of the CopyPageInfo class used to provide information about how the system should copy a given page
 </summary>
 <param name="sourcePageId">The source id of the page to copy</param>
 <param name="destinationParentPageId">The id of the page to which the page should be copied as a new child page</param>
</member>
<member name="P:Dynamicweb.Content.CopyPageInfo.SourcePageID">
 <summary>
 Gets the id of the page to copy
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.CopyPageInfo.DestinationParentPageID">
 <summary>
 Gets the id of the page to which the page with the specified source id should be copied as a new child
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.CopyPageInfo.AreaID">
 <summary>
 Gets or sets the ID of the area to which the page should be copied
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.CopyPageInfo.IncludeCopyOfSubpages">
 <summary>
 Gets or sets a value indicating if subpages of the specified source page should be copied as well. Default is false
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.CopyPageInfo.CopyParagraphs">
 <summary>
 Gets or sets a value indicating if paragraphs of the specified source page should be copied as well. Default is false
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.CopyPageInfo.UpdateCache">
 <summary>
 Gets or sets a value indicating if the cache should be updated. Default is true
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.CopyPageInfo.ItemType">
 <summary>
 Gets or sets the item type associated with the Page to copy
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Content.DatabaseContentProvider">
 <summary>
 DatabaseContentProvider is base class for add-ins that can auto generate test data for the solution.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.AddIns.ConfigurableAddIn" />
</member>
<member name="M:Dynamicweb.Content.DatabaseContentProvider.GenerateContent">
 <summary>
 Override this method to create the data. Returns the amount of records created.
 </summary>
 <returns>System.Double.</returns>
</member>
<member name="M:Dynamicweb.Content.DatabaseContentProvider.GetCount">
 <summary>
 Specifies how many records that should be created
 </summary>
 <returns>System.Double.</returns>
</member>
<member name="T:Dynamicweb.Content.AreaSort">
 <summary>Defines how area collections should be sorted</summary>
</member>
<member name="F:Dynamicweb.Content.AreaSort.Name">
 <summary>
 Sort by name ascending
 </summary>
</member>
<member name="F:Dynamicweb.Content.AreaSort.Sort">
 <summary>
 Sort by the manual sort
 </summary>
</member>
<member name="T:Dynamicweb.Content.CopyMode">
 <summary>Defines how to copy an area</summary>
</member>
<member name="F:Dynamicweb.Content.CopyMode.Structure">
 <summary>
 Copies only the page structure
 </summary>
</member>
<member name="F:Dynamicweb.Content.CopyMode.StructureAndContent">
 <summary>
 Copies the page structure and the paragraphs
 </summary>
</member>
<member name="F:Dynamicweb.Content.CopyMode.Properties">
 <summary>
 Coipes only the website properties and no pages or paragraphs
 </summary>
</member>
<member name="T:Dynamicweb.Content.MasterType">
 <summary>
 Specifies how a master should update its children
 </summary>
</member>
<member name="F:Dynamicweb.Content.MasterType.None">
 <summary>
 No updates of children once created
 </summary>
</member>
<member name="F:Dynamicweb.Content.MasterType.Lock">
 <summary>
 Children inherits all settings and values from master - always overwritten
 </summary>
</member>
<member name="F:Dynamicweb.Content.MasterType.LockFieldsOfSameValue">
 <summary>
 Fields of children with the same value as the master are updated. Not implemented yet.
 </summary>
</member>
<member name="T:Dynamicweb.Content.ParagraphSort">
 <summary>
 Defines how paragraph collections should be sorted
 </summary>
</member>
<member name="F:Dynamicweb.Content.ParagraphSort.Sort">
 <summary>
 Sort by sort
 </summary>
</member>
<member name="F:Dynamicweb.Content.ParagraphSort.Container">
 <summary>
 Sort by container name
 </summary>
</member>
<member name="F:Dynamicweb.Content.ParagraphSort.ContainerAndSort">
 <summary>
 Sort by container name and sort
 </summary>
</member>
<member name="T:Dynamicweb.Content.DisplayMode">
 <summary>
 Specifies how a page shows its subpages in the content tree (backend UI)
 </summary>
</member>
<member name="F:Dynamicweb.Content.DisplayMode.Normal">
 <summary>
 Page list its subpages in the tree (Default).
 </summary>
</member>
<member name="F:Dynamicweb.Content.DisplayMode.List">
 <summary>
 Page list its subpages in the main window instead of showing them in the tree.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Extensions">
 <summary>
 Content specific extension methods for the Service locator (<see cref="T:Dynamicweb.Extensibility.IServiceLocator"/>).
 </summary>
</member>
<member name="M:Dynamicweb.Content.Extensions.GetAreaService(Dynamicweb.Extensibility.IServiceLocator)">
 <summary>
 Gets an implementation of the IAreaService interface
 </summary>
 <param name="serviceLocator">Extension method for an implementation of the IServiceLocator interface</param>
 <returns>An instance of the IAreaService interface</returns>
</member>
<member name="M:Dynamicweb.Content.Extensions.GetPageService(Dynamicweb.Extensibility.IServiceLocator)">
 <summary>
 Gets an implementation of the IPageService interface
 </summary>
 <param name="serviceLocator">Extension method for an implementation of the IServiceLocator interface</param>
 <returns>An instance of the IPageService interface</returns>
</member>
<member name="M:Dynamicweb.Content.Extensions.GetItemService(Dynamicweb.Extensibility.IServiceLocator)">
 <summary>
 Gets an implementation of the IItemService interface
 </summary>
 <param name="serviceLocator">Extension method for an implementation of the IServiceLocator interface</param>
 <returns>An instance of the IItemService interface</returns>
</member>
<member name="M:Dynamicweb.Content.Extensions.GetParagraphService(Dynamicweb.Extensibility.IServiceLocator)">
 <summary>
 Gets an implementation of the IParagraphService interface
 </summary>
 <param name="serviceLocator">Extension method for an implementation of the IServiceLocator interface</param>
 <returns>An instance of the IParagraphService interface</returns>
</member>
<member name="M:Dynamicweb.Content.Extensions.GetCheckOutService(Dynamicweb.Extensibility.IServiceLocator)">
 <summary>
 Gets an implementation of the IObjectLockerService interface
 </summary>
 <param name="serviceLocator">Extension method for an implementation of the IServiceLocator interface</param>
 <returns>An instance of the IObjectLockerService interface</returns>
</member>
<member name="T:Dynamicweb.Content.IAreaService">
 <summary>
 The IAreaService interface defines operations for working with the Area Aggregate
 </summary>
</member>
<member name="M:Dynamicweb.Content.IAreaService.GetArea(System.Int32)">
 <summary>
 Gets the area with the specified id
 </summary>
 <param name="id">The id of the area to get</param>
 <returns>The area with the specified id if it exists, otherwise Nothing</returns>
</member>
<member name="M:Dynamicweb.Content.IAreaService.GetAreas">
 <summary>
 Gets all areas default sorted by their Name property
 </summary>
 <returns>A list of areas sorted by their name property</returns>
</member>
<member name="M:Dynamicweb.Content.IAreaService.GetAreas(Dynamicweb.Content.AreaSort)">
 <summary>
 Gets all areas sorted by the indicated property
 </summary>
 <param name="sortBy">Indicates what property of the Area the resulting list of areas should be sorted by</param>
 <returns>A list sorted by the indicated property</returns>
</member>
<member name="M:Dynamicweb.Content.IAreaService.SaveArea(Dynamicweb.Content.Area)">
 <summary>
 Saves the specified area
 </summary>
 <param name="area">The area to save</param>
 <returns>The newly saved area</returns>
</member>
<member name="M:Dynamicweb.Content.IAreaService.GetLanguageAreas(System.Int32)">
 <summary>
 Gets all language areas
 </summary>
 <param name="masterAreaId">The id of the master area</param>
 <returns>A list of language areas for the given master area id</returns>
</member>
<member name="M:Dynamicweb.Content.IAreaService.GetMasterAreas">
 <summary>
 Gets all master areas
 </summary>
 <returns>A list of all areas but language areas</returns>
</member>
<member name="M:Dynamicweb.Content.IAreaService.GetMasterArea(Dynamicweb.Content.Area)">
 <summary>
 Gets the master area for the specified area
 </summary>
 <param name="area">The area for which to get it's master area</param>
 <returns>The master area of the specified area</returns>
</member>
<member name="M:Dynamicweb.Content.IAreaService.GetMasterArea(System.Int32)">
 <summary>
 Gets the master area for the area with the specified id
 </summary>
 <param name="areaId">The id of the area for which to get its master area</param>
 <returns>The master area for the area with the specified id</returns>
</member>
<member name="M:Dynamicweb.Content.IAreaService.GetAreasByDomain(System.String,System.Boolean)">
 <summary>
 Get all areas that have an associated domain as specified
 </summary>
 <param name="domain">The domain for which all associated areas should be returned</param>
 <param name="onlyLocked">If true only areas with pages locked to the specified domain will be returned</param>
 <returns>A list of areas associated with a given domain</returns>
</member>
<member name="M:Dynamicweb.Content.IAreaService.GetAreasByDomain(System.String)">
 <summary>
 Get all areas that have an associated domain as specified
 </summary>
 <param name="domain">The domain for which all associated areas should be returned</param>
 <returns>A list of areas associated with a given domain</returns>
</member>
<member name="M:Dynamicweb.Content.IAreaService.GetNewSortValue(System.Int32)">
 <summary>
 Get the next available sort value for an area associated with the specified master area 
 </summary>
 <param name="masterAreaId">The id of the master area</param>
 <returns>An integer representing the next available sort value</returns>
</member>
<member name="M:Dynamicweb.Content.IAreaService.DeleteArea(System.Int32)">
 <summary>
 Deletes the area with the specified id
 </summary>
 <param name="areaId">The id of the area to delete</param>
</member>
<member name="M:Dynamicweb.Content.IAreaService.CopyArea(Dynamicweb.Content.CopyAreaInfo)">
 <summary>
 Creates a copy and persists it as specified in the CopyAreaInfo instance 
 </summary>
 <param name="copyAreaInfo">Indicating what and how to perform the actual copy</param>
 <returns>A response indicating the success or failure of the operation</returns>
</member>
<member name="M:Dynamicweb.Content.IAreaService.CanDeleteArea(Dynamicweb.Content.Area)">
 <summary>
 Returns a value indicating if the specified area can be deleted.
 </summary>
 <param name="area">The area for which to determine if it can be deleted.</param>
 <returns>True if the area can be deleted, otherwise false.</returns>
 <remarks>
 If the Area is a master area (The primary version of a website in contrast to language versions of the same website), 
 and it has language versions. The area cannot be deleted until the language versions has been deleted.
 
 If it is not a master area, the area can be deleted.
 </remarks>
</member>
<member name="T:Dynamicweb.Content.IItemService">
 <summary>
 The IItemService interface defines operations for working with the Item Aggregate
 </summary>
</member>
<member name="M:Dynamicweb.Content.IItemService.GetItem(System.String,System.String)">
 <summary>
 Gets the item.
 </summary>
 <param name="itemType">Type of the item.</param>
 <param name="itemId">The item identifier.</param>
 <returns>item</returns>
</member>
<member name="M:Dynamicweb.Content.IItemService.GetItem(System.String,System.String,System.Boolean)">
 <summary>
 Gets the draft item or the current item, if no draft exists.
 </summary>
 <param name="itemType">Type of the item.</param>
 <param name="itemId">The item identifier.</param>
 <param name="draft">Look for draft</param>
 <returns>item</returns>
</member>
<member name="M:Dynamicweb.Content.IItemService.GetItem(System.String,System.String,System.Boolean,System.DateTime)">
 <summary>
 Gets the draft item or the current item, if no draft exists.
 </summary>
 <param name="itemType">Type of the item.</param>
 <param name="itemId">The item identifier.</param>
 <param name="draft">Look for draft</param>
 <param name="previewDate">Date of preview</param>
 <returns>item</returns>
</member>
<member name="M:Dynamicweb.Content.IItemService.GetItemById``1(System.String)">
 <summary>
 Gets the item.
 </summary>
 <param name="itemId">The item identifier.</param>
 <returns>ItemEntry.</returns>
</member>
<member name="M:Dynamicweb.Content.IItemService.GetItemByPageId(System.Int32,System.Boolean)">
 <summary>
 Gets page item by the given page Id.
 </summary>
 <param name="pageId">Page Id.</param>
 <param name="draft">Is item in a draft mode</param>
 <returns>Item with the given Id.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.IItemService.GetItemByPageId(System.Int32,System.Boolean,System.DateTime)">
 <summary>
 Gets page item by the given page Id.
 </summary>
 <param name="pageId">Page Id.</param>
 <param name="draft">Is item in a draft mode</param>
 <param name="previewDate">Date to preview the content from</param>
 <returns>Item with the given Id.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.IItemService.CopyItem(System.String,System.String,System.Int32,Dynamicweb.Content.Items.ItemContext)">
 <summary>
 Creates a copy of the Item with the specified item id and item type
 </summary>
 <param name="itemType">Type of the item.</param>
 <param name="itemId">The item identifier.</param>
 <param name="sort">The sort index of the item.</param>
 <param name="context">The item context.</param>
 <returns>A copy of the item with the specified id</returns>
</member>
<member name="M:Dynamicweb.Content.IItemService.CopyPageItem(Dynamicweb.Content.Page)">
 <summary>
 Creates a copy of the Item with the specified item id and item type
 </summary>
 <param name="page">The page from which to make a copy of it's associated Item</param>
 <returns>A copy of the item associated with the specified page, of any</returns>
</member>
<member name="M:Dynamicweb.Content.IItemService.CopyParagraphItem(Dynamicweb.Content.Paragraph)">
 <summary>
 Creates a copy of the Item with the specified item id and item type
 </summary>
 <param name="paragraph">The paragraph from which to make a copy of it's associated Item</param>
 <returns>A copy of the item associated with the specified paragraph, of any</returns>
</member>
<member name="M:Dynamicweb.Content.IItemService.SaveItem(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Saves the new item to persistence
 </summary>
 <param name="item">The item to save to persistence</param>
 <returns>The newly save item</returns>
</member>
<member name="M:Dynamicweb.Content.IItemService.UpdateItemSortIndex(System.String,System.String,System.Int32)">
 <summary>
 Updates the item sort index
 </summary>
 <param name="itemType">The itemtype of the item to update sort index</param>
 <param name="itemId">The id of the item to update sort index</param>
 <param name="sortIndex">The index used for sorting</param>
</member>
<member name="M:Dynamicweb.Content.IItemService.UpdateItemTitle(System.String,System.String,System.String)">
 <summary>
 Updates item field used for page title.
 </summary>
 <param name="itemType">The itemtype of the item</param>
 <param name="itemId">The id of the item</param>
 <param name="title">The page title</param>
</member>
<member name="M:Dynamicweb.Content.IItemService.UpdateItemTitle(Dynamicweb.Content.Items.Metadata.ItemType,Dynamicweb.Content.Items.Item,System.String)">
 <summary>
 Updates item field used for page title.
 </summary>
 <param name="itemMetaType">The itemtype of the item</param>
 <param name="item">The item.</param>
 <param name="title">The page title</param>
</member>
<member name="M:Dynamicweb.Content.IItemService.GetTitle(Dynamicweb.Content.Items.Item)">
 <summary>
 Returns page title.
 </summary>
 <param name="item">The item.</param>
 <returns>Value to use as page title.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.IParagraphService">
 <summary>
 The IParagraphService interface defines operation for working with the Paragraph Aggregate
 </summary>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.Delete(System.Int32)">
 <summary>
 Deletes the Paragraph with the specified id
 </summary>
 <param name="paragraphId">The id of the paragraph to delete</param>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.GetLanguageVersionsForParagraph(System.Int32)">
 <summary>
 Gets the language versions of the Paragraph with the specified id
 </summary>
 <param name="paragraphId">The id of the Paragraph for which to get the language versions</param>
 <returns>A collection of Paragraph language versions</returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.GetParagraph(System.Int32)">
 <summary>
 Gets the Paragraph with the specified id
 </summary>
 <param name="paragraphId">The id of the paragraph to get</param>
 <returns>The paragraph with the specified id</returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.GetParagraphFromVersion(System.Int32,System.Int32)">
 <summary>
 Gets the paragraph with the specified id, but with its values populated from the version with the specified versionId
 </summary>
 <param name="paragraphId">The id of the paragraph to get</param>
 <param name="versionId">The id of the version from which the paragraph should have its data populated</param>
 <returns>A paragraph with data populated from the version with given versionId</returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.GetParagraphDraft(System.Int32)">
 <summary>
 Gets the draft version of the paragraph with the specified id if any.
 </summary>
 <param name="paragraphId">Th id of the paragraph for which to get the draft version</param>
 <returns>The draft version of the paragraph with the specified id if any, otherwise null (Nothing)</returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.GetParagraphDraft(System.Int32,System.DateTime)">
 <summary>
 Gets the draft version of the paragraph with the specified id if any.
 </summary>
 <param name="paragraphId">Th id of the paragraph for which to get the draft version</param>
 <param name="previewDate">The preview date of the draft version</param>
 <returns>The draft version of the paragraph with the specified id if any, otherwise null (Nothing)</returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.GetParagraphsByPageId(System.Int32)">
 <summary>
 Gets all the paragraphs belonging to the page with the specified id
 </summary>
 <param name="pageId">The id of the page for which to get all its paragraphs</param>
 <returns>A collection of Paragraphs </returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.GetParagraphsByPageId(System.Int32,Dynamicweb.Content.ParagraphSort)">
 <summary>
 Gets all the paragraphs belonging to the page with the specified id sorted by the specified sort value
 </summary>
 <param name="pageId">The id of the page for which to get all its paragraphs</param>
 <param name="sortBy">A value indicating of the collection of Paragraphs should be sorted</param>
 <returns>A sorted collection of Paragraphs</returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.GetParagraphsByAreaID(System.Int32)">
 <summary>
 Gets all the paragraphs associated with the specified area id
 </summary>
 <param name="areaID">The id of the area for which to get all associated Paragraphs</param>
 <returns>A collection of Paragraphs associated with the specified Area id</returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.GetParagraphsByIds(System.Collections.Generic.IEnumerable{System.Int32})">
 <summary>
 Gets the paragraphs matching the id's in the list
 </summary>
 <param name="ids">A list of paragraph ids for which to get the matching Paragraphs</param>
 <returns>A collection of Paragraphs matching the ids in the specified list</returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.GetParagraphs">
 <summary>
 Gets all the paragraphs in the systen
 </summary>
 <returns>A ParagraphCollection with all the paragraphs registred in the systen</returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.GetParagraphsByModuleName(System.String)">
 <summary>
 Gets all the paragraphs that have the specified module name
 </summary>
 <param name="moduleName">The module name for which to get all paragraphs</param>
 <returns>A ParagraphCollection with all paragraphs having the specified module name</returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.GetParagraphsByItemTypes(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Gets the paragraphs that has one of the ItemTypes specified in the itemTypes list
 </summary>
 <param name="itemTypes">A list of itemTypes for which to get Paragraphs</param>
 <returns>A collection of Paragraphs</returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.Move(System.Int32,System.Int32,System.Int32)">
 <summary>
 Moves the specified Paragrah from the source page to the target page
 </summary>
 <param name="paragraphId">The id of the paragraph to move</param>
 <param name="sourcePageId">The id of the page from which to move the paragraph</param>
 <param name="targetPageId">The id of the page to which the paragraph should be moved</param>
 <returns>The newly moved Paragraph</returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.CopyTo(System.Int32,System.Int32)">
 <summary>
 Copies the paragraph with the specified source ID to the page with the specified ID.
 </summary>
 <param name="pageID">The page ID to move the paragraph to.</param>
 <param name="source">The id of the paragraph to copy.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.CopyTo(System.Int32,System.Int32,System.Boolean)">
 <summary>
 Copies the paragraph with the specified source ID to the page with the specified ID.
 </summary>
 <param name="pageID">The page ID to move the paragraph to.</param>
 <param name="source">The id of the paragraph to copy.</param>
 <param name="isExperiment">Specifies whether the source paragraph is copied as a part of an <see cref="T:Dynamicweb.Frontend.Contracts.IExperiment"></see>.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.SaveParagraph(Dynamicweb.Content.Paragraph)">
 <summary>
 Saves the specified paragraph to persistance 
 </summary>
 <param name="paragraph">The paragraph to save</param>
 <returns>The newly saved paragraph</returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.ToggleActive(Dynamicweb.Content.Paragraph,System.Boolean)">
 <summary>
 Include or exclude a paragraph in the layout of the webpage
 </summary>
 <param name="paragraph">The paragraph to include or exclude</param>
 <param name="active">Whether a paragraph is included or excluded</param>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.GetParagraphForItem(System.String,System.String)">
 <summary>
 Gets the paragraph for the item with the specified name and id
 </summary>
 <param name="itemType">The name of the item type</param>
 <param name="itemId">The id of the item</param>
 <returns>The paragraph associated with the specified item</returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.DeleteAllPageParagraphs(Dynamicweb.Content.Page)">
 <summary>
 Deletes all paragraphs associated with the specified page
 </summary>
 <param name="page">The page for which to delete all paragraphs</param>
 <returns>An <see cref="T:Dynamicweb.Core.ApplicationResponse"/> indicating the success or failure of the operation</returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.DeleteAllParagraphs(Dynamicweb.Content.Area)">
 <summary>
 Deletes all paragraphs associated with the specified area
 </summary>
 <param name="area">The area for which to delete all paragraphs</param>
 <returns>An <see cref="T:Dynamicweb.Core.ApplicationResponse"/> indicating the success or failure of the operation</returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.GetLatestModifiedParagraphs(System.Int32)">
 <summary>
 Gets latest modified paragraph
 </summary>
 <param name="count">Max count of paragraphs to returns</param>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.GetParagraphByParagraphOrPageIds(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
 <summary>
 Gets the paragraphs by paragraph or page ids.
 </summary>
 <param name="paragraphIds">The paragraph ids.</param>
 <param name="pageIds">The page ids.</param>
 <returns>IEnumerable(Of Paragraph).</returns>
</member>
<member name="M:Dynamicweb.Content.IParagraphService.ForceRefreshIndex(System.Int32)">
 <summary>
 Forces the specific item from the index to be force-refreshed from the repository.
 </summary>
 <param name="paragraphId">Id of paragraph to be refreshed</param>
 <returns>success</returns>
</member>
<member name="T:Dynamicweb.Content.ItemService">
 <summary>
 The ItemService class is an implementation of the <see cref="T:Dynamicweb.Content.IItemService"/> interface providing operation for working with the Item Aggregate
 </summary>
 <example>
 <code description="Using of ItemService class" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Items\ItemServiceSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Content.ItemService.GetItem(System.String,System.String)">
 <summary>
 Gets the item.
 </summary>
 <param name="itemType">Type of the item.</param>
 <param name="itemId">The item identifier.</param>
 <returns>ItemEntry.</returns>
</member>
<member name="M:Dynamicweb.Content.ItemService.GetItem(System.String,System.String,System.Boolean)">
 <summary>
 Gets the item.
 </summary>
 <param name="itemType">Type of the item.</param>
 <param name="itemId">The item identifier.</param>
 <param name="draft">Look for draft</param>
 <returns>ItemEntry.</returns>
</member>
<member name="M:Dynamicweb.Content.ItemService.GetItem(System.String,System.String,System.Boolean,System.DateTime)">
 <summary>
 Gets the item.
 </summary>
 <param name="itemType">Type of the item.</param>
 <param name="itemId">The item identifier.</param>
 <param name="draft">Look for draft</param>
 <param name="previewDate">Date of preview</param>
 <returns>ItemEntry.</returns>
</member>
<member name="M:Dynamicweb.Content.ItemService.GetItemByPageId(System.Int32,System.Boolean)">
 <summary>
 Gets page item by the given page Id.
 </summary>
 <param name="pageId">Page Id.</param>
 <param name="draft">Is item in a draft mode</param>
 <returns>Item with the given Id.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.ItemService.GetItemByPageId(System.Int32,System.Boolean,System.DateTime)">
 <summary>
 Gets page item by the given page Id.
 </summary>
 <param name="pageId">Page Id.</param>
 <param name="draft">Is item in a draft mode</param>
 <param name="previewDate">Date to preview the content from</param>
 <returns>Item with the given Id.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.ItemService.CopyItem(System.String,System.String,System.Int32,Dynamicweb.Content.Items.ItemContext)">
 <summary>
 Creates a copy of the Item with the specified item id and item type
 </summary>
 <param name="itemType">Type of the item.</param>
 <param name="itemId">The item identifier.</param>
 <param name="sort">The sort index of the item.</param>
 <param name="context">The item context.</param>
 <returns>A copy of the item with the specified id</returns>
</member>
<member name="M:Dynamicweb.Content.ItemService.CopyPageItem(Dynamicweb.Content.Page)">
 <summary>
 Creates a copy of the Item with the specified item id and item type
 </summary>
 <param name="page">The page from which to make a copy of it's associated Item</param>
 <returns>A copy of the item associated with the specified page, of any</returns>
</member>
<member name="M:Dynamicweb.Content.ItemService.CopyParagraphItem(Dynamicweb.Content.Paragraph)">
 <summary>
 Creates a copy of the Item with the specified item id and item type
 </summary>
 <param name="paragraph">The paragraph from which to make a copy of it's associated Item</param>
 <returns>A copy of the item associated with the specified paragraph, of any</returns>
</member>
<member name="M:Dynamicweb.Content.ItemService.SaveItem(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Saves the new item to persistence
 </summary>
 <param name="item">The item to save to persistence</param>
 <returns>The newly save item</returns>
</member>
<member name="M:Dynamicweb.Content.ItemService.UpdateItemSortIndex(System.String,System.String,System.Int32)">
 <summary>
 Updates the item sort index
 </summary>
 <param name="itemType">The itemtype of the item to update sort index</param>
 <param name="itemId">The id of the item to update sort index</param>
 <param name="sortIndex">The index used for sort index</param>
</member>
<member name="M:Dynamicweb.Content.ItemService.UpdateItemTitle(System.String,System.String,System.String)">
 <summary>
 Updates item field used for page title.
 </summary>
 <param name="itemType">The itemtype of the item</param>
 <param name="itemId">The id of the item</param>
 <param name="title">The page title</param>
</member>
<member name="M:Dynamicweb.Content.ItemService.UpdateItemTitle(Dynamicweb.Content.Items.Metadata.ItemType,Dynamicweb.Content.Items.Item,System.String)">
 <summary>
 Updates item field used for page title.
 </summary>
 <param name="itemMetaType">The itemtype of the item</param>
 <param name="item">The item.</param>
 <param name="title">The page title</param>
</member>
<member name="M:Dynamicweb.Content.ItemService.GetTitle(Dynamicweb.Content.Items.Item)">
 <summary>
 Returns page title.
 </summary>
 <param name="item">The item.</param>
 <returns>Value to use as page title.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.ItemService.MoveToBin(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Moves the specified item, linked items and items from related list to the bin
 </summary>
 <param name="obj">The item entry to move to the bin</param>
</member>
<member name="M:Dynamicweb.Content.ItemService.MoveToExistingBin(Dynamicweb.Content.Items.ItemEntry,System.Guid)">
 <summary>
 Moves the specified item, linked items and items from related list to an existing bin having the specified UnitID.
 If the bin is a non existing bin, the item will be assigned as the Primary Item of the RecycleBin, otherwise it will just be a part of the items in the bin
 </summary>
 <param name="obj">The item entry to move to a bin</param>
 <param name="unitID">The ID of the existing bin to which the item entry should be added</param>
</member>
<member name="M:Dynamicweb.Content.ItemService.Restore(System.Object)">
 <summary>
 Restores the item entry and related objects.
 </summary>
 <param name="id">The id of the item entry to restore</param>
</member>
<member name="M:Dynamicweb.Content.ItemService.RestoreItem(Dynamicweb.Content.Items.ItemStoreContainer)">
 <summary>
 Restores the item entry and related objects.
 </summary>
 <param name="store">The container to store items and related objects</param>
</member>
<member name="M:Dynamicweb.Content.ItemService.RestoreItem(Dynamicweb.Content.Items.ItemStoreContainer,System.Boolean)">
 <summary>
 Restores the item entry and related objects with new id.
 </summary>
 <param name="store">The container to store items and related objects</param>
</member>
<member name="M:Dynamicweb.Content.ItemService.MoveToBin(Dynamicweb.Content.Items.ItemEntry,Dynamicweb.SystemTools.RecycleBin.RecycleBin)">
 <summary>
 Moves the specified item, linked items and items from related list to the given RecycleBin.
 If the bin is a non existing bin, the Paragraph will be assigned as the Primary Item of the RecycleBin, otherwise it will just be a part of the items in the bin
 </summary>
 <param name="item">The item entry to move to a bin</param>
 <param name="bin">The bin to which the  item entry should be moved</param>
</member>
<member name="M:Dynamicweb.Content.ItemService.CreateRecycleItem(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Creates a new recycle item for the specified item entry
 </summary>
 <param name="item">The item entry for which to create a RecycleItem instance</param>
 <returns>A RecycleItem for the specified item entry</returns>
</member>
<member name="T:Dynamicweb.Content.PageService">
 <summary>
 The PageService class is an implementation of the <see cref="T:Dynamicweb.Content.IPageService"/> interface providing operations for working with the Page Aggregate
 </summary>
</member>
<member name="M:Dynamicweb.Content.PageService.#ctor">
 <summary>
 The repository implementation providing access to persistence
 </summary>
</member>
<member name="P:Dynamicweb.Content.PageService.Repository">
 <summary>
 Gets the repository for working with the Page aggregate
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetPageTree(System.Int32)">
 <summary>
 Gets the pageTree.
 </summary>
 <param name="areaId">areaid of pagetree</param>
 <remarks>Yields an empty tree if areaid is not found</remarks>
 <returns>pageTree</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.UpdatePageTree(Dynamicweb.Content.Page)">
 <summary>
 Use this when AreaId did not change.
 </summary>
 <param name="page">page</param>
</member>
<member name="M:Dynamicweb.Content.PageService.UpdatePageTree(Dynamicweb.Content.Page,System.Int32,System.Int32)">
 <summary>
 Use this if areaId might have changed.
 </summary>
 <param name="page">page</param>
 <param name="oldAreaId">old areaId</param>
 <param name="oldParentPageId">old parentPageId</param>
</member>
<member name="M:Dynamicweb.Content.PageService.RemoveFromPageTree(Dynamicweb.Content.Page)">
 <summary>
 Removes the page from the pagetree.
 </summary>
 <param name="page"></param>
</member>
<member name="M:Dynamicweb.Content.PageService.ForceRefreshIndex(System.Int32)">
 <summary>
 Forces the specific item from the index to be force-refreshed from the repository.
 </summary>
 <param name="id">Id of element to be refreshed</param>
</member>
<member name="M:Dynamicweb.Content.PageService.GetPageItemIndexKey(System.String,System.String)">
 <summary>
 Gets the key used for the PageItem index.
 </summary>
 <param name="itemType">Type of item</param>
 <param name="itemId">Id of item</param>
 <remarks>Parameters can be null</remarks>
 <returns>PageItemIndexKey</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetPageNavigationTagIndexKey(System.Int32,System.String)">
 <summary>
 Gets the key used for the PageNavigationTag index.
 </summary>
 <param name="areaId">Id of area</param>
 <param name="navigationTag">Navigation tag</param>
 <remarks>Parameters can be null</remarks>
 <returns>PageNavigationTagIndexKey</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetPage(System.Int32)">
 <summary>
 Gets the page with the specified id
 </summary>
 <param name="pageId">The id of the page to get</param>
 <returns>The page with the specified id. If a page with the Id is not found, <c>null</c> is returned</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetPageById(System.Int32)">
 <summary>
 Gets the page with the specified id
 </summary>
 <param name="pageId">The id of the page to get</param>
 <returns>The page with the specified id. If a page with the Id is not found, <c>null</c> is returned</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetAreaAndPageNameByUrl(System.String,System.String@,System.String@)">
 <summary>
 Gets the area and page name by URL.
 </summary>
 <param name="url">The URL, i.e. Default.aspx?ID=123.</param>
 <param name="internalId">Optional parameter by reference. If passed the ID of the page will be returned.</param>
 <param name="internalAreaId">Optional parameter by reference. If passed the ID of the area will be returned.</param>
 <returns>The name of the area and page of the given link in the format "Area name: Page name"</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetPageForItem(System.String,System.String)">
 <summary>
 Gets the page for the item with the specified type and id
 </summary>
 <param name="itemType">The itemType for which to find a page</param>
 <param name="itemId">The itemId for which to find a page</param>
 <returns>A page that has an associated item with the specified item type and id</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetPagesForItems(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Gets a collection of pages having the specified item types
 </summary>
 <param name="itemTypes">The item types for which to get pages</param>
 <returns>A collection of pages having the specified item types</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetPages">
 <summary>
 Gets all pages in the system
 </summary>
 <returns>A list of all pages in the system</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetPages(System.Int32[])">
 <summary>
 Gets all the pages matching the ids in the specified array
 </summary>
 <param name="pageIds">An array of ids for which to get the page instances</param>
 <returns>A list with the pages matching the specified ids</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetPagesByAreaID(System.Int32)">
 <summary>
 Gets all the pages for the area with the specified id
 </summary>
 <param name="areaId">The id of the area for which to get all its pages</param>
 <returns>A list of pages</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetUpdatedLanguagePages(System.Int32)">
 <summary>
 Gets a list of pages for an area that has not been updated after their masters have been updated. The passed areaId has to be for an Area that is a language (has a master).
 </summary>
 <param name="areaId">The area id for which to get the updated language pages</param>
 <remarks>Uses the database directly</remarks>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetPagesByTitle(System.String)">
 <summary>
 Gets all the pages that have the specified title
 </summary>
 <param name="title">The title fort which to get all pages having that as their title</param>
 <returns>A collection of pages with the specified titel</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetPagesWithPermissions">
 <summary>
 Gets all pages that have assigned permissions
 </summary>
 <returns>A list of page instances that have permissions assigned</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.SavePage(Dynamicweb.Content.Page)">
 <summary>
 Saves the specified page to persistance
 </summary>
 <param name="page">The page to save</param>
 <returns>The newly saved page</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.DeletePage(System.Int32)">
 <summary>
 Deletes the specified page
 </summary>
 <param name="pageId">The id of the page to delete</param>
</member>
<member name="M:Dynamicweb.Content.PageService.GetLanguagePages(System.Int32)">
 <summary>
 Gets all language versions of the page with the specified id
 </summary>
 <param name="pageId">The id of the page for which to get all its language versions</param>
 <returns>A list of pages</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetPageNavigationTree(System.Int32)">
 <summary>
 Gets a representation of the website and its pages in a PageTree instance
 </summary>
 <param name="parentPageId">The id of the page for which to get its page navigation tree</param>
 <remarks>looks up data from database</remarks>
 <returns>A PageTree instance</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetAreaNavigationTree(System.Int32)">
 <summary>
 Gets a representation of a subset of the website with the pages located under the page with the specified id
 </summary>
 <param name="areaId">The id of the area for which to get its page navigation tree</param>
 <returns>A PageTree instance</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.CopyTo(Dynamicweb.Content.CopyPageInfo)">
 <summary>
 Creates a copy of a given Page
 </summary>
 <param name="copyPageInfo">A CopyPageInfo instance providing information about how to perform the actual copy operation</param>
 <returns>A response indicating the success or failure of the operation</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.Copy(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.HashSet{System.Int32})">
 <summary>
 Copies the current page.
 </summary>
 <param name="fromPageId">Page to copy</param>
 <param name="toAreaId">Area to copy to</param>
 <param name="parentPageId">Parent page to copy to</param>
 <param name="copyParagraphs"></param>
 <param name="copySubpages"></param>
 <param name="isTopPage"></param>
 <returns>The new page</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.PageService.Move(System.Int32,System.Int32,System.Int32)">
 <summary>
 Moves the specified page to the target page and area
 </summary>
 <param name="pageId">The id of the page to move</param>
 <param name="destinationAreaId">Area to move to.</param>
 <param name="destinationPageId">The id of the page to which the page should be moved</param>
 <returns>A response indicating the success or failure of the operation</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.MoveLanguagePages(System.Int32,System.Int32)">
 <summary>
 Moves the languagePages of the page to their corresponding destinations, based upon the languagepages of the destination.
 </summary>
 <remarks>Assumes that masterArea has exactly 1 languagePage corresponding to the destinationPage, for each languageArea</remarks>
 <param name="pageId">Id of page being moved</param>
 <param name="destinationPageId">Destination to move the page to</param>
</member>
<member name="M:Dynamicweb.Content.PageService.MovePage(Dynamicweb.Content.Page,System.Int32,System.Int32,System.Int32)">
 <summary>
 Moves specified page. Also moves subpages, if the move is within the same area.
 </summary>
 <param name="page">The page to move</param>
 <param name="destinationAreaId">Area to move to.</param>
 <param name="destinationPageId">The id of the page to which the page should be moved</param>
 <param name="sortValue">The new sort value</param>
 <remarks>
 </remarks>
</member>
<member name="M:Dynamicweb.Content.PageService.CreateFromMaster(System.Int32,System.Int32)">
 <summary>
 Creates a new language version of the page with the specified id
 </summary>
 <param name="masterPageId">The id of the page acting as master</param>
 <param name="languageAreaId">The language version of the website on which to create the new page</param>
 <returns>The id of the new page</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetPageIDByMasterID(System.Int32,System.Int32)">
 <summary>
 Gets the id of the page in the specified language version that has a master page with the given id
 </summary>
 <param name="masterId">The id of the master page</param>
 <param name="languageAreaId">The language version of the page to get</param>
 <returns>A page id that has a master page with the specified id in the given language</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.SaveAsTemplate(Dynamicweb.Content.Page,System.String,System.String)">
 <summary>
 Saves the specified page as a template
 </summary>
 <param name="page">The page to save as a template</param>
 <param name="name">The name of the new template</param>
 <param name="description">A description of the template</param>
 <returns>The newly assigned page id for the template</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetPageTemplatesForArea(System.Int32)">
 <summary>
 Gets all page templates for the specified are
 </summary>
 <param name="areaId">The id of the area for which to get it's page templates</param>
 <returns>A collection of page templates</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetPagesByParentID(System.Int32)">
 <summary>
 Gets all pages having the specified parent id
 </summary>
 <param name="parentId">The parent id for which to get all children pages</param>
 <returns>A list of pages all having a parent page with the specified id</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetRootPagesForArea(System.Int32)">
 <summary>
 Gets all root pages for the area with the specified id
 </summary>
 <param name="areaId">The id of the area for which to get all its root pages</param>
 <returns>A list of pages all being root to the area with the specified id</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetFirstActivePageForArea(System.Int32)">
 <summary>
 Gets the first active root page for the area with the specified id.
 </summary>
 <param name="areaId">The id of the area for which to get the page</param>
 <returns>The first active page for the specified area</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetFirstModulePageForArea(System.Int32,System.String)">
 <summary>
 Gets the first module page for the area with the specified id.
 </summary>
 <param name="areaId">The id of the area for which to get the page.</param>
 <param name="moduleSystemName">The system name of the module.</param>
 <returns>Page.</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetFirstPageForArea(System.Int32)">
 <summary>
 Gets the first root page for the area with the specified id.
 </summary>
 <param name="areaId">The id of the area for which to get the page</param>
 <returns>The first page for the specified area</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetSolutionInfo">
 <summary>
 Gets a SolutionInfo instance having general information about the entire solution
 </summary>
 <returns>A SolutionInfo instance having information about the entire solution</returns>
 <remarks>Method was obsoleted because it uses an expensive database call to calculate page count.</remarks>
</member>
<member name="M:Dynamicweb.Content.PageService.GetWebpageCount">
 <summary>
 Gets number of webpages on solution.
 </summary>
 <returns>webpageCount</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.GetWebpageCount(System.Int32)">
 <summary>
 Gets total number of webpages on specified area.
 </summary>
 <param name="areaId">areaId</param>
 <returns>webpageCount</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.UserHasAccessToAllBackendSubpages(Dynamicweb.Content.Page,Dynamicweb.Security.UserManagement.User)">
 <summary>
 Gets a value indicating if the user has access to all subpages in the specified page in the administration
 </summary>
 <param name="page">The page for which to determine if the user can access that and its subpages</param>
 <param name="user">The user for whom to determine access</param>
 <returns>True if the user can access the page and all of its subpages, otherwise false</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.UpdatePagesOrder(System.Int32,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
 <summary>
 Updates sorting for given pages
 </summary>
 <param name="areaID">The id of the area for pages</param>
 <param name="pageId">The parent id for which to update sort indexes</param>
 <param name="childPageIdsOrder">Ordered collection of pages ids</param>
</member>
<member name="M:Dynamicweb.Content.PageService.ExecuteDelete(System.Int32)">
 <summary>
 Executes the operations related to deleting a page
 </summary>
 <param name="pageId">The id of the page to delete</param>
</member>
<member name="M:Dynamicweb.Content.PageService.HandlePermissions(Dynamicweb.Content.Page)">
 <summary>
 Assigns the Area's permission template to the page if it is new, and the area has defined such a template
 </summary>
 <param name="page">The page for which to determine its permission template</param>
</member>
<member name="M:Dynamicweb.Content.PageService.HandlePropertyItem(Dynamicweb.Content.Page)">
 <summary>
 Creates a property item for new page or make a copy of the assigned a propertyItem id (this happened when page is copied)
 </summary>
 <param name="page">The page for which to create/copy the PropertyItem to</param>
</member>
<member name="M:Dynamicweb.Content.PageService.HandleItemStructure(Dynamicweb.Content.Page)">
 <summary>
 Handles logic for an item when saving or updating a page
 </summary>
 <param name="page">The page being saved</param>
</member>
<member name="M:Dynamicweb.Content.PageService.MoveToBin(Dynamicweb.Content.Page)">
 <summary>
 Moves the specified page to the recycle bin
 </summary>
 <param name="obj">The page to move to the recycle bin</param>
</member>
<member name="M:Dynamicweb.Content.PageService.MoveToExistingBin(Dynamicweb.Content.Page,System.Guid)">
 <summary>
 Moves the specified page to an existing RecycleBin with the specified unit id
 </summary>
 <param name="obj">The page to move to an existing bin</param>
 <param name="unitId">The id of the existing recycle bin to which this page should be moved</param>
</member>
<member name="M:Dynamicweb.Content.PageService.MoveToBin(Dynamicweb.Content.Page,Dynamicweb.SystemTools.RecycleBin.RecycleBin)">
 <summary>
 Moves the specified page, subpages and any language versions of those pages to the given RecycleBin.
 If the bin is a non existing bin, the page will be assigned as the Primary Item of the RecycleBin, otherwise it will just be a part of the items in the bin
 </summary>
 <param name="page">The page to move to a bin</param>
 <param name="bin">The bin to which the page should be moved</param>
</member>
<member name="M:Dynamicweb.Content.PageService.CreateRecycleItem(Dynamicweb.Content.Page)">
 <summary>
 Creates a new recycle item for the specified page
 </summary>
 <param name="page">The page for which to create a RecycleItem instance</param>
 <returns>A RecycleItem for the specified page</returns>
</member>
<member name="M:Dynamicweb.Content.PageService.Restore(System.Object)">
 <summary>
 Restores the page with the given id from the recycle bin
 </summary>
 <param name="id">The id of the page to restore</param>
</member>
<member name="M:Dynamicweb.Content.PageService.GetAncestors(System.Int32,System.Boolean)">
 <summary>
 Gets all ancestor page collection
 </summary>
 <param name="pageId">The id of the page to get ancestors</param>
 <param name="includingSelf">Indicates if page with given Id will be included in result</param>
</member>
<member name="M:Dynamicweb.Content.PageService.DeleteAllPages(Dynamicweb.Content.Area)">
 <summary>
 Deletes all pages in the specified area
 </summary>
 <param name="area">The area for which to delete all pages</param>
</member>
<member name="M:Dynamicweb.Content.PageService.CanDeletePages(Dynamicweb.Content.Area)">
 <summary>
 Returns a value indicating if the pages for the specified area can be deleted.
 </summary>
 <param name="area">The area for which to determine if associated pages can be deleted</param>
 <returns>True if the pages can be deleted, otherwise false</returns>
 <remarks>
 If the Area is a master area (The primary version of a website in contrast to language versions of the same website),
 and it has language versions. Elements comprising the area cannot be deleted until the language versions has been deleted.
 
 If it is not a master area, the area elements can be deleted
 </remarks>
</member>
<member name="T:Dynamicweb.Content.ParagraphLanguageService">
 <summary>
 The ParagraphLanguageService class is a Domain Service responsible for resolving and creating language versions of paragraphs
 </summary>
</member>
<member name="P:Dynamicweb.Content.ParagraphLanguageService.PageService">
 <summary>
 Gets an implementation of the <see cref="T:Dynamicweb.Content.IPageService"/> interface for accessing Page related data
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.ParagraphLanguageService.DeactivateOnCreate">
 <summary>
 Gets an implementation of the <see cref="T:Dynamicweb.Content.IPageService"/> interface for accessing Page related data
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphLanguageService.GetLanguageVersionsOfParagraph(System.Int32)">
 <summary>
 Gets a list of paragraph language versions for the paragraph with the specified id
 </summary>
 <param name="paragraphId">The id of the paragraph for which to get its language versions</param>
 <returns>A list of language paragraph versions</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphLanguageService.CreateParagraphLanguageVersions(Dynamicweb.Content.Paragraph)">
 <summary>
 Creates new transient (not persisted) language versions of the specified paragrah
 </summary>
 <param name="paragraph">The paragraph for which to create languag versions for</param>
 <returns>A list of the language versions created for the specified Paragraph</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphLanguageService.CreateFromMaster(System.Int32,System.Int32)">
 <summary>
 Creates a paragraph from the master paragraph and links them.
 </summary>
 <param name="masterParagraphID">The master paragraph ID.</param>
 <param name="onPageID">The page ID on which to create the language.</param>
</member>
<member name="M:Dynamicweb.Content.ParagraphLanguageService.CreateFromMaster(System.Int32,System.Int32,System.Boolean)">
 <summary>
 Creates a paragraph from master and link them.
 </summary>
 <param name="masterParagraphID">The master paragraph ID.</param>
 <param name="onPageID">The on page ID.</param>
 <param name="show">if set to <c>true</c> [show].</param>
</member>
<member name="M:Dynamicweb.Content.ParagraphLanguageService.CreateFromMaster(Dynamicweb.Content.Paragraph,System.Int32,System.Boolean)">
 <summary>
 Creates a paragraph from master and link them.
 </summary>
 <param name="masterParagraph">The master paragraph from which to create a new Paragraph</param>
 <param name="onPageID">The page to which the new paragraph should be asscociated</param>
</member>
<member name="M:Dynamicweb.Content.ParagraphLanguageService.HandleMasterLinks(Dynamicweb.Content.Paragraph)">
 <summary>
 Handles the links in the master when copied to language versions.
 </summary>
 <param name="paragraph">The paragraph</param>
</member>
<member name="M:Dynamicweb.Content.ParagraphLanguageService.HandleMasterLinks(Dynamicweb.Content.Items.Item,System.Int32)">
 <summary>
 Handles the links.
 </summary>
 <param name="languageAreaId">The language Area Id.</param>
</member>
<member name="M:Dynamicweb.Content.ParagraphLanguageService.HandleLinks(System.String,System.Int32)">
 <summary>
 Handles the links.
 </summary>
 <param name="text">The text.</param>
 <param name="languageAreaId">The language Area Id.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphLanguageService.CreateGlobal(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.String)">
 <summary>
 Creates the global.
 </summary>
 <param name="globalID">The global ID.</param>
 <param name="pageID">The page ID.</param>
 <param name="sort">The sort.</param>
 <returns></returns>        
</member>
<member name="T:Dynamicweb.Content.ParagraphService">
 <summary>
 The ParagraphService class is an implementation of the <see cref="T:Dynamicweb.Content.IParagraphService"/> interface providing methods for querying and saving The Paragraph Aggregate to and from persistence.
 </summary>
 <see cref="T:Dynamicweb.Content.IParagraphService"/>
</member>
<member name="P:Dynamicweb.Content.ParagraphService.Repository">
 <summary>
 Gets the repository for working with the Paragraph aggregate
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.ClearCache">
 <summary>
 Clears the indexes from memory.
 </summary>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.ForceRefreshIndex(System.Int32)">
 <summary>
 Forces the specific item from the index to be force-refreshed from the repository.
 </summary>
 <param name="paragraphId">Id of paragraph to be refreshed</param>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.Delete(System.Int32)">
 <summary>
 Deletes the Paragraph with the specified id
 </summary>
 <param name="paragraphId">The id of the paragraph to delete</param>
 <exception cref="T:System.ArgumentException"></exception>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.DeleteAllPageParagraphs(Dynamicweb.Content.Page)">
 <summary>
 Deletes all paragraphs associated with the specified area
 </summary>
 <param name="page">The page for which to delete all associated paragraphs</param>
 <returns>A <see cref="T:Dynamicweb.Core.ApplicationResponse"/> indicating the success or failure of the operation</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.DeleteAllParagraphs(Dynamicweb.Content.Area)">
 <summary>
 Deletes all paragraphs associated with the specified area
 </summary>
 <param name="area">The area for which to delete all associated paragraphs</param>
 <returns>A <see cref="T:Dynamicweb.Core.ApplicationResponse"/> indicating the success or failure of the operation</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.CanDeleteParagraphs(Dynamicweb.Content.Area)">
 <summary>
 Returns a value indicating if the paragraphs for the specified area can be deleted.
 </summary>
 <param name="area">The area for which to determine if associated paragraphs can be deleted</param>
 <returns>True if the paragraphs can be deleted, otherwise false</returns>
 <remarks>
 If the Area is a master area (The primary version of a website in contrast to language versions of the same website),
 and it has language versions. Elements comprising the area cannot be deleted until the language versions has been deleted.
 
 If it is not a master area, the area elements can be deleted
 </remarks>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.GetParagraph(System.Int32)">
 <summary>
 Gets the Paragraph with the specified id
 </summary>
 <param name="paragraphId">The id of the paragraph to get</param>
 <returns>The paragraph with the specified id</returns>
 <exception cref="T:System.ArgumentException"></exception>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.GetParagraphsByPageId(System.Int32)">
 <summary>
 Gets all the paragraphs belonging to the page with the specified id
 </summary>
 <param name="pageId">The id of the page for which to get all its paragraphs</param>
 <returns>A collection of Paragraphs </returns>
 <exception cref="T:System.ArgumentException"></exception>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.GetParagraphFromVersion(System.Int32,System.Int32)">
 <summary>
 Gets the paragraph with the specified id, but with its values populated from the version with the specified versionId
 </summary>
 <param name="paragraphId">The id of the paragraph to get</param>
 <param name="versionId">The id of the version from which the paragraph should have its data populated</param>
 <returns>A paragraph with data populated from the version with the given versionId</returns>
 <exception cref="T:System.ArgumentException"></exception>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.GetParagraphDraft(System.Int32)">
 <summary>
 Gets the draft version of the paragraph with the specified id if any.
 </summary>
 <param name="paragraphId">Th id of the paragraph for which to get the draft version</param>
 <returns>The draft version of the paragraph with the specified id if any, otherwise null (Nothing)</returns>
 <exception cref="T:System.ArgumentException"></exception>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.GetParagraphDraft(System.Int32,System.DateTime)">
 <summary>
 Gets the draft version of the paragraph with the specified id if any.
 </summary>
 <param name="paragraphId">Th id of the paragraph for which to get the draft version</param>
 <param name="previewDate">The preview date of the draft version</param>
 <returns>The draft version of the paragraph with the specified id if any, otherwise null (Nothing)</returns>
 <exception cref="T:System.ArgumentException"></exception>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.GetParagraphsByPageId(System.Int32,Dynamicweb.Content.ParagraphSort)">
 <summary>
 Gets all the paragraphs belonging to the page with the specified id sorted by the specified sort value
 </summary>
 <param name="pageId">The id of the page for which to get all its paragraphs</param>
 <param name="sortBy">A value indicating of the collection of Paragraphs should be sorted</param>
 <returns>A sorted collection of Paragraphs</returns>
 <exception cref="T:System.ArgumentException"></exception>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.GetParagraphsByAreaID(System.Int32)">
 <summary>
 Gets all the paragraphs associated with the specified area id
 </summary>
 <param name="areaID">The id of the area for which to get all associated Paragraphs</param>
 <returns>A collection of Paragraphs associated with the specified Area id</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.GetParagraphsByIds(System.Collections.Generic.IEnumerable{System.Int32})">
 <summary>
 Gets the paragraphs matching the id's in the list
 </summary>
 <param name="ids">A list of paragraph ids for which to get the matching Paragraphs</param>
 <returns>A collection of Paragraphs matching the ids in the specified list</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.GetParagraphByParagraphOrPageIds(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
 <summary>
 Gets the paragraph by paragraph or page ids.
 </summary>
 <param name="paragraphIds">The paragraph ids.</param>
 <param name="pageIds">The page ids.</param>
 <returns>IEnumerable(Of Paragraph).</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.GetParagraphs">
 <summary>
 Gets all the paragraphs in the systen
 </summary>
 <returns>A ParagraphCollection with all the paragraphs registred in the systen</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.GetParagraphsByModuleName(System.String)">
 <summary>
 Gets all the paragraphs that have the specified module name
 </summary>
 <param name="moduleName">The module name for which to get all paragraphs</param>
 <returns>A ParagraphCollection with all paragraphs having the specified module name</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.GetParagraphForItem(System.String,System.String)">
 <summary>
 Gets the paragraph for the item with the specified name and id
 </summary>
 <param name="itemType">The name of the item type</param>
 <param name="itemId">The id of the item</param>
 <returns>The paragraph associated with the specified item</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.GetParagraphsByItemTypes(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Gets the paragraphs that has one of the ItemTypes specified in the itemTypes list
 </summary>
 <param name="itemTypes">A list of itemTypes for which to get Paragraphs</param>
 <returns>A collection of Paragraphs</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.Move(System.Int32,System.Int32,System.Int32)">
 <summary>
 Moves the specified Paragrah from the source page to the target page
 </summary>
 <param name="paragraphId">The id of the paragraph to move</param>
 <param name="sourcePageId">The id of the page from which to move the paragraph</param>
 <param name="targetPageId">The id of the page to which the paragraph should be moved</param>
 <returns>The newly moved Paragraph</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.CopyTo(System.Int32,System.Int32)">
 <summary>
 Copies the paragraph with the specified source ID to the page with the specified ID.
 </summary>
 <param name="pageID">The page ID to move the paragraph to.</param>
 <param name="source">The id of the paragraph to copy.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.CopyTo(System.Int32,System.Int32,System.Boolean)">
 <summary>
 Copies the paragraph with the specified source ID to the page with the specified ID.
 </summary>
 <param name="pageID">The page ID to move the paragraph to.</param>
 <param name="source">The id of the paragraph to copy.</param>
 <param name="isExperiment">Specifies whether the source paragraph is copied as a part of an <see cref="T:Dynamicweb.Frontend.Contracts.IExperiment"></see>.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.SaveParagraph(Dynamicweb.Content.Paragraph)">
 <summary>
 Saves the specified paragraph to persistance 
 </summary>
 <param name="paragraph">The paragraph to save</param>
 <returns>The newly saved paragraph</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.ToggleActive(Dynamicweb.Content.Paragraph,System.Boolean)">
 <summary>
 Include or exclude a paragraph in the layout of the webpage
 </summary>
 <param name="paragraph">The paragraph to include or exclude</param>
 <param name="active">Whether a paragraph is included or excluded</param>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.HandleItemStructure(Dynamicweb.Content.Paragraph)">
 <summary>
 Handles logic for an item when saving or updating a paragraph
 </summary>
 <param name="paragraph">The paragraph being saved</param>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.MoveToBin(Dynamicweb.Content.Paragraph)">
 <summary>
 Moves the parahraph into a new recycle bin.
 </summary>
 <param name="obj">Object to delete</param>
 <returns>unique id of recycle bin</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.MoveToExistingBin(Dynamicweb.Content.Paragraph,System.Guid)">
 <summary>
 Moves the parahraph into a specific recycle bin.
 </summary>
 <param name="obj"></param>
 <param name="unitId"></param>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.MoveToBin(Dynamicweb.Content.Paragraph,Dynamicweb.SystemTools.RecycleBin.RecycleBin)">
 <summary>
 Moves the specified Paragraph to the given RecycleBin.
 If the bin is a non existing bin, the Paragraph will be assigned as the Primary Item of the RecycleBin, otherwise it will just be a part of the items in the bin
 </summary>
 <param name="paragraph">The Paragraph to move to a bin</param>
 <param name="bin">The bin to which the Paragraph should be moved</param>
</member>
<member name="M:Dynamicweb.Content.ParagraphService.CreateRecycleItem(Dynamicweb.Content.Paragraph)">
 <summary>
 Creates a new recycle item for the specified paragraph
 </summary>
 <param name="paragraph">The paragraph for which to create a RecycleItem instance</param>
 <returns>A RecycleItem for the specified paragraph</returns>
</member>
<member name="T:Dynamicweb.Content.ParagraphVersionService">
 <summary>
 The ParagraphVersionService class is a Domain Service responsible for handling specific versions and drafts of a Paragraph to and from xml and DataSets
 </summary>
</member>
<member name="M:Dynamicweb.Content.ParagraphVersionService.GetParagraphVersion(Dynamicweb.Content.Paragraph,System.Int32)">
 <summary>
 Gets a specific version of a given Paragraph
 </summary>
 <param name="paragraph">The Paragraph for which to get in a specific version</param>
 <param name="versionId">The version id of the Paragraph to get</param>
 <returns>A paragraph with the specified id and version id</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphVersionService.GetParagraphVersion(System.Int32,System.Int32)">
 <summary>
 Gets a specific version of a given Paragraph
 </summary>
 <param name="paragraphId">The id of the Paragraph for which to get in a specific version</param>
 <param name="versionId">The version id of the Paragraph to get</param>
 <returns>A paragraph with the specified id and version id</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphVersionService.Save(Dynamicweb.Content.Paragraph)">
 <summary>
 Saves the specified Paragraph as a new version
 </summary>
 <param name="paragraph">The paragraph to save as a new version</param>
</member>
<member name="M:Dynamicweb.Content.ParagraphVersionService.GetParagraphDraft(System.Int32,System.DateTime)">
 <summary>
 Gets the draft version of the Paragraph with the specified id on given preview date
 </summary>
 <param name="paragraphId">The id of the Paragraph for which to get the draft version</param>
 <param name="previewDate">The preview date of the draft version</param>
 <returns>The draft version of the Paragraph with the specified id</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphVersionService.GetParagraphDraft(Dynamicweb.Content.Paragraph,System.DateTime)">
 <summary>
 Gets the draft version of the Paragraph with the specified id on given preview date
 </summary>
 <param name="paragraph">The Paragraph for which to get the draft version</param>
 <param name="previewDate">The preview date of the draft version</param>
 <returns>The draft version of the Paragraph with the specified id</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphVersionService.GetItem(System.Data.DataTable)">
 <summary>
 Gets the item from the specified dataTable
 </summary>
 <param name="paragraphDataTable">DataTable having information about the item related to a specific Paragraph</param>
 <returns>The item associated with a specific Paragraph if any, otherwise null (Nothing)</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphVersionService.GetItem(System.String,System.String)">
 <summary>
 Gets the item with the specified system name and id
 </summary>
 <param name="systemName">The system name of the item to get</param>
 <param name="itemId">The id of the item to get</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphVersionService.GetItem(System.String)">
 <summary>
 Gets an item from the serialize item data
 </summary>
 <param name="serializedItem">serialize item data from which to construct an ItemEntry instance</param>
 <returns>An ItemEntry instance deserialized from the string data</returns>
</member>
<member name="M:Dynamicweb.Content.ParagraphVersionService.DeserializeItem(System.String)">
 <summary>
 Deserializes an ItemEntry from the Serialized string data
 </summary>
 <param name="serializedItem">The string data representing an ItemEntry</param>
 <returns>An ItemEntry instance deserialized from the string data</returns>
</member>
<member name="T:Dynamicweb.Content.SolutionInfo">
 <summary>
 The SolutionInfo class provides information about the currently running solution
 </summary>
</member>
<member name="M:Dynamicweb.Content.SolutionInfo.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Content.AreaInfo})">
 <summary>
 Initializes a new instance of the SolutionInfo class
 </summary>
</member>
<member name="P:Dynamicweb.Content.SolutionInfo.Areas">
 <summary>
 Gets a list of all websites currently in the solution
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.SolutionInfo.WebpageCount">
 <summary>
 Gets the total number of web pages across websites, where template and folders is not considered a valid web page
 </summary>
 <returns>An integer indicating the number of total web pages across all websites</returns>
</member>
<member name="M:Dynamicweb.Content.SolutionInfo.AreaWebpageCount(System.Int32)">
 <summary>
 Gets the number of web pages for the area with the specified id, if area can't be found zero will be returned
 </summary>
 <param name="areaId">The id of the area for which to get its number of pages</param>
 <returns>An integer indicating how many pages the web site with the specified id contains</returns>
</member>
<member name="T:Dynamicweb.Content.IPageService">
 <summary>
 The IPageService interface defines operations for working with the Page Aggregate
 </summary>
</member>
<member name="M:Dynamicweb.Content.IPageService.CopyTo(Dynamicweb.Content.CopyPageInfo)">
 <summary>
 Creates a copy of a given Page
 </summary>
 <param name="copyPageInfo">A CopyPageInfo instance providing information about how to perform the actual copy operation</param>
 <returns>A response indicating the success or failure of the operation</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.Move(System.Int32,System.Int32,System.Int32)">
 <summary>
 Moves the specified page to the target page and area
 </summary>
 <param name="pageId">The id of the page to move</param>
 <param name="destinationAreaId">Area to move to.</param>
 <param name="destinationPageId">The id of the page to which the page should be moved</param>
 <returns>The newly moved Paragraph</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.CreateFromMaster(System.Int32,System.Int32)">
 <summary>
 Creates a new language version of the page with the specified id
 </summary>
 <param name="masterPageId">The id of the page acting as master</param>
 <param name="languageAreaId">The language version of the website on which to create the new page</param>
 <returns>The id of the new page</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.DeletePage(System.Int32)">
 <summary>
 Deletes the specified page
 </summary>
 <param name="pageId">The id of the page to delete</param>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetPage(System.Int32)">
 <summary>
 Gets the page with the specified id
 </summary>
 <param name="pageId">The id of the page to get</param>
 <returns>The page with the specified id</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetAreaAndPageNameByUrl(System.String,System.String@,System.String@)">
 <summary>
 Gets the area and page name by URL.
 </summary>
 <param name="url">The URL, i.e. Default.aspx?ID=123.</param>
 <param name="internalId">Optional parameter by reference. If passed the ID of the page will be returned.</param>
 <param name="internalAreaId">Optional parameter by reference. If passed the ID of the area will be returned.</param>
 <returns>The name of the area and page of the given link in the format "Area name: Page name"</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetPageByNavigationTag(System.Int32,System.String)">
 <summary>
 Gets the page with the specified navigation tag.
 </summary>
 <param name="areaId">The area identifier.</param>
 <param name="navigationTag">The navigation tag.</param>
 <returns>The first area page with the specified navigationtag</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetPages">
 <summary>
 Gets all pages in the system
 </summary>
 <returns>A list with all the pages in the system</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetPages(System.Int32[])">
 <summary>
 Gets all the pages matching the ids in the specified array
 </summary>
 <param name="pageIds">An array of ids for which to get the page instances</param>
 <returns>A list with the pages matching the specified ids</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetPagesByAreaID(System.Int32)">
 <summary>
 Gets all the pages for the area with the specified id
 </summary>
 <param name="areaId">The id of the area for which to get all its pages</param>
 <returns>A list of pages</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetAreaNavigationTree(System.Int32)">
 <summary>
 Gets a representation of the website and its pages in a PageTree instance
 </summary>
 <param name="areaId">The id of the area for which to get its page navigation tree</param>
 <returns>A PageTree instance</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetPageNavigationTree(System.Int32)">
 <summary>
 Gets a representation of a subset of the website with the pages located under the page with the specified id
 </summary>
 <param name="parentPageId">The id of the page that will be the root page in the PageTree</param>
 <returns>A PageTree instance</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.SaveAsTemplate(Dynamicweb.Content.Page,System.String,System.String)">
 <summary>
 Saves the specified page as a template
 </summary>
 <param name="page">The page to save as a template</param>
 <param name="name">The name of the new template</param>
 <param name="description">A description of the template</param>
 <returns>The newly assigned page id for the template</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.SavePage(Dynamicweb.Content.Page)">
 <summary>
 Saves the specified page to persistance
 </summary>
 <param name="page">The page to save</param>
 <returns>The newly saved page</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetPageIDByMasterID(System.Int32,System.Int32)">
 <summary>
 Gets the id of the page in the specified language version that has a master page with the given id
 </summary>
 <param name="masterId">The id of the master page</param>
 <param name="languageAreaId">The language version of the page to get</param>
 <returns>A page id that has a master page with the specified id in the given language</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetRootPagesForArea(System.Int32)">
 <summary>
 Gets all root pages for the area with the specified id
 </summary>
 <param name="areaId">The id of the area for which to get all its root pages</param>
 <returns>A list of pages all being root to the area with the specified id</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetFirstActivePageForArea(System.Int32)">
 <summary>
 Gets the first active root page for the area with the specified id.
 </summary>
 <param name="areaId">The id of the area for which to get the page</param>
 <returns>The first active page for the specified area</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetFirstModulePageForArea(System.Int32,System.String)">
 <summary>
 Gets the first module page for the area with the specified id.
 </summary>
 <param name="areaId">The id of the area for which to get the page.</param>
 <param name="moduleSystemName">The system name of the module.</param>
 <returns>Page.</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetFirstPageForArea(System.Int32)">
 <summary>
 Gets the first root page for the area with the specified id.
 </summary>
 <param name="areaId">The id of the area for which to get the page</param>
 <returns>The first page for the specified area</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetPagesByParentID(System.Int32)">
 <summary>
 Gets all pages having the specified parent id
 </summary>
 <param name="parentId">The parent id for which to get all children pages</param>
 <returns>A list of pages all having a parent page with the specified id</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetPageTemplatesForArea(System.Int32)">
 <summary>
 Gets all page templates for the specified area
 </summary>
 <param name="areaId">The id of the area for which to get it's page templates</param>
 <returns>A collection of page templates</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetLanguagePages(System.Int32)">
 <summary>
 Gets all language versions of the page with the specified id
 </summary>
 <param name="pageId">The id of the page for which to get all its language versions</param>
 <returns>A list of pages</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetPageForItem(System.String,System.String)">
 <summary>
 Gets the page for the item with the specified type and id
 </summary>
 <param name="itemType">The itemType for which to find a page</param>
 <param name="itemId">The itemId for which to find a page</param>
 <returns>A page that has an associated item with the specified item type and id</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetPagesForItems(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Gets a collection of pages having the specified item types
 </summary>
 <param name="itemTypes">The item types for which to get pages</param>
 <returns>A collection of pages having the specified item types</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetUpdatedLanguagePages(System.Int32)">
 <summary>
 Gets a list of pages for an area that has not been updated after their masters have been updated. The passed areaId has to be for an Area that is a language (has a master).
 </summary>
 <param name="areaId">The area id for which to get the updated language pages</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetPagesByTitle(System.String)">
 <summary>
 Gets all the pages that have the specified title
 </summary>
 <param name="title">The title fort which to get all pages having that as their title</param>
 <returns>A collection of pages with the specified titel</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetPagesWithPermissions">
 <summary>
 Gets all pages that have assigned permissions
 </summary>
 <returns>A list of page instances that have permissions assigned</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetSolutionInfo">
 <summary>
 Gets a SolutionInfo instance having general information about the entire solution
 </summary>
 <returns>A SolutionInfo instance having information about the entire solution</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetWebpageCount">
 <summary>
 Gets number of webpages on solution.
 </summary>
 <returns>webpageCount</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetWebpageCount(System.Int32)">
 <summary>
 Gets total number of webpages on specified area.
 </summary>
 <param name="areaId">areaId</param>
 <returns>webpageCount</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.UserHasAccessToAllBackendSubpages(Dynamicweb.Content.Page,Dynamicweb.Security.UserManagement.User)">
 <summary>
 Gets a value indicating if the user has access to all subpages in the specified page in the administration
 </summary>
 <param name="page">The page for which to determine if the user can access that and its subpages</param>
 <param name="user">The user for whom to determine access</param>
 <returns>True if the user can access the page and all of its subpages, otherwise false</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.UpdatePagesOrder(System.Int32,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
 <summary>
 Update order of childpages pages in navigation tree.
 </summary>
 <param name="areaId">The page area Id of the <paramref name="pageId" /></param>
 <param name="pageId">The page Id. if pageId is null or 0 the order of the top level pages hasbeen changed</param>
 <param name="childPageIdsOrder">The collection of subpage ids with new pages order</param>
</member>
<member name="M:Dynamicweb.Content.IPageService.DeleteAllAreaPages(Dynamicweb.Content.Area)">
 <summary>
 Deletes all pages in the specified area
 </summary>
 <param name="area">The area for which to delete all pages</param>
</member>
<member name="M:Dynamicweb.Content.IPageService.ClearCache">
 <summary>
 Clear page cache
 </summary>
</member>
<member name="M:Dynamicweb.Content.IPageService.ForceRefreshIndex(System.Int32)">
 <summary>
 Forces the specific item from the index to be force-refreshed from the repository.
 </summary>
 <param name="id">Id of element to be refreshed</param>
 <returns>success</returns>
</member>
<member name="M:Dynamicweb.Content.IPageService.GetAncestors(System.Int32,System.Boolean)">
 <summary>
 Gets all ancestors pages
 </summary>
 <returns>The page collection</returns>
</member>
<member name="T:Dynamicweb.Content.NamespaceDoc">
 <summary>
 The Dynamicweb.Content namespace is the API for managing content in Dynamicweb including Websites, Pages, Paragraphs and Items. Use the AreaService, PageService, ParagraphService and ItemService to do operations on data like adding, updating and deleting.
 </summary>
</member>
<member name="T:Dynamicweb.Content.Workflow.NamespaceDoc">
 <summary>
 Workflow engine for managing publishing and approval of content changes.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Workflow.Page.CanCurrentUserApprovePage(System.Int32)">
 <summary>
 Check if the current user can approve the page from workflow
 </summary>
 <param name="pageId">Page id for approval check</param>
 <returns>Returns true if current user can approve the page from workflow. Otherwise returns false.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.EcommerceNavigationParentType">
 <summary>
 Represents a type of the parent node in the eCommerce navigation tree.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.EcommerceNavigationParentType.Groups">
 <summary>
 A set of groups.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Content.EcommerceNavigationParentType.Shop">
 <summary>
 A specified shop.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.StructureChange">
 <summary>
 This class contains function to handle with structure changes.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.StructureChange.PageService">
 <summary>
 Gets the service for working with the Page
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.StructureChange.CopyParagraph(System.Int32,System.Int32)">
 <summary>
 Copy Current paragraph.
 </summary>
 <param name="paragraphID"></param>
 <param name="toPage"></param>
 <returns>New paragraph ID.</returns>
 <remarks>Resets cach of pages.</remarks>
</member>
<member name="M:Dynamicweb.Content.StructureChange.DuplicateParagraph(System.Int32,System.Int32,System.Boolean)">
 <summary>
 Copies the paragraph as part of an OMC Experiment.
 </summary>
 <param name="paragraphID">The paragraph ID.</param>
 <param name="toPage">To page.</param>
 <param name="omcExperiment">if set to <c>true</c> [omc experiment].</param><returns></returns>
</member>
<member name="M:Dynamicweb.Content.StructureChange.MoveParagraph(System.Int32,System.Int32)">
 <summary>
 Moves current paragraph.
 </summary>
 <param name="paragraphID"></param>
 <param name="toPage"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.StructureChange.DeleteArea(System.Int32)">
 <summary>
 Deletes an area 
 </summary>
 <param name="areaId">ID of area to delete</param>
 <remarks>
 </remarks>
 <history>
 	[cpk]	12-12-2005	Created
 </history>
</member>
<member name="M:Dynamicweb.Content.StructureChange.DeletePages(System.Int32@,System.Boolean@,System.Int32)">
 <summary>
 Deletes current page.
 </summary>
 <param name="pageID"></param>
 <param name="topPage"></param>
 <param name="id"></param>
 <returns><c>Nothing</c></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.StructureChange.GetParent(System.Int32)">
 <summary>
  Gets parent ID of the input ID page.
 </summary>
 <param name="id"></param>
 <returns>Current parent ID.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.StructureChange.GetParent">
 <summary>
 Gets parent ID.
 </summary>
 <returns>Current parent ID.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.StructureChange.Copy(System.Int32,System.String@,System.Int32@,System.Boolean@,System.Boolean@,System.Int32,System.Int32,System.String,System.String)">
 <summary>
 Copies the current page.
 </summary>
 <param name="fromPageID">Page to copy</param>
 <param name="toLanguage">Area to copy to</param>
 <param name="parentPageID">Parent page to copy to</param>
 <param name="copyParagraphs"></param>
 <param name="copySubpages"></param>
 <param name="copyID"></param>
 <param name="sort"></param>
 <param name="newPageID"></param>
 <param name="copyTime"></param>
 <returns>New page ID</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.StructureChange.MovePage(System.Int32,System.Int32,System.Int32,System.String@)">
 <summary>
 Moves current page.
 </summary>
 <param name="sourcePageId">Page to be moved</param>
 <param name="destinationAreaId">Area to move to.</param>
 <param name="destinationPageId">Top page to be moved</param>
 <param name="errorMessage">Error message if impossible to move pages.</param>
</member>
<member name="M:Dynamicweb.Content.StructureChange.GetIdsFromLink(System.String)">
 <summary>
 Gets link IDs from the text.
 </summary>
 <param name="link"></param>
 <returns>String with IDs</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.PageNavigationSettings">
 <summary>
 Represents a eCommerce-related page navigation settings.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.PageNavigationSettings.UseEcomGroups">
 <summary>
 Gets or sets value indicating whether to display eCommerce groups in the navigation.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.PageNavigationSettings.ParentType">
 <summary>
 Gets or sets the type of the parent node.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.PageNavigationSettings.Groups">
 <summary>
 Gets or sets IDs of a groups that are root nodes.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.PageNavigationSettings.ShopID">
 <summary>
 Gets or sets the ID of the shop which is the root node.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.PageNavigationSettings.MaxLevels">
 <summary>
 Gets or sets the number of levels to display in the navigation tree.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.PageNavigationSettings.ProductPage">
 <summary>
 Gets or sets the link to the product page.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.PageNavigationSettings.NavigationProvider">
 <summary>
 Gets or sets the navigation provider to the product page.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.PageNavigationSettings.IncludeProducts">
 <summary>
 Gets or sets is the navigation includes products.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Content.PageNavigationSettings.Fill(System.Data.IDataReader)">
 <summary>
 Fills the object properties according to the specified data reader.
 </summary>
 <param name="reader">An instance of IDataReader to retrieve data from.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.Area">
 <summary>The class Area represents a website or a language version of a given website</summary>
</member>
<member name="P:Dynamicweb.Content.Area.Languages">
 <summary>
 Gets the languages.
 </summary>
 <value>The languages.</value>
</member>
<member name="P:Dynamicweb.Content.Area.Layout">
 <summary>
 Gets the layout.
 </summary>
 <value>The layout.</value>
</member>
<member name="P:Dynamicweb.Content.Area.ItemTypeLayouts">
 <summary>
 Gets the item layouts for area.
 </summary>
 <returns>An instance of <see cref="T:Dynamicweb.Content.Items.Metadata.XmlWebsiteItemTypeLayouts"/> with information about layouts selected for page and paragraph items.</returns>
</member>
<member name="P:Dynamicweb.Content.Area.NotFound">
 <summary>
 Gets or sets the not found.
 </summary>
 <value>The not found.</value>
</member>
<member name="P:Dynamicweb.Content.Area.CopyOf">
 <summary>
 Gets or sets the id of the area for which this is a copy of
 </summary>
 <value>a value indicating the area for which this is a copy of</value>
</member>
<member name="P:Dynamicweb.Content.Area.LayoutTemplate">
 <summary>
 Gets or sets the layout template.
 </summary>
 <value>The layout template.</value>
</member>
<member name="P:Dynamicweb.Content.Area.LayoutPhoneTemplate">
 <summary>
 Gets or sets the layout phone template.
 </summary>
 <value>The layout template.</value>
</member>
<member name="P:Dynamicweb.Content.Area.LayoutTabletTemplate">
 <summary>
 Gets or sets the layout tablet template.
 </summary>
 <value>The layout template.</value>
</member>
<member name="P:Dynamicweb.Content.Area.StyleId">
 <summary>
 Gets or sets the style ID.
 </summary>
 <value>The style ID.</value>
</member>
<member name="P:Dynamicweb.Content.Area.PageCount">
 <summary>
 Gets or sets the number of pages that makes up this website
 </summary>
 <value>The page count.</value>
</member>
<member name="P:Dynamicweb.Content.Area.Name">
 <summary>
 Gets or sets the name of the website
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Content.Area.DisplayName">
 <summary>
 Gets the display name based on setting in management center.
 </summary>
 <value>The display name</value>
</member>
<member name="P:Dynamicweb.Content.Area.UseAreaNamesAsDisplayName">
 <summary>
 Gets a value indicating if area names should be part of the display name
 </summary>
 <returns>True if the area name should be used in the display name, otherwise false</returns>
</member>
<member name="P:Dynamicweb.Content.Area.Domain">
 <summary>
 Gets or sets the domain.
 </summary>
 <value>The domain.</value>
</member>
<member name="P:Dynamicweb.Content.Area.Encoding">
 <summary>
 Gets or sets the encoding.
 </summary>
 <value>The encoding.</value>
</member>
<member name="P:Dynamicweb.Content.Area.UserPermissions">
 <summary>
 Gets the user permissions.
 </summary>
 <value>The user permissions.</value>
</member>
<member name="P:Dynamicweb.Content.Area.Permission">
 <summary>
 Gets or sets the permission.
 </summary>
 <value>The permission.</value>
</member>
<member name="P:Dynamicweb.Content.Area.PermissionTemplate">
 <summary>
 Gets or sets the permission template.
 </summary>
 <value>The permission template.</value>
</member>
<member name="P:Dynamicweb.Content.Area.Title">
 <summary>
 Gets or sets the title.
 </summary>
 <value>The title.</value>
</member>
<member name="P:Dynamicweb.Content.Area.Keywords">
 <summary>
 Gets or sets the keywords.
 </summary>
 <value>The keywords.</value>
</member>
<member name="P:Dynamicweb.Content.Area.Description">
 <summary>
 Gets or sets the description.
 </summary>
 <value>The description.</value>
</member>
<member name="P:Dynamicweb.Content.Area.Frontpage">
 <summary>
 Gets or sets the frontpage.
 </summary>
 <value>The frontpage.</value>
</member>
<member name="P:Dynamicweb.Content.Area.Dateformat">
 <summary>
 Gets or sets the dateformat.
 </summary>
 <value>The dateformat.</value>
</member>
<member name="P:Dynamicweb.Content.Area.Codepage">
 <summary>
 Gets or sets the codepage.
 </summary>
 <value>The codepage.</value>
</member>
<member name="P:Dynamicweb.Content.Area.MasterTemplate">
 <summary>
 Gets or sets the master template.
 </summary>
 <value>The master template.</value>
</member>
<member name="P:Dynamicweb.Content.Area.HtmlType">
 <summary>
 Gets or sets the type of the HTML.
 </summary>
 <value>The type of the HTML.</value>
</member>
<member name="P:Dynamicweb.Content.Area.CultureInfo">
 <summary>
 Gets the culture info.
 </summary>
 <value>The culture info.</value>
</member>
<member name="P:Dynamicweb.Content.Area.Culture">
 <summary>
 Gets or sets the culture.
 </summary>
 <value>The culture.</value>
</member>
<member name="P:Dynamicweb.Content.Area.ApprovalType">
 <summary>
 Gets or sets the type of the approval.
 </summary>
 <value>The type of the approval.</value>
</member>
<member name="P:Dynamicweb.Content.Area.EcomLanguageId">
 <summary>
 Gets or sets the ecom language ID.
 </summary>
 <value>The ecom language ID.</value>
</member>
<member name="P:Dynamicweb.Content.Area.EcomCurrencyId">
 <summary>
 Gets or sets the ecom currency ID.
 </summary>
 <value>The ecom currency ID.</value>
</member>
<member name="P:Dynamicweb.Content.Area.EcomCountryCode">
 <summary>
 Gets or sets the ecom country code.
 </summary>
 <value>The ecom currency code.</value>
</member>
<member name="P:Dynamicweb.Content.Area.EcomShopId">
 <summary>
 Gets or sets the ecom shop ID.
 </summary>
 <value>The ecom shop ID.</value>
</member>
<member name="P:Dynamicweb.Content.Area.EcomPricesWithVat">
 <summary>
 Gets or sets a string ("True" or "False") indicating whether this website displays prices with VAT or not.
 If string is null or empty, default settings are used.
 </summary>
 <value>
 The value indicating whether prices are displayed with VAT or not.
 </value>
</member>
<member name="P:Dynamicweb.Content.Area.Active">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Content.Area" /> is active.
 </summary>
 <value><c>true</c> if active; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Area.Sort">
 <summary>
 Gets or sets the sort.
 </summary>
 <value>The sort.</value>
</member>
<member name="P:Dynamicweb.Content.Area.MasterAreaId">
 <summary>
 Gets or sets the master area ID.
 </summary>
 <value>The master area ID.</value>
</member>
<member name="P:Dynamicweb.Content.Area.DomainLock">
 <summary>
 Gets or sets the domain lock.
 </summary>
 <value>The domain lock.</value>
</member>
<member name="P:Dynamicweb.Content.Area.RobotsTxt">
 <summary>
 Gets or sets the robots TXT.
 </summary>
 <value>The robots TXT.</value>
</member>
<member name="P:Dynamicweb.Content.Area.RobotsTxtIncludeSitemap">
 <summary>
 Gets or sets a value indicating whether [robots TXT included in sitemap].
 </summary>
 <value>
 <c>true</c> if [robots TXT include sitemap]; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Content.Area.IncludeProductsInSitemap">
 <summary>
 Gets or sets a value indicating whether [products included in sitemap].
 </summary>
 <value>
 <c>true</c> if [products include sitemap]; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Content.Area.UserManagementPermissions">
 <summary>
 Gets or sets the user management permissions.
 </summary>
 <value>The user management permissions.</value>
</member>
<member name="P:Dynamicweb.Content.Area.UrlName">
 <summary>
 Gets or sets the name in the URL.
 </summary>
 <value>The name in the URL.</value>
</member>
<member name="P:Dynamicweb.Content.Area.UrlIgnoreForChildren">
 <summary>
 Gets or sets a value indicating whether the name or ISO code in URL should be ignored for children (Pages).
 </summary>
 <value>
 <c>true</c> if name should be ignored; otherwise, <c>false</c>.
 </value>
 <remarks>Only have an impact if URLs is of type path, and the name or ISO code is included in the URLs.</remarks>
</member>
<member name="P:Dynamicweb.Content.Area.RedirectFirstPage">
 <summary>
 Gets or sets a value indicating whether the first page should be redirected to '/'.
 </summary>
 <value><c>true</c> if redirect first page; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Area.LockPagesToDomain">
 <summary>
 Gets or sets value indicating whether to lock pages of this area to the given domains.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Area.IsMaster">
 <summary>
 Gets a value indicating whether this instance is master.
 </summary>
 <value><c>true</c> if this instance is master; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Area.IsLanguage">
 <summary>
 Gets a value indicating whether this instance is language.
 </summary>
 <value>
 <c>true</c> if this instance is language; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Content.Area.LanguageDepth">
 <summary>
 Gets the language depth.
 </summary>
 <value>The language depth.</value>
</member>
<member name="P:Dynamicweb.Content.Area.Flag16X16">
 <summary>
 Gets the flag16x16.
 </summary>
 <value>The flag16x16.</value>
</member>
<member name="P:Dynamicweb.Content.Area.Flag32X32">
 <summary>
 Gets the flag32x32.
 </summary>
 <value>The flag32x32.</value>
</member>
<member name="P:Dynamicweb.Content.Area.ItemType">
 <summary>
 Gets or sets the type of the associated item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Area.ItemId">
 <summary>
 Gets or sets the Id of the associated content item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Area.Item">
 <summary>
 Gets the associated item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Area.ItemTypePageProperty">
 <summary>
 Gets or sets the type of the associated item for page property.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Area.CookieWarningTemplate">
 <summary>
 Gets or sets the Cookie Warning Template.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Area.CookieCustomNotifications">
 <summary>
 Gets or sets the whether the custom Cookie Notifications used.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Area.SslMode">
 <summary>
 Gets or sets a value indicating SSLMode
 </summary>
 <value><c>1</c> Standard, <c>2</c> Force SSL, <c>3</c> Un-force SSL</value>
</member>
<member name="M:Dynamicweb.Content.Area.#ctor">
 <summary>
 Initializes a new instance of the Area class
 </summary>
</member>
<member name="M:Dynamicweb.Content.Area.#ctor(Dynamicweb.Core.AuditedEntity,System.Int32)">
 <summary>
 Initializes a new instance from persistence with the given arguments
 </summary>
 <param name="audit">An AuditEntry instance having information about the audit history of this area instance</param>
 <param name="id">The id of Area</param>
</member>
<member name="M:Dynamicweb.Content.Area.DeletePagePropertyItems">
 <summary>
 Deletes all property items on all pages having a association with a property item on this area
 </summary>
</member>
<member name="M:Dynamicweb.Content.Area.SynchronizeLanguageNames">
 <summary>
 Renames the languages to the same name as the master area and adds the language culture to the name.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Area.GetPermissions">
 <summary>
 Gets the permissions.
 </summary>
 <returns>The permissions.</returns>
</member>
<member name="M:Dynamicweb.Content.Area.SetSort(System.Int32)">
 <summary>
 Sets the sort value for the area and its language versions.
 </summary>
 <param name="sortValue">The new sort value.</param>
</member>
<member name="M:Dynamicweb.Content.Area.MarkAsModified">
 <summary>
 Marks the Area instance as modified
 </summary>
</member>
<member name="M:Dynamicweb.Content.Area.Copy">
 <summary>
 Creates a copy of this area and returns it as a transient instance (Not persisted)
 </summary>
 <returns>A new Area instance with state copied from this Area instance</returns>
</member>
<member name="M:Dynamicweb.Content.Area.FormatLanguageName(System.String,System.String)">
 <summary>
 Formats the name of the language.
 </summary>
 <param name="masterAreaName">Name of the master area.</param>
 <param name="languageVersionCulture">The language version culture.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Content.Area.UserHasAccess(Dynamicweb.Security.UserManagement.User)">
 <summary>
 Returns a value indicating if the specified user has permissions to access this page instance
 </summary>
 <param name="user">The user for which to determine access</param>
 <returns>True if the user has access otherwise false</returns>
</member>
<member name="T:Dynamicweb.Content.Page">
 <summary>
 The Page class models the concept of a webpage
 </summary>
</member>
<member name="M:Dynamicweb.Content.Page.#ctor">
 <summary>
 Private constructor for the sake of supporting xml serialization. :(
 </summary>
</member>
<member name="M:Dynamicweb.Content.Page.#ctor(System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Content.Page" /> class with the specified area id indicating to which website this is a part of
 </summary>
 <param name="areaId">The id of the area (website) to which this page belongs</param>
</member>
<member name="M:Dynamicweb.Content.Page.#ctor(System.Int32,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Content.Page" /> class with the provided arguments
 </summary>
 <param name="areaId">The id of the area (website) to which this page belongs</param>
 <param name="parentPageID">The id of the page that is the parent page of this new instance</param>
</member>
<member name="M:Dynamicweb.Content.Page.#ctor(Dynamicweb.Core.AuditedEntity,System.Int32,System.Int32,System.Int32)">
 <summary>
 Initializes a new instance from persistence with the given arguments
 </summary>
 <param name="audit">An AuditEntry instance having information about the audit history of this Page instance</param>
 <param name="areaId">The id of Area to which this page belongs</param>
 <param name="parentPageId">The id of the page that is the parent page for this page</param>
 <param name="pageId">The id of this page</param>
</member>
<member name="P:Dynamicweb.Content.Page.HasExperiment">
 <summary>
 Gets or sets a value indicating whether this page has aexperiment associated with it.
 </summary>
 <value>
 <c>true</c> if this instance has an experiment; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Content.Page.IsFolder">
 <summary>
 Gets or sets a value indicating whether this page is a folder.
 </summary>
 <value>
 <c>true</c> if this instance is folder; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Content.Page.CopyOf">
 <summary>
 Gets or sets the id of the page for which this is a copy of
 </summary>
 <value>a value indicating the id of the page for which this is a copy</value>
</member>
<member name="P:Dynamicweb.Content.Page.UrlIgnoreForChildren">
 <summary>
 Gets or sets wether the name of this page should be part of the URL for subpages when using the 'path' URL schema.
 </summary>
 <value>Boolean indicating if the name should be ignored.</value>
</member>
<member name="P:Dynamicweb.Content.Page.UrlUseAsWritten">
 <summary>
 Gets or sets wether the <see cref="P:Dynamicweb.Content.Page.UrlName">UrlName</see> of this page should be used as the URL exactly as typed when using the 'path' URL schema.
 </summary>
 <value>Boolean indicating if the <see cref="P:Dynamicweb.Content.Page.UrlName">UrlName</see> should be used exactly as typed for the URL.</value>
</member>
<member name="P:Dynamicweb.Content.Page.UrlName">
 <summary>
 Gets or sets the name in the URL.
 </summary>
 <value>The name in the URL.</value>
</member>
<member name="P:Dynamicweb.Content.Page.ExactUrl">
 <summary>
 Gets or sets the  exact URL for page.
 </summary>
 <value>The page exact URL.</value>
</member>
<member name="P:Dynamicweb.Content.Page.NavigationTag">
 <summary>
 Gets or sets the navigation tag used for referencing navigation by tag instead of ID.
 </summary>
 <value>The navigation tag.</value>
</member>
<member name="P:Dynamicweb.Content.Page.Layout">
 <summary>
 Gets the layout.
 </summary>
 <value>The layout.</value>
</member>
<member name="P:Dynamicweb.Content.Page.HideForPhones">
 <summary>
 Gets or sets a value indicating whether this page should be hidden for phones in navigation.
 </summary>
 <value><c>true</c> if hide for phones; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Page.HideForTablets">
 <summary>
 Gets or sets a value indicating whether this page should be hidden for tablets in navigation.
 </summary>
 <value><c>true</c> if hide for tablets; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Page.HideForDesktops">
 <summary>
 Gets or sets a value indicating whether this page should be hidden for desktops in navigation - that is devices not detected as phone or tablet.
 </summary>
 <value><c>true</c> if hide for desktops; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Page.LayoutApplyToSubPages">
 <summary>
 Gets or sets a value indicating whether layout template applies to sub pages.
 </summary>
 <value>
 <c>true</c> if layout applies to sub pages; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Content.Page.LayoutTemplate">
 <summary>
 Gets or sets the layout template.
 </summary>
 <value>The layout template.</value>
</member>
<member name="P:Dynamicweb.Content.Page.LayoutPhoneTemplate">
 <summary>
 Gets or sets the layout phone template.
 </summary>
 <value>The layout template.</value>
</member>
<member name="P:Dynamicweb.Content.Page.LayoutTabletTemplate">
 <summary>
 Gets or sets the layout tablet template.
 </summary>
 <value>The layout template.</value>
</member>
<member name="P:Dynamicweb.Content.Page.ParentLayoutTemplate">
 <summary>
 Gets the parent layout template if the parent template is applied to sub pages.
 </summary>
 <value>The parent layout template.</value>
</member>
<member name="P:Dynamicweb.Content.Page.UsesLayout">
 <summary>
 Gets a value indicating whether page uses layout.
 </summary>
 <value><c>true</c> if page uses layout; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Page.IsSeoOptimized">
 <summary>
 Gets a value indicating whether this instance is seo optimized.
 </summary>
 <value>
 <c>true</c> if this instance is seo optimized; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Content.Page.TemplateDescription">
 <summary>
 Gets or sets the template description.
 </summary>
 <value>The template description.</value>
</member>
<member name="P:Dynamicweb.Content.Page.IsTemplate">
 <summary>
 Gets or sets a value indicating whether this instance is template.
 </summary>
 <value>
 <c>true</c> if this instance is template; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Content.Page.IsTemplateFolder">
 <summary>
 Gets a value indicating whether this instance is template folder.
 </summary>
 <value>
 <c>true</c> if this instance is template folder; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Content.Page.ParentPageId">
 <summary>
 Gets or sets the parent page ID.
 </summary>
 <value>The parent page ID.</value>
</member>
<member name="P:Dynamicweb.Content.Page.Parent">
 <summary>
 Gets or sets the parent.
 </summary>
 <value>The parent.</value>
</member>
<member name="P:Dynamicweb.Content.Page.MasterPage">
 <summary>
 Gets the master page when the page is a lanugage.
 </summary>
 <value>The master page.</value>
</member>
<member name="P:Dynamicweb.Content.Page.AreaId">
 <summary>
 Gets or sets the area ID.
 </summary>
 <value>The area ID.</value>
</member>
<member name="P:Dynamicweb.Content.Page.Area">
 <summary>
 Gets the area.
 </summary>
 <value>The area.</value>
</member>
<member name="P:Dynamicweb.Content.Page.Sort">
 <summary>
 Gets or sets the sort.
 </summary>
 <value>The sort.</value>
</member>
<member name="P:Dynamicweb.Content.Page.MenuText">
 <summary>
 Gets or sets the menu text. This is the name of the page and is used in the navigation.
 </summary>
 <value>The menu text.</value>
</member>
<member name="P:Dynamicweb.Content.Page.Active">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Content.Page" /> is active.
 </summary>
 <value><c>true</c> if active; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Page.MouseOver">
 <summary>
 Gets or sets the mouse over.
 </summary>
 <value>The mouse over.</value>
</member>
<member name="P:Dynamicweb.Content.Page.ImageMouseOver">
 <summary>
 Gets or sets the image mouse over.
 </summary>
 <value>The image mouse over.</value>
</member>
<member name="P:Dynamicweb.Content.Page.ImageMouseOut">
 <summary>
 Gets or sets the image mouse out.
 </summary>
 <value>The image mouse out.</value>
</member>
<member name="P:Dynamicweb.Content.Page.ImageActivePage">
 <summary>
 Gets or sets the image active page.
 </summary>
 <value>The image active page.</value>
</member>
<member name="P:Dynamicweb.Content.Page.TopImage">
 <summary>
 Gets or sets the top image.
 </summary>
 <value>The top image.</value>
</member>
<member name="P:Dynamicweb.Content.Page.TextAndImage">
 <summary>
 Gets or sets a value indicating whether [text and image].
 </summary>
 <value><c>true</c> if [text and image]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Page.Protect">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Content.Page" /> is protected with a password.
 </summary>
 <value><c>true</c> if protect; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Page.Password">
 <summary>
 Gets or sets the password.
 </summary>
 <value>The password.</value>
</member>
<member name="P:Dynamicweb.Content.Page.ShowTopImage">
 <summary>
 Gets or sets a value indicating whether [show top image].
 </summary>
 <value><c>true</c> if [show top image]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Page.Stylesheet">
 <summary>
 Gets or sets the stylesheet.
 </summary>
 <value>The stylesheet.</value>
</member>
<member name="P:Dynamicweb.Content.Page.BackgroundImage">
 <summary>
 Gets or sets the background image.
 </summary>
 <value>The background image.</value>
</member>
<member name="P:Dynamicweb.Content.Page.TopLogoImage">
 <summary>
 Gets or sets the top logo image.
 </summary>
 <value>The top logo image.</value>
</member>
<member name="P:Dynamicweb.Content.Page.ActiveFrom">
 <summary>
 Gets or sets the active from.
 </summary>
 <value>The active from.</value>
</member>
<member name="P:Dynamicweb.Content.Page.ActiveTo">
 <summary>
 Gets or sets the active to.
 </summary>
 <value>The active to.</value>
</member>
<member name="P:Dynamicweb.Content.Page.ShortCut">
 <summary>
 Gets or sets the short cut.
 </summary>
 <value>The short cut.</value>
</member>
<member name="P:Dynamicweb.Content.Page.ShortCutRedirect">
 <summary>
 Gets or sets a value indicating whether [short cut redirect].
 </summary>
 <value><c>true</c> if [short cut redirect]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Page.Permissions">
 <summary>
 Gets the permissions.
 </summary>
 <value>The permissions.</value>
</member>
<member name="P:Dynamicweb.Content.Page.Permission">
 <summary>
 Gets or sets the permission.
 </summary>
 <value>The permission.</value>
</member>
<member name="P:Dynamicweb.Content.Page.Published">
 <summary>
 Determines whether the page is published taking active period into consideration.
 </summary>
 <returns>
 <c>true</c> if the page is published and current time is within the active period; otherwise, <c>false</c>.
 </returns>
</member>
<member name="P:Dynamicweb.Content.Page.PermissionType">
 <summary>
 Gets or sets the type of the permission.
 </summary>
 <value>The type of the permission.</value>
</member>
<member name="P:Dynamicweb.Content.Page.PermissionTemplate">
 <summary>
 Gets or sets the permission template.
 </summary>
 <value>The permission template.</value>
</member>
<member name="P:Dynamicweb.Content.Page.Allowsearch">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Content.Page" /> is searchable.
 </summary>
 <value><c>true</c> if searchable; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Page.ShowInSitemap">
 <summary>
 Gets or sets a value indicating whether page is showed in sitemap.
 </summary>
 <value><c>true</c> if shown in sitemap; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Page.Allowclick">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Content.Page" /> is clickable in navigations.
 </summary>
 <value><c>true</c> if allowed; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Page.MenuLogoImage">
 <summary>
 Gets or sets the menu logo image.
 </summary>
 <value>The menu logo image.</value>
</member>
<member name="P:Dynamicweb.Content.Page.FooterImage">
 <summary>
 Gets or sets the footer image.
 </summary>
 <value>The footer image.</value>
</member>
<member name="P:Dynamicweb.Content.Page.Description">
 <summary>
 Gets or sets the description.
 </summary>
 <value>The description.</value>
</member>
<member name="P:Dynamicweb.Content.Page.Keywords">
 <summary>
 Gets or sets the keywords.
 </summary>
 <value>The keywords.</value>
</member>
<member name="P:Dynamicweb.Content.Page.MetaTitle">
 <summary>
 Gets or sets the meta title.
 </summary>
 <value>The meta title.</value>
</member>
<member name="P:Dynamicweb.Content.Page.MetaCanonical">
 <summary>
 Gets or sets the page canonical url.
 </summary>
 <value>The canonical url.</value>
</member>
<member name="P:Dynamicweb.Content.Page.Title">
 <summary>
 Gets the title.
 </summary>
 <value>The title.</value>
</member>
<member name="P:Dynamicweb.Content.Page.ShowUpdateDate">
 <summary>
 Gets or sets a value indicating whether to show the page update date.
 </summary>
 <value><c>true</c> if showing the update date; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Page.Manager">
 <summary>
 Gets or sets the manager.
 </summary>
 <value>The manager.</value>
</member>
<member name="P:Dynamicweb.Content.Page.ManageFrequence">
 <summary>
 Gets or sets the manage frequence.
 </summary>
 <value>The manage frequence.</value>
</member>
<member name="P:Dynamicweb.Content.Page.ShowInLegend">
 <summary>
 Gets or sets a value indicating whether to show in legend.
 </summary>
 <value><c>true</c> if shown in legend; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Page.ShowFavorites">
 <summary>
 Gets or sets a value indicating whether to show in favorites.
 </summary>
 <value><c>true</c> if shown in favorites; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Page.CacheMode">
 <summary>
 Gets or sets the cache mode.
 </summary>
 <value>The cache mode.</value>
</member>
<member name="P:Dynamicweb.Content.Page.CacheFrequence">
 <summary>
 Gets or sets the cache frequence.
 </summary>
 <value>The cache frequence.</value>
</member>
<member name="P:Dynamicweb.Content.Page.ApprovalType">
 <summary>
 Gets or sets the type of the approval.
 </summary>
 <value>The type of the approval.</value>
 <remarks>-2 = Draft, -1 = versions, 0 = normal, >0 = Some workflow </remarks>
</member>
<member name="P:Dynamicweb.Content.Page.ApprovalState">
 <summary>
 Gets or sets the state of the approval.
 </summary>
 <value>The state of the approval.</value>
</member>
<member name="P:Dynamicweb.Content.Page.ApprovalStep">
 <summary>
 Gets or sets the approval step.
 </summary>
 <value>The approval step.</value>
</member>
<member name="P:Dynamicweb.Content.Page.TopLogoImageAlt">
 <summary>
 Gets or sets the top logo image alt.
 </summary>
 <value>The top logo image alt.</value>
</member>
<member name="P:Dynamicweb.Content.Page.MasterPageId">
 <summary>
 Gets or sets the master page ID.
 </summary>
 <value>The master page ID.</value>
</member>
<member name="P:Dynamicweb.Content.Page.MasterType">
 <summary>
 Gets or sets the type of the master.
 </summary>
 <value>The type of the master. Only has an affect on master paragraphs</value>
</member>
<member name="P:Dynamicweb.Content.Page.IsMaster">
 <summary>
 Gets a value indicating whether this instance is master.
 </summary>
 <value><c>true</c> if this instance is master; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Page.IsLanguage">
 <summary>
 Gets a value indicating whether this instance is language.
 </summary>
 <value>
 <c>true</c> if this instance is language; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Content.Page.Languages">
 <summary>
 Gets the language versions of the page.
 </summary>
 <value>The languages. Returns <code>null</code> (Nothing in Visual Basic) if the page is not a master.</value>
</member>
<member name="P:Dynamicweb.Content.Page.LanguageTreeIds">
 <summary>
 Gets all the IDs of this page and inherited language pages from the tree structure.
 </summary>
 <value>The language tree ids.</value>
</member>
<member name="P:Dynamicweb.Content.Page.MasterPageEditTime">
 <summary>
 Gets the master page edit time.
 </summary>
 <value>The master page edit time.</value>
</member>
<member name="P:Dynamicweb.Content.Page.SslMode">
 <summary>
 Gets or sets a value indicating SSLMode
 </summary>
 <value><c>1</c> Standard, <c>2</c> Force SSL, <c>3</c> Un-force SSL</value>
</member>
<member name="P:Dynamicweb.Content.Page.Hidden">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Content.Page" /> is hidden.
 </summary>
 <value><c>true</c> if hidden; otherwise, <c>false</c>.</value>
</member>
<member name="M:Dynamicweb.Content.Page.SetHidden">
 <summary>
 Sets the hidden state.
 </summary>
</member>
<member name="P:Dynamicweb.Content.Page.UserManagementPermissions">
 <summary>
 Gets or sets the user management permissions.
 </summary>
 <value>The user management permissions.</value>
</member>
<member name="P:Dynamicweb.Content.Page.NavigationSettings">
 <summary>
 Gets or sets the navigation settings.
 </summary>
 <value>The navigation settings.</value>
</member>
<member name="P:Dynamicweb.Content.Page.Noindex">
 <summary>
 If set, will add noindex meta tag to the page: &lt;META NAME=&quot;ROBOTS&quot; CONTENT=&quot;NOINDEX&quot;&gt;
 </summary>
 <returns>boolean flag</returns>
</member>
<member name="P:Dynamicweb.Content.Page.Nofollow">
 <summary>
 If set, will nofollow meta tag to the page: &lt;META NAME=&quot;ROBOTS&quot; CONTENT=&quot;NOINDEX, NOFOLLOW&quot;&gt;
 </summary>
 <returns>boolean flag</returns>
</member>
<member name="P:Dynamicweb.Content.Page.Robots404">
 <summary>
 If set, will return 404 error when known robot tries to request this page
 </summary>
 <returns>boolean flag</returns>
</member>
<member name="P:Dynamicweb.Content.Page.ItemType">
 <summary>
 Gets or sets the item type associated with the given page.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Page.ItemId">
 <summary>
 Gets or sets the id of the associated item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Page.Item">
 <summary>
 Gets the associated item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Page.PropertyItemId">
 <summary>
 Gets or sets the id of the associated property item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Page.PropertyItem">
 <summary>
 Gets the associated property item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Page.ContentType">
 <summary>
 Gets or sets the content type.
 </summary>
 <value></value>
</member>
<member name="P:Dynamicweb.Content.Page.CreationRules">
 <summary>
 Gets or sets collection of creation rules metadata collection.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Page.DisplayMode">
 <summary>
 Gets or sets the page display mode. 
 </summary>
 <value></value>
</member>
<member name="M:Dynamicweb.Content.Page.Copy">
 <summary>
 Creates a copy of this page and returns it as a transient instance (Not persisted)
 </summary>
 <returns>A new Page instance with state copied from this Page instance</returns>
</member>
<member name="M:Dynamicweb.Content.Page.Synchronize(Dynamicweb.Content.Page)">
 <summary>
 Ensures that the state (Properties) of this instance has the same values as the properties in the Page parameter
 </summary>
 <param name="page">The Page for which this Page instance should be synced</param>
</member>
<member name="M:Dynamicweb.Content.Page.EnsurePageInheritChanges(Dynamicweb.Content.Page,Dynamicweb.Content.Page)">
 <summary>
 Ensures that any property values are inherited from a master Page to language versions of that page, but only if they were the same as before any changes to the master page
 </summary>
 <param name="originalPage">The original Master Page for which this is a language version</param>
 <param name="page">The newly updated Master Page</param>
</member>
<member name="M:Dynamicweb.Content.Page.GetLanguageVersion(System.Int32)">
 <summary>
 Gets the language version of this page as specified with the areaId parameter
 </summary>
 <param name="areaId">The language version to get</param>
 <returns>A page language version as specified in the areaId</returns>
</member>
<member name="M:Dynamicweb.Content.Page.GetPath">
 <summary>
 Gets the path from the root page to this page as a list of pages.
 </summary>
 <returns>A list of pages in the path from the root page to this page instance.</returns>
</member>
<member name="M:Dynamicweb.Content.Page.GetPageHrefValue">
 <summary>
 Gets the page href value for links based on shortcut settings.
 </summary>
 <returns>For normal pages, returns Default.aspx?ID={Page.ID}.</returns>
 <remarks>If the page has a shortcut that will be returned if it is marked as redirect or the shortcut is an external link, mail etc.</remarks>
</member>
<member name="M:Dynamicweb.Content.Page.GetBreadcrumbPath">
 <summary>
 Gets the path from the root to this page expressed as /menuText1/menuTextN/MenuTextN+1
 </summary>
 <returns>A string representing the path to this page instance</returns>
</member>
<member name="M:Dynamicweb.Content.Page.HandleMasterLinks">
 <summary>
 Handles the links in the master when copied to language versions.
 </summary>
</member>
<member name="T:Dynamicweb.Content.PageCollection">
 <summary>
 A collection of <see cref="T:Dynamicweb.Content.Page" />
 </summary>
</member>
<member name="M:Dynamicweb.Content.PageCollection.Sort(Dynamicweb.Content.PageCollection.SortBy)">
 <summary>
 Sorts the collection with the specified sort type.
 </summary>
 <param name="sortType">Type of the sort.</param>
</member>
<member name="M:Dynamicweb.Content.PageCollection.RemovePageWithID(System.Int32)">
 <summary>
 Removes the page with ID.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Content.PageCollection.RemoveDuplicates">
 <summary>
 Removes dublicate pages in the collection - based on PageID
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Content.PageCollection.SortBy">
 <summary>
 Defines how page collections should be sorted
 </summary>
</member>
<member name="F:Dynamicweb.Content.PageCollection.SortBy.DefaultPageSort">
 <summary>
 Sort by sort
 </summary>
</member>
<member name="F:Dynamicweb.Content.PageCollection.SortBy.MasterLastUpdated">
 <summary>
 Sort by last master updated date
 </summary>
</member>
<member name="T:Dynamicweb.Content.Paragraph">
 <summary>
 The Paragraph class models the concept of Paragraphs on a given Page (WebPage)
 </summary>
</member>
<member name="M:Dynamicweb.Content.Paragraph.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Content.Paragraph" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Content.Paragraph.#ctor(System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Content.Paragraph"/> class with a relation to a page with the specified id
 </summary>
 <param name="pageId">The id of the page to which the Paragraph will be associated</param>
</member>
<member name="M:Dynamicweb.Content.Paragraph.#ctor(Dynamicweb.Core.AuditedEntity,System.Int32)">
 <summary>
 Initializes a new instance from persistence with the given arguments
 </summary>
 <param name="audit">An AuditEntry instance having information about the audit history of this Paragraph instance</param>
 <param name="paragraphId">The id of this Paragraph</param>
</member>
<member name="P:Dynamicweb.Content.Paragraph.Permissions">
 <summary>
 Gets or sets the permissions for this Paragraph
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Paragraph.IsMoving">
 <summary>
 Gets or sets a value indicating if this Paragraph is currently in the process of being moved between Pages
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Paragraph.Container">
 <summary>
 Gets or sets the container.
 </summary>
 <value>The container.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.GlobalRecordPageID">
 <summary>
 Gets or sets the global record page ID.
 </summary>
 <value>The global record page ID.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.GlobalRecordParagraphID">
 <summary>
 Gets or sets the global record paragraph ID.
 </summary>
 <value>The global record paragraph ID.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.GlobalRecordSort">
 <summary>
 Gets or sets the global record sort.
 </summary>
 <value>The global record sort.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.GlobalRecordGlobalID">
 <summary>
 Gets or sets the global record global ID.
 </summary>
 <value>The global record global ID.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ModuleProperties">
 <summary>
 Gets or sets the module properties.
 </summary>
 <value>The module properties.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.CopyOf">
 <summary>
 Gets or sets the id of the Paragraph for which this is a copy of
 </summary>
 <value>a value indicating the id of the Paragraph for which this is a copy of</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.PageID">
 <summary>
 Gets or sets the id of the page to which this Paragraph belongs
 </summary>
 <value>The page ID.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.Page">
 <summary>
 Gets the Page to which this Paragraph belongs
 </summary>
 <value>The page.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ModuleSystemName">
 <summary>
 Gets or sets the name of the module system.
 </summary>
 <value>The name of the module system.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.Index">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Content.Paragraph" /> is index.
 </summary>
 <value><c>true</c> if index; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.Sort">
 <summary>
 Gets or sets the sort.
 </summary>
 <value>The sort.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.Header">
 <summary>
 Gets or sets the header.
 </summary>
 <value>The header.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ShowHeader">
 <summary>
 Gets or sets a value indicating whether [show header].
 </summary>
 <value><c>true</c> if [show header]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ShowParagraph">
 <summary>
 Gets or sets a value indicating whether [show paragraph].
 </summary>
 <value><c>true</c> if [show paragraph]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.Text">
 <summary>
 Gets or sets the text.
 </summary>
 <value>The text.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.Image">
 <summary>
 Gets or sets the image.
 </summary>
 <value>The image.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ImageUrl">
 <summary>
 Gets or sets the image URL.
 </summary>
 <value>The image URL.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ImageTarget">
 <summary>
 Gets or sets the image target.
 </summary>
 <value>The image target.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ImageNewWindow">
 <summary>
 Gets or sets a value indicating whether [image new window].
 </summary>
 <value><c>true</c> if [image new window]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ImageMouseOver">
 <summary>
 Gets or sets the image mouse over.
 </summary>
 <value>The image mouse over.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ImageCaption">
 <summary>
 Gets or sets the image caption.
 </summary>
 <value>The image caption.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ImageResize">
 <summary>
 Gets or sets a value indicating whether [image resize].
 </summary>
 <value><c>true</c> if [image resize]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ImageVAlign">
 <summary>
 Gets or sets the image V align.
 </summary>
 <value>The image V align.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ImageVSpace">
 <summary>
 Gets or sets the image V space.
 </summary>
 <value>The image V space.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ImageHAlign">
 <summary>
 Gets or sets the image H align.
 </summary>
 <value>The image H align.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ImageHSpace">
 <summary>
 Gets or sets the image H space.
 </summary>
 <value>The image H space.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.TemplateID">
 <summary>
 Gets or sets the template ID.
 </summary>
 <value>The template ID.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.Template">
 <summary>
 Gets or sets the template.
 </summary>
 <value>The template.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ValidFrom">
 <summary>
 Gets or sets the valid from.
 </summary>
 <value>The valid from.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ValidTo">
 <summary>
 Gets or sets the valid to.
 </summary>
 <value>The valid to.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.BottomSpace">
 <summary>
 Gets or sets the bottom space.
 </summary>
 <value>The bottom space.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ModuleSettings">
 <summary>
 Gets or sets the module settings.
 </summary>
 <value>The module settings.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ImageLinkTarget">
 <summary>
 Gets or sets the image link target.
 </summary>
 <value>The image link target.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.HideForPhones">
 <summary>
 Gets or sets a value indicating whether this page should be hidden for phones.
 </summary>
 <value><c>true</c> if hide for phones; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.HideForTablets">
 <summary>
 Gets or sets a value indicating whether this page should be hidden for tablets.
 </summary>
 <value><c>true</c> if hide for tablets; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.HideForDesktops">
 <summary>
 Gets or sets a value indicating whether this page should be hidden for desktops - that is devices not detected as phone or tablet.
 </summary>
 <value><c>true</c> if hide for desktops; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ApprovalState">
 <summary>
 Gets or sets the state of the approval.
 </summary>
 <value>The state of the approval.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.VersionTimeStamp">
 <summary>
 Gets or sets the version time stamp.
 </summary>
 <value>The version time stamp.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.GlobalID">
 <summary>
 Gets or sets the global ID.
 </summary>
 <value>The global ID.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.HasGlobal">
 <summary>
 Gets a value indicating whether this instance has global.
 </summary>
 <value>
 <c>true</c> if this instance has global; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.IsGlobal">
 <summary>
 Gets a value indicating whether this instance is global.
 </summary>
 <value><c>true</c> if this instance is global; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.MasterParagraphID">
 <summary>
 Gets or sets the master paragraph ID.
 </summary>
 <value>The master paragraph ID.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.Preview">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Content.Paragraph" /> is preview.
 </summary>
 <value><c>true</c> if preview; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ModuleCss">
 <summary>
 Gets or sets the module CSS.
 </summary>
 <value>The module CSS.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ModuleJS">
 <summary>
 Gets or sets the module JS.
 </summary>
 <value>The module JS.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.UserManagementPermissions">
 <summary>
 Gets or sets the user management permissions.
 </summary>
 <value>The user management permissions.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.IsMaster">
 <summary>
 Gets a value indicating whether this instance is master.
 </summary>
 <value><c>true</c> if this instance is master; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.Languages">
 <summary>
 Gets the language versions of the paragraph.
 </summary>
 <value>The languages. Returns <code>null</code> (Nothing in Visual Basic) if the paragraph is not a master.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ItemType">
 <summary>
 Gets or sets the type of the associated item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ItemId">
 <summary>
 Gets or sets the Id of the associated content item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Paragraph.Item">
 <summary>
 Gets the item of the current paragraph
 </summary>
 <returns>Item</returns>
</member>
<member name="P:Dynamicweb.Content.Paragraph.VersionedItem">
 <summary>
 Sets or gets the versioned item of the current paragraph
 <remarks>Only for use in versioning! Never set it for anything else! Also, do not persist this property to database!</remarks>
 </summary>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ItemMeta">
 <summary>
 Gets or sets the item type of the current paragraph
 </summary>
 <value>ItemType</value>
 <returns>ItemType</returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Paragraph.GlobalCount">
 <summary>
 Gets the global count.
 </summary>
 <value>The global count.</value>
 <remarks>Lazy loaded, wrap in <see cref="P:Dynamicweb.Content.Paragraph.HasGlobal"/> conditional before use</remarks>
</member>
<member name="P:Dynamicweb.Content.Paragraph.MasterType">
 <summary>
 Gets or sets the type of the master.
 </summary>
 <value>The type of the master. Only has an affect on master paragraphs</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.Master">
 <summary>
 Gets the master paragraph.
 </summary>
 <value>The master if <see cref="P:Dynamicweb.Content.Paragraph.MasterParagraphID"></see> is more than 0.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.Variation">
 <summary>
 Gets or sets the variation of this paragraph in context of an OMC.
 </summary>
 <value>
 The variation - 1-N depending on the setup.
 </value>
 <remarks>Variation = 1 is the original.</remarks>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ApprovalType">
 <summary>
 Gets the type of approval, draft, versioning or a workflow.
 </summary>
 <value>The type of the approval.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.UniqueId">
 <summary>
 Gets or sets the unique identifier for paragraphs used in copy and deploy scenarios.
 </summary>
 <value>The unique identifier.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ColumnsLarge">
 <summary>
 Gets or sets the large column used in grid based pages.
 </summary>
 <value>Represents how many columns the paragraph should take up in the grid for large displays</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ColumnsMedium">
 <summary>
 Gets or sets the medium column used in grid based pages.
 </summary>
 <value>Represents how many columns the paragraph should take up in the grid for medium displays</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ColumnsSmall">
 <summary>
 Gets or sets the small column used in grid based pages.
 </summary>
 <value>Represents how many columns the paragraph should take up in the grid for small displays</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ContainerId">
 <summary>
 Gets or sets the id of the container where the paragraph is placed (DEPRECATED?)
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ParentContainer">
 <summary>
 Gets or sets the parent containerId (row) where the paragraph is placed (DEPRECATED?)
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Content.Paragraph.RowColor">
 <summary>
 Gets or sets the color of the row for paragraphs rendered as rows in grid enabled placeholders.
 </summary>
 <value>The color of the row, i.e. #e1e1e1.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.RowImage">
 <summary>
 Gets or sets the row image (background image) for paragraphs rendered as rows in grid enabled placeholders.
 </summary>
 <value>The rows background image (/Files/Images/Backgrounds/Background1.jpg).</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.RowCssClass">
 <summary>
 Gets or sets the row CSS class for paragraphs rendered as rows in grid enabled placeholders.
 </summary>
 <value>The row CSS class, i.e. highRow.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.RowId">
 <summary>
 Gets or sets the row id for paragraphs rendered as rows in grid enabled placeholders.
 </summary>
 <value>The id of the type of row - defines how many columns there is in the row and their sizes.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.ParentRowId">
 <summary>
 Gets or sets the parent row id for paragraphs rendered inside a row to identify which row the paragraph belongs to.
 </summary>
 <value>The parent row identifier.</value>
 <remarks>Used with the <see cref="P:Dynamicweb.Content.Paragraph.Sort"/> to define where to render the paragraph</remarks>
</member>
<member name="M:Dynamicweb.Content.Paragraph.BackendUserHasPermissionToEdit">
 <summary>
 Check edit permissions for paragraph
 </summary>
 <returns>Returns true if the current backend user has permission to edit the paragraph. Returns false if no backend user is found, or if the current backend user doesn't have permission to edit the paragraph</returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Content.Paragraph.Icon">
 <summary>
 Gets the paragraph icon showing in backend.
 </summary>
 <value>Returns either item type icon either module icon either ordinary paragraph icon.</value>
</member>
<member name="P:Dynamicweb.Content.Paragraph.IconColor">
 <summary>
 Gets the paragraph icon color showing in backend.
 </summary>
 <value>Returns either item type icon color either module icon color either ordinary paragraph icon color.</value>
</member>
<member name="M:Dynamicweb.Content.Paragraph.Copy">
 <summary>
 Creates a copy of this Paragraph and returns it as a transient instance (Not persisted)
 </summary>
 <returns>A new Paragraph instance with state copied from this Paragraph instance</returns>
</member>
<member name="M:Dynamicweb.Content.Paragraph.Synchronize(Dynamicweb.Content.Paragraph)">
 <summary>
 Ensures that the state (Properties) of this instance has the same values as the properties in the Paragraph parameter
 </summary>
 <param name="paragraph">The Paragraph for which this Paragraph instance should be synced</param>
</member>
<member name="M:Dynamicweb.Content.Paragraph.EnsureParagraphInheritChanges(Dynamicweb.Content.Paragraph,Dynamicweb.Content.Paragraph)">
 <summary>
 Ensures that any property values are inherited from a master Paragraph to language versions of that paragraph, but only if they were the same as before any changes to the master paragraph
 </summary>
 <param name="originalParagraph">The original Master Paragraph for which this is a language version</param>
 <param name="paragraph">The newly updated Master Paragraph</param>
</member>
<member name="M:Dynamicweb.Content.Paragraph.SetApprovalType(System.Int32)">
 <summary>
 Sets the type of the approval.
 </summary>
 <param name="value">The value.</param>
</member>
<member name="T:Dynamicweb.ContentAppIndexProvider">
 <summary>
 The class ContentAppIndexProvider allows to extend indexing content paragraph with module specific fields or documents to be used with Query publisher app.
 </summary>
 <example>
   <code description="How to extend content app index documents and use it in template output." source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Content\ContentAppIndexProviderSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.ContentAppIndexProvider.CanHandle(System.String)">
 <summary>
 Returns value inicating whether current app index provider can handle the app by it's system name.
 </summary>
 <param name="appSystemName">The app system name.</param>
 <returns>Returns true if current app index provider can handle the app.</returns>
</member>
<member name="M:Dynamicweb.ContentAppIndexProvider.GetDocuments(System.Int32,Dynamicweb.Indexing.IndexDocument,System.Data.DataRow)">
 <summary>
 Gets the index documents for specific paragraph.
 </summary>
 <param name="pageId">The page id.</param>
 <param name="pageDocument">The parent page index document.</param>
 <param name="appParagraphRow">The paragraph <seealso cref="T:System.Data.DataRow"/>.</param>
 <returns>The collection of <seealso cref="T:Dynamicweb.Indexing.IndexDocument"/>.</returns>
</member>
<member name="M:Dynamicweb.ContentAppIndexProvider.ExtendTemplate(Dynamicweb.Rendering.Template,System.Collections.IDictionary)">
 <summary>
 Extends template with tags needed to render extended index fields.
 </summary>
 <param name="template">The template to be rendered.</param>
 <param name="doc">The document as <seealso cref="T:System.Collections.IDictionary"/></param>
</member>
<member name="F:Dynamicweb.ContentAppIndexProvider.AppSystemName">
 <summary>
 The app system name const.
 </summary>
 <remarks>Used as field system name for index schema</remarks>
</member>
<member name="F:Dynamicweb.ContentAppIndexProvider.AppItemId">
 <summary>
 The app item id const.
 </summary>
 <remarks>Used as field system name for index schema</remarks>
</member>
<member name="F:Dynamicweb.ContentAppIndexProvider.AppItemTitle">
 <summary>
 The app item title const.
 </summary>
 <remarks>Used as field system name for index schema</remarks>
</member>
<member name="F:Dynamicweb.ContentAppIndexProvider.AppItemContent">
 <summary>
 The app item content const.
 </summary>
 <remarks>Used as field system name for index schema</remarks>
</member>
<member name="M:Dynamicweb.ContentAppIndexProvider.GetFields">
 <summary>
 Gets fields specific for current app index provider.
 </summary>
 <returns>The collection of <seealso cref="T:Dynamicweb.Indexing.Schemas.FieldDefinitionBase"/>.</returns>
</member>
<member name="M:Dynamicweb.ContentAppIndexProvider.GetAll">
 <summary>
 Gets all the ContentAppIndexProvider instances.
 </summary>
 <returns>The collection of <see cref="T:Dynamicweb.ContentAppIndexProvider"/>.</returns>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.ColorParameterEditor">
 <summary>
 Creates a color picker.
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.ColorParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">Color picker options.</param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.GoogleFontParameterEditor">
 <summary>
 Represents a control that allows the user to select a google font.
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.GoogleFontParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">Google font editor options</param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.FloatingPointNumberParameterEditor">
 <summary>
 Creates double number input.
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.FloatingPointNumberParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Creates double number input.
 </summary>
 <param name="addIn">Instance of parent object.</param>
 <param name="name">Editor name.</param>
 <param name="value">Double number.</param>
 <param name="options">
 Possible options:
     inputClass - a css class for control
     maxValue - max value of number. By default is null.
     minValue - min value of number. By default is null.
     allowNegativeValues - the value which indicates is allowed to use negative numbers. By default is true;
     localizeValues - Indicating whether to format values according to the given culture.
     disabled - valuse which indicates whether to disable control. By default is false. 
 </param>
 <param name="label"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.IntegerNumberParameterEditor">
 <summary>
 Creates double number input.
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.IntegerNumberParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Creates integer number input.
 </summary>
 <param name="addIn">Instance of parent object.</param>
 <param name="name">Editor name.</param>
 <param name="value">Integer number.</param>
 <param name="options">
 Possible options:
     inputClass - a css class for control
     maxValue - max value of number. By default is null.
     minValue - min value of number. By default is null.
     allowNegativeValues - the value which indicates is allowed to use negative numbers. By default is true;
     localizeValues - Indicating whether to format values according to the given culture.
     disabled - valuse which indicates whether to disable control. By default is false. 
 </param>
 <param name="label"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.ItemListParameterEditor">
 <summary>
 Represents a control that allows to select an item type <see cref="T:Dynamicweb.Content.Items.Metadata.ItemType"/> from a drop-down list.
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.ItemListParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">
 Possible options:
     StructureType - to limit item types by its usage. Allowed values: All, PageParagraphs and ItemList
 </param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.ItemListParameterEditor.RenderItemTypeSelector(System.String,System.String,System.String)">
 <summary>
 Renders item selector.
 </summary>
 <param name="selectedItemType">An Id of the selected item type.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.ItemListParameterEditor.RenderSelector(System.String,System.Collections.Generic.IEnumerable{Dynamicweb.Content.Items.Metadata.ItemType},System.String,System.String)">
 <summary>
 Renders selector control.
 </summary>
 <param name="selectorId">Selector id.</param>
 <param name="items">Selector items.</param>
 <param name="selectedValue">Selected value.</param>
 <param name="noOptionsMessage">A message that is displayed when there are not options available.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.ItemListParameterEditor.BuildHtmlForRichSelectItem(System.String,System.String,Dynamicweb.Core.UI.Icons.KnownIcon,Dynamicweb.Core.UI.KnownColor)">
 <summary>
 Builds the HTML for rich select item.
 </summary>
 <param name="name">The name.</param>
 <param name="description">The description.</param>
 <param name="icon">The icon.</param>
 <returns>System.String.</returns>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.ParagraphSelectEditor">
 <summary>
 Creates a picker to select a paragraph
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.ParagraphSelectEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">Editor options.</param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.UserParameterEditor">
 <summary>
 Represents a control that allows to select an user <see cref="T:Dynamicweb.Security.UserManagement.User"/> from a drop-down list.
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.UserParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">Editor options.</param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.FileManagerEditor">
 <summary>
 Represents a control that allows the user to select a file.
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.FileManagerEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">
 Possible options:
     file - specifies the file intially selected in the drop down.size
     folder - folder to show files from in drop down.
     extensions - a csv list of allowed file extensions.
     showFullPath - to shows full path to a file
     useimagesfolder - files are selected from solution Images folder
     usefilesfolder- files are selected from solution Files folder
     allowBrowse - to allow select files from any folder
     IconPath - path to the image
     Icon -  a known icon css class name  (Ex: fa fa-exclamation-triangle)
     Tooltip - A little description for control
 </param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.CheckListParameterEditor">
 <summary>
 Creates a multi selection check box group.
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.CheckListParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">
 Possible options:
     infoText - files are selected from solution Files folder
 </param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.CSVFieldsTypeEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable)">
 <summary>
 
 </summary>
 <param name="addIn"></param>
 <param name="name"></param>
 <param name="value"></param>
 <param name="options"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.GroupedDropDownParameterEditor">
 <summary>
 Represents a control that allows the user to select a single item from a drop-down list.
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.GroupedDropDownParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">
 Possible options:
     SortBy - list items could be sorted by Value or by Key
     none - show or not none option
     height - drop-down height
     width - drop-down width
 </param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.GroupedDropDownParameterEditor.DropDownItem">
 <summary>
 Represents a drop-down item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Extensibility.Editors.GroupedDropDownParameterEditor.DropDownItem.Name">
 <summary>
 Gets or sets the name of the item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Extensibility.Editors.GroupedDropDownParameterEditor.DropDownItem.GroupName">
 <summary>
 Gets or sets the group name of the item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Extensibility.Editors.GroupedDropDownParameterEditor.DropDownItem.Value">
 <summary>
 Gets or sets the value of the item.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.GroupedDropDownParameterEditor.DropDownItem.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">Name of the item.</param>
 <param name="groupName">Group name of the item.</param>
 <param name="value">Value of the item.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.GroupedDropDownParameterEditor.DropDownItem.CompareTo(Dynamicweb.Extensibility.Editors.GroupedDropDownParameterEditor.DropDownItem)">
 <summary>
 Compares one drop-down item with another one.
 </summary>
 <param name="other">Another drop-down item to compare with.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.GroupedDropDownParameterEditor.DropDownItemComparer">
 <summary>
 Provides methods and properties for comparing two drop-down items.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Extensibility.Editors.GroupedDropDownParameterEditor.DropDownItemComparer.SortByName">
 <summary>
 Gets or sets value indicating whether items should be compared by their keys (labels).
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Extensibility.Editors.GroupedDropDownParameterEditor.DropDownItemComparer.SortByValue">
 <summary>
 Gets or sets value indicating whether items should be compared by their values.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.GroupedDropDownParameterEditor.DropDownItemComparer.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.GroupedDropDownParameterEditor.DropDownItemComparer.#ctor(System.Boolean,System.Boolean)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="sortByName">Value indicating whether items should be compared by their names.</param>
 <param name="sortByValue">Value indicating whether items should be compared by their values.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.GroupedDropDownParameterEditor.DropDownItemComparer.Compare(Dynamicweb.Extensibility.Editors.GroupedDropDownParameterEditor.DropDownItem,Dynamicweb.Extensibility.Editors.GroupedDropDownParameterEditor.DropDownItem)">
 <summary>
 Comparse two drop-down items.
 </summary>
 <param name="x">First item to compare.</param>
 <param name="y">Second item to compare.</param>
 <returns>The comparison result.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.MultipleValuesEditor">
 <summary>
 Allows adding/deleting of multiple values presented as a list.
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.MultipleValuesEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">Editor options.</param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.MultipleValuesEditor.RenderMarkup(System.String)">
 <summary>
 Renders editor markup.
 </summary>
 <param name="editorID">A unique identifier of the editor.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.MultipleValuesEditor.RenderInitializationScript(System.String,System.String[])">
 <summary>
 Renders initialization script.
 </summary>
 <param name="editorID">A unique identifier of the editor.</param>
 <param name="values">A list of preselected values.</param>
 <returns>Initialization script.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.HiddenParameterEditor">
 <summary>
 Creates a hidden input control.
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.HiddenParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">Editor options</param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.RadioParameterEditor">
 <summary>
 Represents a control that allows the user to select a single item from a radio list.
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.RadioParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">
 Possible options:
     SortBy - list items could be sorted by Value or by Key
 </param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.RadioParameterEditor.SetSelectedItemByValue(System.Web.UI.WebControls.RadioButtonList,System.String)">
 <summary>
 Select item in radio list by value
 </summary>
 <param name="list"></param>
 <param name="selectedValue"></param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.IDropDownOptions">
 <summary>
 Should be implemented by a configurable add-in when it has editors which allows to select from multiple values
 </summary>
 <example>
 <code description="Example of IDropDownOptions interface implementation" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.IDropDownOptions.GetOptions(System.String)">
 <summary>
 Get options for editors with multiple values
 </summary>
 <param name="dropdownName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.DBSelectorParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable)">
 <summary>
 
 </summary>
 <param name="addIn"></param>
 <param name="name"></param>
 <param name="value"></param>
 <param name="options"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.DocumentViewerEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable)">
 <summary>
 
 </summary>
 <param name="addIn"></param>
 <param name="name"></param>
 <param name="value"></param>
 <param name="options"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.FileSelectEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable)">
 <summary>
 
 </summary>
 <param name="addIn"></param>
 <param name="name"></param>
 <param name="value"></param>
 <param name="options"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.FolderSelectEditor">
 <summary>
 Represents a control that allows the user to select a file folder.
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.FolderSelectEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">
 Possible options:
     htmlClass - a css class for control
     useimagesfolder - folders are selected from solution Images folder
     usefilesfolder- folders are selected from solution Files folder
 </param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.PageSelectEditor">
 <summary>
 Creates a picker to select a page
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.PageSelectEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">Editor options.</param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.ReportSettingsParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable)">
 <summary>
 
 </summary>
 <param name="addIn"></param>
 <param name="name"></param>
 <param name="value"></param>
 <param name="options"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.DelimiterParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable)">
 <summary>
 
 </summary>
 <param name="addIn"></param>
 <param name="name"></param>
 <param name="value"></param>
 <param name="options"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.UserGroupParameterEditor">
 <summary>
 Represents a control that allows to select an user group <see cref="T:Dynamicweb.Security.UserManagement.Group"/> from a drop-down list.
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.UserGroupParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">
 Possible options:
     multiple - to select multiple groups
 </param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.XSLTransformParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable)">
 <summary>
 
 </summary>
 <param name="addIn"></param>
 <param name="name"></param>
 <param name="value"></param>
 <param name="options"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.TraceParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable)">
 <summary>
 
 </summary>
 <param name="addIn"></param>
 <param name="name"></param>
 <param name="value"></param>
 <param name="options"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.LabelParameterEditor">
 <summary>
 Creates a label control
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.LabelParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">Editor options.</param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.CSVParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable)">
 <summary>
 
 </summary>
 <param name="addIn"></param>
 <param name="name"></param>
 <param name="value"></param>
 <param name="options"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.PeriodParameterEditor">
 <summary>
 Creates a control to edit periods
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.PeriodParameterEditor.CreateNumberSelector(System.String,System.Object)">
 <summary>
 Returns new number selector control.
 </summary>
 <param name="id">Control Id.</param>
 <param name="value">Selected value.</param>
 <returns>New number selector control.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.PeriodParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">Editor options.</param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.DateTimeParameterEditor">
 <summary>
 Creates a date time picker.
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.DateTimeParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">
 Possible options:
     show - when = date, time is not included
     hideName - render control without label with name
 </param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.YesNoParameterEditor">
 <summary>
 Creates a checkbox control
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.YesNoParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">
 Possible options:
     htmlClass - a css class for control
     disabled - disable a control
 </param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.MoreLessParameterEditor">
 <summary>
 Represents a control that allows to select a comparison condition from a drop-down list.
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.MoreLessParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">Editor options.</param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.DropDownParameterEditor">
 <summary>
 Represents a control that allows the user to select a single item from a drop-down list.
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.DropDownParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">
 Possible options:
     htmlClass - a css class for control
     multiple - to allow multiple selection
     SortBy - list items could be sorted by Value or by Key
     none - show or not none option
     nonetext - a text for none option
     height - drop-down height
     width - drop-down width
     IconPath - path to the image
     Icon -  a known icon css class name  (Ex: fa fa-exclamation-triangle)
     Tooltip - A little description for control
 </param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.DropDownParameterEditor.FillDropDown(System.Web.UI.WebControls.DropDownList,System.Collections.Hashtable)">
 <summary>
 
 </summary>
 <param name="dropdown"></param>
 <param name="table"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.DropDownParameterEditor.AddItem(System.Web.UI.WebControls.DropDownList,System.String,System.String)">
 <summary>
 
 </summary>
 <param name="dropdown"></param>
 <param name="value"></param>
 <param name="text"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.DropDownParameterEditor.SetSelectedItemByValue(System.Web.UI.WebControls.DropDownList,System.String)">
 <summary>
 
 </summary>
 <param name="dropDown"></param>
 <param name="selectedValue"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.DropDownParameterEditor.FillListBox(System.Web.UI.WebControls.ListBox,System.Collections.Hashtable)">
 <summary>
 
 </summary>
 <param name="list"></param>
 <param name="table"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.DropDownParameterEditor.AddItem(System.Web.UI.WebControls.ListBox,System.String,System.String)">
 <summary>
 
 </summary>
 <param name="list"></param>
 <param name="value"></param>
 <param name="text"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.DropDownParameterEditor.SetSelectedItemByValues(System.Web.UI.WebControls.ListBox,System.String)">
 <summary>
 
 </summary>
 <param name="list"></param>
 <param name="selectedValue"></param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.TemplateParameterEditor">
 <summary>
 Class TemplateParameterEditor used for configurable add-ins with properties with an editor that makes it possible to select a template.
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.TemplateParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Creates integer number input.
 </summary>
 <param name="addIn">Instance of parent object.</param>
 <param name="name">Editor name.</param>
 <param name="value">Integer number.</param>
 <param name="options">
 Possible options:
     Folder - folder to show files from in drop down.
     FullPath - to shows full path to a file.
     SimpleLayout - use simle layout markup.
 </param>
 <param name="label"></param>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.TextParameterEditor">
 <summary>
 Creates a textbox control
 </summary>
 <example>
 <code description="Example of editor usage" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\AddInWithEditors.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.TextParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">
 Possible options:
     htmlClass - a css class for control
     SimpleLayout - use simle layout markup
     TextArea - makes textarea with multiple lines
     DefaultValue - default value
     maxLength - text max length
     size - the visible width, in characters
     infoText - a little description for control
 </param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Editors.ParameterEditor">
 <summary>
 A base class for parameter editors for configurable add-ins
 </summary>
 <example>
 <code description="Example of a custom parameter editor" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Extensibility\EmailEditor.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Extensibility.Editors.ParameterEditor.Scripts">
 <summary>
 Get or set JS scripts for the editor.
 </summary>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.ParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">Drop-down options.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.ParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the editor.
 </summary>
 <param name="addIn">Referencing add-in.</param>
 <param name="name">Editor name.</param>
 <param name="value">Current editor value.</param>
 <param name="options">Drop-down options.</param>
 <param name="label">Editor label.</param>
 <returns>Editor contents.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.Editors.ParameterEditor.GetIdSuitableString(System.String)">
 <summary>
 Replace non-safe characters from input parameter to use it as id in html control for editor
 </summary>
 <param name="inputString"></param>
 <returns>The Id suitable vakue</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.IAddInServiceProvider">
 <summary>
 Helper methods for service providers.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.IAddInServiceProvider.TestConnection">
 <summary>
 Test Connection.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.Provider.MediaBrowserProvider">
 <summary>
 Allow file manager control to select image from external sources. 
 Inherit from this base class to implenent specific provider.
 </summary>
 <example>
 <code title="C#" description="" lang="CS">
 [AddInName("MWMediaBrowser")]
 public class MWMediaBrowser: MediaBrowserProvider

 public override bool AllowToShow(ByVal context As MediaContext)
 {
     return context.Folder.ToLower() == Dynamicweb.Content.Files.FilesAndFolders.GetImagesFolderName().ToLower();
 }
 
 public override string GetIcon() 
 {
     return KnownIconInfo.ClassNameFor(KnownIcon.ExternalLink));
 }
 
 public override string GetUrl() 
 {
     return "/CustomModules/MwMediaDatabase/mwMediaDatabase_popup.aspx";
 }
 }
 </code>
 </example> 
</member>
<member name="M:Dynamicweb.Extensibility.Provider.MediaBrowserProvider.AllowToShow(Dynamicweb.Extensibility.Provider.MediaBrowserProvider.MediaContext)">
 <summary>
 Detect show or not button to execute images from external source for specified context.
 </summary>
</member>
<member name="M:Dynamicweb.Extensibility.Provider.MediaBrowserProvider.GetIcon">
 <summary>
 Override the icon for button - has to return a valid <see cref="T:Dynamicweb.Core.UI.Icons.KnownIcon"/>
 </summary>
 <remarks>Default icon is <see cref="F:Dynamicweb.Core.UI.Icons.KnownIcon.ExternalLink"/>.
 Icon cannot be an image path</remarks>
 <code lang="CS" title="C#" description="Return a known icon string">return KnownIconInfo.ClassNameFor(KnownIcon.ExternalLink));</code>
</member>
<member name="M:Dynamicweb.Extensibility.Provider.MediaBrowserProvider.GetUrl">
 <summary>
 Absolute url to browser
 </summary>
</member>
<member name="M:Dynamicweb.Extensibility.TextEditorAddIn.Render(System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Returns an instance of the editor.
 </summary>
 <param name="name">Name of the text area.</param>
 <param name="width">Width of the editor. Default is 565.</param>
 <param name="height">Height of the editor. Default is 280.</param>
 <param name="value">Text for the textarea.</param>
 <param name="css">Extra CSS values to be placed in HTML header.</param>
 <param name="skinPath">Absolute virtual path to the skin that should be used by the editor.</param>
 <param name="encodeOutput">Tells the editor to HTML encode some characters before posting the editor data. The encoded chars are: &amp;, &lt; and &gt;.</param>
</member>
<member name="M:Dynamicweb.Extensibility.TextEditorAddIn.Serialize(System.Object)">
 <summary>
 Serialize an object as a JSON string
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.CancelableNotificationArgs">
 <summary>
 Provides an ability to cancel the task related to the given notification.
 </summary>
</member>
<member name="P:Dynamicweb.Extensibility.CancelableNotificationArgs.Cancel">
 <summary>
 Gets or sets the value indicating whether to cancel the task related to the given notification.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.CancelableNotificationArgs.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.CancelableNotificationArgs.#ctor(System.Boolean)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="cancel">Value indicating whether to cancel the task related to the given notification.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.TemplateExtender">
 <summary>
 Base implementation of Template Extenders. Usually this object is not inherited directly. Inherit one of the implemenations, i.e. <see cref="T:Dynamicweb.Frontend.PageTemplateExtender"></see> or <c>Dynamicweb.Ecommerce.Products.ProductTemplateExtender</c>.
 </summary>
</member>
<member name="M:Dynamicweb.Extensibility.TemplateExtender.ExtendTemplate(Dynamicweb.Rendering.Template)">
 <summary>
 This is the method that is invoked when a template extender is found and instantiated. Override this method to manipulate the tags of the passed <see cref="T:Dynamicweb.Rendering.Template" /> instance.
 </summary>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template" /> instance with the template being extended.</param>
</member>
<member name="T:Dynamicweb.Extensibility.NamespaceDoc">
 <summary>
 The Dynamicweb.Extensibility namespace contains the infrastructure and base classes used for parts of the extensibility implementation in Dynamicweb.
 </summary>
</member>
<member name="T:Dynamicweb.Extensibility.ITemplateExtender">
 <summary>
 Represents a contract for extending templates. Use <see cref="T:Dynamicweb.Extensibility.TemplateExtender"></see> instead.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.ITemplateExtender.Extend(Dynamicweb.Rendering.Template)">
 <summary>
 Extends the given template.
 </summary>
 <param name="template">Template to extend.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.DataItemState">
 <summary>
 Represents a state of the data item.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Extensibility.DataItemState.New">
 <summary>
 The item has just been created.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Extensibility.DataItemState.Updated">
 <summary>
 The item has been updated.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Extensibility.DataItemState.Deleted">
 <summary>
 The item has been deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.DataItemModificationsInfo">
 <summary>
 Provides information about modifications made in a single data item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Extensibility.DataItemModificationsInfo.ID">
 <summary>
 Gets or sets the ID of the data item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Extensibility.DataItemModificationsInfo.TypeID">
 <summary>
 Gets or sets the ID of the data item type.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Extensibility.DataItemModificationsInfo.State">
 <summary>
 Gets or sets the state of the data item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Extensibility.DataItemModificationsInfo.Fields">
 <summary>
 Gets or sets the collection of fields that has been modified.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.DataItemModificationsInfo.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.DataItemModificationsInfo.#ctor(System.String,System.String,Dynamicweb.Extensibility.DataItemState)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="id">The ID of the data item.</param>
 <param name="typeID">The ID of the data item type.</param>
 <param name="state">The state of the data item.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.IDataItemListener">
 <summary>
 Represents a listener of data item modifications.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.IDataItemListener.HandleDataItemModifications(System.String,Dynamicweb.Extensibility.DataItemModificationsInfo)">
 <summary>
 Handles data item modifications.
 </summary>
 <param name="category">Modifications category.</param>
 <param name="info">Information about data item modifications.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.ModificationsCategoryAttribute">
 <summary>
 Defines the modifications category constraint for the modifications listener.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Extensibility.ModificationsCategoryAttribute.Category">
 <summary>
 Gets the target category.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.ModificationsCategoryAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="category">Target category.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Extensibility.AddInConfigurator">
 <summary>
 Represents an add-in configurator
 </summary>
</member>
<member name="P:Dynamicweb.Extensibility.AddInConfigurator.GroupToShow">
 <summary>
 Gets or sets the group to show.
 </summary>
 <value>The group to show.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInConfigurator.AddInType">
 <summary>
 Gets or sets the type of the add in.
 </summary>
 <value>The type of the add in.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInConfigurator.ConfigurableAddIn">
 <summary>
 Gets or sets the configurable add in.
 </summary>
 <value>The c add in.</value>
</member>
<member name="M:Dynamicweb.Extensibility.AddInConfigurator.Render(System.Web.UI.HtmlTextWriter)">
 <summary>
 Renders the configurator to the specified html textwriter.
 </summary>
 <param name="writer">The output.</param>
</member>
<member name="M:Dynamicweb.Extensibility.AddInConfigurator.LoadParametersFromXml(System.String)">
 <summary>
 Loads the parameters from XML.
 </summary>
 <param name="parameterXml">The parameter XML.</param>
</member>
<member name="M:Dynamicweb.Extensibility.AddInConfigurator.StoreParameterXmlInSession(System.Type,System.String)">
 <summary>
 Stores the parameter XML in session.
 </summary>
 <remarks>move from ConfigurableAddin.LoadParametersFromXml</remarks>
 <param name="parameterXml">The parameter XML.</param>
</member>
<member name="M:Dynamicweb.Extensibility.AddInConfigurator.FillOptionHashtable(System.String)">
 <summary>
 Fills the option hashtable.
 </summary>
 <param name="options">The options.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Extensibility.AddInConfigurator.StartTable">
 <summary>
 Starts the table.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Extensibility.AddInConfigurator.EndTable">
 <summary>
 Ends the table.
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Extensibility.AddInSelector">
 <summary>
 Defines an add-in selector - a UI element
 </summary>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.NoParametersMessage">
 <summary>
 Gets or sets the custom message to show instead of "No parameters found".
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.Jscripts">
 <summary>
 Gets the javascripts.
 </summary>
 <value>The javascripts as html script tags.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.LoadParameters">
 <summary>
 Gets the load parameters.
 </summary>
 <value>The load parameters.</value>
</member>
<member name="M:Dynamicweb.Extensibility.AddInSelector.GetLoadParameters">
 <summary>
 Gets the load parameters.
 </summary>
</member>
<member name="M:Dynamicweb.Extensibility.AddInSelector.ComposeLoadParameters">
 <summary>
 Composes the load parameters.
 </summary>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInTypeName">
 <summary>
 Gets or sets the name of the add in type.
 </summary>
 <value>The name of the add in type.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInIgnoreTypeName">
 <summary>
 Gets or sets the name of the add in type to ignore.
 </summary>
 <value>The name of the add in type.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInIgnoreTypeNames">
 <summary>
 Gets or sets the names of the add-in types to ignore separated by comma.
 </summary>
 <value>The names of the add-in types separated by comma.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.useNewUI">
 <summary>
 Gets or sets a value indicating whether to use new UI.
 </summary>
 <value>
   <c>true</c> if new UI is used; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInType">
 <summary>
 Gets or sets the type of the add in.
 </summary>
 <value>The type of the add in.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInGroupName">
 <summary>
 Gets or sets the name of the add in group.
 </summary>
 <value>The name of the add in group.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInParameterName">
 <summary>
 Gets or sets the name of the add in parameter.
 </summary>
 <value>The name of the add in parameter.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.BeforeUpdateSelection">
 <summary>
 Gets or sets the Javascript to be run on before update selection.
 </summary>
 <value>
 the Javascript to be run on before update selection.
 </value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AfterUpdateSelection">
 <summary>
 Gets or sets the Javascript to be run on after update selection.
 </summary>
 <value>
 the Javascript to be run on after update selection.
 </value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInSelectedType">
 <summary>
 Gets or sets the type of the add in selected.
 </summary>
 <value>The type of the add in selected.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInShowSelector">
 <summary>
 Gets or sets a value indicating whether [add in show selector].
 </summary>
 <value><c>true</c> if [add in show selector]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInDisableSelector">
 <summary>
 Gets or sets a value indicating whether [add in selector is disabled].
 </summary>
 <value><c>true</c> if [add in selector is disabled]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInShowNothingSelected">
 <summary>
 Gets or sets value indicating whether to add "None" option into the drop-down list.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInShowParameters">
 <summary>
 Gets or sets a value indicating whether [add in show parameters].
 </summary>
 <value>
 <c>true</c> if [add in show parameters]; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInShowFieldset">
 <summary>
 Gets or sets a value indicating whether [add in show fieldset].
 </summary>
 <value><c>true</c> if [add in show fieldset]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInShowTypeLabel">
 <summary>
 Gets or sets a value indicating whether the type column should be shown.
 </summary>
 <value><c>true</c> if [add in show type column]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInBreakFieldsets">
 <summary>
 Gets or sets a value indicating append the BR tag after each fieldset.
 </summary>
 <value><c>true</c>append the BR tag after each fieldset; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInShowNoFoundMessage">
 <summary>
 Gets or sets a value indicating whether [add in show no found MSG].
 </summary>
 <value>
 <c>true</c> if [add in show no found MSG]; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInShowLoader">
 <summary>
 Gets or sets a value indicating whether [add in show loader].
 </summary>
 <value><c>true</c> if [add in show loader]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInObject">
 <summary>
 Gets or sets the add in object.
 </summary>
 <value>The add in object.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.TdWidth">
 <summary>
 Gets or sets the width of the td.
 </summary>
 <value>The width of the td.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInAllowedType">
 <summary>
 Gets or sets the type of the add in allowed.
 </summary>
 <value>The type of the add in allowed.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInParameterMargin">
 <summary>
 Gets or sets the add in parameter margin.
 </summary>
 <value>The add in parameter margin.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.AddInParameterWidth">
 <summary>
 Gets or sets the width of the add in parameter.
 </summary>
 <value>The width of the add in parameter.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.UseLabelAsName">
 <summary>
 Gets or sets a value indicating whether [use label as name].
 </summary>
 <value><c>true</c> if [use label as name]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.ShowOnlySelectedGroup">
 <summary>
 Gets or sets a value indicating whether [show only selected group].
 </summary>
 <value>
 <c>true</c> if [show only selected group]; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Extensibility.AddInSelector.OverridePostbackType">
 <summary>
 If set to true, the addinSelector ignores the type recieved in the form postback, and allows your to set your addin-type manually.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Extensibility.AddInSelector.Render(System.Web.UI.HtmlTextWriter)">
 <summary>
 Renders the specified selector to the specified html textwriter.
 </summary>
 <param name="writer">The output.</param>
</member>
<member name="M:Dynamicweb.Extensibility.AddInSelector.FillDropDownWithAddInTypes(System.Web.UI.WebControls.DropDownList,System.String)">
 <summary>
 Fills the dropdown with add in types.
 </summary>
 <param name="dropDown">The dropDown list.</param>
 <param name="selectedValue">The selected value.</param>
</member>
<member name="M:Dynamicweb.Extensibility.AddInSelector.GetIgnoredAddIns">
 <summary>
 Get list of ignored add-ins.
 </summary>
 <returns>The list of ignored add-ins.</returns>
</member>
<member name="M:Dynamicweb.Extensibility.AddInSelector.IsIgnoredAddIn(System.Type,System.Collections.Generic.List{System.String})">
 <summary>
 Check is add-in ignored.
 </summary>
 <returns>The list of ignored add-ins.</returns>
</member>
<member name="M:Dynamicweb.Extensibility.AddInSelector.FillDropDownWithAddInTypes(System.Web.UI.WebControls.DropDownList,System.String,System.Boolean)">
 <summary>
 Fills the dropdown with add in types.
 </summary>
 <param name="dropDown">The dropdown list.</param>
 <param name="selectedValue">The selected value.</param>
 <param name="showNone">if set to <c>true</c> show 'none' option.</param>
</member>
<member name="M:Dynamicweb.Extensibility.AddInSelector.GetAddInTypeByName(System.String)">
 <summary>
 Gets the name of the add in type by.
 </summary>
 <param name="typeName">Name of the type.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Extensibility.AddInSelector.SetSelectedItemInDropDownByValue(System.Web.UI.WebControls.DropDownList,System.String)">
 <summary>
 Selects the item in drop down by value.
 </summary>
 <param name="dropDown">The d list.</param>
 <param name="selectedValue">The selected value.</param>
</member>
<member name="M:Dynamicweb.Extensibility.AddInSelector.LoadParametersFromXml(System.String)">
 <summary>
 Loads the parameters from XML.
 </summary>
 <param name="parameterXml">The parameter XML.</param>
</member>
<member name="M:Dynamicweb.Extensibility.AddInSelector.GetAddIn">
 <summary>
 Gets the add in.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Extensibility.AddInSelector.GetAddInTypeNameFromPost">
 <summary>
 Gets the add in type name from post.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Extensibility.AddInSelector.GetAddInParametersFromPost">
 <summary>
 Gets the add in parameters from post.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Extensibility.AddInSelector.GetAddInParametersFromPost(System.String)">
 <summary>
 Gets the add in parameters from post.
 </summary>
 <param name="addInTypeName">Name of the add in type.</param>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Extensibility.DateSelector.AllowEmpty">
 <summary>
 Gets or sets the value indicating whether user can choose time (in 24h notation).
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Frontend.CartOrderlineViewModel">
 <summary>
 CartOrderlineViewModel represents the rendering context used when a CartOrderline is rendered.
 </summary>
 <seealso cref="T:Dynamicweb.Rendering.ViewModelBase" />
</member>
<member name="P:Dynamicweb.Frontend.CartOrderlineViewModel.ProductID">
 <summary>
 Gets or sets the product ID.
 </summary>
 <value>The product ID.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartOrderlineViewModel.ProductNumber">
 <summary>
 Gets or sets the product number.
 </summary>
 <value>The product number.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartOrderlineViewModel.ProductName">
 <summary>
 Gets or sets the product name.
 </summary>
 <value>The product name.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartOrderlineViewModel.IsProduct">
 <summary>
 Gets or sets if the orderline is a product.
 </summary>
 <value>The IsProduct boolean.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartOrderlineViewModel.IsDiscount">
 <summary>
 Gets or sets if the orderline is a discount.
 </summary>
 <value>The IsDiscount boolean.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartOrderlineViewModel.IsTax">
 <summary>
 Gets or sets if the orderline is a tax.
 </summary>
 <value>The IsTax boolean.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartOrderlineViewModel.Quantity">
 <summary>
 Gets or sets the quantity.
 </summary>
 <value>The quantity.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartOrderlineViewModel.ProductVariantID">
 <summary>
 Gets or sets the product variantID.
 </summary>
 <value>The product variantID</value>
</member>
<member name="P:Dynamicweb.Frontend.CartOrderlineViewModel.ProductVariantText">
 <summary>
 Gets or sets the product variant text.
 </summary>
 <value>The product variant text.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartOrderlineViewModel.ProductLink">
 <summary>
 Gets or sets the product link.
 </summary>
 <value>The product link.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartOrderlineViewModel.UnitPrice">
 <summary>
 Gets or sets the price viewmodel for unit price.
 </summary>
 <value>The price viewmodel for unit price.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartOrderlineViewModel.TotalPrice">
 <summary>
 Gets or sets the price viewmodel for total price.
 </summary>
 <value>The price viewmodel for total price.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartOrderlineViewModel.TotalDiscount">
 <summary>
 Gets or sets the price viewmodel for total discount.
 </summary>
 <value>The price viewmodel for total discount.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartOrderlineViewModel.UnitId">
 <summary>
 Gets or sets the unit id.
 </summary>
 <value>The unit id.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartOrderlineViewModel.UnitName">
 <summary>
 Gets or sets the unit name.
 </summary>
 <value>The unit name.</value>
</member>
<member name="M:Dynamicweb.Frontend.CartOrderlineViewModel.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.CartOrderlineViewModel" /> class.
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.CartViewModel">
 <summary>
 CartViewModel represents the rendering context used when a cart is rendered.
 </summary>
 <seealso cref="T:Dynamicweb.Rendering.ViewModelBase" />
</member>
<member name="P:Dynamicweb.Frontend.CartViewModel.ID">
 <summary>
 Gets or sets the identifier.
 </summary>
 <value>The identifier.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartViewModel.ProductsCount">
 <summary>
 Gets or sets the number of products in the cart.
 </summary>
 <value>The number of products.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartViewModel.TotalProductsCount">
 <summary>
 Gets or sets the total count of products in the cart.
 </summary>
 <value>The total count of products.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartViewModel.OrderlinesCount">
 <summary>
 Gets or sets the number of orderlines in the cart.
 </summary>
 <value>The number of orderlines.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartViewModel.CartOrderlines">
 <summary>
 Gets or sets the current cart orderlines.
 </summary>
 <value>The current cart.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartViewModel.TotalPrice">
 <summary>
 Gets or sets the price viewmodel for total price.
 </summary>
 <value>The price viewmodel for total price.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartViewModel.TotalDiscount">
 <summary>
 Gets or sets the price viewmodel for total discount.
 </summary>
 <value>The price viewmodel for total discount.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartViewModel.TotalPriceWithoutDiscounts">
 <summary>
 Gets or sets the price viewmodel for total price without discounts.
 </summary>
 <value>The price viewmodel for total price without discounts.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartViewModel.PaymentMethod">
 <summary>
 Gets or sets the payment method.
 </summary>
 <value>The payment method.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartViewModel.PaymentFee">
 <summary>
 Gets or sets the price viewmodel for payment fee.
 </summary>
 <value>The price viewmodel for payment fee.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartViewModel.ShippingMethod">
 <summary>
 Gets or sets the shipping method.
 </summary>
 <value>The shipping method.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartViewModel.ShippingFee">
 <summary>
 Gets or sets the price viewmodel for shipping fee.
 </summary>
 <value>The price viewmodel for shipping fee.</value>
</member>
<member name="P:Dynamicweb.Frontend.CartViewModel.IsEmpty">
 <summary>
 Gets or sets the whether the cart is empty.
 </summary>
 <value>Cart is empty.</value>
</member>
<member name="M:Dynamicweb.Frontend.CartViewModel.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.CartViewModel" /> class.
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.FileViewModel">
 <summary>
 FileViewModel represents the rendering context used when a file is rendered.
 </summary>
 <seealso cref="T:Dynamicweb.Rendering.ViewModelBase" />
</member>
<member name="M:Dynamicweb.Frontend.FileViewModel.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.FileViewModel"/> class.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.FileViewModel.Extension">
 <summary>
 Gets or sets the extension.
 </summary>
 <value>The extension.</value>
</member>
<member name="P:Dynamicweb.Frontend.FileViewModel.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Frontend.FileViewModel.Path">
 <summary>
 Gets or sets the path.
 </summary>
 <value>The path.</value>
</member>
<member name="M:Dynamicweb.Frontend.FileViewModel.ToString">
 <summary>
 Returns the path. 
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.FileViewModel.CreateInstance(System.IO.FileInfo,System.String)">
 <summary>
 Creates an instance of <see cref="T:Dynamicweb.Frontend.FileViewModel"/>.
 </summary>
 <param name="file">The file.</param>
 <returns>FileViewModel.</returns>
</member>
<member name="T:Dynamicweb.Frontend.GeolocationViewModel">
 <summary>
 GeolocationViewModel represents the rendering context used when a geolocation is rendered.
 </summary>
 <seealso cref="T:Dynamicweb.Rendering.ViewModelBase" />
</member>
<member name="M:Dynamicweb.Frontend.GeolocationViewModel.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.GeolocationViewModel"/> class.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.GeolocationViewModel.Latitude">
 <summary>
 Gets or sets the latitude.
 </summary>
 <value>The latitude.</value>
</member>
<member name="P:Dynamicweb.Frontend.GeolocationViewModel.Longitude">
 <summary>
 Gets or sets the longitude.
 </summary>
 <value>The longitude.</value>
</member>
<member name="M:Dynamicweb.Frontend.GeolocationViewModel.CreateInstance(Dynamicweb.Security.SystemTools.GeoLocation)">
 <summary>
 Creates an instance of <see cref="T:Dynamicweb.Frontend.GeolocationViewModel"/> .
 </summary>
 <param name="location">The location.</param>
 <returns>GeolocationViewModel.</returns>
</member>
<member name="T:Dynamicweb.Frontend.GoogleFontViewModel">
 <summary>
 GoogleFontViewModel represents the rendering context used when an item is rendered.
 </summary>
 <seealso cref="T:Dynamicweb.Rendering.ViewModelBase" />
</member>
<member name="P:Dynamicweb.Frontend.GoogleFontViewModel.Family">
 <summary>
 Gets or sets the font family name.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.GoogleFontViewModel.Weight">
 <summary>
 Gets or sets the font's weight name.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.GoogleFontViewModel.Version">
 <summary>
 Gets or sets the font version.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.GoogleFontViewModel.File">
 <summary>
 Gets or sets the font's file link.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.GoogleFontViewModel.ToString">
 <summary>
 Returns the font family name. 
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.ItemFieldViewModel">
 <summary>
 ItemFieldViewModel represents the rendering context used when an item field is rendered.
 </summary>
 <seealso cref="T:Dynamicweb.Rendering.ViewModelBase" />
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.#ctor(System.Func{System.Object})">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.ItemFieldViewModel"/> class.
 </summary>
 <param name="valueFactory">The model value factory.</param>
</member>
<member name="P:Dynamicweb.Frontend.ItemFieldViewModel.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Frontend.ItemFieldViewModel.SystemName">
 <summary>
 Gets or sets the name of the system.
 </summary>
 <value>The name of the system.</value>
</member>
<member name="P:Dynamicweb.Frontend.ItemFieldViewModel.LazyValue">
 <summary>
 Gets or sets the lazy value.
 </summary>
 <value>The lazy value.</value>
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.GetBoolean">
 <summary>
 Gets the boolean.
 </summary>
 <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.GetDateTime">
 <summary>
 Gets the date time.
 </summary>
 <returns>System.DateTime.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.GetDecimal">
 <summary>
 Gets the decimal.
 </summary>
 <returns>System.Decimal.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.GetDouble">
 <summary>
 Gets the double.
 </summary>
 <returns>System.Double.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.GetFile">
 <summary>
 Gets the file.
 </summary>
 <returns>FileViewModel.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.GetGoogleFont">
 <summary>
 Gets the Google font.
 </summary>
 <returns>GoogleFontViewModel</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.GetFiles">
 <summary>
 Gets the files.
 </summary>
 <returns>IList(Of FileViewModel).</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.GetGeolocation">
 <summary>
 Gets the geolocation.
 </summary>
 <returns>GeolocationViewModel.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.GetInt32">
 <summary>
 Gets the int32.
 </summary>
 <returns>System.Int32.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.GetInt64">
 <summary>
 Gets the int64.
 </summary>
 <returns>System.Int64.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.GetItem">
 <summary>
 Gets the item.
 </summary>
 <returns>ItemViewModel.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.GetItems">
 <summary>
 Gets the items.
 </summary>
 <returns>IList(Of ItemViewModel).</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.GetString">
 <summary>
 Gets the string.
 </summary>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.GetUsers">
 <summary>
 Gets the users.
 </summary>
 <returns>IList(Of UserViewModel).</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.GetList">
 <summary>
 Gets the listViewModel.
 </summary>
 <returns>ListViewModel</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.GetValue">
 <summary>
 Gets the value.
 </summary>
 <returns>System.Object.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.GetValue``1">
 <summary>
 Gets the value.
 </summary>
 <typeparam name="T"></typeparam>
 <returns>T.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemFieldViewModel.CreateInstance(Dynamicweb.Content.Items.Metadata.ItemField,Dynamicweb.Content.Items.Item)">
 <summary>
 Creates an instance of <see cref="T:Dynamicweb.Frontend.ItemFieldViewModel"/> .
 </summary>
 <param name="field">The field.</param>
 <param name="item">The item.</param>
 <returns>ItemFieldViewModel.</returns>
</member>
<member name="P:Dynamicweb.Frontend.ListOptionViewModel.Value">
 <summary>
 Gets or sets the value.
 </summary>
 <value>The value.</value>
</member>
<member name="P:Dynamicweb.Frontend.ListOptionViewModel.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Frontend.ListOptionViewModel.Icon">
 <summary>
 Gets or sets the icon.
 </summary>
 <value>The icon.</value>
</member>
<member name="P:Dynamicweb.Frontend.ListOptionViewModel.IsSelected">
 <summary>
 Gets or sets the isSelected value.
 </summary>
 <value>The isSelected value.</value>
</member>
<member name="M:Dynamicweb.Frontend.ListOptionViewModel.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.ListOptionViewModel" /> class.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.ListViewModel.Options">
 <summary>
 Gets or sets a list of ListOptionViewModel with all options.
 </summary>
 <returns>List of ListOptionViewModels.</returns>
</member>
<member name="P:Dynamicweb.Frontend.ListViewModel.SelectedOptions">
 <summary>
 Gets a list of ListOptionViewModel where isselected = true. 
 </summary>
 <returns>List of ListOptionViewModels.</returns>
</member>
<member name="P:Dynamicweb.Frontend.ListViewModel.SelectedNames">
 <summary>
 Gets IEnumerable of selected names. 
 </summary>
 <returns>Selected names.</returns>
</member>
<member name="P:Dynamicweb.Frontend.ListViewModel.SelectedName">
 <summary>
 Gets a csv string with selected names.
 </summary>
 <returns>String with selected names.</returns>
</member>
<member name="P:Dynamicweb.Frontend.ListViewModel.SelectedValues">
 <summary>
 Gets IEnumerable of selected values. 
 </summary>
 <returns>Selected values.</returns>
</member>
<member name="P:Dynamicweb.Frontend.ListViewModel.SelectedValue">
 <summary>
 Gets a csv string with selected values.  
 </summary>
 <returns>String with selected values.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ListViewModel.ToString">
 <summary>
 Returns a csv string with selected names.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.ListViewModel.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.ListViewModel" /> class.
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.LogOnHandler">
 <summary>
 The extranet authentication handler.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.LogOnHandler.IsUserLoggedIn">
 <summary>
 Determines whether user is logged in.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.LogOnHandler.CurrentLogOnResult">
 <summary>
 Gets or sets the current login result.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.LogOnHandler.#ctor">
 <summary>
 Initializes new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.LogOnHandler.#ctor(System.Int32)">
 <summary>
 Initializes new instance of the class.
 </summary>
 <param name="pageId">The <see cref="T:Dynamicweb.Content.Page"/> ID.</param>
</member>
<member name="M:Dynamicweb.Frontend.LogOnHandler.LogOn(System.String,System.String)">
 <summary>
 Logs on a user to the frontend extranet module.
 </summary>
 <param name="username">The username.</param>
 <param name="password">The password.</param>
</member>
<member name="M:Dynamicweb.Frontend.LogOnHandler.LogOn(System.String,System.String,System.Boolean)">
 <summary>
 Logs on a user to the frontend extranet module.
 </summary>
 <param name="username">The username.</param>
 <param name="password">The password.</param>
 <param name="onlyActive">If set to <c>True</c>, only active users can log on the extranet.</param>
</member>
<member name="M:Dynamicweb.Frontend.LogOnHandler.LogOnWithToken(System.String,System.String)">
 <summary>
 Logs on a user to the frontend extranet module using a username and a password or login token.
 </summary>
 <param name="username">The username.</param>
 <param name="token">The token associated with this user.</param>
 <remarks>Use the <see cref="M:Dynamicweb.Frontend.LogOnHandler.GetPasswordToken(System.String)"/> or <see cref="M:Dynamicweb.Frontend.LogOnHandler.GetLoginToken(System.String,System.String)"/> to create a token that can be used</remarks>
</member>
<member name="M:Dynamicweb.Frontend.LogOnHandler.ExternalLogOn(Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult)">
 <summary>
 Grants access to extranet with external account.
 </summary>
 <param name="logOnResult">The <see cref="T:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult"/>.</param>
</member>
<member name="M:Dynamicweb.Frontend.LogOnHandler.ExternalLogOn(Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult,System.Boolean)">
 <summary>
 Grants access to extranet with external account.
 </summary>
 <param name="logOnResult">The <see cref="T:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult"/>.</param>
 <param name="isADLogin">Determines whether the external account is Active Directory account.</param>
</member>
<member name="M:Dynamicweb.Frontend.LogOnHandler.ExternalLogOn(Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult,System.Boolean,System.Int32)">
 <summary>
 Grants access to extranet with external account.
 </summary>
 <param name="logOnResult">The <see cref="T:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult"/>.</param>
 <param name="isADLogin">Determines whether the external account is Active Directory account.</param>
 <param name="pageId">The page where the login is performed.</param>
</member>
<member name="M:Dynamicweb.Frontend.LogOnHandler.LogOff">
 <summary>
 Logs off the user.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.LogOnHandler.LogOff(System.Boolean)">
 <summary>
 Logs off the user.
 </summary>
 <param name="redirect">Determines whether user should be redirected after log off.</param>
</member>
<member name="M:Dynamicweb.Frontend.LogOnHandler.SaveCookie">
 <summary>
 Saves the cookie.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.LogOnHandler.GetLoginToken(System.String,System.String)">
 <summary>
 Gets a login token for a user and password.
 </summary>
 <param name="username">The username.</param>
 <param name="password">The password. Can be the encrypted version</param>
 <returns>A token that can be used in logons using a querystring: ?Username={username}&amp;pwtoken={token} or by calling <see cref="M:Dynamicweb.Frontend.LogOnHandler.ExtranetLoginToken(System.String,System.String)"/>.</returns>
</member>
<member name="M:Dynamicweb.Frontend.LogOnHandler.GetPasswordToken(System.String)">
 <summary>
 Gets a password token for a password that can be used for later validation.
 </summary>
 <param name="password">The password. Can be the encrypted version</param>
 <returns>A token that can be used in logons using a querystring: ?Username={username}&amp;pwtoken={token} or by calling <see cref="M:Dynamicweb.Frontend.LogOnHandler.ExtranetLoginToken(System.String,System.String)"/>.</returns>
</member>
<member name="T:Dynamicweb.Frontend.PdfHttpStreamHandler">
 <summary>
 Handles everything related to HttpContext for Dynamicwebs PDF generation.
 </summary>
 <seealso cref="T:System.IDisposable" />
</member>
<member name="M:Dynamicweb.Frontend.PdfHttpStreamHandler.HttpStream">
 <summary>
 Sends the PDF document stream, in a correctly formatted HTTP response. The HTTP
 client, receiving this response, prompts the user whether to open or save the PDF stream.	
 The HttpContext.Current.Response stream is ended by calling Dispose. 
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.PdfHttpStreamHandler.HttpStream(System.String)">
 <summary>
 Sends the PDF document stream, in a correctly formatted HTTP response. The HTTP
 client, receiving this response, prompts the user whether to open or save the PDF stream.	
 The HttpContext.Current.Response stream is ended by calling Dispose. 
 </summary>
 <param name="fileName">Name of the file the browser should receive. Not a physical file. I.e. "YourDocument.pdf"</param>
</member>
<member name="M:Dynamicweb.Frontend.PdfHttpStreamHandler.HttpStream(System.Byte[],System.String)">
 <summary>
 Sends the PDF document stream, in a correctly formatted HTTP response. The HTTP
 client, receiving this response, prompts the user whether to open or save the PDF stream.	
 The HttpContext.Current.Response stream is ended by calling Dispose. 
 </summary>
 <param name="data">The data as a byte array.</param>
 <param name="fileName">Name of the file the browser should receive. Not a physical file. I.e. "YourDocument.pdf"</param>
</member>
<member name="M:Dynamicweb.Frontend.PdfHttpStreamHandler.Finalize">
 <summary>
 GC calls this Finalize if the programmer forgot to call Dispose on the PdfCreator object.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.PdfHttpStreamHandler.Dispose">
 <summary>
 Implements the dispose method to actively clean up unmanaged code. The programmer
 calls dispose on the PdfCreator to clean up unmanaged code, instead of relying on GC
 to call Finalize which intern calls Dispose.
 GC.SuppressFinalize is called to prevent GC to call Dispose again (through finalize).
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.PdfHttpStreamHandler.Dispose(System.Boolean)">
 <summary>
 The real destructor. Calls can be induced from GC or by the programmer. In tDynamicweb.he first
 case (GC Induced) managed objects are not supposed to be garbage collected since the GC is already
 aware of them, only unmanaged objects are 'collected'. In the last case (Programmer Induced) managed code 
 and unmanaged code is cleaned up immediately.
 </summary>
 <param name="doDisposeManagedObjects">If true managed objects than this object (Me) might own are disposed too otherwise only disposing unmanaged code objects</param>
</member>
<member name="P:Dynamicweb.Frontend.PlaceholderSettings.ItemsAllowed">
 <summary>
 Gets or sets the system names of item types allowed in this placeholder.
 </summary>
 <value>The item types allowed in a list of system names.</value>
 <remarks>Same as the 'items-allowed' setting</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PlaceholderSettings.Default">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Frontend.PlaceholderSettings"/> is the default placeholder in the layout.
 </summary>
 <value><c>true</c> if default; otherwise, <c>false</c>.</value>
 <remarks>Same as the 'default' setting</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PlaceholderSettings.Sort">
 <summary>
 Gets or sets the sort order of the placeholder compared to other placeholders when displayed in the backend.
 </summary>
 <value>The sort value as an integer.</value>
 <remarks>Same as the 'sort' setting</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PlaceholderSettings.Template">
 <summary>
 Gets or sets the default template used for paragraphs in this container.
 </summary>
 <value>The default template.</value>
 <remarks>Same as the 'template' setting</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PlaceholderSettings.Grid">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Frontend.PlaceholderSettings"/> is a grid.
 </summary>
 <value><c>true</c> if grid; otherwise, <c>false</c>.</value>
 <remarks>Same as the 'grid' setting</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PlaceholderSettings.GridSettings">
 <summary>
 Gets or sets the grid settings file, i.e. Bootstrap3.json.
 </summary>
 <value>The grid settings.</value>
 <remarks>Same as the 'grid-settings' setting</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PlaceholderSettings.GridType">
 <summary>
 Gets or sets the type of the grid if the grid mode is auto.
 </summary>
 <value>The type of the grid.</value>
 <remarks>Same as the 'grid-type' setting</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PlaceholderSettings.GridMode">
 <summary>
 Gets or sets the grid mode. Set to auto and use grid type to run without config files.
 </summary>
 <value>The grid mode.</value>
 <remarks>Same as the 'grid-mode' setting</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PlaceholderSettings.LimitToTemplates">
 <summary>
 Gets or sets a list of allowed template files that can be used for this placeholder, i.e. "template1.cshtml" etc.
 </summary>
 <remarks>Same as the 'limit' setting</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PlaceholderSettings.Unwrap">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Frontend.PlaceholderSettings"/> is unwrap.
 </summary>
 <value><c>true</c> if unwrap; otherwise, <c>false</c>.</value>
 <remarks>Same as the 'unwrap' setting</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PlaceholderSettings.RemoveId">
 <summary>
 Gets or sets a value indicating whether the id attribute of the tag should be removed.
 </summary>
 <value><c>true</c> if [remove identifier]; otherwise, <c>false</c>.</value>
 <remarks>Same as the 'removeid' setting</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PriceViewModel.Price">
 <summary>
 Gets or sets the price.
 </summary>
 <value>The price.</value>
</member>
<member name="P:Dynamicweb.Frontend.PriceViewModel.PriceWithVat">
 <summary>
 Gets or sets the price with vat.
 </summary>
 <value>The price with vat.</value>
</member>
<member name="P:Dynamicweb.Frontend.PriceViewModel.PriceWithoutVat">
 <summary>
 Gets or sets the price with vat.
 </summary>
 <value>The price with vat.</value>
</member>
<member name="P:Dynamicweb.Frontend.PriceViewModel.Vat">
 <summary>
 Gets or sets the vat.
 </summary>
 <value>The vat.</value>
</member>
<member name="P:Dynamicweb.Frontend.PriceViewModel.VatPercent">
 <summary>
 Gets or sets the vat percentage.
 </summary>
 <value>The vat percentage.</value>
</member>
<member name="P:Dynamicweb.Frontend.PriceViewModel.Currency">
 <summary>
 Gets or sets the currency.
 </summary>
 <value>The currency.</value>
</member>
<member name="P:Dynamicweb.Frontend.PriceViewModel.PriceInfo.Value">
 <summary>
 Gets or sets the price .
 </summary>
 <value>The price value.</value>
</member>
<member name="P:Dynamicweb.Frontend.PriceViewModel.PriceInfo.Formatted">
 <summary>
 Gets or sets the formatted price.
 </summary>
 <value>The formatted price.</value>
</member>
<member name="P:Dynamicweb.Frontend.PriceViewModel.PriceInfo.FormattedNoSymbol">
 <summary>
 Gets or sets the formatted price without symbol.
 </summary>
 <value>The formatted price without symbol.</value>
</member>
<member name="P:Dynamicweb.Frontend.PriceViewModel.VatInfo.Percent">
 <summary>
 Gets or sets the vat percentage.
 </summary>
 <value>The vat percentage.</value>
</member>
<member name="P:Dynamicweb.Frontend.PriceViewModel.VatInfo.PercentFormatted">
 <summary>
 Gets or sets the formatted vat percentage.
 </summary>
 <value>The formatted vat percentage.</value>
</member>
<member name="P:Dynamicweb.Frontend.PriceViewModel.CurrencyInfo.Symbol">
 <summary>
 Gets or sets the currency symbol.
 </summary>
 <value>The  currency symbol.</value>
</member>
<member name="P:Dynamicweb.Frontend.PriceViewModel.CurrencyInfo.Name">
 <summary>
 Gets or sets the currency name.
 </summary>
 <value>The currency name.</value>
</member>
<member name="P:Dynamicweb.Frontend.PriceViewModel.CurrencyInfo.Rate">
 <summary>
 Gets or sets the currency rate.
 </summary>
 <value>The currency rate.</value>
</member>
<member name="M:Dynamicweb.Frontend.PriceViewModel.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.PriceViewModel" /> class.
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.Reset">
 <summary>
 Class that contains function to restart/refresh the website frontend.
 The Cache object that holds the Page, Area Style etc. are or can be deleted, forcing the Application to reload them. 
 </summary>
 <para>
 <list type="table">
 <listheader>
 <term>Reset Frontend</term>
 <description>Function to call</description>
 </listheader>
 <item><term>Reset Frontend</term>
 <description>ResetHash</description></item>
 </list>
 </para>
 <example><code>
 'Call the function without initialization
 Dynamicweb.Frontend.Reset.ResetHash(Frontend.Reset.HashType.All)

 </code></example>
</member>
<member name="T:Dynamicweb.Frontend.Reset.HashType">
 <summary>
 Enum values used to tell <see cref="M:Dynamicweb.Frontend.Reset.ResetHash(Dynamicweb.Frontend.Reset.HashType)"/> what cached object to delete
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.Reset.HashType.Page">
 <summary>
 Delete page cache
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.Reset.HashType.Area">
 <summary>
 Delete area cache
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.Reset.HashType.All">
 <summary>
 Delete all caches
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.Reset.HashType.AreaAndPage">
 <summary>
 Deletes area and page cache
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.Reset.ResetHash(Dynamicweb.Frontend.Reset.HashType)">
 <summary>
 Deletes the Cache objects that holds the ether Page, Area, Style etc or Deletes All objects
 <paramref>enumHashType</paramref>.
 An Enum value of the HashType Enum type 
 </summary>
 <param name="enumHashType">An Enum value of the HashType Enum type 
  indicating what frontend cache object to delete</param>
</member>
<member name="M:Dynamicweb.Frontend.Reset.ResetHash(Dynamicweb.Frontend.Reset.HashType,System.Boolean)">
 <summary>
 Deletes the Cache objects that holds the ether Page, Area, Style etc or Deletes All objects
 <paramref>enumHashType</paramref>.
 An Enum value of the HashType Enum type 
 </summary>
 <param name="enumHashType">An Enum value of the HashType Enum type 
  indicating what frontend cache object to delete</param>
 <param name="Force">Forces an update even if settings in management center says differently.</param>
</member>
<member name="M:Dynamicweb.Frontend.SecurityHandler.#ctor(System.Int32)">
 <summary>
 Initializes new instance of the class and starts extranet procedure.
 </summary>
 <param name="pageId">The <see cref="T:Dynamicweb.Content.Page"/> ID.</param>
</member>
<member name="M:Dynamicweb.Frontend.SecurityHandler.#ctor(System.Int32,System.String)">
 <summary>
 Initializes new instance of the class and starts extranet procedure.
 </summary>
 <param name="pageId">The <see cref="T:Dynamicweb.Content.Page"/> ID.</param>
 <param name="permissionTemplate">The login template.</param>
</member>
<member name="M:Dynamicweb.Frontend.SecurityHandler.SetExtranetLogOnTags(Dynamicweb.Rendering.Template,System.Int32)">
 <summary>
 Sets the tag values in the template for log on.
 </summary>
 <param name="logOnTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="pageId">The page ID.</param>
</member>
<member name="M:Dynamicweb.Frontend.SecurityHandler.SetExtranetLogOnErrorTags">
 <summary>
 Sets the errors tag values in the template for log on.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.SecurityHandler.IsCurrentUserAllowed(Dynamicweb.Content.Page)">
 <summary>
 Determines whether the current user have access to the specified page.
 </summary>
 <param name="page">The <see cref="T:Dynamicweb.Content.Page"/>.</param>
 <returns>
 <c>True</c> if current user have access to the specified <see cref="T:Dynamicweb.Content.Page"/>; otherwise, <c>False</c>. 
 <c>False</c> if <see cref="T:Dynamicweb.Content.Page"/> is null.
 <c>False</c> if user is not logged in and <see cref="T:Dynamicweb.Content.Page"/> has permissions set.
 <c>True</c> if user is not logged in and <see cref="T:Dynamicweb.Content.Page"/> has no permissions set.
 </returns>
</member>
<member name="M:Dynamicweb.Frontend.SecurityHandler.IsPageProtect(Dynamicweb.Content.Page)">
 <summary>
 Determines whether the page is protected.
 </summary>
 <param name="page">The <see cref="T:Dynamicweb.Content.Page"/>.</param>
 <returns><c>True</c>, if page is protected, otherwise, <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Frontend.SecurityHandler.IsPageProtect(Dynamicweb.Content.Page,System.String)">
 <summary>
 Determines whether the page is protected.
 </summary>
 <param name="page">The <see cref="T:Dynamicweb.Content.Page"/>.</param>
 <param name="pagePassword">The page password.</param>
 <returns><c>True</c>, if page is protected, otherwise, <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Frontend.SecurityHandler.LogOnPrompt">
 <summary>
 Runs prompt extranet login.
 </summary>
 <returns>The template or text of the prompt.</returns>
</member>
<member name="T:Dynamicweb.Frontend.UrlHandling.UrlIndexPathLookupResult">
 <summary>
 Class UrlIndexPathLookupResult contains the result of resolving a URL to a URL node.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.UrlHandling.UrlIndexPathLookupResult.QueryStringFromPath">
 <summary>
 Gets the resulting querystring found in the Url index from the lookup of the path
 </summary>
 <value>The querystring from path.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlHandling.UrlIndexPathLookupResult.OriginalQueryString">
 <summary>
 Gets or sets the original querystring if the URL being resolved contains querystring information, i.e. "PageNum=2" from "/products/bikes?PageNum=2".
 </summary>
 <value>The original querystring.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlHandling.UrlIndexPathLookupResult.RemainingPath">
 <summary>
 Gets or sets the remaining path if the entire path was not resolved on the index. I.e. "/bikes/mountainbike" from "/home/products/bikes/products" where "/home/products/" was resolved to aa UrlNode.
 </summary>
 <value>The remaining path.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlHandling.UrlIndexPathLookupResult.Node">
 <summary>
 Gets or sets the node of this lookup.
 </summary>
 <value>The node.</value>
</member>
<member name="T:Dynamicweb.Frontend.UrlHandling.UrlNode">
 <summary>
 Class UrlNode represents a node in the url trees and indexes.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.UrlHandling.UrlNode.PathName">
 <summary>
 Gets or sets the name of this nodes part of the path.
 </summary>
 <value>The name of the path.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlHandling.UrlNode.PathNameSanitized">
 <summary>
 Gets the path name sanitized where i.e. diacritics and illegal characters are removed or replaced. 
 </summary>
 <value>Returns the cleaned value of the <see cref="P:Dynamicweb.Frontend.UrlHandling.UrlNode.PathName"/> property - using the <see cref="M:Dynamicweb.Frontend.UrlHandling.UrlHelper.SanitizeUrl(System.String,System.Boolean)"/> method.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlHandling.UrlNode.PathExact">
 <summary>
 Gets or sets the exact path for this node if needed - overwrites the auto generated path to this item with a specific value, i.e. "/MyProduct" instead of "/Products/TheGroup/MyProduct".
 </summary>
 <value>The exact path.</value>
 <remarks>This can be set to any valid URL. i.e. "/MyProduct", "Feed.xml", "MyData.json", "/bikes/mountainbike.html", "/MyPage.aspx?Parameter=value" etc.</remarks>
</member>
<member name="P:Dynamicweb.Frontend.UrlHandling.UrlNode.PathUnique">
 <summary>
 Gets or sets the unique path of this node after it has been indexed.
 </summary>
 <value>This property holds a value after nodes in an index has been indexed and the path of the node is duplicated. I.e if the same url tree have 2 nodes named /home, one will be named /home-1</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlHandling.UrlNode.IgnoreInChildPath">
 <summary>
 Gets or sets a value indicating if the name of this item is not part of children urlnode paths.
 </summary>
 <value><c>true</c> if ignored in child paths; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlHandling.UrlNode.IgnoreParentPath">
 <summary>
 Gets or sets a value indicating if the name of this item will not include the parent path structure for its path.
 </summary>
 <value><c>true</c> if ignore parent path; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlHandling.UrlNode.IgnoreQueryStringOfParent">
 <summary>
 Gets or sets a value indicating if the querystring elements of the parent nodes are ignored. I.e. True for pages, but false for products since they also need their Groups querystring and value.
 </summary>
 <value><c>true</c> if ignore parent querystring elements; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlHandling.UrlNode.Parent">
 <summary>
 Gets or sets the parent <see cref="T:Dynamicweb.Frontend.UrlHandling.UrlNode"/>.
 </summary>
 <value>The parent node.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlHandling.UrlNode.Children">
 <summary>
 Gets or sets the children of <see cref="T:Dynamicweb.Frontend.UrlHandling.UrlNode"/> of this node.
 </summary>
 <value>List of children.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlHandling.UrlNode.QueryStringParameter">
 <summary>
 Gets or sets the querystring parameter representing this node. I.e. "ID" for pages or "GroupID" for groups.
 </summary>
 <value>The querystring parameter.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlHandling.UrlNode.QueryStringValue">
 <summary>
 Gets or sets the querystring value for this node, i.e. "1" for "?ID=1".
 </summary>
 <value>The querystring value.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlHandling.UrlNode.QueryStringExact">
 <summary>
 Gets or sets the exact querystring that represent this nodes data.
 </summary>
 <value>The querystring, i.e. parm=val&amp;parm2=val2 or just parm=val.</value>
 <exception cref="T:System.Exception">The specified <c>value</c> cannot start with &amp; or ?. Must be in the format parm=val&amp;parm2=val2</exception>
 <remarks>Cannot not have a leading &amp; or ?</remarks>
</member>
<member name="M:Dynamicweb.Frontend.UrlHandling.UrlNode.GetPath">
 <summary>
 Gets the path of this node based on settings and the nodes location in the url tree.
 </summary>
 <returns>System.String.</returns>
 <exception cref="T:System.Exception">If the UrlTree has a depth of more than 100 this method will return an exception</exception>
</member>
<member name="M:Dynamicweb.Frontend.UrlHandling.UrlNode.GetQueryString">
 <summary>
 Gets the querystring of this node based on settings and the nodes location in the url tree.
 </summary>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Frontend.UrlHandling.UrlNode.NodeCount">
 <summary>
 Returns a count of nodes under this node, not including itself.
 </summary>
 <returns>System.Int32.</returns>
</member>
<member name="T:Dynamicweb.Frontend.UrlHandling.UrlPageTreeHelper">
 <summary>
 Class UrlPageTreeHelper creates a URLnode structure for pages using the <see cref="T:Dynamicweb.Frontend.UrlHandling.UrlTreeBuilder"/>. Handled by Dynamicweb startup sequence and should not be used for customisations of URLs.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.UrlHandling.UrlPageTreeHelper.Instance">
 <summary>
 Gets an instance of the <see cref="T:Dynamicweb.Frontend.UrlHandling.UrlTreeBuilder"/>.
 </summary>
 <value>A new instance on every call tho this property.</value>
</member>
<member name="M:Dynamicweb.Frontend.UrlHandling.UrlPageTreeHelper.BuildPageUrlTree">
 <summary>
 Builds the page URL tree.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.UrlHandling.UrlPageTreeHelper.GetAreaUrlIndexName(Dynamicweb.Content.Area)">
 <summary>
 Gets the name of the area URL index based on the settings.
 </summary>
 <param name="area">The area for which the index name is needed.</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Frontend.UrlHandling.UrlPageTreeHelper.GetAreaUrlName(Dynamicweb.Content.Area)">
 <summary>
 Gets the name to use in the path for an area if the url tree includes area name or culture.
 </summary>
 <param name="area">The area for which the name is needed.</param>
 <returns>System.String.</returns>
</member>
<member name="T:Dynamicweb.Frontend.UrlHandling.UrlResolver">
 <summary>
 UrlResolver.
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.UrlHandling.UrlTreeBuilder">
 <summary>
 UrlTreeBuilder is a helper class for bulding url tree structures. 
 Url nodes can be created with ID and ParentID structure using the <see cref="M:Dynamicweb.Frontend.UrlHandling.UrlTreeBuilder.Add(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)"/> methods and when the object has been filled with data,
 call the <see cref="M:Dynamicweb.Frontend.UrlHandling.UrlTreeBuilder.MakeTree"/>. After that call a tree of <see cref="T:Dynamicweb.Frontend.UrlHandling.UrlNode"/> is available from the <see cref="P:Dynamicweb.Frontend.UrlHandling.UrlTreeBuilder.RootNodes"/> property.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.UrlHandling.UrlTreeBuilder.RootNodes">
 <summary>
 Gets the root nodes of the <see cref="T:Dynamicweb.Frontend.UrlHandling.UrlNode">UrlNodes</see> in the resulting tree. Only contains values after <see cref="M:Dynamicweb.Frontend.UrlHandling.UrlTreeBuilder.MakeTree"/> has been called.
 </summary>
 <value>The root nodes.</value>
</member>
<member name="M:Dynamicweb.Frontend.UrlHandling.UrlTreeBuilder.Add(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Adds a <see cref="T:Dynamicweb.Frontend.UrlHandling.UrlNode"/> to the tree builder instance.
 </summary>
 <param name="id">The Id of the item in the tree, i.e. "1" or "Group1".</param>
 <param name="parentId">The parentid of the item, i.e. "0" or "" if a rootnode or i.e. "2" for nodes that has a parent.</param>
 <param name="name">The name of the item, i.e. the name of the page, product or group. Used for this elements name in the resulting URL path.</param>
 <param name="queryStringParameter">The query string parameter for this node, i.e. "ID" or "GroupID".</param>
 <param name="queryStringValue">The query string value for this node, i.e. "1" for a page or "Group1" for a group.</param>
 <param name="pathExact">The exact path for this node if needed - overwrites the auto generated path to this item with a specific value, i.e. "/MyProduct" instead of "/Products/TheGroup/MyProduct".</param>
 <param name="ignoreInChildPath">if set to <c>true</c> this items name is not part of children urlnode paths.</param>
 <param name="ignoreParentPath">if set to <c>true</c> this item will not include the parent path structure for its path.</param>
</member>
<member name="M:Dynamicweb.Frontend.UrlHandling.UrlTreeBuilder.Add(System.Int32,System.Int32,System.String,System.String,System.Int32,System.String,System.Boolean,System.Boolean)">
 <summary>
 Adds a <see cref="T:Dynamicweb.Frontend.UrlHandling.UrlNode"/> to the tree builder instance.
 </summary>
 <param name="id">The Id of the item in the tree, i.e. "1" or "Group1".</param>
 <param name="parentId">The parentid of the item, i.e. "0" or "" if a rootnode or i.e. "2" for nodes that has a parent.</param>
 <param name="name">The name of the item, i.e. the name of the page, product or group. Used for this elements name in the resulting URL path.</param>
 <param name="queryStringParameter">The query string parameter for this node, i.e. "ID" or "GroupID".</param>
 <param name="queryStringValue">The query string value for this node, i.e. "1" for a page or "Group1" for a group.</param>
 <param name="pathExact">The exact path for this node if needed - overwrites the auto generated path to this item with a specific value, i.e. "/MyProduct" instead of "/Products/TheGroup/MyProduct".</param>
 <param name="ignoreInChildPath">if set to <c>true</c> this items name is not part of children urlnode paths.</param>
 <param name="ignoreParentPath">if set to <c>true</c> this item will not include the parent path structure for its path.</param>
</member>
<member name="M:Dynamicweb.Frontend.UrlHandling.UrlTreeBuilder.Add(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Adds a <see cref="T:Dynamicweb.Frontend.UrlHandling.UrlNode"/> to the tree builder instance.
 </summary>
 <param name="id">The Id of the item in the tree, i.e. "1" or "Group1".</param>
 <param name="parentId">The parentid of the item, i.e. "0" or "" if a rootnode or i.e. "2" for nodes that has a parent.</param>
 <param name="name">The name of the item, i.e. the name of the page, product or group. Used for this elements name in the resulting URL path.</param>
 <param name="queryStringParameter">The query string parameter for this node, i.e. "ID" or "GroupID".</param>
 <param name="queryStringValue">The query string value for this node, i.e. "1" for a page or "Group1" for a group.</param>
 <param name="pathExact">The exact path for this node if needed - overwrites the auto generated path to this item with a specific value, i.e. "/MyProduct" instead of "/Products/TheGroup/MyProduct".</param>
 <param name="ignoreInChildPath">if set to <c>true</c> this items name is not part of children urlnode paths.</param>
 <param name="ignoreParentPath">if set to <c>true</c> this item will not include the parent path structure for its path.</param>
</member>
<member name="M:Dynamicweb.Frontend.UrlHandling.UrlTreeBuilder.AddNode(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
 <summary>
 Adds a <see cref="T:Dynamicweb.Frontend.UrlHandling.UrlNode" /> to the tree builder instance.
 </summary>
 <param name="id">The Id of the item in the tree, i.e. "1" or "Group1".</param>
 <param name="parentId">The parentid of the item, i.e. "0" or "" if a rootnode or i.e. "2" for nodes that has a parent.</param>
 <param name="name">The name of the item, i.e. the name of the page, product or group. Used for this elements name in the resulting URL path.</param>
 <param name="queryStringParameter">The query string parameter for this node, i.e. "ID" or "GroupID".</param>
 <param name="queryStringValue">The query string value for this node, i.e. "1" for a page or "Group1" for a group.</param>
 <param name="pathExact">The exact path for this node if needed - overwrites the auto generated path to this item with a specific value, i.e. "/MyProduct" instead of "/Products/TheGroup/MyProduct".</param>
 <param name="ignoreInChildPath">if set to <c>true</c> this items name is not part of children urlnode paths.</param>
 <param name="ignoreParentPath">if set to <c>true</c> this item will not include the parent path structure for its path.</param>
 <param name="queryStringExact">The exact querystring - to override the automatic generated querystring.</param>
 <param name="ignoreParentQueryString">if set to <c>true</c> the querystring elements of the parent nodes are ignored. I.e. True for pages, but false for products since they also need their Groups querystring and value.</param>
 <exception cref="T:System.Exception"></exception>
</member>
<member name="M:Dynamicweb.Frontend.UrlHandling.UrlTreeBuilder.MakeTree">
 <summary>
 Makes the tree structure based on the IDs and ParentIds and adds the rootnodes to the RootNodes properties
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.UserViewModel">
 <summary>
 UserViewModel represents the rendering context used when a user is rendered.
 </summary>
 <seealso cref="T:Dynamicweb.Rendering.ViewModelBase" />
</member>
<member name="M:Dynamicweb.Frontend.UserViewModel.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.UserViewModel" /> class.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.Address">
 <summary>
 Gets or sets the address.
 </summary>
 <value>The address.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.Address2">
 <summary>
 Gets or sets the address2.
 </summary>
 <value>The address2.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.City">
 <summary>
 Gets or sets the city.
 </summary>
 <value>The city.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.Company">
 <summary>
 Gets or sets the company.
 </summary>
 <value>The company.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.Country">
 <summary>
 Gets or sets the country.
 </summary>
 <value>The country.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.CustomerNumber">
 <summary>
 Gets or sets the customer number.
 </summary>
 <value>The customer number.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.Department">
 <summary>
 Gets or sets the department.
 </summary>
 <value>The department.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.Email">
 <summary>
 Gets or sets the email.
 </summary>
 <value>The email.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.FirstName">
 <summary>
 Gets or sets the first name.
 </summary>
 <value>The first name.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.HouseNumber">
 <summary>
 Gets or sets the house number.
 </summary>
 <value>The house number.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.ID">
 <summary>
 Gets or sets the identifier.
 </summary>
 <value>The identifier.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.Image">
 <summary>
 Gets or sets the image.
 </summary>
 <value>The image.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.JobTitle">
 <summary>
 Gets or sets the job title.
 </summary>
 <value>The job title.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.LastName">
 <summary>
 Gets or sets the last name.
 </summary>
 <value>The last name.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.MiddleName">
 <summary>
 Gets or sets the name of the middle.
 </summary>
 <value>The name of the middle.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.Phone">
 <summary>
 Gets or sets the phone.
 </summary>
 <value>The phone.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.PhoneBusiness">
 <summary>
 Gets or sets the phone business.
 </summary>
 <value>The phone business.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.PhoneMobile">
 <summary>
 Gets or sets the phone mobile.
 </summary>
 <value>The phone mobile.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.PhonePrivate">
 <summary>
 Gets or sets the phone private.
 </summary>
 <value>The phone private.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.State">
 <summary>
 Gets or sets the state.
 </summary>
 <value>The state.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.Title">
 <summary>
 Gets or sets the title.
 </summary>
 <value>The title.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.UserName">
 <summary>
 Gets or sets the name of the user.
 </summary>
 <value>The name of the user.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.Zip">
 <summary>
 Gets or sets the zip.
 </summary>
 <value>The zip.</value>
</member>
<member name="P:Dynamicweb.Frontend.UserViewModel.ExternalID">
 <summary>
 Gets the external identifier.
 </summary>
 <value>
 The external identifier.
 </value>
</member>
<member name="M:Dynamicweb.Frontend.UserViewModel.CreateInstance(Dynamicweb.Security.UserManagement.User)">
 <summary>
 Creates an instance of <see cref="T:Dynamicweb.Frontend.UserViewModel"/> .
 </summary>
 <param name="user">The user.</param>
 <returns>UserViewModel.</returns>
</member>
<member name="T:Dynamicweb.Frontend.AreaLanguageViewModel">
 <summary>
 AreaLanguageViewModel represents the rendering context used when an area language is rendered.
 </summary>
 <seealso cref="T:Dynamicweb.Rendering.ViewModelBase" />
</member>
<member name="P:Dynamicweb.Frontend.AreaLanguageViewModel.Culture">
 <summary>
 Gets or sets the culture.
 </summary>
 <value>The culture.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaLanguageViewModel.FirstActivePage">
 <summary>
 Gets the first active page.
 </summary>
 <value>The first active page.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaLanguageViewModel.FirstPage">
 <summary>
 Gets the first page.
 </summary>
 <value>The first page.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaLanguageViewModel.ID">
 <summary>
 Gets or sets the identifier.
 </summary>
 <value>The identifier.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaLanguageViewModel.IsCurrent">
 <summary>
 Gets or sets a value indicating whether this instance is current.
 </summary>
 <value><c>true</c> if this instance is current; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaLanguageViewModel.IsMaster">
 <summary>
 Gets or sets a value indicating whether this instance is master.
 </summary>
 <value><c>true</c> if this instance is master; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaLanguageViewModel.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaLanguageViewModel.PrimaryDomain">
 <summary>
 Gets or sets the primary domain.
 </summary>
 <value>The primary domain.</value>
</member>
<member name="M:Dynamicweb.Frontend.AreaLanguageViewModel.CreateInstance(Dynamicweb.Content.Area,System.Boolean)">
 <summary>
 Creates an instance of <see cref="T:Dynamicweb.Frontend.AreaLanguageViewModel"/> .
 </summary>
 <param name="area">The area.</param>
 <param name="isCurrent">if set to <c>true</c> [is current].</param>
 <returns>AreaLanguageViewModel.</returns>
</member>
<member name="T:Dynamicweb.Frontend.AreaViewModel">
 <summary>
 AreaViewModel represents the rendering context used when an area is rendered.
 </summary>
 <seealso cref="T:Dynamicweb.Rendering.ViewModelBase" />
</member>
<member name="M:Dynamicweb.Frontend.AreaViewModel.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.AreaViewModel" /> class.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.AreaViewModel.CartPage">
 <summary>
 Gets or sets the cart page.
 </summary>
 <value>The cart page.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaViewModel.CreatedDate">
 <summary>
 Gets or sets the created date.
 </summary>
 <value>The created date.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaViewModel.DateFormat">
 <summary>
 Gets or sets the date format.
 </summary>
 <value>The date format.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaViewModel.FirstActivePage">
 <summary>
 Gets or sets the first active page.
 </summary>
 <value>The first active page.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaViewModel.FirstPage">
 <summary>
 Gets or sets the first page.
 </summary>
 <value>The first page.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaViewModel.ID">
 <summary>
 Gets or sets the identifier.
 </summary>
 <value>The identifier.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaViewModel.Item">
 <summary>
 Gets or sets the item.
 </summary>
 <value>The item.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaViewModel.ItemId">
 <summary>
 Gets or sets the item identifier.
 </summary>
 <value>The item identifier.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaViewModel.ItemType">
 <summary>
 Gets or sets the type of the item.
 </summary>
 <value>The type of the item.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaViewModel.Languages">
 <summary>
 Gets or sets the languages.
 </summary>
 <value>The languages.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaViewModel.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaViewModel.SearchPage">
 <summary>
 Gets or sets the search page.
 </summary>
 <value>The search page.</value>
</member>
<member name="P:Dynamicweb.Frontend.AreaViewModel.UpdatedDate">
 <summary>
 Gets or sets the updated date.
 </summary>
 <value>The updated date.</value>
</member>
<member name="M:Dynamicweb.Frontend.AreaViewModel.CreateInstance(Dynamicweb.Content.Area)">
 <summary>
 Creates an instance of <see cref="T:Dynamicweb.Frontend.AreaViewModel"/> .
 </summary>
 <param name="area">The area.</param>
 <returns>AreaViewModel.</returns>
</member>
<member name="T:Dynamicweb.Frontend.Devices.DeviceInfo">
 <summary>
 Represents information about a client device.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.Devices.DeviceInfo.ParseFromUserAgentString(System.String)">
 <summary>
 Parses device information from user agent string.
 </summary>
 <param name="userAgent">The user agent string.</param>
 <returns>Information about the device.</returns>
</member>
<member name="T:Dynamicweb.Frontend.Devices.DeviceDetector">
 <summary>
 Class DeviceDetector.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.Devices.DeviceDetector.DetectFromRequest(Dynamicweb.Environment.IRequest)">
 <summary>
 Detects the device from request.
 </summary>
 <param name="request">The request.</param>
 <returns>Information about the device.</returns>
</member>
<member name="M:Dynamicweb.Frontend.Devices.DeviceDetector.IsDeviceDetectionEnabled(Dynamicweb.Environment.IContext)">
 <summary>
 Determines whether device detection is enabled for the context.
 </summary>
 <param name="context">The context.</param>
 <returns><c>true</c> if device detection is enabled for the context; otherwise, <c>false</c>.</returns>
</member>
<member name="T:Dynamicweb.Frontend.Devices.DeviceType">
 <summary>
 Visitors device type. Default is Desktop.
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.Devices.DeviceType.Desktop">
 <summary>
 Desktop device. Default. Windows, OSX, Linux/Unix and other platforms
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.Devices.DeviceType.Mobile">
 <summary>
 Mobile device, iPhone (iPod), Android phone, Windows Phone 7/8 based devices
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.Devices.DeviceType.Tablet">
 <summary>
 Tablet device, iPad, Android tablet or Windows tablets
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.Devices.DeviceType.Bot">
 <summary>
 Search engine bots. If the visitor is detected as a bot, i.e. Googlebot or Bingbot.
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.Devices.PlatformType">
 <summary>
 Platform type - operation system. Default is <see cref="F:Dynamicweb.Frontend.Devices.PlatformType.Other"/>.
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.Devices.PlatformType.Other">
 <summary>
 Unknown platform type
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.Devices.PlatformType.Ios">
 <summary>
 iPhone, iPod or iPad
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.Devices.PlatformType.Android">
 <summary>
 Android phones or tablets
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.Devices.PlatformType.Windows">
 <summary>
 Windows based systems
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.Devices.PlatformType.Osx">
 <summary>
 Macs
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.Devices.PlatformType.Ux">
 <summary>
 Linux or Unix based systems
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.ItemViewModel">
 <summary>
 ItemViewModel represents the rendering context used when an item is rendered.
 </summary>
 <seealso cref="T:Dynamicweb.Rendering.ViewModelBase" />
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.ItemViewModel"/> class.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.ItemViewModel.Fields">
 <summary>
 Gets or sets the fields.
 </summary>
 <value>The fields.</value>
</member>
<member name="P:Dynamicweb.Frontend.ItemViewModel.Id">
 <summary>
 Gets or sets the identifier.
 </summary>
 <value>The identifier.</value>
</member>
<member name="P:Dynamicweb.Frontend.ItemViewModel.SystemName">
 <summary>
 Gets or sets the name of the system.
 </summary>
 <value>The name of the system.</value>
</member>
<member name="P:Dynamicweb.Frontend.ItemViewModel.PageID">
 <summary>
 Gets or sets the page id.
 </summary>
 <value>the page id.</value>
</member>
<member name="P:Dynamicweb.Frontend.ItemViewModel.ParagraphID">
 <summary>
 Gets or sets the paragraph id.
 </summary>
 <value>The paragraph id.</value>
</member>
<member name="P:Dynamicweb.Frontend.ItemViewModel.Link">
 <summary>
 Gets or sets the link.
 </summary>
 <value>The link.</value>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.GetBoolean(System.String)">
 <summary>
 Gets the boolean.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.GetDateTime(System.String)">
 <summary>
 Gets the date time.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns>System.DateTime.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.GetDecimal(System.String)">
 <summary>
 Gets the decimal.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns>System.Decimal.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.GetDouble(System.String)">
 <summary>
 Gets the double.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns>System.Double.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.GetGoogleFont(System.String)">
 <summary>
 Gets the google font.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns>GoogleFontViewModel</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.GetField(System.String)">
 <summary>
 Gets the field.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns>ItemFieldModel.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.GetFile(System.String)">
 <summary>
 Gets the file.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns>FileViewModel.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.GetFiles(System.String)">
 <summary>
 Gets the files.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns>IList(Of FileViewModel).</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.GetGeolocation(System.String)">
 <summary>
 Gets the geolocation.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns>GeolocationViewModel.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.GetInt32(System.String)">
 <summary>
 Gets the int32.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns>System.Int32.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.GetInt64(System.String)">
 <summary>
 Gets the int64.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns>System.Int64.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.GetItem(System.String)">
 <summary>
 Gets the item.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns>ItemViewModel.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.GetItems(System.String)">
 <summary>
 Gets the items.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns>IList(Of ItemViewModel).</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.GetString(System.String)">
 <summary>
 Gets the string.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.GetUsers(System.String)">
 <summary>
 Gets the users.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns>IList(Of UserViewModel).</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.GetList(System.String)">
 <summary>
 Gets the list. 
 </summary>
 <param name="systemName">The systemName</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.GetValue(System.String)">
 <summary>
 Gets the value.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns>System.Object.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.GetValue``1(System.String)">
 <summary>
 Gets the value.
 </summary>
 <typeparam name="T"></typeparam>
 <param name="systemName">Name of the system.</param>
 <returns>T.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.CreateLink(System.Int32,System.Int32)">
 <summary>
 Gets the link. 
 </summary>
 <param name="pageID">The pageID</param>
 <param name="paragraphID">The paragraphID</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.ItemViewModel.CreateInstance(Dynamicweb.Content.Items.Item)">
 <summary>
 Creates an instance of <see cref="T:Dynamicweb.Frontend.ItemViewModel"/> .
 </summary>
 <param name="item">The item.</param>
 <returns>ItemViewModel.</returns>
</member>
<member name="T:Dynamicweb.Frontend.LayoutTemplateLocator">
 <summary>
 Static methods for locating the appropiate layout template location based on the current context.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.LayoutTemplateLocator.FindLayoutPhoneTemplateForPage(Dynamicweb.Content.Page)">
 <summary>
 Finds the phone layout template for a given page.
 </summary>
 <param name="page">The page for which to find a phone layout template.</param>
 <returns>The name of the template, if found; otherwise null.</returns>
</member>
<member name="M:Dynamicweb.Frontend.LayoutTemplateLocator.FindLayoutTabletTemplateForPage(Dynamicweb.Content.Page)">
 <summary>
 Finds the tablet layout template for a given page.
 </summary>
 <param name="page">The page for which to find a tablet layout template.</param>
 <returns>The name of the template, if found; otherwise null.</returns>
</member>
<member name="M:Dynamicweb.Frontend.LayoutTemplateLocator.FindLayoutTemplateForPage(Dynamicweb.Content.Page)">
 <summary>
 Finds the layout template for a given page.
 </summary>
 <param name="page">The page for which to find a layout template.</param>
 <returns>The name of the template, if found; otherwise null.</returns>
</member>
<member name="M:Dynamicweb.Frontend.LayoutTemplateLocator.FindLayoutTemplateForPageItem(Dynamicweb.Content.Page)">
 <summary>
 Finds the item layout template for a given page.
 </summary>
 <param name="page">The page for which to find an item layout template.</param>
 <returns>The name of the template, if found; otherwise null.</returns>
</member>
<member name="M:Dynamicweb.Frontend.LayoutTemplateLocator.FindLayoutTemplateForParagraph(Dynamicweb.Content.Paragraph)">
 <summary>
 Finds the layout template for a given paragraph.
 </summary>
 <param name="paragraph">The paragraph for which to find a layout template..</param>
 <returns>The name of the template, if found; otherwise null.</returns>
</member>
<member name="M:Dynamicweb.Frontend.LayoutTemplateLocator.FindLayoutTemplateForParagraph(Dynamicweb.Content.Paragraph,Dynamicweb.Content.Area,Dynamicweb.Rendering.Designer.Layout)">
 <summary>
 Finds the layout template for a given paragraph.
 Use this when you need to render a paragraph on a different area (global paragraphs).
 </summary>
 <param name="paragraph">The paragraph for which to find a layout template.</param>
 <param name="area">The area where the paragraph will be rendered.</param>
 <param name="layout">The layout.</param>
 <returns>The name of the template, if found; otherwise null.</returns>
</member>
<member name="M:Dynamicweb.Frontend.LayoutTemplateLocator.FindLayoutTemplateForParagraphItem(Dynamicweb.Content.Paragraph)">
 <summary>
 Finds the item layout template for a given paragraph.
 </summary>
 <param name="paragraph">The paragraph for which to find an item layout template.</param>
 <returns>The name of the template, if found; otherwise null.</returns>
</member>
<member name="M:Dynamicweb.Frontend.LayoutTemplateLocator.FindLayoutTemplateForParagraphItem(Dynamicweb.Content.Paragraph,Dynamicweb.Content.Area,Dynamicweb.Rendering.Designer.Layout)">
 <summary>
 Finds the item layout template for a given paragraph.
 Use this when you need to render a paragraph item on a different area (global paragraphs).
 </summary>
 <param name="paragraph">The paragraph for which to find an item layout template.</param>
 <param name="area">The area where the paragraph item will be rendered.</param>
 <param name="layout">The layout.</param>
 <returns>The name of the template, if found; otherwise null.</returns>
</member>
<member name="M:Dynamicweb.Frontend.LayoutTemplateLocator.LayoutTemplateExists(System.String,System.String)">
 <summary>
 Determines whether specified layout template file exists on disk.
 </summary>
 <param name="path">Relative path to the layout template.</param>
 <param name="template">The name or path of the template to look for.</param>
 <returns>Value indicating whether specified layout template file exists on disk.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Frontend.PageLanguageViewModel">
 <summary>
 PageLanguageViewModel represents the rendering context used when a page language is rendered.
 </summary>
 <seealso cref="T:Dynamicweb.Rendering.ViewModelBase" />
</member>
<member name="M:Dynamicweb.Frontend.PageLanguageViewModel.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.PageLanguageViewModel" /> class.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.PageLanguageViewModel.ID">
 <summary>
 Gets or sets the identifier.
 </summary>
 <value>The identifier.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageLanguageViewModel.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageLanguageViewModel.Culture">
 <summary>
 Gets or sets the culture.
 </summary>
 <value>The culture.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageLanguageViewModel.PrimaryDomain">
 <summary>
 Gets or sets the primary domain.
 </summary>
 <value>The primary domain.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageLanguageViewModel.IsCurrent">
 <summary>
 Gets or sets a value indicating whether this instance is current.
 </summary>
 <value><c>true</c> if this instance is current; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageLanguageViewModel.IsMaster">
 <summary>
 Gets or sets a value indicating whether this instance is master.
 </summary>
 <value><c>true</c> if this instance is master; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageLanguageViewModel.Page">
 <summary>
 Gets or sets the page.
 </summary>
 <value>The page.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageLanguageViewModel.PageIsHidden">
 <summary>
 Gets or sets a value indicating whether [page is hidden].
 </summary>
 <value><c>true</c> if [page is hidden]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageLanguageViewModel.PageIsPublished">
 <summary>
 Gets or sets a value indicating whether [page is published].
 </summary>
 <value><c>true</c> if [page is published]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageLanguageViewModel.FirstPage">
 <summary>
 Gets or sets the first page.
 </summary>
 <value>The first page.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageLanguageViewModel.FirstActivePage">
 <summary>
 Gets or sets the first active page.
 </summary>
 <value>The first active page.</value>
</member>
<member name="M:Dynamicweb.Frontend.PageLanguageViewModel.CreateInstance(Dynamicweb.Content.Page,System.Boolean)">
 <summary>
 Creates the instance.
 </summary>
 <param name="page">The page.</param>
 <param name="isCurrent">if set to <c>true</c> [is current].</param>
 <returns>PageLanguageViewModel.</returns>
</member>
<member name="T:Dynamicweb.Frontend.PageReferenceViewModel">
 <summary>
 PageReferenceViewModel represents the rendering context used when a page reference is rendered.
 </summary>
 <seealso cref="T:Dynamicweb.Rendering.ViewModelBase" />
</member>
<member name="M:Dynamicweb.Frontend.PageReferenceViewModel.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.PageReferenceViewModel"/> class.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.PageReferenceViewModel.ID">
 <summary>
 Gets or sets the identifier.
 </summary>
 <value>The identifier.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageReferenceViewModel.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="M:Dynamicweb.Frontend.PageReferenceViewModel.CreateInstance(Dynamicweb.Content.Page)">
 <summary>
 Creates an instance of <see cref="T:Dynamicweb.Frontend.PageReferenceViewModel"/> .
 </summary>
 <param name="page">The page.</param>
 <returns>PageReferenceViewModel.</returns>
</member>
<member name="T:Dynamicweb.Frontend.PageViewModel">
 <summary>
 PageViewModel represents the rendering context used when a page is rendered.
 </summary>
 <seealso cref="T:Dynamicweb.Rendering.ViewModelBase" />
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.Area">
 <summary>
 Gets or sets the area.
 </summary>
 <value>The area.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.CreatedDate">
 <summary>
 Gets or sets the created date.
 </summary>
 <value>The created date.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.CurrentSecondaryUser">
 <summary>
 Gets or sets the current secondary user.
 </summary>
 <value>The current secondary user.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.CurrentUser">
 <summary>
 Gets or sets the current user.
 </summary>
 <value>The current user.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.Cart">
 <summary>
 Gets or sets the current cart.
 </summary>
 <value>The current cart.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.Content">
 <summary>
 Gets or sets the content as a dictionary of content placeholder ids (key) and its content html (the value).
 </summary>
 <value>The content as a IDictionary(Of String, String) where key is the placeholder id and value is the markup of the content placeholder.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.Description">
 <summary>
 Gets or sets the description.
 </summary>
 <value>The description.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.ID">
 <summary>
 Gets or sets the identifier.
 </summary>
 <value>The identifier.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.Item">
 <summary>
 Gets or sets the item.
 </summary>
 <value>The item.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.ItemId">
 <summary>
 Gets or sets the item identifier.
 </summary>
 <value>The item identifier.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.ItemType">
 <summary>
 Gets or sets the type of the item.
 </summary>
 <value>The type of the item.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.Keywords">
 <summary>
 Gets or sets the keywords.
 </summary>
 <value>The keywords.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.MetaTags">
 <summary>
 Gets or sets the meta tags.
 </summary>
 <value>The meta tags markup including canonical.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.Languages">
 <summary>
 Gets or sets the languages.
 </summary>
 <value>The languages.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.Path">
 <summary>
 Gets or sets the path.
 </summary>
 <value>The path.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.PropertyItem">
 <summary>
 Gets or sets the property item.
 </summary>
 <value>The property item.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.PropertyItemId">
 <summary>
 Gets or sets the property item identifier.
 </summary>
 <value>The property item identifier.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.PropertyItemType">
 <summary>
 Gets or sets the type of the property item.
 </summary>
 <value>The type of the property item.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.ShowUpdatedDate">
 <summary>
 Gets or sets a value indicating whether to show updated date.
 </summary>
 <value><c>true</c> if [show updated date]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.Title">
 <summary>
 Gets or sets the title.
 </summary>
 <value>The title.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.TopPage">
 <summary>
 Gets or sets the top page.
 </summary>
 <value>The top page.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.UpdatedDate">
 <summary>
 Gets or sets the updated date.
 </summary>
 <value>The updated date.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.SecondaryUsers">
 <summary>
 Gets or sets the secondary users.
 </summary>
 <value>The secondary users.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.LogOnFailed">
 <summary>
 Gets or sets log on failed state.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.PageViewModel.LogOnFailedReason">
 <summary>
 Gets or sets log on failed reason.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.PageViewModel.GetCookieWarningContent">
 <summary>
 Gets the content of the cookie warning.
 </summary>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Frontend.PageViewModel.Placeholder(System.String)">
 <summary>
 Placeholder for a content placed in a layout container.
 </summary>
 <param name="id">The id of the container.</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Frontend.PageViewModel.Placeholder(System.String,System.String)">
 <summary>
 Placeholder for a content placed in a layout container.
 </summary>
 <param name="id">The id of the container.</param>
 <param name="title">The title of the container.</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Frontend.PageViewModel.Placeholder(System.String,System.String,Dynamicweb.Frontend.PlaceholderSettings)">
 <summary>
 Placeholder for a content placed in a layout container.
 </summary>
 <param name="id">The id of the container.</param>
 <param name="title">The title of the container.</param>
 <param name="settings">A placeholder settings object.</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Frontend.PageViewModel.Placeholder(System.String,System.String,System.String)">
 <summary>
 Placeholder for a content placed in a layout container.
 </summary>
 <param name="id">The id of the container.</param>
 <param name="title">The title of the container.</param>
 <param name="settings">The settings for the container specified as a string of values separated by semicolon, e.g. "default:true;sort:1"</param>
 <remarks>
 </remarks>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Frontend.PageViewModel.CreateInstance(Dynamicweb.Frontend.PageView)">
 <summary>
 Creates an instance of <see cref="T:Dynamicweb.Frontend.PageViewModel"/> .
 </summary>
 <param name="pageView">The pageview instance to create the viewmodel from.</param>
 <returns>PageViewModel.</returns>
</member>
<member name="T:Dynamicweb.Frontend.VisitorSessionCookie">
 <summary>
 Represents a visitor's session cookie. This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Frontend.VisitorSessionCookie.VisitorSessionID">
 <summary>
 Gets the unique identifier of the visitor's session.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Frontend.VisitorSessionCookie.ProfileDynamics">
 <summary>
 Gets the visitor's profile dynamics.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Frontend.VisitorSessionCookie.Current">
 <summary>
 Gets the current visitor cookie.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.VisitorSessionCookie.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.VisitorSessionCookie.GetCookie">
 <summary>
 Returns the underlying HTTP cookie that contains visitor information.
 </summary>
 <returns>The underlying HTTP cookie.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.VisitorSessionCookie.UpdateCookie(System.Int32)">
 <summary>
 Updates the underlying HTTP cookie.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Frontend.DynamicwebHttpHandler">
 <summary>
 DynamicwebHttpHandler is the http handler that executes all frontend page views in Dynamicweb.
 </summary>
 <seealso cref="T:System.Web.IHttpHandler" />
 <seealso cref="T:System.Web.SessionState.IRequiresSessionState" />
</member>
<member name="P:Dynamicweb.Frontend.DynamicwebHttpHandler.IsReusable">
 <summary>
 Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.
 </summary>
 <value><c>true</c> if this instance is reusable; otherwise, <c>false</c>.</value>
</member>
<member name="M:Dynamicweb.Frontend.DynamicwebHttpHandler.ProcessRequest(System.Web.HttpContext)">
 <summary>
 Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.
 </summary>
 <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
</member>
<member name="T:Dynamicweb.Frontend.DynamicwebRouteHandler">
 <summary>
 DynamicwebRouteHandler handles routing of requests to Default.aspx and returns a <see cref="T:Dynamicweb.Frontend.DynamicwebHttpHandler"></see>.
 </summary>
 <seealso cref="T:System.Web.Routing.IRouteHandler" />
</member>
<member name="M:Dynamicweb.Frontend.DynamicwebRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
 <summary>
 Provides the object that processes the request.
 </summary>
 <param name="requestContext">An object that encapsulates information about the request.</param>
 <returns>An object that processes the request.</returns>
</member>
<member name="T:Dynamicweb.Frontend.ExperimentType">
 <summary>
 ExperimentType specifies the type of split test experiment is executed on a given page
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.ExperimentType.Page">
 <summary>
 Specifies that the experiment is a test of different pages
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.ExperimentType.Content">
 <summary>
 Specified that the experiment is a test of different content blocks
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.FrontendEditing">
 <summary>
 Represents frontend editing sensitive information.
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.FrontendEditing.FrontendEditingStates">
 <summary>
 The frontend editing states
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.FrontendEditing.FrontendEditingStates.Disabled">
 <summary>
 Frontend editing is OFF
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.FrontendEditing.FrontendEditingStates.Browse">
 <summary>
 Frontend editing is ON but page are readonly
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.FrontendEditing.FrontendEditingStates.Edit">
 <summary>
 Frontend editing is ON and page are editable on frontend
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.FrontendEditing.FrontendEditingState">
 <summary>
 Gets the current frontend editing state
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.Handler404.GenerateSitemap">
 <summary>
 Generates a xml document representing the sitemap nodes.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.Handler404.SendSitemap">
 <summary>
 Sends the sitemap with the nodes in the <see cref="M:Dynamicweb.Frontend.Handler404.GenerateSitemap">document</see>.
 </summary>
 <remarks>Parsed using /Files/System/SEOSitemap.xslt if present, otherwise /Admin/Public/SEOSitemap.xslt</remarks>
</member>
<member name="T:Dynamicweb.Frontend.PageViewContext">
 <summary>
 Object for pageview context sensitive information.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.PageViewContext.SetValue(System.String,System.Object)">
 <summary>
 Sets the value of an entry in the context.
 </summary>
 <param name="key">The key to store the value in.</param>
 <param name="value">The value to be stored.</param>
 <remarks>If the passed key already exists, it is overriden with the new value</remarks>
</member>
<member name="M:Dynamicweb.Frontend.PageViewContext.GetValue(System.String)">
 <summary>
 Gets the value of the specified key in the context.
 </summary>
 <param name="key">The key to return the value for.</param>
 <returns>The value stored on the key. Nothing if the key does not exist</returns>
</member>
<member name="T:Dynamicweb.Frontend.PageViewIsolation">
 <summary>
 PageViewIsolation isolates PageView.Current to the Page with the ID given in the Constructor.
 The PageView is isolated for as long as this object has not been disposed.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.PageViewIsolation.CurrentCacheKey">
 <summary>
 Gets the current cache key for PageView.Current.
 </summary>
 <value>
 The current cache key.
 </value>
</member>
<member name="M:Dynamicweb.Frontend.PageViewIsolation.#ctor(System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.PageViewIsolation"/> class.
 This isolated PageView.Current to the page with the given ID.
 REMEMBER TO DISPOSE OR ISOLATION WILL NOT BE RELEASED!
 </summary>
 <param name="pageId">The ID of the Page to isolate PageView.Current to.</param>
</member>
<member name="M:Dynamicweb.Frontend.PageViewIsolation.#ctor(System.Int32,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.PageViewIsolation"/> class.
 This isolated PageView.Current to the page with the given ID.
 REMEMBER TO DISPOSE OR ISOLATION WILL NOT BE RELEASED!
 </summary>
 <param name="pageId">The ID of the Page to isolate PageView.Current to.</param>
 <param name="lock">Retrieved <see cref="T:Dynamicweb.Frontend.PageView">PageView</see> object is locked from changing the global eCommerce variables.</param>
</member>
<member name="M:Dynamicweb.Frontend.PageViewIsolation.IncreaseIsolationCount">
 <summary>
 Increases the isolation count.
 ONLY CALL FROM CONSTRUCTOR
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.PageViewIsolation.DecreateIsolationCount">
 <summary>
 Decreates the isolation count.
 ONLY CALL FROM DISPOSE()
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.PageViewMacro">
 <summary>
 PageViewMacro implements macros used for getting Pageview specific context values for use in i.e. indexing.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Macros.Macro" />
</member>
<member name="M:Dynamicweb.Frontend.PageViewMacro.Evaluate(System.String)">
 <summary>
 Evaluates the specified action.
 </summary>
 <param name="action">The action as a string.</param>
 <returns>System.Object.</returns>
</member>
<member name="P:Dynamicweb.Frontend.PageViewMacro.Name">
 <summary>
 Gets the name of the Macro.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageViewMacro.SupportedActions">
 <summary>
 Gets the supported actions.
 </summary>
 <value>The supported actions.</value>
</member>
<member name="T:Dynamicweb.Frontend.ParagraphViewModel">
 <summary>
 ParagraphViewModel represents the rendering context used when a paragraph is rendered.
 </summary>
 <seealso cref="T:Dynamicweb.Rendering.ViewModelBase" />
 <remarks>Contains rendering context information of the rendering <see cref="T:Dynamicweb.Content.Paragraph" /></remarks>
</member>
<member name="M:Dynamicweb.Frontend.ParagraphViewModel.#ctor(System.Func{System.String})">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.ParagraphViewModel" /> class.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.Container">
 <summary>
 Gets or sets the layout container this paragraph should be rendered to. The paragraph container is defined in the layout template.
 </summary>
 <value>The name of the container.</value>
 <remarks>If the container does not exist in the layout currently being rendered, the paragraph is rendered to the default placeholder</remarks>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ContainerCount">
 <summary>
 Gets the number of paragraphs being rendered in the current container.
 </summary>
 <value>A number indicating how many paragraphs are rendered in the container</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ContainerSettings">
 <summary>
 Gets or sets the container settings.
 </summary>
 <value>The container settings.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ContainerSort">
 <summary>
 Gets or sets the content placeholder sort value of the paragraph being rendered .
 </summary>
 <value>A number starting from 1 that represents this paragraphs sort in the current content placeholder</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.GlobalID">
 <summary>
 Gets the global id. If GlobalID is > 0 it means that this paragraph instance is a shortcut to another paragraph and that will be rendered instead.
 </summary>
 <value>The global id.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.Header">
 <summary>
 Gets the header (name) of the paragraph.
 </summary>
 <value>The header or name.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ID">
 <summary>
 Gets the paragraph id.
 </summary>
 <value>The paragraph id.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.Image">
 <summary>
 Gets the path to the image selected or linked on the paragraph.
 </summary>
 <value>The path to the image, i.e. /Files/Images/Image.jpg or http://domain.com/image.jpg. </value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ImageAlt">
 <summary>
 Gets the alt-text of the image.
 </summary>
 <value>The alternate image text.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ImageCaption">
 <summary>
 Gets the image caption.
 </summary>
 <value>The image caption.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ImageHAlign">
 <summary>
 Gets the image horisontal align.
 </summary>
 <value>The image horisontal align.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ImageHeight">
 <summary>
 Gets the height of the image in pixels.
 </summary>
 <value>The height of the image. Returns 0 if no image is set.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ImageLink">
 <summary>
 Gets the link on the image.
 </summary>
 <value>The image link.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ImageLinkTarget">
 <summary>
 Gets the image link target.
 </summary>
 <value>The image link target.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ImagePath">
 <summary>
 Gets or sets the relative image path.
 </summary>
 <value>The absolute image path i.e. c:/website/Files/Images/View.jpg.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ImageVAlign">
 <summary>
 Gets the image vertical align.
 </summary>
 <value>The image vertical align.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ImageWidth">
 <summary>
 Gets the width of the image in pixels.
 </summary>
 <value>The width of the image. Returns 0 if no image is set.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.IsFrontendEditEnabled">
 <summary>
 Gets or sets a value indicating whether the frontend is being rendered in edit state.
 </summary>
 <value><c>true</c> if frontend editing is enabled, otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.Item">
 <summary>
 Gets or sets the item.
 </summary>
 <value>The item.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ItemId">
 <summary>
 Gets the id of the related item record.
 </summary>
 <value>The item id. Returns string.empty if the paragraphs is not an item</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ItemType">
 <summary>
 Gets the itemtype of the paragraph.
 </summary>
 <value>The item systemname. Returns string.empty if the paragraphs is not an item</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ModuleSystemName">
 <summary>
 Gets or sets the name of the module system name attached to the paragraph.
 </summary>
 <value>The systemname of the module.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.PageID">
 <summary>
 Gets the page id.
 </summary>
 <value>The page id of the page the paragraph belongs to.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.Template">
 <summary>
 Gets the paragraph template used for rendering.
 </summary>
 <value>The name of the template.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.Text">
 <summary>
 Gets the text.
 </summary>
 <value>The text.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.IsGrid">
 <summary>
 Gets or sets a value indicating whether this instance is being rendered in a grid.
 </summary>
 <value><c>true</c> if this instance is being rendered in a grid; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.Grid">
 <summary>
 Gets or sets the grid settings if the current paragraph is being rendered in a grid.
 </summary>
 <value>The grid, <code>null</code> if not being rendered in a grid.</value>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ColumnsLarge">
 <summary>
 Get the number of columns which defines the width of the paragraph for large devices
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ColumnsMedium">
 <summary>
 Get the number of columns which defines the width of the paragraph for medium devices
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ColumnsSmall">
 <summary>
 Get the number of columns which defines the width of the paragraph for small devices
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ColumnsClassLarge">
 <summary>
 Get the class string which defines the paragraph in the grid for large devices
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ColumnsClassMedium">
 <summary>
 Get the class string which defines the paragraph in the grid for medium devices
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.ColumnsClassSmall">
 <summary>
 Get the class string which defines the paragraph in the grid for small devices
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.SwitchRowAfterCurrentParagraph">
 <summary>
 Indicates if the grid will switch row after this paragraph is added 
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.SwitchRowAfterNextParagraph">
 <summary>
 Indicates if the grid will switch row after the next paragraph is added 
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.IsLastParagraph">
 <summary>
 Indicates the current paragraph is the last in the list
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Frontend.ParagraphViewModel.IsNewGridRow">
 <summary>
 Indicates the current paragraph is the first in a new row in the grid
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.ParagraphViewModel.GetModuleOutput">
 <summary>
 Gets the module output of this paragraph if a module is attached. An instance of <see cref="T:Dynamicweb.Modules.ContentModule"/> is created matching the name of the <see cref="P:Dynamicweb.Frontend.ParagraphViewModel.ModuleSystemName"/> on the name of the <see cref="T:Dynamicweb.Extensibility.AddIns.AddInNameAttribute"/> on the class.
 </summary>
 <returns>A string of html containing the rendering of the module. If no module is attached (<see cref="P:Dynamicweb.Frontend.ParagraphViewModel.ModuleSystemName"/> is null) then an empty string is returned</returns>
 <remarks>This method only executes the module once. If it is called more than once for each instance of a <see cref="T:Dynamicweb.Frontend.ParagraphViewModel"/>, the result of the first call is returned.</remarks>
</member>
<member name="M:Dynamicweb.Frontend.ParagraphViewModel.CreateInstance(Dynamicweb.Content.Paragraph,Dynamicweb.Frontend.ContainerInfo,Dynamicweb.Frontend.PageView)">
 <summary>
 Creates an instance of <see cref="T:Dynamicweb.Frontend.ParagraphViewModel"/>.
 </summary>
 <param name="paragraph">The paragraph.</param>
 <param name="containerInfo">The container information.</param>
 <returns>ParagraphViewModel.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ParagraphViewModel.GetColumns(System.Int32,System.Int32)">
 <summary>
 If the paragraph has the column size set, use that, otherwise return the default column size of the grid
 </summary>
 <param name="pargraphColumns">The paragraph columns.</param>
 <param name="defaultColumns">The default grid columns.</param>
 <returns>System.Int32.</returns>
</member>
<member name="M:Dynamicweb.Frontend.ParagraphViewModel.SetImageDimensions">
 <summary>
 Sets the image dimensions.
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.Renderer">
 <summary>
 Class Renderer that renders Areas, page and paragraphs. This class cannot be inherited.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.Renderer.RenderPageTemplateExtenders(Dynamicweb.Rendering.Template)">
 <summary>
 Extends a Page template with TemplateExtenders
 </summary>
 <param name="Template">The template rendering the Page</param>
</member>
<member name="T:Dynamicweb.Frontend.UrlProviders.ItemTypeProvider">
 <summary>
 Item types provider.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Frontend.UrlProviders.Handler">
 <summary>
 Handles url parameters. Called internally by Dynamicweb.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.Handler.LockIndex">
 <summary>
 Gets or sets a value indicating whether to lock the index.
 Setting this property to <c>true</c> will force the current Index to remain.
 This property is useful when performing an import or other demanding API task.
 </summary>
 <value>
   <c>true</c> if the Index should be locked; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.Handler.Index">
 <summary>
 Gets the module url index - keys are the url part, values are the querystring parameters.
 </summary>
 <value>The index.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.Handler.ParameterIndex">
 <summary>
 Gets the module url index based on parameters - keys are the querystring part, values are the url part.
 </summary>
 <value>The index of the parameter.</value>
 <remarks>The querystring parameter part of the keys are in lower case</remarks>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.Handler.Initialize">
 <summary>
 Initializes the module urls - executed on application start up.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.Handler.Reset">
 <summary>
 Resets all the module urls and reloads the mappings from the providers.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.Handler.Reset(System.String)">
 <summary>
 Resets the urls for the specified parameter name and reloads the mappings from the provider associated to the parameter name.
 </summary>
 <param name="parameterName">Name of the parameter, i.e. GroupID.</param>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.Handler.GetUrls">
 <summary>
 Gets the urls from all the active providers.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.Handler.GetUrlFromQueryString(System.String,System.String)">
 <summary>
 Gets the URL based on the querystring.
 </summary>
 <param name="queryStringParameter">The querystring parameter, ProdID in &amp;ProdID=Prod123.</param>
 <param name="parameterValue">The parameter value, Prod123 in &amp;ProdID=Prod123.</param>
 <returns>The name for use in URL - i.e. "/Product-one.aspx"</returns>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.Handler.GetUrlFromQueryString(System.String,System.String,System.String)">
 <summary>
 Gets the URL based on the querystring.
 </summary>
 <param name="queryStringParameter">The querystring parameter, ProdID in &amp;ProdID=Prod123.</param>
 <param name="parameterValue">The parameter value, Prod123 in &amp;ProdID=Prod123.</param>
 <param name="alternateKey">The alternate key.</param>
 <returns>The name for use in URL - i.e. "/Product-one.aspx"</returns>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.Handler.SetUrl(System.String,System.String,System.String)">
 <summary>
 Sets the URL and returns the name. Will handle formating etc.
 </summary>
 <param name="name">The name without any formatting - simply the name of the module item, i.e. 'Product one'.</param>
 <param name="queryStringPart">The query string part. I.e. '&amp;ProdID=1' or '&amp;NewsID=1'.</param>
 <returns>The name for use in URL - i.e. "/Product-one.aspx"</returns>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.Handler.HandleModuleUrl(System.String@,System.String@,System.String)">
 <summary>
 Handles the module URLs.
 </summary>
 <param name="url">The URL.</param>
 <param name="querystring">The querystring.</param>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.Handler.GetProviders">
 <summary>
 Gets a list of url providers.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.Handler.GetActivatedProviders">
 <summary>
 Gets the active providers based on management center settings.
 </summary>
 <returns>List(Of String) of full name of the active add-ins</returns>
</member>
<member name="T:Dynamicweb.Frontend.UrlProviders.Item">
 <summary>
 A url provider item used when creating tree structured navigation providers
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.Item.ID">
 <summary>
 Gets or sets the ID.
 </summary>
 <value>The ID.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.Item.VariantID">
 <summary>
 Gets or sets the variant ID.
 </summary>
 <value>The variant ID.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.Item.ParentID">
 <summary>
 Gets or sets the parent ID.
 </summary>
 <value>The parent ID.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.Item.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.Item.LangID">
 <summary>
 Gets or sets the language ID.
 </summary>
 <value>The lang ID.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.Item.IgnoreParent">
 <summary>
 Gets or sets a value indicating whether the parent item should be ignored when creating paths of urls.
 </summary>
 <value><c>true</c> if parent should be ignored; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.Item.IsProduct">
 <summary>
 Gets or sets a value indicating whether this instance is product.
 </summary>
 <value>
 <c>true</c> if this instance is a product; otherwise, <c>false</c>.
 </value>
 <remarks>Set to <c>true</c> to handle some eCommerce specifics regarding the name of the url.</remarks>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.Item.UrlName">
 <summary>
 Gets or sets the name of the URL.
 </summary>
 <value>The name of the URL.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.Item.Children">
 <summary>
 Gets the child items.
 </summary>
 <value>The children.</value>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.Item.GetUrlName">
 <summary>
 Gets the name of the URL - UrlName if specified, otherwise the name.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.Item.GetUrlName(System.Boolean)">
 <summary>
 Gets the name of the URL - UrlName if specified, otherwise the name.
 </summary>
 <param name="includeProductIdInUrlName">Boolean indicating whether to include the ProductID in the URL name.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Frontend.UrlProviders.ItemIndex">
 <summary>
 Index for items when generating tree structured URL providers
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.ItemIndex.Index">
 <summary>
 Gets the index.
 </summary>
 <value>The index.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.ItemIndex.Root">
 <summary>
 Gets the virtual root item.
 </summary>
 <value>The root.</value>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.ItemIndex.Add(Dynamicweb.Frontend.UrlProviders.Item)">
 <summary>
 Adds the specified item.
 </summary>
 <param name="item">The item.</param>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.ItemIndex.MakeTree">
 <summary>
 Makes the tree after all items are loaded in the index
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.UrlProviders.LatinNormalization">
 <summary>
 A supplemental class for manipulating and normalizing
 Unicode strings.
 </summary>3
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.LatinNormalization.LatinToAscii(System.String)">
 <summary>
 Strips diacritics from a Latin-character
 Unicode string. Leaves non-Latin characters as they
 were.
 </summary>
 <param name="inString">A Unicode string.</param>
 <returns>ASCII-range characters, plus any non-Latin characters in the string</returns>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.LatinNormalization.ToUnicodeCharacter(System.String)">
 <summary>
 Takes a hexadecimal string and converts it to a 
 Unicode character
 </summary>
 <param name="hex">A four-digit number in hex notation (eg, 00E7).</param>
 <returns>A unicode character, as string.</returns>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.LatinNormalization.InitializeCharacterTable">
 <summary>
 Stores Unicode characters and their "normalized"
 values to a hash table. Character codes are referenced
 by hex numbers because that's the most common way to
 refer to them.
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.UrlProviders.Mapping">
 <summary>
 Mapping object for url handling. Use in a <see cref="T:Dynamicweb.Frontend.UrlProviders.UrlProvider"></see>.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.Mapping.QueryStringParameterName">
 <summary>
 Gets or sets the querystring parameter, i.e. "ProductID" in &amp;ProductID=123.
 </summary>
 <value>The querystring parameter.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.Mapping.ParameterValue">
 <summary>
 Gets or sets the parameter value, i.e. "123" in &amp;ProductID=123.
 </summary>
 <value>The parameter value.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.Mapping.ParameterValueHtmlEncoded">
 <summary>
 Gets the parameter value HTML encoded.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.Mapping.UrlName">
 <summary>
 Gets or sets the name of the URL, i.e. "MyProduct" in /MyProduct.aspx.
 </summary>
 <value>The name of the URL.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.Mapping.AlternateKey">
 <summary>
 Gets or sets the alternate key, i.e. "Lang1" in if the added item is language handled.
 </summary>
 <value>The alternate key.</value>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.Mapping.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.UrlProviders.Mapping" /> class.
 </summary>
 <param name="querystringParameter">The querystring parameter.</param>
 <param name="parameterValue">The parameter value.</param>
 <param name="urlName">Name of the URL.</param>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.Mapping.#ctor(System.String,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.UrlProviders.Mapping" /> class.
 </summary>
 <param name="querystringParameter">The querystring parameter.</param>
 <param name="parameterValue">The parameter value.</param>
 <param name="urlName">Name of the URL.</param>
 <param name="alternateKey">The alternate key. Not implmented yet.</param>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.Mapping.Init(System.String,System.String,System.String,System.String)">
 <summary>
 Initializes the current mapping.
 </summary>
 <param name="qp">The qp.</param>
 <param name="pv">The pv.</param>
 <param name="un">The un.</param>
 <param name="ak">The ak.</param>
</member>
<member name="T:Dynamicweb.Frontend.UrlProviders.NewsItemProvider">
 <summary>
 News item provider
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.NewsItemProvider.GetMappings">
 <summary>
 Gets the mappings of NewdIDs and their URL names.
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Frontend.UrlProviders.UrlProvider">
 <summary>
 Provider for seo friendly url querystring parameters. Inherit this class to create a provider and implement the GetMappings method.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.UrlProvider.GetMappings">
 <summary>
 Override this member to return a list of <see cref="T:Dynamicweb.Frontend.UrlProviders.Mapping"></see> containing the URL mappings.
 </summary><returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.UrlProviders.UrlProvider.CompareTo(Dynamicweb.Frontend.UrlProviders.UrlProvider)">
 <summary>
 Comparer used to sort the navigation provider add ins.
 </summary>
 <param name="other">The other navigation provider.</param>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.UrlProvider.Active">
 <summary>
 Gets a value indicating whether this <see cref="T:Dynamicweb.Frontend.UrlProviders.UrlProvider" /> is active.
 </summary>
 <remarks>Set using the <see cref="T:Dynamicweb.Extensibility.AddIns.AddInActiveAttribute"></see> on the <see cref="T:Dynamicweb.Frontend.UrlProviders.UrlProvider"></see>. See <see cref="T:Dynamicweb.Frontend.UrlProviders.UrlProvider"></see> for an example.</remarks>
 <value><c>true</c> if active; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.UrlProvider.Name">
 <summary>
 Gets the name.
 </summary>
 <remarks>Set using the <see cref="T:Dynamicweb.Extensibility.AddIns.AddInNameAttribute"></see> on the <see cref="T:Dynamicweb.Frontend.UrlProviders.UrlProvider"></see>. See <see cref="T:Dynamicweb.Frontend.UrlProviders.UrlProvider"></see> for an example.</remarks>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.UrlProvider.Description">
 <summary>
 Gets the description of the provider.
 </summary>
 <remarks>Set using the <see cref="T:Dynamicweb.Extensibility.AddIns.AddInDescriptionAttribute"></see> on the <see cref="T:Dynamicweb.Frontend.UrlProviders.UrlProvider"></see>. See <see cref="T:Dynamicweb.Frontend.UrlProviders.UrlProvider"></see> for an example.</remarks>
 <value>The description.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.UrlProvider.Targets">
 <summary>
 Gets the targets - the module system names for this instance.
 </summary>
 <remarks>Set using the <see cref="T:Dynamicweb.Extensibility.AddIns.AddInTargetAttribute"></see> on the <see cref="T:Dynamicweb.Frontend.UrlProviders.UrlProvider"></see>. See <see cref="T:Dynamicweb.Frontend.UrlProviders.UrlProvider"></see> for an example.</remarks>
 <value>The description.</value>
</member>
<member name="P:Dynamicweb.Frontend.UrlProviders.UrlProvider.GroupName">
 <summary>
 Gets the group of the provider used in the UI to group the different providers.
 </summary>
 <remarks>Set using the <see cref="T:Dynamicweb.Extensibility.AddIns.AddInGroupAttribute"></see> on the <see cref="T:Dynamicweb.Frontend.UrlProviders.UrlProvider"></see>. See <see cref="T:Dynamicweb.Frontend.UrlProviders.UrlProvider"></see> for an example.</remarks>
 <value>The group name, i.e. eCommerce, News. Would usually be the friendly name of the module.</value>
</member>
<member name="T:Dynamicweb.Frontend.NamespaceDoc">
 <summary>
 The Dynamicweb.Frontend namespace contains the frontend runtime of Dynamicweb serving pages thorugh <see cref="T:Dynamicweb.Frontend.PageView"/>. URL and Navigation handling is also handled in the namespace.
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.PreloadClient">
 <summary>
 Auto-start feature implementation.
 Order to preload ASP.NET application that is running on IIS
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Frontend.PreloadClient._IsPreloadRun">
 <summary>
 Indicates that was running an application
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Frontend.PreloadClient.IsPreloadRun">
 <summary>
 Indicates that was running an application
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.PreloadClient.Preload(System.String[])">
 <summary>
 Provides initialization data that is required in order to preload the application
 </summary>
 <param name="parameters">Data to initialize the application. This parameter can be null or an empty array</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Frontend.DirectPath.SortBy">
 <summary>
 Defines the sort field
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.DirectPath.SortBy.Path">
 <summary>
 The name of the path
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.DirectPath.SortBy.Redirect">
 <summary>
 The redirect value
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.DirectPath.SortBy.Active">
 <summary>
 The active state
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.DirectPath.SortBy.Status">
 <summary>
 The http response status
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.DirectPath.SortBy.AreaID">
 <summary>
 The area name
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.DirectPath.SortBy.VisitsCount">
 <summary>
 Count of visits of the path
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.DirectPath.SortDirection">
 <summary>
 Defines the sort direction of paths
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.DirectPath.SortDirection.ASC">
 <summary>
 Sorts ascending
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.DirectPath.SortDirection.DESC">
 <summary>
 Sorts descending
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.DirectPath.Path">
 <summary>
 Defines a virtual path mapping. I.e. /Contact -> /Default.aspx?ID=123
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.DirectPath.Path.ID">
 <summary>
 Gets or sets the ID.
 </summary>
 <value>The ID.</value>
</member>
<member name="P:Dynamicweb.Frontend.DirectPath.Path.Path">
 <summary>
 Gets or sets the path. I.e. "Contact"
 </summary>
 <value>The path.</value>
</member>
<member name="P:Dynamicweb.Frontend.DirectPath.Path.PathPhysicallyExists">
 <summary>
 Gets a value indicating whether path physically exists.
 </summary>
 <value>
 <c>true</c> if path physically exists; otherwise, <c>false</c>.
 </value>
 <remarks>Checks if the path exists on the file system</remarks>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.PhysicallyExists(System.String)">
 <summary>
 Gets a value indicating whether path physically exists.
 </summary>
 <param name="path">The path</param>
 <returns>
 <c>true</c> if path physically exists; otherwise, <c>false</c>.
 </returns>
 <remarks>Checks if the path exists on the file system</remarks>		
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.PathExists(System.String)">
 <summary>
 Gets a value indicating whether path exists in database.
 </summary>
 <param name="path">The path.</param>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Frontend.DirectPath.Path.Redirect">
 <summary>
 Gets or sets the redirect. I.e. Default.aspx?ID=123
 </summary>
 <value>The redirect.</value>
</member>
<member name="P:Dynamicweb.Frontend.DirectPath.Path.Status">
 <summary>
 Gets or sets the http response status code.
 </summary>
 <value>The status.</value>
 <remarks>200, 301 or 302</remarks>
</member>
<member name="P:Dynamicweb.Frontend.DirectPath.Path.Created">
 <summary>
 Gets or sets the created time.
 </summary>
 <value>The created time.</value>
</member>
<member name="P:Dynamicweb.Frontend.DirectPath.Path.Updated">
 <summary>
 Gets or sets the updated time.
 </summary>
 <value>The updated time.</value>
</member>
<member name="P:Dynamicweb.Frontend.DirectPath.Path.Active">
 <summary>
 Gets or sets a value indicating whether this <see cref="P:Dynamicweb.Frontend.DirectPath.Path.Path" /> is active.
 </summary>
 <value><c>true</c> if active; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.DirectPath.Path.AreaID">
 <summary>
 Gets or sets an ID of the language are that this path is defined for.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Frontend.DirectPath.Path.VisitsCount">
 <summary>
 Returnt count of visits of curernt path
 </summary>
 <returns>Integer count of path visits</returns>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.#ctor">
 <summary>
 Initializes a new instance of the <see cref="P:Dynamicweb.Frontend.DirectPath.Path.Path" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.#ctor(System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="P:Dynamicweb.Frontend.DirectPath.Path.Path" /> class.
 </summary>
 <param name="id">The id of the paht mapping.</param>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.Save">
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.Fill(System.String)">
 <summary>
 Fills the path object with data from the specified SQL.
 </summary>
 <param name="sql">The SQL.</param>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.Fill(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Fills the path object with data using the specified command builder.
 </summary>
 <param name="commandBuilder">The command builder.</param>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.Load(System.Data.IDataReader)">
 <summary>
 Fills the path object with data from the specified datareader.
 </summary>
 <param name="data">The datareader.</param>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.SetActiveState(System.Int32,System.Boolean)">
 <summary>
 Sets the active state of the instance.
 </summary>
 <param name="id">The id.</param>
 <param name="state">if set to <c>true</c> active.</param>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.SetActiveState(System.Int32[],System.Boolean)">
 <summary>
 Switches items specified by array of their IDs active/inactive state.
 </summary>
 <param name="ids">Item IDs to process.</param>
 <param name="state">Value indicating whether items are active.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.IncrementVisitsCount">
 <summary>
 Increments visit counts of path by 1
 </summary>
 <remarks>If field value is NULL it will be set to 1</remarks>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.Delete(System.Int32)">
 <summary>
 Deletes the path with the specified id.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.Delete(System.Int32[])">
 <summary>
 Deletes items specified by array of their IDs.
 </summary>
 <param name="ids">Item IDs to delete.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.SetStatus(System.Int32[],System.Int32)">
 <summary>
 Updates status for all items specified by array of their IDs.
 </summary>
 <param name="ids">Item IDs to process.</param>
 <param name="status">Desired HTTP status.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.GetAllPaths">
 <summary>
 Gets all paths.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.GetPathsByPath">
 <summary>
 Gets all paths ordered by the path.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.GetPathsByPath(Dynamicweb.Frontend.DirectPath.SortBy,Dynamicweb.Frontend.DirectPath.SortDirection)">
 <summary>
 Retrieves top 1000 paths.
 </summary>
 <param name="sortBy">The field to sort items by.</param>
 <param name="sortDirection">Direction of sorting.</param>
 <returns>Top 1000 paths.</returns>
 <remarks>
 </remarks>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.GetPathsByArea(System.Int32)">
 <summary>
 Retrieves top 1000 paths defined for a given area.
 </summary>
 <param name="areaID">An ID of the area to filter results by.</param>
 <returns>Matched items or empty collection if nothing found.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.GetItemsBySql(System.String)">
 <summary>
 Gets the paths by SQL.
 </summary>
 <param name="sql">The SQL.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.GetPaths(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Gets the paths.
 </summary>
 <param name="commandBuilder">The command builder.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.GetPathByUrl(System.String)">
 <summary>
 Gets the path by URL.
 </summary>
 <param name="urlPath">The URL path.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.GetPathsByUrl(System.String)">
 <summary>
 Gets the paths by URL.
 </summary>
 <param name="urlPath">The URL path.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.GetPathByLength(System.String)">
 <summary>
 Gets the path by the length of the path - failover.
 </summary>
 <param name="urlPath">The URL path.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.GetPathsByPage(System.Int32)">
 <summary>
 Gets the paths by page.
 </summary>
 <param name="pageId">The page ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.DirectPath.Path.GetPathById(System.Int32)">
 <summary>
 Gets the path by ID.
 </summary>
 <param name="id">The path ID.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Frontend.DirectPath.PathCollection">
 <summary>
 A collection of paths.
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.LoginHandler">
 <summary>
 This class contains functions to handle with security.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.LoginHandler.PagePassword">
 <summary>
 Gets or sets the page password.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.ExtranetStart(System.Int32)">
 <summary>
 Starts extranet procedure. 
 </summary>
 <param name="pageId"></param>
 <returns>Empty string.</returns>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.IsCurrentUserAllowed(Dynamicweb.Content.Page)">
 <summary>
 Determines whether the current user have access to the specified <see cref="T:Dynamicweb.Content.Page">page</see>.
 </summary>
 <param name="page">The page.</param>
 <returns>
 <c>true</c> if current user have access to the specified <see cref="T:Dynamicweb.Content.Page">page</see>; otherwise, <c>false</c>. 
 <c>false</c> if <see cref="T:Dynamicweb.Content.Page">page</see> is null.
 <c>false</c> if user is not logged in and <see cref="T:Dynamicweb.Content.Page">page</see> has permissions set.
 <c>true</c> if user is not logged in and <see cref="T:Dynamicweb.Content.Page">page</see> has no permissions set.
 </returns>
 <example>
 <code description="How to check for permissions" lang="VB">
 If Security.IsCurrentUserAllowed(page) Then
 'Current user have acccess
 End If
 </code>
 </example>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.LogOnWithExternalAuthentication(Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult)">
 <summary>
 Grant access with external account
 </summary>
 <param name="loginResult">The result of external authentication</param>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.LogOnWithExternalAuthentication(Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult,System.Boolean)">
 <summary>
 Grant access with external account
 </summary>
 <param name="loginResult">The result of external authentication</param>
 <param name="isADLogin">True if login is from Active Directory, otherwise False.</param>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.LogOnWithExternalAuthentication(Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult,System.Boolean,System.Int32)">
 <summary>
 Grant access with external account
 </summary>
 <param name="logOnResult">The result of external authentication</param>
 <param name="isADLogin">True if login is from Active Directory, otherwise False.</param>
 <param name="pageId">The page where the login is performed</param>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.ExtranetLogin(System.String,System.String)">
 <summary>
 Logs in a user to the frontend extranet module
 </summary>
 <param name="username">The username.</param>
 <param name="password">The password.</param>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.ExtranetLogOn(System.String,System.String)">
 <summary>
 Logs in a user to the frontend extranet module
 </summary>
 <param name="username">The username.</param>
 <param name="password">The password.</param>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.ExtranetLogin(System.String,System.String,System.Boolean)">
 <summary>
 Logs in a user to the frontend extranet module
 </summary>
 <param name="username">The username.</param>
 <param name="password">The password.</param>
 <param name="onlyActive">if set to <c>true</c> only active users are logged in.</param>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.ExtranetLogOn(System.String,System.String,System.Boolean)">
 <summary>
 Logs in a user to the frontend extranet module
 </summary>
 <param name="username">The username.</param>
 <param name="password">The password.</param>
 <param name="onlyActive">if set to <c>true</c> only active users are logged in.</param>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.CheckPasswordComplexity(System.String,System.Int32,System.String@,System.Int32@,System.Boolean,System.Boolean)">
 <summary>
 Checks the password complexity.
 </summary>
 <param name="password">The password.</param>
 <param name="id">The id.</param>
 <param name="errorMessage">The error message.</param>
 <param name="passwordErrorCode">The password error code.</param>
 <param name="forceReuseCheck">if set to <c>true</c> force check of password reuse.</param>
 <param name="isBackendCheck">if set to <c>true</c> force chaeck by backend rules.</param>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.ExtranetLoginPrompt">
 <summary>
 Runs promt extranet login.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.ExtranetLogOnPrompt">
 <summary>
 Runs promt extranet login.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.SetExtranetLoginTags(Dynamicweb.Rendering.Template)">
 <summary>
 Sets the login template tags.
 </summary>
 <param name="extranetLogOnPromptTemplate">The extranet login prompt template.</param>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.SetExtranetLogOnTags(Dynamicweb.Rendering.Template)">
 <summary>
 Sets the login template tags.
 </summary>
 <param name="extranetLogOnPromptTemplate">The extranet login prompt template.</param>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.SaveCookie">
 <summary>
 Saves cookie.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.IsPageProtect(Dynamicweb.Content.Page)">
 <summary>
 Determins whether page is protected.
 </summary>
 <param name="page"></param>
 <returns>Boolean statement.</returns>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.ForgotUserPassword(Dynamicweb.Security.UserManagement.User,System.Boolean,System.String,System.String)">
 <summary>
 Starts "ForgotPassword" procedure, and sends email message to the user.
 </summary>
 <param name="user">The user.</param>
 <param name="generateNewPassword">if set to <c>false</c> old password will send to user is it possible. if set to <c>true</c> and <paramref name="newPassword">newPwd</paramref> not null\empty then <paramref name="newPassword">newPwd</paramref> will used like password else generate new password.</param>
 <param name="newPassword">The new password.</param>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.ExtranetLogoff">
 <summary>
 Logs off the current extranet user.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.ExtranetLogoff(System.Boolean)">
 <summary>
 Logs off the current extranet user with or without a redirect.
 </summary>
 <param name="redirect"></param>
 <remarks>When false: Avoid redirect upon logoff and maintain all session variables (you may want to apply Session.Abondon() yourself). When true: works like the ordinary Logoff().</remarks>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.Logoff">
 <summary>
 Logs off the current extranet user.
 </summary>
 <remarks>Call /Admin/Public/ExtranetLogoff.aspx?ID=123 to logoff users with a link and return them to page with ID.</remarks>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.Logoff(System.Boolean)">
 <summary>
 Extranet logoff.
 </summary>
 <param name="redirect"></param>
 <remarks>With Redirect set to False there will be no redirect and all session settings are kept after logoff (you may want to Session.Abandon()). Set to True it works like ordinary Logoff()</remarks>
</member>
<member name="P:Dynamicweb.Frontend.LoginHandler.UserLoggedIn">
 <summary>
 Determines whether current user logged in.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.LoginHandler.Username">
 <summary>
 Stores and retrieves extranet user access name value.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.HasAccessToFile(System.String)">
 <summary>
 Determines whether the current file can be accessed.
 </summary>
 <param name="filePath">Fully qualified path to file</param>
 <returns>Boolean statment.</returns>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.GetChecksum">
 <summary>
 Gets the installation checksum.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.SetExtranetLoginErrorTags">
 <summary>
 Sets the ExtranetLogin error tags to FrontPage with Login Box
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.SetExtranetLogOnErrorTags">
 <summary>
 Sets the ExtranetLogin error tags to FrontPage with Login Box
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.ChangePassword(System.Int32,System.String,System.String,System.Boolean)">
 <summary>
 Changes the password of the specified user ID.
 </summary>
 <param name="userId">The user identifier.</param>
 <param name="oldPassword">The old password.</param>
 <param name="newPassword">The new password.</param>
 <param name="encryptPassword">if set to <c>true</c> [encrypt password].</param>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.GetAccessElementsForUser(System.String,System.String,System.String)">
 <summary>
 Returns elements which the specified user has access to. 
 </summary>
 <param name="permissionType">Name of the permission type.</param>
 <param name="userID">The UserID. Can be a comma separated string with additional IDs.</param>
 <param name="userType">The UserID If the user needs to be a specific usertype e.g. Extranetuser, Admin etc.</param>
 <returns>Returns a comma separated string.</returns>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.DefaultToUtf8Encoding(System.String)">
 <summary>
 Converts strings to UTF-8 that have been saved in cookies with characters above ASCII127. IE æøå or japanese strings would be geberish if not converted
 </summary>
 <param name="strInput">The string to be converted (encoded with encoding.default)</param>
 <returns>Converted string in UTF-8 format</returns>
 <remarks>Converts from System.Text.Encoding.Default() (usually Windows 1252) to System.Text.UTF8Encoding
 </remarks>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.GetInheritedPassword(Dynamicweb.Content.Page)">
 <summary>
 Gets the inherited password.
 </summary>
 <param name="page">The page.</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.GetInheritedProtect(Dynamicweb.Content.Page)">
 <summary>
 Gets the inherited protect.
 </summary>
 <param name="page">The page.</param>
 <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.GetInheritedPermission(Dynamicweb.Content.Page)">
 <summary>
 Gets the inherited permission.
 </summary>
 <param name="page">The page.</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Frontend.LoginHandler.GetInheritedPermissionTemplate(Dynamicweb.Content.Page)">
 <summary>
 Gets the inherited permission.
 </summary>
 <param name="page">The page.</param>
 <returns>System.String.</returns>
</member>
<member name="T:Dynamicweb.Frontend.Update">
 <summary>
 This class contains functions to handle update.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.Update.AddField(System.Data.IDbConnection,System.String,System.String,System.String)">
 <summary>
 Adds a new field to the data base. And writs to respones.
 </summary>
 <param name="cnDatabase"></param>
 <param name="Table"></param>
 <param name="Field"></param>
 <param name="FieldType"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.Update.ProcessSetting(System.Xml.XmlNode)">
 <summary>
 Processes "setting" node.
 </summary>
 <param name="node">Node to process.</param>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Frontend.Update.SyncLockObject">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.Update">Update class</see> . 
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Frontend.Update.WasUpdated">
 <summary>
 Determines was solution updated or not.
 </summary>
 <value>Boolean</value>
 <returns>True or False.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.Update.GetVersionScriptAndPathForUpdate(System.String)">
 <summary>
 Returns the current file version script and path for update.
 </summary>
 <param name="updateFileName"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.Update.RenameDeprecatedAssemblies">
 <summary>
 Renames deprecared assemblies to *.obsolete to avoid TypeLoadException. 
 Returns true if at least one assembly was renamed or exception occured
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Frontend.PageTemplateExtender">
 <summary>
 Pageview template extender. Extends the rendering of a <see cref="T:Dynamicweb.Frontend.PageView"></see>.
 </summary>
 <example>
 <code description="Extending the layout template" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\PageTemplateExtenderSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Frontend.PageTemplateExtender.PageView">
 <summary>
 Gets or sets the <see cref="P:Dynamicweb.Frontend.PageTemplateExtender.PageView">PageView</see> instance.
 </summary>
 <value>The pageview.</value>
</member>
<member name="T:Dynamicweb.Frontend.Content">
 <summary>
 Renders paragraphs for content containers of page and layout templates.
 </summary>
 <remarks>
 Only runs in the context of a <see cref="T:Dynamicweb.Frontend.PageView"/> instance
 </remarks>
</member>
<member name="M:Dynamicweb.Frontend.Content.#ctor(Dynamicweb.Frontend.PageView)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.Content" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.Content.GetParagraphs(System.Int32)">
 <summary>
 Gets a collection of paragraphs to be renderered on the page.
 </summary>
 <remarks>
 The content of the collection depends on publishing, versioning, previewing, split testing, personalization and more.
 </remarks>
</member>
<member name="M:Dynamicweb.Frontend.Content.GetModuleOutput(Dynamicweb.Content.Paragraph,Dynamicweb.Frontend.PageView)">
 <summary>
 Gets the output of a <see cref="T:Dynamicweb.Modules.ContentModule"/>. Based on the system name of the passed <see cref="T:Dynamicweb.Content.Paragraph"/>, a <see cref="T:Dynamicweb.Modules.ContentModule"/> instance of that module is instantiated and executed in the context of the passed <see cref="T:Dynamicweb.Frontend.PageView"/>.
 </summary>
 <param name="paragraph">The paragraph instance.</param>
 <param name="pageview">The pageview context to execute the module in.</param>
 <returns>System.String.</returns>
</member>
<member name="T:Dynamicweb.Frontend.ContainerInfo">
 <summary>
 Class ContainerInfo contains information about the content placeholder of current rendering paragraph.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.ContainerInfo.#ctor(System.String,Dynamicweb.Rendering.Designer.Layout)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.ContainerInfo"/> class.
 </summary>
 <param name="containerName">Name of the container.</param>
 <param name="layout">The layout instance where the placeholder is being rendered.</param>
</member>
<member name="M:Dynamicweb.Frontend.ContainerInfo.#ctor(System.String,System.Int32,System.Collections.Specialized.NameValueCollection,Dynamicweb.Rendering.Designer.Layout)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.ContainerInfo"/> class.
 </summary>
 <param name="containerName">Name of the container.</param>
 <param name="sort">The sort of the current paragraph in the container.</param>
 <param name="settings">The settings of the content placeholder.</param>
 <param name="layout">The layout instance where the placeholder is being rendered.</param>
</member>
<member name="P:Dynamicweb.Frontend.ContainerInfo.Name">
 <summary>
 Gets the name of the container.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Frontend.ContainerInfo.Sort">
 <summary>
 Gets the sort of the current rendering paragraph position in the content placeholde.
 </summary>
 <value>The sort.</value>
</member>
<member name="P:Dynamicweb.Frontend.ContainerInfo.Count">
 <summary>
 Gets or sets the count of paragraphs in the current container.
 </summary>
 <value>The count.</value>
</member>
<member name="T:Dynamicweb.Frontend.Meta">
 <summary>
 Represents the meta data of the pageview. Access through PageView.Current.Meta.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.Meta.Title">
 <summary>
 Gets or sets the title of the page
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.Meta.MetaTags">
 <summary>
 Gets or sets the key/value of metadata. Used internally. Use <see cref="M:Dynamicweb.Frontend.Meta.AddTag(System.String)">Meta.AddTag</see> to add meta data to the pageview.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.Meta.IsXhtml">
 <summary>
 Gets or sets if the html is rendered as xhtml or html.
 </summary>
 <remarks>Influences the markup of meta data. If true makes the tags self closing.</remarks>
</member>
<member name="M:Dynamicweb.Frontend.Meta.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.Meta" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.Meta.AddTag(System.String,System.String)">
 <summary>
 Adds meta data tag to the pageview in the format &lt;meta name="{Name}" content="{Content}" /&gt;
 </summary>
 <param name="Name">The name of the meta tag.</param>
 <param name="Content">The content of the meta tag.</param>
 <example>
 <code title="How to add meta data to pageview" description="" lang="CS">//Get current instance
 Dynamicweb.Frontend.PageView pv = Dynamicweb.Frontend.PageView.Current();
 
 //Change properties on the PageView object
 pv.Meta.Add("Keywords", "keyword1, keyword2");</code>
 </example>
</member>
<member name="M:Dynamicweb.Frontend.Meta.AddTag(System.String)">
 <summary>
 Adds custom meta data tag to the pageview.
 </summary>
 <param name="content">The markup of the metatag - remember to check for <see cref="P:Dynamicweb.Frontend.Meta.IsXhtml">isXhtml</see>.</param>
 <example>
 <code title="How to add custom meta data to pageview" description="" lang="CS">//Get current instance
 Dynamicweb.Frontend.PageView pv = Dynamicweb.Frontend.PageView.Current();
 
 //Change properties on the PageView object
 if(pv.Meta.isXhtml){
 	pv.Meta.Add("&lt;meta name=\"Generator\" content=\"Dynamicweb 7\" /&gt;");
 }else{
 	pv.Meta.Add("&lt;meta name=\"Generator\" content=\"Dynamicweb 7\"&gt;");
 }
 </code>
 </example>
</member>
<member name="M:Dynamicweb.Frontend.Meta.Output">
 <summary>
 Outputs the meta data as markup.
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Frontend.NavigationProviders.NavigationItem">
 <summary>
 Inherit this object to create you own type of Navigation item to be used with a navigation provider.
 </summary>
 <remarks>For example take a look at <see cref="T:Dynamicweb.Frontend.NavigationProviders.NavigationProvider">NavigationProvider</see> for extending the navigation system.</remarks>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.ChildNodes">
 <summary>
 Gets the child nodes.
 </summary>
 <value>The child nodes.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.Parent">
 <summary>
 Gets or sets the parent.
 </summary>
 <value>The parent.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.MenuText">
 <summary>
 Gets or sets the menu text.
 </summary>
 <value>The menu text.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.MouseOver">
 <summary>
 Gets or sets the mouse over.
 </summary>
 <value>The mouse over.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.Image">
 <summary>
 Gets or sets the image.
 </summary>
 <value>The image.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.ImageActive">
 <summary>
 Gets or sets the image active.
 </summary>
 <value>The image active.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.ImageMouseOver">
 <summary>
 Gets or sets the image mouse over.
 </summary>
 <value>The image mouse over.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.AllowClick">
 <summary>
 Gets or sets a value indicating whether click is allowed.
 </summary>
 <value><c>true</c> if allow click; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.ShowInSiteMap">
 <summary>
 Gets or sets a value indicating whether [show in site map].
 </summary>
 <value><c>true</c> if [show in site map]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.ShowInLegend">
 <summary>
 Gets or sets a value indicating whether [show in legend].
 </summary>
 <value><c>true</c> if [show in legend]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.Href">
 <summary>
 Gets or sets the href.
 </summary>
 <value>The href.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.FriendlyHref">
 <summary>
 Gets or sets the friendly href.
 </summary>
 <value>The friendly href.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.Title">
 <summary>
 Gets or sets the title.
 </summary>
 <value>The title.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.RelativeLevel">
 <summary>
 Gets or sets the relative level.
 </summary>
 <value>The relative level.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.Sort">
 <summary>
 Gets or sets the sort.
 </summary>
 <value>The sort.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.LastInLevel">
 <summary>
 Gets or sets a value indicating whether node is last in level.
 </summary>
 <value><c>true</c> if last in level; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.ChildCount">
 <summary>
 Gets or sets the child count.
 </summary>
 <value>The child count.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.CssClass">
 <summary>
 Gets or sets the CSS class.
 </summary>
 <value>The CSS class.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.NavigationTag">
 <summary>
 Gets or sets the navigation tag.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.ID">
 <summary>
 Gets or sets the ID.
 </summary>
 <value>The ID.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.AreaID">
 <summary>
 Gets or sets the area ID.
 </summary>
 <value>The area ID.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.InPath">
 <summary>
 Gets or sets a value indicating whether node is in path.
 </summary>
 <value><c>true</c> if in path; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.Active">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Frontend.NavigationProviders.NavigationItem" /> is active.
 </summary>
 <value><c>true</c> if active; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.AbsoluteLevel">
 <summary>
 Gets or sets the absolute level.
 </summary>
 <value>The absolute level.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.NavigationItemType">
 <summary>
 Gets or sets the type of navigation item.
 </summary>
 <value>The type of navigation item.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.IsPage">
 <summary>
 Gets a value indicating whether this instance is <see cref="T:Dynamicweb.Frontend.NavigationProviders.PageNavigationItem"></see>.
 </summary>
 <value><c>true</c> if this instance is <see cref="T:Dynamicweb.Frontend.NavigationProviders.PageNavigationItem"></see>; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.IsRoot">
 <summary>
 Gets a value indicating whether this instance is <see cref="T:Dynamicweb.Frontend.NavigationProviders.RootNavigationItem"></see>.
 </summary>
 <value><c>true</c> if this instance is <see cref="T:Dynamicweb.Frontend.NavigationProviders.RootNavigationItem"></see>; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationItem.PropertyItem">
 <summary>
 Gets the page properties item.
 </summary>
 <value>
 The item.
 </value>        
</member>
<member name="M:Dynamicweb.Frontend.NavigationProviders.NavigationItem.SetPathToHere(System.Boolean)">
 <summary>
 Sets the path to here.
 </summary>
 <param name="isActiveItem">if set to <c>true</c> [is active item].</param>
</member>
<member name="M:Dynamicweb.Frontend.NavigationProviders.NavigationItem.MakeXmlNavigation(System.Xml.XmlElement,System.Boolean)">
 <summary>
 Makes the XML from the provider.
 </summary>
 <param name="parentElement">The parent element.</param>
 <param name="optimize">if set to <c>true</c> [optimize].</param>
</member>
<member name="M:Dynamicweb.Frontend.NavigationProviders.NavigationItem.AddChild(Dynamicweb.Frontend.NavigationProviders.NavigationItem)">
 <summary>
 Adds the child.
 </summary>
 <param name="child">The child.</param>
</member>
<member name="M:Dynamicweb.Frontend.NavigationProviders.NavigationItem.GetEnumerator">
 <summary>
 Returns an enumerator that iterates through a collection.
 </summary>
 <returns>
 An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
 </returns>
</member>
<member name="T:Dynamicweb.Frontend.NavigationProviders.NavigationProvider">
 <summary>
 Extends Dynamicweb XML based navigation system.
 </summary>
 <example>
 <code description="Extending Dynamicweb navigation system" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\NavigationProvider\NavigationProvider.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Frontend.NavigationProviders.NavigationProvider.XmlNavigation">
 <summary>
 Gets or sets the XML navigation.
 </summary>
 <value>The XML navigation.</value>
</member>
<member name="M:Dynamicweb.Frontend.NavigationProviders.NavigationProvider.ProcessTree(Dynamicweb.Frontend.NavigationProviders.RootNavigationItem,Dynamicweb.Frontend.XmlNavigation.NavigationType)">
 <summary>
 Override this member to proces the tree returned to the navigation system.
 </summary>
 <param name="rootNode">The root node.</param>
 <param name="navigationType">Type of the navigation.</param>
 <remarks>For an example take a look at <seealso cref="T:Dynamicweb.Frontend.NavigationProviders.NavigationProvider">NavigationProvider</seealso> example.</remarks>
</member>
<member name="M:Dynamicweb.Frontend.NavigationProviders.NavigationProvider.ClearCache">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.NavigationProviders.NavigationProvider.CompareTo(Dynamicweb.Frontend.NavigationProviders.NavigationProvider)">
 <summary>
 Comparer used to sort the navigation provider add ins - the one with the lowest sort order will be rendered first.
 </summary>
 <param name="other">The other navigation provider.</param>
 <remarks>Default comparer is the add in order set using the <see cref="T:Dynamicweb.Extensibility.AddIns.AddInOrderAttribute"></see> on the <see cref="T:Dynamicweb.Frontend.NavigationProviders.NavigationProvider"></see> implementation</remarks>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Frontend.NavigationProviders.PageNavigationItem">
 <summary>
 Dynamicweb page navigation item. 
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.NavigationProviders.RootNavigationItem">
 <summary>
 Dynamicweb root navigation item.
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.OutputReplacer">
 <summary>
 Does various formatting of the output from pageview object
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:Dynamicweb.Frontend.OutputReplacer.ReplaceUrls(System.String)">
 <summary>
 Replace the urls in the passed html to be search friendly format if activated.
 </summary>
 <param name="html">The HTML.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.OutputReplacer.ParseURL(System.Text.RegularExpressions.Match)">
 <summary>
 Parses the URL.
 </summary>
 <param name="m">The match.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.OutputReplacer.ReplaceUrl(System.Text.RegularExpressions.Match)">
 <summary>
 Parses the URL.
 </summary>
 <param name="m">The match.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.OutputReplacer.ReplaceUrl(System.String)">
 <summary>
 Replace the internal url to be search friendly format if activated.
 </summary>
 <param name="internalLink">The internal link.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.OutputReplacer.NavigationTagToPageId(System.String,Dynamicweb.Frontend.PageView)">
 <summary>
 Convert a navigation tag to a numeric page id.
 </summary>
 <param name="navigationTag"></param>
 <returns>The paragraph id</returns>
 <remarks>Returns -1 if no page with the given navigation tag exists.</remarks>
</member>
<member name="M:Dynamicweb.Frontend.OutputReplacer.NavigationTagToParagraphId(System.String,Dynamicweb.Frontend.PageView)">
 <summary>
 Converts a navigation tag to a numeric paragraph id.
 </summary>
 <param name="navigationTag"></param>
 <returns>The paragraph id</returns>
 <remarks>Returns -1 if no page with the given navigation tag exists.</remarks>
</member>
<member name="M:Dynamicweb.Frontend.OutputReplacer.InsertGlobalParagraphs(System.String)">
 <summary>
 Inserts the global paragraphs in the specified html. (Global:Paragraph.Content tags)
 </summary>
 <param name="html">The HTML.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Frontend.OutputReplacer.HighlightFiles(System.String)">
 <summary> Processed an input source in aim to find references(href) to internal files
  and replace them with an appropriate one.  
 </summary> 
 <param name="source">A string representation of input source.</param>
 <returns>Returns a source with replaced references.</returns>
</member>
<member name="T:Dynamicweb.Frontend.PageView">
 <summary>
 The pageview object represents the current frontend pageview, the object that handles Default.aspx and all frontend page views.
 </summary>Dynamic
 <remarks>Use the <see cref="M:Dynamicweb.Frontend.PageView.Current">PageView.Current</see> to access the instance from any code block that is run in the pageview context.</remarks>
 <example>
 <code description="How to access the pageview instance" lang="CS">//Get current instance
 Dynamicweb.Frontend.PageView pv = Dynamicweb.Frontend.PageView.Current();
 
 //Change properties on the PageView object
 pv.Meta.Title = "New title";</code>
 </example>
 <example>
 <code description="How to access the pageview instance" lang="VB">'Get current instance
 Dim pv As Dynamicweb.Frontend.PageView = Dynamicweb.Frontend.PageView.Current
 
 'Change properties on the PageView object
 pv.Meta.Title = "New title"</code>
 </example>
</member>
<member name="P:Dynamicweb.Frontend.PageView.CurrentParagraph">
 <summary>
 Gets the current paragraph being rendered. 
 </summary>
 <value>
 Will be <c>null</c> if a paragraph is not being rendered. 
 </value>
 <remarks>Should only be used from objects in the context of a paragraph. I.e. a paragraph template extender, product template extender or content module.</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PageView.ExperimentTracker">
 <summary>
 Gets the experiment tracker if this page has a split test experiment available.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.PageView.CdnHostName">
 <summary>
 Gets the name of the CDN hostname from the website settings or global settings.
 </summary>
 <value>The name of the CDN host.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageView.CdnHostNameForImage">
 <summary>
 Gets the name of the CDN GetImage hostname from the website settings or global settings.
 </summary>
 <value>The CDN host name for get image.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageView.ExperimentVariation">
 <summary>
 Gets the experiment variation of this pageview if the page has experiments.
 </summary>
 <remarks>If page does not have experiments, 0 is returned. If original needs to be show, 1 is returned. Otherwise the ID of the variation</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PageView.IsEmailContext">
 <summary>
 Gets or sets a value indicating whether this instance is email context.
 </summary>
 <value><c>true</c> if this instance is in the context of sending out an email; otherwise, <c>false</c>.</value>
 <remarks>Used by Email marketing to send out pages as email.</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PageView.Item">
 <summary>
 Gets the instance of <see cref="!:Items.Item"/> of the current page.
 </summary>
 <value>The item.</value>
 <returns>An instance of an item if the given page has an item attached to it, otherwise <c>null</c> (<c>Nothing</c> in Visual Basic)</returns>
</member>
<member name="P:Dynamicweb.Frontend.PageView.Execution">
 <summary>
 Gets the <see cref="T:Dynamicweb.Diagnostics.ExecutionTable"/> of the pageview. Used internally to measure time spend on renderers.
 </summary>
 <remarks>Should not be used.</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PageView.DwTemplateTagsOutput">
 <summary>
 Holding dwtemplatetags output and outputs it in the end of the document.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.PageView.ID">
 <summary>
 Page ID of this instance of pageview object.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.PageView.ContentID">
 <summary>
 The ID of the page from which content is showed. Used for page shortcuts without redirect.
 </summary>
 <remarks>Handled internally</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PageView.AreaID">
 <summary>
 The ID of the Area or website of this instance of pageview object.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.PageView.Area">
 <summary>
 Gets the <see cref="T:Dynamicweb.Content.Area"/> of the current <see cref="T:Dynamicweb.Content.Page"/> being rendered.
 </summary>
 <value>The area.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageView.Page">
 <summary>
 Gets the <see cref="T:Dynamicweb.Content.Page"/> being rendered in the instance of this pageview.
 </summary>
 <value>The page.</value>
</member>
<member name="P:Dynamicweb.Frontend.PageView.SecurityHandler">
 <summary>
 Gets the object which handles extranet functionality.
 </summary>
 <remarks>Use this to access information on the current logged in user.</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PageView.Security">
 <summary>
 Gets the <see cref="P:Dynamicweb.Frontend.PageView.Security">security</see> object which handles extranet functionality.
 </summary>
 <remarks>Use this to access information on the current logged in user</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PageView.Content">
 <summary>
 Gets the <see cref="P:Dynamicweb.Frontend.PageView.Content">content</see> object that handles rendering of paragraphs.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.PageView.Meta">
 <summary>
 Gets the <see cref="T:Dynamicweb.Frontend.Meta">Meta</see> instance of the current pageview object.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.PageView.Template">
 <summary>
 Gets the instance of the <see cref="T:Dynamicweb.Rendering.Template">template</see> object of the layout template.
 </summary>
 <remarks>
 Will be <c>null</c> until the <see cref="M:Dynamicweb.Frontend.PageView.Load"/> has been called.
 </remarks>
</member>
<member name="P:Dynamicweb.Frontend.PageView.HtmlVersion">
 <summary>
 Gets the HTML version. Can be either html4, xhtml1 and html5. Influences the rendering of image tags, tables in form modules and other html version specific rules.
 </summary>
 <value>The HTML version.</value>
 <remarks>This property is set on the websites properties from the administration. Not set until <see cref="M:Dynamicweb.Frontend.PageView.Load">PageView.Load</see> have been executed.</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PageView.Layout">
 <summary>
 Gets the <see cref="T:Dynamicweb.Rendering.Designer.Layout">layout</see> of this pageview.
 </summary>
 <value>The layout.</value>
 <remarks>This layout template is set on the page or website properties from the administration. Not set until <see cref="M:Dynamicweb.Frontend.PageView.Load">PageView.Load</see> have been executed.</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PageView.SearchFriendlyUrl">
 <summary>
 Gets the search friendly URL for this instance of the pageview.
 </summary>
 <value>The search friendly URL for the page currently being showed. <seealso cref="P:Dynamicweb.Frontend.PageView.SearchFriendlyUrl">SearchFriendlyUrl</seealso>.</value>
 <remarks>The returned URL will contain any querystring information on the original url.</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PageView.Redirect">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Frontend.PageView" /> are allowed to do redirect.
 </summary>
 <value><c>true</c> if redirects are allowed; otherwise, <c>false</c>.</value>
 <remarks>
 If this property is set to false, Dynamicweb will not redirect to i.e. search friendly url version of the same page.
 Use <see cref="M:Dynamicweb.Frontend.PageView.GetPageviewByPageID(System.Int32)">PageView.GetPageviewByPageID</see> to get an instance that does not redirect.</remarks>
</member>
<member name="P:Dynamicweb.Frontend.PageView.User">
 <summary>
 Gets the extranet user currently logged into the frontend.
 </summary>
 <remarks>If no user is logged in, <c>null</c> is returned</remarks>
</member>
<member name="M:Dynamicweb.Frontend.PageView.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.PageView" /> class.
 </summary>
 <remarks>Use <see cref="M:Dynamicweb.Frontend.PageView.Current" /> or <see cref="M:Dynamicweb.Frontend.PageView.GetPageviewByPageID(System.Int32)">PageView.GetPageviewByPageID</see> to get an instance.</remarks>
</member>
<member name="M:Dynamicweb.Frontend.PageView.SetCacheHeaders">
 <summary>
 Sets the browser caching state of the returned HTML of a <see cref="T:Dynamicweb.Frontend.PageView" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.PageView.CheckSslMode">
 <summary>
 Checks the SSLMode for the page and redirects to the Page with or without SSL or leave request as is, according to the settings.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.PageView.Load">
 <summary>
 Loads the <see cref="T:Dynamicweb.Frontend.PageView">PageView</see> object with data. Usually Dynamicweb handles this.
 </summary>
 <remarks>Use <see cref="M:Dynamicweb.Frontend.PageView.Current"/>, or <see cref="M:Dynamicweb.Frontend.PageView.GetPageviewByPageID(System.Int32)">PageView.GetPageviewByPageID</see> to get an instance.</remarks>
</member>
<member name="M:Dynamicweb.Frontend.PageView.Output">
 <summary>
 Executes the pageview and parses all templates with content, modules and navigation.
 </summary>
 <returns>The parsed HTML output of the pageview. Normally no need to call this as it is handled by Dynamicweb.</returns>
</member>
<member name="P:Dynamicweb.Frontend.PageView.GlobalTags">
 <summary>
 Gets a collection of the global tags available for this pageview instance.
 </summary>
 <value>
 The global tags collection in a <see cref="T:Dynamicweb.Rendering.TagCollection">TagCollection</see>.
 </value>
 <remarks>Used from Razor templates to get access to Global tags. Should not be used in context of a layout using the <see cref="T:Dynamicweb.Frontend.PageViewModel"/> instance to render.</remarks>
</member>
<member name="M:Dynamicweb.Frontend.PageView.SetGlobalUserDefaultAddressTags(Dynamicweb.Rendering.Template)">
 <summary>
 Sets the User Default Address tags.
 </summary>
 <param name="template">Target template.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.PageView.SetGlobalExternalLoginTags(Dynamicweb.Rendering.Template)">
 <summary>
 Sets the Global User Extranet Login tags.
 </summary>
 <param name="template">Target template.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.PageView.GetContent">
 <summary>
 Gets a collectiong of content for this pageview for each placeholder in the layout. 
 </summary>
 <returns>System.Collections.Generic.IDictionary(Of System.String, System.String).
 The collection contains a key (the id of the placeholder) and the resulting html of the rendered paragraphs in a content placeholder including module output.
 </returns>
</member>
<member name="M:Dynamicweb.Frontend.PageView.GetAreaByDomain">
 <summary>
 Gets an instance of an area by the domain name of the current request.
 </summary>
 <returns>Dynamicweb.Content.Area.</returns>
 <remarks>Uses the domain and primary domain information set on website properties to find the right area</remarks>
</member>
<member name="M:Dynamicweb.Frontend.PageView.GetAreaByDomain(System.String)">
 <summary>
 Gets an instance of an area by the paseed domain name.
 </summary>
 <param name="domain">The domain, i.e. 'www.dynamicweb.com'</param>
 <returns>Dynamicweb.Content.Area.</returns>
 <remarks>Uses the domain and primary domain information set on website properties to find the right area</remarks>
</member>
<member name="M:Dynamicweb.Frontend.PageView.LockDomain">
 <summary>
 Checks whether the current domain is locked to another area and responds with "404 Not Found" if so.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.PageView.AddJavascript(System.String)">
 <summary>
 Adds a javascript path to the pages scripts section in head.
 </summary>
 <param name="javascript">The javascript path reference.</param>
 <example>
 <code description="Adding a javascript" lang="CS">Dynamicweb.Frontend.PageView.Current().AddJavascript("/Files/System/Myjs.js");</code>
 <code description="Adding a javascript" lang="VB">Dynamicweb.Frontend.PageView.Current.AddJavascript("/Files/System/Myjs.js")</code>
 </example>
</member>
<member name="M:Dynamicweb.Frontend.PageView.AddStylesheet(System.String)">
 <summary>
 Adds a stylesheet path to the pages stylesheets section in head.
 </summary>
 <param name="stylesheet">The stylesheet path reference.</param>
 <example>
 <code description="Adding a stylesheet" lang="CS">Dynamicweb.Frontend.PageView.Current().AddStylesheet("/Files/System/MyCss.css");</code>
 <code description="Adding a stylesheet" lang="VB">Dynamicweb.Frontend.PageView.Current.AddStylesheet("/Files/System/MyCss.css")</code>
 </example>
</member>
<member name="M:Dynamicweb.Frontend.PageView.AddStylesheet(System.String,System.String)">
 <summary>
 Adds a stylesheet path to the pages stylesheets section in head for a given media.
 </summary>
 <param name="stylesheet">The stylesheet reference.</param>
 <param name="media">The media type. One of <c>print, screen, tv, all</c> or other valid css media type. Default is <c>string.empty</c>.</param>
 <example>
 <code description="Adding a stylesheet" lang="CS">PageView.Current().AddStylesheet("/Files/System/MyCss.css", "print");</code>
 <code description="Adding a stylesheet" lang="VB">PageView.Current.AddStylesheet("/Files/System/MyCss.css", "print")</code>
 </example>
</member>
<member name="M:Dynamicweb.Frontend.PageView.Current">
 <summary>
 Gets the <see cref="T:Dynamicweb.Frontend.PageView">PageView</see> object of the current pageview. This can only be called in a frontend context.
 </summary>
 <returns>Returns null or nothing if not called from frontend or prior to Pageview.Load event has occured</returns>
 <remarks>Should only be called from code executed in frontend. Use <see cref="M:Dynamicweb.Frontend.PageView.GetPageviewByPageID(System.Int32)">PageView.GetPageviewByPageID</see> from backend code.</remarks>
 <example>
 <code description="How to access the pageview instance" lang="CS">//Get current instance
 PageView pv = PageView.Current();
 //Change properties on the PageView object
 pv.Meta.Title = "New title";</code>
 </example>
 <example>
 <code description="How to access the pageview instance" lang="VB">'Get current instance
 Dim pv As PageView = PageView.Current
 'Change properties on the PageView object
 pv.Meta.Title = "New title"</code>
 </example>
</member>
<member name="M:Dynamicweb.Frontend.PageView.GetPageview">
 <summary>
 Retrieves a top-level pageview instance for use in backend context. Use <see cref="M:Dynamicweb.Frontend.PageView.Current">PageView.Current</see> for accessing the pageview instance in a frontend context.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.PageView.GetPageviewByPageID(System.Int32)">
 <summary>
 Retrieves an instance of the pageview of page specified by page ID. Use <see cref="M:Dynamicweb.Frontend.PageView.Current">PageView.Current</see> for accessing the pageview instance in a frontend context.
 </summary>
 <param name="pageId">ID of a page.</param>
 <remarks>Returns a <see cref="T:Dynamicweb.Frontend.PageView">PageView</see> object of that page specified by page ID</remarks>
</member>
<member name="M:Dynamicweb.Frontend.PageView.GetPageviewByPageID(System.Int32,System.Boolean)">
 <summary>
 Retrieves an instance of the pageview of page specified by page ID. 
 </summary>
 <param name="pageId">ID of a page.</param>
 <param name="useCache">Value indicating whether to use internal cache of the <see cref="T:Dynamicweb.Frontend.PageView" /></param>
 <remarks></remarks>
 <returns>Returns a <see cref="T:Dynamicweb.Frontend.PageView">PageView</see> object of that page specified by page ID</returns>
</member>
<member name="T:Dynamicweb.Frontend.PageView.HtmlType">
 <summary>
 Defines how html tags of the current pageview should be rendered according to the different html standards. I.e. metatags, image tags etc.
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.PageView.HtmlType.None">
 <summary>
 Html type not defined or detected
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.PageView.HtmlType.HTML4">
 <summary>
 Rendering optimized for html 4 standard.
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.PageView.HtmlType.XHTML1">
 <summary>
 Rendering optimized for xhtml 1 standard.
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.PageView.HtmlType.HTML5">
 <summary>
 Rendering optimized for html 5 standard
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.PageView.Device">
 <summary>
 Gets the <see cref="T:Dynamicweb.Frontend.Devices.DeviceType"/> of the current request based on the User agent string of the browser.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.PageView.Platform">
 <summary>
 Gets the <see cref="T:Dynamicweb.Frontend.Devices.PlatformType"/> of the current request based on the User agent string of the browser.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.PageView.ShowCookieWarning">
 <summary>
 Returns true if the cookie warning needs to be displayed. 
 Returns false if cookie management is disabled or no warning template or 
 show cookie warning is disabled or opt-in level cookie is already set.
 </summary>    
</member>
<member name="M:Dynamicweb.Frontend.PageView.GetLockedPageview(System.Int32)">
 <summary>
 Retrieves <see cref="T:Dynamicweb.Frontend.PageView">PageView</see> object by the given page ID.
 </summary>
 <param name="pageID">An ID of the page.</param>
 <returns><see cref="T:Dynamicweb.Frontend.PageView">PageView</see> object or null (Nothing in Visual Basic) if operation fails.</returns>
 <remarks>Retrieved <see cref="T:Dynamicweb.Frontend.PageView">PageView</see> object is locked from changing the global eCommerce variables (like current language).</remarks>
</member>
<member name="M:Dynamicweb.Frontend.PageView.GetLockedPageview(System.Int32,System.Boolean)">
 <summary>
 Retrieves <see cref="T:Dynamicweb.Frontend.PageView">PageView</see> object by the given page ID.
 </summary>
 <param name="pageID">An ID of the page.</param>
 <param name="useCache">Value indicating whether to use internal cache of the <see cref="T:Dynamicweb.Frontend.PageView" /></param>
 <returns><see cref="T:Dynamicweb.Frontend.PageView">PageView</see> object or null (Nothing in Visual Basic) if operation fails.</returns>
 <remarks>Retrieved <see cref="T:Dynamicweb.Frontend.PageView">PageView</see> object is locked from changing the global eCommerce variables (like current language).</remarks>
</member>
<member name="T:Dynamicweb.Frontend.SearchEngineFriendlyURLs">
 <summary>
 Helper methods for handling search friendly urls.
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.SearchEngineFriendlyURLs.Type">
 <summary>
 Specifies the url pattern
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.SearchEngineFriendlyURLs.Type.Path">
 <summary>
 E.g. ParentPage/NameOfPage
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.SearchEngineFriendlyURLs.Type.None">
 <summary>
 E.g. Default.aspx?ID=123
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.SearchEngineFriendlyURLs.RedirectType">
 <summary>
 Gets the type of the search engine friendly url.
 </summary>
 <value>The type of the redirect.</value>
</member>
<member name="P:Dynamicweb.Frontend.SearchEngineFriendlyURLs.UseExtensionLessUrls">
 <summary>
 Gets a value indicating whether the solution uses extension less urls.
 </summary>
 <value>
 <c>true</c> if extension less urls should be used; otherwise, <c>false</c>.
 </value>
 <remarks>Does not return the value of the setting in GlobalSettings. Only returns true if the option is set, the application pool is integrated and the the URL schema is Path</remarks>
</member>
<member name="M:Dynamicweb.Frontend.SearchEngineFriendlyURLs.GetFriendlyUrl(System.Int32)">
 <summary>
 Used for getting a searchfriendly version of a Dynamicweb url with just the PageID
 </summary>
 <param name="pageID">ID of page</param>
 <returns>The searchfriendly url to the specified PageID, i.e: /Products/Product1.aspx</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.SearchEngineFriendlyURLs.GetFriendlyUrl(System.Int32,System.String)">
 <summary>
 Used for getting a searchfriendly version of a Dynamicweb url with just the PageID
 </summary>
 <param name="pageID">ID of page</param>
 <param name="alternatekey">The alternate key to use for module url lookups if the context will not be used. Usually an Ecommerce languageId (LANG1). The alternate key will be taken from context if it is not specified.</param>
 <returns>The searchfriendly url to the specified PageID, i.e: /Products/Product1.aspx</returns>
 <remarks>Use this overload if you want to resolve a URL from i.e. an English language context to the same products German context. Pass in the language id of the German context</remarks>
</member>
<member name="M:Dynamicweb.Frontend.SearchEngineFriendlyURLs.GetFriendlyUrl(System.String)">
 <summary>
 Used for getting a searchfriendly version of a Dynamicweb url with all parameters
 </summary>
 <param name="internalLink">The internal link, i.e. Default.aspx?ID=123&amp;NewsID=456&amp;action=1.</param>
 <returns>/module/news/NameOfNews.aspx?action=1</returns>
</member>
<member name="M:Dynamicweb.Frontend.SearchEngineFriendlyURLs.GetFriendlyUrl(System.String,System.String)">
 <summary>
 Used for getting a searchfriendly version of a Dynamicweb url with all parameters
 </summary>
 <param name="internalLink">The internal link, i.e. Default.aspx?ID=123&amp;NewsID=456&amp;action=1.</param>
 <param name="alternatekey">The alternate key to use for module url lookups if the context will not be used. Usually an Ecommerce languageId (LANG1). The alternate key will be taken from context if it is not specified.</param>
 <returns>/module/news/NameOfNews.aspx?action=1</returns>
 <remarks>Use this overload if you want to resolve a URL from i.e. an English language context to the same products German context. Pass in the language id of the German context</remarks>
</member>
<member name="M:Dynamicweb.Frontend.SearchEngineFriendlyURLs.Redirect(System.Web.HttpApplication@)">
 <summary>
 Redirects the specified HttpApplication.
 </summary>
 <param name="app">The HttpApplication.</param>
 <remarks>Used internally by Dynamicweb from global.asax</remarks>
</member>
<member name="M:Dynamicweb.Frontend.SearchEngineFriendlyURLs.RedirectPagesByNames(System.Web.HttpApplication@)">
 <summary>
 Redirects the pages by name.
 </summary>
 <param name="app">The app.</param>
</member>
<member name="M:Dynamicweb.Frontend.SearchEngineFriendlyURLs.RedirectPagesByNames(System.String,System.Web.HttpApplication)">
 <summary>
 Redirects the pages by names.
 </summary>
 <param name="requestPath">The request path.</param>
 <param name="app">The app.</param>
</member>
<member name="M:Dynamicweb.Frontend.SearchEngineFriendlyURLs.TryRedirectToNotFound(System.Web.HttpContext,System.String)">
 <summary>
 Rewrites the current execution path to "/Admin/Public/404.aspx" if the current path can be treated as a customized URL.
 </summary>
 <param name="context">Corresponding HTTP context.</param>
 <param name="path">Optional path component of the resource that wasn't found.</param>
 <returns>Value indicating whether path was successfully rewritten.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.SearchEngineFriendlyURLs.RedirectToNotFound(System.Web.HttpContext,System.String)">
 <summary>
 Rewrites the current execution path to "/Admin/Public/404.aspx".
 </summary>
 <param name="context">Corresponding HTTP context.</param>
 <param name="path">Optional path component of the resource that wasn't found.</param>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Frontend.SearchEngineFriendlyURLs.AllowRewrite(System.String)">
 <summary>
 Gets a value indicating whether the specified path allows a rewrite.
 </summary>
 <value><c>true</c> if [allow rewrite]; otherwise, <c>false</c>.</value>
</member>
<member name="T:Dynamicweb.Frontend.XmlNavigation">
 <summary>
 Represents the navigation object used to generate the xml for navigations
 </summary>
 <example>
 <code title="How to generate a navigation xmldocument" description="" lang="VB">Dim xmlNav As New Frontend.XmlNavigation(PageView)
 xmlNav.AbsolutePath = True
 xmlNav.UrlEncode = True
 Return xmlNav.XML(0, 1, 99, Frontend.XmlNavigation.Expand.All)</code>
 </example>
</member>
<member name="T:Dynamicweb.Frontend.XmlNavigation.Expand">
 <summary>
 Defines which pages in the navigation tree to include in the generated xml node set.
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.XmlNavigation.Expand.All">
 <summary>
 Include all nodes in all the specified levels in the tree.
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.XmlNavigation.Expand.Path">
 <summary>
 Includes the active path and their siblings.
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.XmlNavigation.Expand.PathOnly">
 <summary>
 Includes the active path without any siblings. A breadcrumb.
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.XmlNavigation.Expand.None">
 <summary>
 Tree is not expanded. Only the specified level is included.
 </summary>
</member>
<member name="T:Dynamicweb.Frontend.XmlNavigation.NavigationType">
 <summary>
 Defines what the generated xml should be used for.
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.XmlNavigation.NavigationType.Menu">
 <summary>
 Used for website navigation.
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.XmlNavigation.NavigationType.Sitemap">
 <summary>
 Used for sitemaps. Does not include nodes that are not marked with "Include in sitemap" on the pages properties.
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.XmlNavigation.NavigationType.Breadcrumb">
 <summary>
 Used for breadcrumbs. Does not include nodes that are not marked with "Inclue in breadcrumb" on the pages properties
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.XmlNavigation.LayoutNavigationSettings">
 <summary>
 Gets or sets the layout navigation settings. The navigation settings is a collection of the settings set on a UL navigation node in layout templates, and are added to the navigation XML
 in the NavigationTree/Settings/LayoutNavigationSettings node with each setting as an attribute with value.
 </summary>
 <value>
 The layout navigation settings as a setting/value colletion.
 </value>
</member>
<member name="P:Dynamicweb.Frontend.XmlNavigation.LayoutNavigationAttributes">
 <summary>
 Gets or sets the layout navigation attributes. The navigation attributes is a collection of the attributes set on a UL navigation node in layout templates, and are added to the navigation XML
 in the NavigationTree/Settings/LayoutNavigationAttributes node with each attribute from the UL as an attribute with value in the XML.
 </summary>
 <value>
 The layout navigation attributes.
 </value>
</member>
<member name="P:Dynamicweb.Frontend.XmlNavigation.Include">
 <summary>
 Gets or sets the include mode. Defines if a pages Include, ShowInLegend and ShowInSitemap are taken into consideration when including nodes in the XML
 </summary>
 <value>
 The include mode. Default is 'Default' :-).
 </value>
</member>
<member name="T:Dynamicweb.Frontend.XmlNavigation.IncludeMode">
 <summary>
 Defines the modes deciding if pages Include, ShowInLegend and ShowInSitemap are taken into consideration when including nodes in the XML
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.XmlNavigation.IncludeMode.All">
 <summary>
 Includes all nodes no matter if they are not marked for Include, ShowInLegend and ShowInSitemap
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.XmlNavigation.IncludeMode.Default">
 <summary>
 Only include nodes depending on their Include, ShowInLegend and ShowInSitemap setting and <see cref="P:Dynamicweb.Frontend.XmlNavigation.Sitemap"></see> property.
 </summary>
</member>
<member name="P:Dynamicweb.Frontend.XmlNavigation.UrlEncode">
 <summary>
 Gets or sets a value indicating whether the names in the urls should be Dynamicweb.Context.Current.Server.UrlPathEncoded.
 </summary>
 <value><c>true</c> if URL encode; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.XmlNavigation.AbsolutePath">
 <summary>
 Gets or sets a value indicating whether the urls inlcudes the protocol and hostname.
 </summary>
 <value><c>true</c> if paths are absolute; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.XmlNavigation.NavigationName">
 <summary>
 Gets or sets the name of the navigation.
 </summary>
 <value>The name of the navigation.</value>
</member>
<member name="P:Dynamicweb.Frontend.XmlNavigation.AreaID">
 <summary>
 Gets or sets the area ID.
 </summary>
 <value>The area ID.</value>
</member>
<member name="P:Dynamicweb.Frontend.XmlNavigation.Sitemap">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Frontend.XmlNavigation" /> is sitemap.
 </summary>
 <value><c>true</c> if sitemap; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Frontend.XmlNavigation.XmlDocument">
 <summary>
 Gets or sets the XML doc.
 </summary>
 <value>The XML doc.</value>
</member>
<member name="M:Dynamicweb.Frontend.XmlNavigation.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.XmlNavigation" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.XmlNavigation.#ctor(Dynamicweb.Frontend.PageView)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.XmlNavigation" /> class.
 </summary>
 <param name="pageView">The pageview object.</param>
</member>
<member name="M:Dynamicweb.Frontend.XmlNavigation.#ctor(Dynamicweb.Frontend.PageView,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Frontend.XmlNavigation" /> class.
 </summary>
 <param name="pageView">The pageview object.</param>
 <param name="navigationName">Name of the navigation.</param>
</member>
<member name="M:Dynamicweb.Frontend.XmlNavigation.MakeXml(System.Int32,System.Int32,System.Int32,Dynamicweb.Frontend.XmlNavigation.Expand,System.Int32)">
 <summary>
 Returns a <see cref="P:Dynamicweb.Frontend.XmlNavigation.XmlDocument">XmlDocument</see> of the page nodes used for navigation
 </summary>
 <param name="parentId">The parent page ID.</param>
 <param name="levelStart">The absolute start level.</param>
 <param name="levelStop">The absolute stop level.</param>
 <param name="expand">The <see cref="P:Dynamicweb.Frontend.XmlNavigation.ExpandMode">expand mode</see> to use.</param>
 <returns>a XmlDocument</returns>
 <example>
 <code title="How to generate a navigation xmldocument" description="" lang="VB">Dim xmlNav As New Frontend.XMLNavigation(PageView)
 xmlNav.AbsolutePath = True
 xmlNav.UrlEncode = True
 Return xmlNav.MakeXml(0, 1, 99, Frontend.XMLNavigation.Expand.All)</code>
 </example>
</member>
<member name="M:Dynamicweb.Frontend.XmlNavigation.CreateCacheKey(System.Int32,System.Int32,System.Int32,Dynamicweb.Frontend.XmlNavigation.Expand,System.Int32)">
 <summary>
 Creates the cache key.
 </summary>
 <param name="parentId">The parent identifier.</param>
 <param name="levelStart">The level start.</param>
 <param name="levelStop">The level stop.</param>
 <param name="expand">The expand.</param>
 <param name="selectedAreaId">The selected area identifier.</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Frontend.XmlNavigation.GetFromCache(System.String)">
 <summary>
 Retrieves XML navigation document from cache.
 </summary>
 <param name="cacheKey">Cache key.</param>
 <returns>XML navigation document or null (Nothing in Visual Basic) if the cache is empty.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.XmlNavigation.AddToCache(System.String,System.Xml.XmlDocument)">
 <summary>
 Adds the given XML navigation document to cache.
 </summary>
 <param name="cacheKey">Cache key.</param>
 <param name="navigation">XML navigation document.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Frontend.XmlNavigation.GetCustomNavigationProviders">
 <summary>
 Returns Custom Navigation Providers Types List
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Frontend.GlobalAsaxHandler">
 <summary>
 Handles Dynamicweb specific global.asax events.
 <note>https://msdn.microsoft.com/en-us/library/bb470252.aspx explains the events we use, and in which order they execute</note>
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.GlobalAsaxHandler.Application_Start(System.Object,System.EventArgs)">
 <summary>
 Handles the Start event of the Application control.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
</member>
<member name="M:Dynamicweb.Frontend.GlobalAsaxHandler.Application_BeginRequest(System.Object,System.EventArgs)">
 <summary>
 Handles the BeginRequest event of the Application control.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
</member>
<member name="M:Dynamicweb.Frontend.GlobalAsaxHandler.Application_AuthenticateRequest(System.Object,System.EventArgs)">
 <summary>
 Handles the AuthenticateRequest event of the Application control.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
</member>
<member name="M:Dynamicweb.Frontend.GlobalAsaxHandler.Application_OnPreRequestHandlerExecute(System.Object,System.EventArgs)">
 <summary>
 Handles the OnPreRequestHandlerExecute event of the Application control.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
</member>
<member name="M:Dynamicweb.Frontend.GlobalAsaxHandler.Session_Start(System.Object,System.EventArgs)">
 <summary>
 Handles the Start event of the Session control.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
</member>
<member name="M:Dynamicweb.Frontend.GlobalAsaxHandler.Application_Error(System.Object,System.EventArgs)">
 <summary>
 Handles the Error event of the Application control.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
</member>
<member name="M:Dynamicweb.Frontend.GlobalAsaxHandler.Session_End(System.Object,System.EventArgs)">
 <summary>
 Handles the End event of the Session control.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
</member>
<member name="M:Dynamicweb.Frontend.GlobalAsaxHandler.Application_End(System.Object,System.EventArgs)">
 <summary>
 Handles the End event of the Application control.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
</member>
<member name="M:Dynamicweb.Frontend.GlobalAsaxHandler.ResetApplication">
 <summary>
 Resets the application.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.GlobalAsaxHandler.CreateMapper">
 <summary>
 Method that creates a httpbased context mapper for handling the permission stack.
 </summary>
 <returns>contextMapper</returns>
</member>
<member name="M:Dynamicweb.Frontend.GlobalAsaxHandler.SetupDatabaseLocalAddress">
 <summary>
 Setups the database with information from the request and items.
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.GlobalAsaxHandler.SetupSystemInformationMappings">
 <summary>
 Setups the system information mappings.
 </summary>
 <exception cref="T:System.NotImplementedException"></exception>
</member>
<member name="M:Dynamicweb.Frontend.GlobalAsaxHandler.SetupExtensibility">
 <summary>
 Setups the notificaiton manager and the AddInManager.
 <note>Uses the HttpContext</note>
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.GlobalAsaxHandler.AutoLogin">
 <summary>
 Will auto login the user if the user hasen't been rejected before, and a cookie exists with username and password, and autoLogin is set to true
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.GlobalAsaxHandler._initializedAlready">
 <summary>
 Indicates if the systems has been intialized
 </summary>
</member>
<member name="F:Dynamicweb.Frontend.GlobalAsaxHandler.Lock">
 <summary>
 Sync lock ensuring that only one thread will initialize the environment dependent services
 </summary>
</member>
<member name="M:Dynamicweb.Frontend.GlobalAsaxHandler.EnsureMefDependenciesAndScheduledTasks">
 <summary>
 Initializes any Application Dependent Services
 </summary>
</member>
<member name="P:Dynamicweb.Modules.ModulePermissionHelper.ModuleService">
 <summary>
 The <see cref="T:Dynamicweb.Modules.IModuleService"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Modules.ModulePermissionHelper.HasAccess(System.String)">
 <summary>
 Determines whether user has access to a specified module.
 </summary>
 <param name="moduleSystemName">The module system name.</param>
 <returns><c>True</c>, if current user has <see cref="F:Dynamicweb.Security.Permissions.PermissionLevel.Read"/> level or higher, otherwise <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Modules.ModulePermissionHelper.HasPermission(System.String,Dynamicweb.Security.Permissions.PermissionLevel)">
 <summary>
 Determines whether user has a specified permission level for a module.
 </summary>
 <param name="moduleSystemName">The module system name.</param>
 <param name="level">The minimum required permission level.</param>
 <returns><c>True</c>, if current user has permission, otherwise <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Modules.ModulePermissionHelper.HasPermission(Dynamicweb.Modules.Module,Dynamicweb.Security.Permissions.PermissionLevel)">
 <summary>
 Determines whether user has a specified permission level for a module.
 </summary>
 <param name="theModule">The module.</param>
 <param name="level">The minimum required permission level.</param>
 <returns><c>True</c>, if current user has permission, otherwise <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Modules.ModulePermissionHelper.GetPermission(Dynamicweb.Modules.Module)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Security.Permissions.PermissionLevel"/> for the <see cref="T:Dynamicweb.Modules.Module"/>.
 </summary>
 <param name="theModule">The module.</param>
 <returns>The permission level for current user.</returns>
</member>
<member name="T:Dynamicweb.Modules.Repositories.RepositoriesEventsObserver">
 <summary>
 Represents event handler for Repositories indexes builds
 </summary>
</member>
<member name="M:Dynamicweb.Modules.Repositories.RepositoriesEventsObserver.IndexBuildFinishedObserver.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Event handler for index build finished
 </summary>
 <param name="notification">Event name</param>
 <param name="args">Event argument</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Modules.Searching.Rules.IRuleFieldDatasource">
 <summary>
 Represents a data source for dictionary-based controls.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.IRuleFieldDatasource.GetData">
 <summary>
 Returns the data.
 </summary>
 <returns>Data returned by the source.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.IRuleFieldDatasource.SetData(System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
 Set the owner data.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Modules.Searching.Rules.RuleOperator">
 <summary>
 Represents an operator that is used for comparing the input values within the single rule.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleOperator.Equals">
 <summary>
 Equals.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleOperator.GreaterThan">
 <summary>
 Greater than.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleOperator.LessThan">
 <summary>
 Less than.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleOperator.GreaterThanOrEqualTo">
 <summary>
 Greater than or equal to.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleOperator.LessThanOrEqualTo">
 <summary>
 Less than or equal to.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleOperator.NotEqualTo">
 <summary>
 Not equal to.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleOperator.Contains">
 <summary>
 Contains.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleOperator.DoesNotContain">
 <summary>
 Does not contain.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleOperator.StartsWith">
 <summary>
 Starts with.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleOperator.DoesNotStartWith">
 <summary>
 Does not start with.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleOperator.EndsWith">
 <summary>
 Ends with.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleOperator.DoesNotEndWith">
 <summary>
 Does not end with.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleOperator.IsBefore">
 <summary>
 Is before
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleOperator.IsAfter">
 <summary>
 Is after
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleOperator.IsInRange">
 <summary>
 Is in range
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleOperator.IsUnder">
 <summary>
 Is under
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleOperator.DoesNotOccurBefore">
 <summary>
 Is not before
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleOperator.DoesNotOccurAfter">
 <summary>
 Is not after
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Modules.Searching.Rules.Rule">
 <summary>
 Rule for smart filter
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.Rule._values">
 <summary>
 Values
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Searching.Rules.Rule.Field">
 <summary>
 Gets the constraint that corresponds to this rule.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Searching.Rules.Rule.Operator">
 <summary>
 Gets the constraint that corresponds to this rule.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Searching.Rules.Rule.Value">
 <summary>
 Gets or sets the value
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Searching.Rules.Rule.ValueFrom">
 <summary>
 Gets or sets the from range value
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Searching.Rules.Rule.ValueTo">
 <summary>
 Gets or sets the to range value
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Searching.Rules.Rule.IsRangeValue">
 <summary>
 Check is range value 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Searching.Rules.Rule.IsEmpty">
 <summary>
 Check is empty object 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.Rule.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.Rule.#ctor(Dynamicweb.Modules.Searching.Rules.RuleField,Dynamicweb.Modules.Searching.Rules.RuleOperator,System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.Rule.#ctor(Dynamicweb.Modules.Searching.Rules.RuleField,Dynamicweb.Modules.Searching.Rules.RuleOperator,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Modules.Searching.Rules.RuleControlType">
 <summary>
 Represents an type of the smart search rule control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleControlType.TextBox">
 <summary>
 Text box.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleControlType.NumericBox">
 <summary>
 Text box for numeric.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleControlType.FloatNumericBox">
 <summary>
 Text box for numeric.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleControlType.DropDownList">
 <summary>
 DropDown list.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleControlType.BooleanCtrl">
 <summary>
 Boolean control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleControlType.RateCtrl">
 <summary>
 Rate ctrl.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleControlType.FileSelectorCtrl">
 <summary>
 File selector ctrl.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleControlType.LinkSelectorCtrl">
 <summary>
 Link Selector ctrl.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleControlType.DateTimeCtrl">
 <summary>
 Date time selector ctrl.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleControlType.EmailCtrl">
 <summary>
 Email selector ctrl.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleControlType.PageCtrl">
 <summary>
 Page selector ctrl.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleControlType.ProductCtrl">
 <summary>
 Product selector ctrl.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleControlType.DateCtrl">
 <summary>
 Date selector ctrl.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleControlType.AnoterTimeCtrl">
 <summary>
 Date time selector ctrl with additional "not" operators.
 </summary>
 <remarks>The name is a joke</remarks>
</member>
<member name="T:Dynamicweb.Modules.Searching.Rules.RuleField">
 <summary>
 Smart filter rule field
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Searching.Rules.RuleField.ID">
 <summary>
 Gets or sets the field id.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Searching.Rules.RuleField.UseDateControlWithoutTime">
 <summary>
 Gets or sets the field _useDateControlWithoutTime.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Searching.Rules.RuleField.Name">
 <summary>
 Gets or sets the field name.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Searching.Rules.RuleField.TypeName">
 <summary>
 Gets or sets the field type name.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Searching.Rules.RuleField.ShortTypeName">
 <summary>
 Gets or sets the short field type name.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Searching.Rules.RuleField.DataSource">
 <summary>
 Gets or sets the reference to a data source that is used for providing a list of possible values.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Searching.Rules.RuleField.ControlType">
 <summary>
 Gets or sets the smart search control type
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Searching.Rules.RuleField.IsEmpty">
 <summary>
 Check is empty object 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RuleField.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RuleField.#ctor(System.String,System.String,System.String,Dynamicweb.Modules.Searching.Rules.RuleControlType)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">A list of all possible values.</param>
 <param name="typeName">A list of all possible values.</param>
 <param name="controlType">A custom control type.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RuleField.#ctor(System.String,System.String,System.String,Dynamicweb.Modules.Searching.Rules.IRuleFieldDatasource,Dynamicweb.Modules.Searching.Rules.RuleControlType)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">A list of all possible values.</param>
 <param name="typeName">A list of all possible values.</param>
 <param name="dataSource">A smart field datasource .</param>
 <param name="controlType">A custom control type.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RuleField.SetControlType(System.String,Dynamicweb.Modules.Searching.Rules.IRuleFieldDatasource,Dynamicweb.Modules.Searching.Rules.RuleControlType)">
 <summary>
 Sets the type of the control.
 </summary>
 <param name="typeName">Name of the type.</param>
 <param name="dataSource">The data source.</param>
 <param name="controlType">Type of the control.</param>
</member>
<member name="T:Dynamicweb.Modules.Searching.Rules.RuleGroupCombineMethod">
 <summary>
 Rule combine method
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleGroupCombineMethod.None">
 <summary>
 Do not combine expression nodes.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleGroupCombineMethod.Or">
 <summary>
 Combine nodes using logical OR.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RuleGroupCombineMethod.And">
 <summary>
 Combine nodes using logical AND.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Modules.Searching.Rules.RulesGroup">
 <summary>
 Rule group
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Searching.Rules.RulesGroup.CombineMethod">
 <summary>
 Gets the combine method type for next group
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Searching.Rules.RulesGroup.Default">
 <summary>
 Gets the default.
 </summary>
 <value>
 The default.
 </value>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RulesGroup.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Modules.Searching.Rules.RulesGroupCollection">
 <summary>
 Represents the smart search rules group collection
 </summary>
</member>
<member name="P:Dynamicweb.Modules.Searching.Rules.RulesGroupCollection.IsEmpty">
 <summary>
 Is empty collection
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RulesGroupCollection.Serialize">
 <summary>
 Converts the current object to XML.
 </summary>
 <returns>XML document describing the current object.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RulesGroupCollection.Serialize(System.Xml.XmlElement@,System.Xml.XmlDocument@)">
 <summary>
 Serializes the specified append to.
 </summary>
 <param name="appendTo">The append to.</param>
 <param name="doc">The doc.</param>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RulesGroupCollection.Deserialize(System.Xml.XmlNode)">
 <summary>
 Deserializes the specified data node.
 </summary>
 <param name="dataNode">The data node.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RulesGroupCollection.Deserialize(System.Xml.XmlDocument)">
 <summary>
 Deserializes the specified data.
 </summary>
 <param name="data">The data.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RulesGroupCollection.Deserialize(System.Xml.XmlNode,System.Xml.XmlDocument)">
 <summary>
 Deserializes the specified data node.
 </summary>
 <param name="dataNode">The data node.</param>
 <param name="data">The data.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RulesGroupCollection.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Modules.Searching.Rules.RulesGroupCollection"/> class.
 </summary>
</member>
<member name="T:Dynamicweb.Modules.Searching.Rules.RulesUtility">
 <summary>
 Provides methods and properties for working with smart filter rules. This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Searching.Rules.RulesUtility.ValueSeparator">
 <summary>
 Gets or sets the value separator.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RulesUtility.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RulesUtility.ParseRules(System.String)">
 <summary>
 Parses the recognition expression from the given XML representation.
 </summary>
 <param name="xmlData">XML string representing an expression.</param>
 <returns>Parsed expression.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RulesUtility.UpdateFieldsTypeName(Dynamicweb.Modules.Searching.Rules.RulesGroupCollection@)">
 <summary>
 Updates the name of the fields type.
 </summary>
 <param name="rulesGroups">The rules groups.</param>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RulesUtility.GetFieldFullTypeName(System.String)">
 <summary>
 Gets the name of the field full type.
 </summary>
 <param name="fieldType">Type of the field.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RulesUtility.GetXmlAttributeValue(System.Xml.XmlAttributeCollection,System.String)">
 <summary>
 Get the xml attribute value by attribute name
 </summary>
 <param name="attributes">Attributes collection</param>
 <param name="name">Attribute name</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RulesUtility.Matches(System.String,Dynamicweb.Modules.Searching.Rules.Rule)">
 <summary>
 Determines whether the given test value matches the given rule.
 </summary>
 <param name="testValue">Test value.</param>
 <param name="rule">Smart filter rule.</param>
 <returns>Value indicating whether the given test value matches the given recognition rule constraint.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RulesUtility.Matches(System.String,Dynamicweb.Modules.Searching.Rules.Rule,System.Boolean)">
 <summary>
 Determines whether the given test value matches the given rule.
 </summary>
 <param name="testValue">Test value.</param>
 <param name="rule">Recognition rule.</param>
 <param name="decomposeValue">Value indicating whether to decompose both test value and constraint value (using <see cref="F:Dynamicweb.Modules.Searching.Rules.RulesUtility.ValueSeparator">ValueSeparator</see>) and compere their components instead.</param>
 <returns>Value indicating whether the given test value matches the given recognition rule constraint.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RulesUtility.MatchesInternal(System.String,System.String,Dynamicweb.Modules.Searching.Rules.RuleOperator)">
 <summary>
 Determines whether the given test value matches the given smart filter rule.
 </summary>
 <param name="testValue">Test value.</param>
 <param name="ruleValue ">Smart filter rule value.</param>
 <param name="operator">Smart filter rule operator.</param>
 <returns>Value indicating whether the given test value matches the given smart filter rule.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Searching.Rules.RulesUtility.MatchesInternal(System.String[],System.String[],Dynamicweb.Modules.Searching.Rules.RuleOperator)">
 <summary>
 Determines whether the given test value matches the given smart filter rule.
 </summary>
 <param name="testValues">Test values.</param>
 <param name="ruleValues">Smart filter rule value.</param>
 <param name="operator">Smart filter rule operator.</param>
 <returns>Value indicating whether the given test value matches the given smart filter rule.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Modules.UserManagement.GroupDeleteSubscriber">
 <summary>
 UserDeleteSubscriber class.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationSubscriber" />
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Modules.UserManagement.GroupDeleteSubscriber.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Called when the <see cref="F:Dynamicweb.Security.UserManagement.Notifications.Notifications.GroupDeleted" /> notification fires.
 </summary>
 <param name="notification">The notification that was fired. This value is in lowercase.</param>
 <param name="args">The arguments related to the fired notification.</param>
</member>
<member name="T:Dynamicweb.Modules.UserManagement.UserDeleteSubscriber">
 <summary>
 UserDeleteSubscriber class.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationSubscriber" />
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Modules.UserManagement.UserDeleteSubscriber.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Called when the <see cref="F:Dynamicweb.Security.UserManagement.Notifications.Notifications.UserDeleted" /> notification fires.
 </summary>
 <param name="notification">The notification that was fired. This value is in lowercase.</param>
 <param name="args">The arguments related to the fired notification.</param>
</member>
<member name="T:Dynamicweb.Modules.UserManagement.EditorConfiguration">
 <summary>
 This class contains functions to handle with configuration.
 </summary>
</member>
<member name="P:Dynamicweb.Modules.UserManagement.EditorConfiguration.ID">
 <summary>
 Stores and retrieves _id value.
 </summary>
 <value>Integer</value>
 <returns>Identifier</returns>
</member>
<member name="P:Dynamicweb.Modules.UserManagement.EditorConfiguration.Name">
 <summary>
 Stores and retrieves _name value.
 </summary>
 <value>String</value>
 <returns>_name</returns>
</member>
<member name="P:Dynamicweb.Modules.UserManagement.EditorConfiguration.Configuration">
 <summary>
 Load new Configuration properties.
 </summary>
 <value>Properties</value>
 <returns>Configuration properties</returns>
</member>
<member name="P:Dynamicweb.Modules.UserManagement.EditorConfiguration.XmlConfiguration">
 <summary>
 Stores and retrieves xml configuration value.
 </summary>
 <value>String</value>
 <returns>Xml configuration</returns>
</member>
<member name="P:Dynamicweb.Modules.UserManagement.EditorConfiguration.IsDefault">
 <summary>
 Gets or sets IsDefault property value
 </summary>
 <returns>True or false</returns>
</member>
<member name="P:Dynamicweb.Modules.UserManagement.EditorConfiguration.ConfigurationType">
 <summary>
 Gets or sets configuration type
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Modules.UserManagement.EditorConfiguration.AddInProviderName">
 <summary>
 Gets or sets add-in provider name
 </summary>
</member>
<member name="M:Dynamicweb.Modules.UserManagement.EditorConfiguration.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.Modules.UserManagement.EditorConfiguration.#ctor(System.Int32)">
 <summary>
 Initialize new instance of EditorConfiguration class.
 </summary>
 <param name="id">Identifier</param>
</member>
<member name="M:Dynamicweb.Modules.UserManagement.EditorConfiguration.Fill(System.Data.IDataReader)">
 <summary>
 Assigns EditorConfiguration class properties.
 </summary>
 <param name="dataReader"><see cref="T:System.Data.IDataReader"/></param>
</member>
<member name="M:Dynamicweb.Modules.UserManagement.EditorConfiguration.Save">
 <summary>
 Saves data to the DataManager.
 </summary>
</member>
<member name="M:Dynamicweb.Modules.UserManagement.EditorConfiguration.GetAllEditorConfigurations">
 <summary>
 Returns all EditorConfigurations.
 </summary>
</member>
<member name="M:Dynamicweb.Modules.UserManagement.EditorConfiguration.GetAllEditorConfigurations(System.Boolean)">
 <summary>
 Returns all Provider Based or old EditorConfigurations.
 </summary>
</member>
<member name="M:Dynamicweb.Modules.UserManagement.EditorConfiguration.Delete">
 <summary>
 Deletes current editor configuration
 </summary>
</member>
<member name="M:Dynamicweb.Modules.UserManagement.EditorConfiguration.Delete(System.Int32)">
 <summary>
 Deletes editor configuration with specific identifier
 </summary>
 <param name="deleteId">Identifier of editor configuration to be deleted</param>
</member>
<member name="M:Dynamicweb.Modules.UserManagement.EditorConfiguration.SetAsDefault">
 <summary>
 Sets current editor configuration as default
 </summary>
</member>
<member name="M:Dynamicweb.Modules.UserManagement.PagePermissions.CanEditPage(System.Int32)">
 <summary>
 Determines whether the page with the specified id, can be edited by the current user
 </summary>
 <param name="pageId">the id of the page to edit</param>
 <returns>True if the page can be edited by the current user, otherwise false</returns>
</member>
<member name="T:Dynamicweb.Modules.Annotations.ModuleAccessAttribute">
 <summary>
 Provides information about the module active state.
 </summary>
 <seealso cref="T:System.Attribute" />
</member>
<member name="M:Dynamicweb.Modules.Annotations.ModuleAccessAttribute.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Modules.Annotations.ModuleAccessAttribute"/> class.
 </summary>
</member>
<member name="M:Dynamicweb.Modules.Annotations.ModuleAccessAttribute.#ctor(System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Modules.Annotations.ModuleAccessAttribute"/> class.
 </summary>
 <param name="enabled">if set to <c>true</c> then the module will be active by default. Default value is <c>true</c>.</param>
</member>
<member name="P:Dynamicweb.Modules.Annotations.ModuleAccessAttribute.Enabled">
 <summary>
 Gets or sets a value indicating whether the module is active by default.
 </summary>
 <value>
   <c>true</c> if active; otherwise, <c>false</c>. Default value is <c>true</c>.
 </value>
</member>
<member name="T:Dynamicweb.Modules.Annotations.ModuleScriptPanelAttribute">
 <summary>
 Provides information about the module management panel.
 </summary>
 <seealso cref="T:System.Attribute" />
</member>
<member name="M:Dynamicweb.Modules.Annotations.ModuleScriptPanelAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Modules.Annotations.ModuleScriptPanelAttribute"/> class.
 </summary>
 <param name="path">The path.</param>
</member>
<member name="P:Dynamicweb.Modules.Annotations.ModuleScriptPanelAttribute.Path">
 <summary>
 Gets or sets the path.
 </summary>
 <value>
 The path.
 </value>
</member>
<member name="T:Dynamicweb.Modules.Annotations.ModuleControlPanelAttribute">
 <summary>
 Provides information about the module control panel.
 </summary>
 <seealso cref="T:System.Attribute" />
</member>
<member name="M:Dynamicweb.Modules.Annotations.ModuleControlPanelAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Modules.Annotations.ModuleControlPanelAttribute"/> class.
 </summary>
 <param name="path">The path.</param>
</member>
<member name="P:Dynamicweb.Modules.Annotations.ModuleControlPanelAttribute.Path">
 <summary>
 Gets or sets the path.
 </summary>
 <value>
 The path.
 </value>
</member>
<member name="T:Dynamicweb.Modules.Annotations.ModuleNameAttribute">
 <summary>
 Provides information about the module.
 </summary>
 <seealso cref="T:System.Attribute" />
</member>
<member name="M:Dynamicweb.Modules.Annotations.ModuleNameAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Modules.Annotations.ModuleNameAttribute"/> class.
 </summary>
 <param name="systemName">System name of the module.</param>
</member>
<member name="M:Dynamicweb.Modules.Annotations.ModuleNameAttribute.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Modules.Annotations.ModuleNameAttribute"/> class.
 </summary>
 <param name="systemName">System name of module.</param>
 <param name="name">Name of the module.</param>
</member>
<member name="P:Dynamicweb.Modules.Annotations.ModuleNameAttribute.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>
 The name.
 </value>
</member>
<member name="P:Dynamicweb.Modules.Annotations.ModuleNameAttribute.SystemName">
 <summary>
 Gets or sets the systemname.
 </summary>
 <value>
 The systemname.
 </value>
</member>
<member name="T:Dynamicweb.Modules.Annotations.ModuleDescriptionAttribute">
 <summary>
 Provides information about the module description.
 </summary>
 <seealso cref="T:System.Attribute" />
</member>
<member name="M:Dynamicweb.Modules.Annotations.ModuleDescriptionAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Modules.Annotations.ModuleDescriptionAttribute"/> class.
 </summary>
 <param name="description">The description.</param>
</member>
<member name="P:Dynamicweb.Modules.Annotations.ModuleDescriptionAttribute.Description">
 <summary>
 Gets or sets the description.
 </summary>
 <value>
 The description.
 </value>
</member>
<member name="T:Dynamicweb.Modules.Annotations.ModuleEditPanelAttribute">
 <summary>
 Provides information about the module edit panel.
 </summary>
 <seealso cref="T:System.Attribute" />
</member>
<member name="M:Dynamicweb.Modules.Annotations.ModuleEditPanelAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Modules.Annotations.ModuleEditPanelAttribute"/> class.
 </summary>
 <param name="path">The path to the edit panel of the module.</param>
</member>
<member name="P:Dynamicweb.Modules.Annotations.ModuleEditPanelAttribute.Path">
 <summary>
 Gets or sets the path.
 </summary>
 <value>
 The path.
 </value>
</member>
<member name="T:Dynamicweb.Modules.Annotations.ModuleIconAttribute">
 <summary>
 Provides information about the module icon.
 </summary>
 <seealso cref="T:System.Attribute" />
</member>
<member name="M:Dynamicweb.Modules.Annotations.ModuleIconAttribute.#ctor(Dynamicweb.Core.UI.Icons.KnownIcon)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Modules.Annotations.ModuleIconAttribute"/> class.
 </summary>
 <param name="knownIcon">A <see cref="T:Dynamicweb.Core.UI.Icons.KnownIcon"/>.</param>
</member>
<member name="M:Dynamicweb.Modules.Annotations.ModuleIconAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Modules.Annotations.ModuleIconAttribute"/> class.
 </summary>
 <param name="iconName">Name of the icon.</param>
</member>
<member name="P:Dynamicweb.Modules.Annotations.ModuleIconAttribute.IconName">
 <summary>
 Gets or sets the name of the icon.
 </summary>
 <value>
 A value of the <see cref="T:Dynamicweb.Core.UI.Icons.KnownIcon"/>.
 </value>
</member>
<member name="T:Dynamicweb.Modules.ContentModuleFactory">
 <summary>
 Responsible for creating instances of content modules.
 </summary>
</member>
<member name="M:Dynamicweb.Modules.ContentModuleFactory.CreateInstance(System.String)">
 <summary>
     Creates a new instance of a <see cref="T:Dynamicweb.Modules.ContentModule">ContentModule</see> implementation.
 </summary>
 <param name="moduleSystemName">System name of the module to instantiate</param>
 <returns>A new instance of a <see cref="T:Dynamicweb.Modules.ContentModule">ContentModule</see> implementation.</returns>
</member>
<member name="M:Dynamicweb.Modules.ContentModuleFactory.GetContentModuleTypes">
 <summary>
     Returns a list of all content module add-ins.
 </summary>
 <returns>A list of module types that inherits <see cref="T:Dynamicweb.Modules.ContentModule">ContentModule</see>.</returns>
</member>
<member name="T:Dynamicweb.Modules.Common.Lists">
 <summary>
 Class contains function for Lists handling.
 </summary>
</member>
<member name="P:Dynamicweb.Modules.Common.Lists.Sorting">
 <summary>
 Stores the sort directions string representation.
 </summary>
</member>
<member name="M:Dynamicweb.Modules.Common.Lists.GetSortField(System.Int32,System.String[])">
 <summary>
 Return the current sort field.
 </summary>
 <param name="sort">Sort direction.</param>
 <param name="sortFields">Sort string collection.</param>
</member>
<member name="M:Dynamicweb.Modules.Common.Lists.GetSortDirection(Dynamicweb.Modules.Common.SortDirection)">
 <summary>
 Gets list sort direction
 </summary>
 <param name="direction"><see cref="T:Dynamicweb.Modules.Common.SortDirection"/></param>
 <returns>String value representing sort direction</returns>
</member>
<member name="M:Dynamicweb.Modules.Common.Lists.GetRowCount(System.String,System.String)">
 <summary>
 Gets rows count
 </summary>
 <param name="tableName">Table name</param>
 <param name="filter">Filter value</param>
 <returns>Number of rows</returns>
</member>
<member name="T:Dynamicweb.Modules.Common.SortDirection">
 <summary>
 Stores a sort directions.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Modules.Common.SortDirection.ASC">
 <summary>
 Sort by ascendant = 0
 </summary>
</member>
<member name="F:Dynamicweb.Modules.Common.SortDirection.DESC">
 <summary>
 Sort by descendant = 1 
 </summary>
</member>
<member name="T:Dynamicweb.Modules.Common.PagingHandler">
 <summary>
 Handles paging of lists
 </summary>
</member>
<member name="P:Dynamicweb.Modules.Common.PagingHandler.EmptyRangeOnPageOverflow">
 <summary>
 Gets or sets a value indicating whether to return an empty range if current page is out of bounds.
 </summary>
 <value>
 <c>true</c> if empty range is returned for pages out of bounds; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Modules.Common.PagingHandler.IgnoreCollectionSizeForRange">
 <summary>
 Gets or sets a value indicating whether calculate range with the constraint of the collection size.
 </summary>
 <value>
 <c>true</c> if collection size constraint is ignored; otherwise, <c>false</c>.
 Default is <c>false</c>.
 </value>
</member>
<member name="T:Dynamicweb.Modules.Common.SearchUtilities">
 <summary>
 Some helper methods for searching
 </summary>
</member>
<member name="M:Dynamicweb.Modules.ServiceLocatorExtensions.GetModuleService(Dynamicweb.Extensibility.IServiceLocator)">
 <summary>
 Gets an implementation of the <see cref="T:Dynamicweb.Modules.IModuleService"/> interface
 </summary>
 <param name="serviceLocator">Extension method for an implementation of the <see cref="T:Dynamicweb.Extensibility.IServiceLocator"/> interface</param>
 <returns>An instance of the <see cref="T:Dynamicweb.Modules.IModuleService"/> interface</returns>
</member>
<member name="T:Dynamicweb.Modules.IModule">
 <summary>
 A marker interface for modules. 
 </summary>
</member>
<member name="T:Dynamicweb.Modules.IModuleService">
 <summary>
 The <see cref="T:Dynamicweb.Modules.IModuleService"/> interface defines operations for working with module settings.
 </summary>
</member>
<member name="M:Dynamicweb.Modules.IModuleService.Delete(System.Int32)">
 <summary>
 Deletes the module settings with the specified id
 </summary>
 <param name="id">The id of the module settings to delete</param>
</member>
<member name="M:Dynamicweb.Modules.ModulePermissionSettings.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="P:Dynamicweb.Modules.ModulePermissionSettings.Database">
 <summary>
 Gets or sets my database.
 </summary>
 <value>
 My database.
 </value>
</member>
<member name="P:Dynamicweb.Modules.ModulePermissionSettings.FieldID">
 <summary>
 Gets or sets the field ID.
 </summary>
 <value>
 The field ID.
 </value>
</member>
<member name="P:Dynamicweb.Modules.ModulePermissionSettings.FieldName">
 <summary>
 Gets or sets the name of the field.
 </summary>
 <value>
 The name of the field.
 </value>
</member>
<member name="P:Dynamicweb.Modules.ModulePermissionSettings.Table">
 <summary>
 Gets or sets the table.
 </summary>
 <value>
 The table.
 </value>
</member>
<member name="P:Dynamicweb.Modules.ModulePermissionSettings.Where">
 <summary>
 Gets or sets the where.
 </summary>
 <value>
 The where.
 </value>
</member>
<member name="T:Dynamicweb.Modules.Module">
 <summary>
 Represents a module registration in Dynamicweb database
 </summary>
</member>
<member name="M:Dynamicweb.Modules.Module.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Modules.Module" /> class.
 </summary>
 <param name="moduleSystemName">System name of the module.</param>
</member>
<member name="M:Dynamicweb.Modules.Module.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Modules.Module" /> class.
 </summary>
</member>
<member name="P:Dynamicweb.Modules.Module.Access">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Modules.Module" /> is access.
 </summary>
 <value>
   <c>true</c> if access; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Modules.Module.ControlPanel">
 <summary>
 Gets or sets the control panel script.
 </summary>
 <value>
 The control panel aspx script. I.e. /CustomModules/MyModule/MyModule_cpl.aspx
 </value>
</member>
<member name="P:Dynamicweb.Modules.Module.Description">
 <summary>
 Gets or sets the description.
 </summary>
 <value>
 The description.
 </value>
</member>
<member name="P:Dynamicweb.Modules.Module.IconClass">
 <summary>
 Gets or sets the module icon.
 </summary>
 <value>
 A value of the <see cref="T:Dynamicweb.Core.UI.Icons.KnownIcon"/>
 </value>
</member>
<member name="P:Dynamicweb.Modules.Module.ID">
 <summary>
 Gets or sets the ID.
 </summary>
 <value>
 The ID.
 </value>
</member>
<member name="P:Dynamicweb.Modules.Module.IsBeta">
 <summary>
 Gets or sets a value indicating whether this instance is beta.
 </summary>
 <value>
   <c>true</c> if this instance is beta; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Modules.Module.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>
 The name.
 </value>
</member>
<member name="P:Dynamicweb.Modules.Module.Paragraph">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Modules.Module" /> is paragraph.
 </summary>
 <value>
   <c>true</c> if paragraph; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Modules.Module.ParagraphEditPath">
 <summary>
 Gets or sets the paragraph edit path.
 </summary>
 <value>
 The paragraph edit path.
 </value>
</member>
<member name="P:Dynamicweb.Modules.Module.PermissionSettings">
 <summary>
 Gets or sets the search settings.
 </summary>
 <value>
 The search settings.
 </value>
</member>
<member name="P:Dynamicweb.Modules.Module.Script">
 <summary>
 Gets or sets the script.
 </summary>
 <value>
 The script.
 </value>
</member>
<member name="P:Dynamicweb.Modules.Module.SearchSettings">
 <summary>
 Gets or sets the search settings.
 </summary>
 <value>
 The search settings.
 </value>
</member>
<member name="P:Dynamicweb.Modules.Module.Sort">
 <summary>
 Gets or sets the sort.
 </summary>
 <value>
 The sort.
 </value>
</member>
<member name="P:Dynamicweb.Modules.Module.SystemName">
 <summary>
 Gets or sets the name of the system.
 </summary>
 <value>
 The name of the system.
 </value>
</member>
<member name="T:Dynamicweb.Modules.ModuleSearchSettings">
 <summary>
 Represents module settings
 </summary>
</member>
<member name="M:Dynamicweb.Modules.ModuleSearchSettings.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="P:Dynamicweb.Modules.ModuleSearchSettings.ItemNameFields">
 <summary>
 Gets item name fields array list
 </summary>
 <returns>Item name fields array list</returns>
</member>
<member name="P:Dynamicweb.Modules.ModuleSearchSettings.ItemTextFields">
 <summary>
 Gets item text fields array list
 </summary>
 <returns>Item text fields array list</returns>
</member>
<member name="M:Dynamicweb.Modules.ModuleRepository.UpdateModuleAccess(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
 <summary>
 Updates the module access.
 </summary>
 <param name="moduleSystemNames">The modules.</param>
 <param name="access">if set to <c>true</c> [access].</param>
</member>
<member name="M:Dynamicweb.Modules.ModuleRepository.DeserializeSearchSettings(System.String)">
 <summary>
 Loads xml data to current object
 </summary>
 <param name="xmlString">String value with xml data</param>
</member>
<member name="P:Dynamicweb.Modules.ModuleService.Repository">
 <summary>
 Gets the repository for <see cref="T:Dynamicweb.Modules.Module"/>
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Modules.ModuleService.UpdateModuleAccess(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
 <summary>
 Updates the module access.
 </summary>
 <param name="moduleSystemNames">The modules.</param>
 <param name="access">if set to <c>true</c> [access].</param>
</member>
<member name="T:Dynamicweb.Modules.NamespaceDoc">
 <summary>
 The Dynamicweb.Modules namespace contains parts of the basic infrastructure used for modules in Dynamicweb.
 </summary>
</member>
<member name="T:Dynamicweb.Modules.Properties">
 <summary>
 This class contains the methods and properties for work with properties hashtable related to module settings on a paragraph.
 </summary>
 <remarks>See Dynamicweb.ContentModule where this object is in use.</remarks>
</member>
<member name="M:Dynamicweb.Modules.Properties.LoadProperties(System.Data.DataRow)">
 <summary>
 Loads the properties of the current ParagraphRow.
 </summary>
 <param name="paragraphRow">Current ParagraphRow.</param>
 <returns>Properties.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Properties.LoadProperty(System.String)">
 <summary>
 Load property from the source to the hashtable.
 </summary>
 <param name="xml"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Properties.LoadProperty(System.String,System.Boolean)">
 <summary>
 Load property from the source to the hashtable.
 </summary>
 <param name="xml"></param>
 <param name="merge"></param>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Properties.ModuleBeingAttached">
 <summary>
 Used on Module Settings tab on paragraphs to see if the module is being attached
 </summary>
 <value></value>
 <returns>Returns true if the module is being attached</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Properties.SetDefaultValue(System.String,System.String)">
 <summary>
 Use to set default values used if no value is present or there is no underlying data
 </summary>
 <param name="name">Name of the property</param>
 <param name="newValue">Value of the property</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Properties.NodeRunDown(System.Xml.XmlNode,System.String,System.Boolean)">
 <summary>
 Runs down the hashtable with nodes. 
 </summary>
 <param name="node"></param>
 <param name="parent"></param>
 <param name="keepRoot"></param>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Properties.Value(System.String)">
 <summary>
 Stores and retrieves values from the nodes collection.
 </summary>
 <param name="Name"></param>
 <value>String</value>
 <returns>Current value.</returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Properties.Item(System.String)">
 <summary>
 Stores and retrieves Item of the current name value.
 </summary>
 <param name="Name"></param>
 <value>String</value>
 <returns>Current name value item.</returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Properties.Values">
 <summary>
 Returns the nodes hashtable.
 </summary>
 <value>Hashtable</value>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.Properties.GetTable(System.String)">
 <summary>
 Get current node from hashtable.
 </summary>
 <param name="node"></param>
 <value>String</value>
 <returns>Current node string. Otherwise "test".</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Properties.#ctor">
 <summary>
 Initialize a new node hashtable.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Properties.ToString">
 <summary>
 Returns a serialized XML-string representing the current object.
 </summary>
 <returns>A string representation of the current object.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Properties.LoadProperties">
 <summary>
 Loads the properties for the module tab of the current Paragraph. Used on Paragraph Module Settings tab.
 </summary>
 <returns>Properties.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Properties.LoadProperties(System.Int32)">
 <summary>
 Loads the properties of the specified paragraph
 </summary>
 <param name="paragraphId">The ID of the paragraph</param>
 <returns>Properties.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Modules.Properties.GetParagraphModuleSettings(System.Int32,System.Boolean)">
 <summary>
 Returns the paragraph module settings for the specified ParagraphID, should be used only from backend.
 </summary>
 <param name="paragraphId"></param>
</member>
<member name="M:Dynamicweb.Modules.Properties.GetParagraphModuleSettings(System.Int32,System.String)">
 <summary>
 Returns the paragraph module settings for the specified module on the specified page.
 </summary>
 <param name="pageId"></param>
 <param name="ParagraphModuleSystemName"></param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Modules.ContentModule">
 <summary>
 Responsible for outputting the HTML for your module in the frontend. A module can be attached to a paragraph in the administration. <c>ContentModule</c> is responsible for having the paragraph return some module output.
 Inherit this class and override the GetContent method to return the HTML for the module as a string.
 </summary>
 <remarks>The class created by inheriting <c>ContentModule</c> needs and attribute <c>AddInName</c> or <c>ModuleName</c> with a module system name specified. The module system name needs to be a-z and 0-9 and no spaces etc.</remarks>
 <example>
 <code description="How to inherit ContentModule and override GetContent" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\ContentModuleSample.cs" lang="CS"></code>
 <code description="How to use module annotations to provide module settings" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\ContentModuleWithAnnotationsSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Modules.ContentModule.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Modules.ContentModule" /> class.
 </summary>
 <remarks>Instance created by Dynamicweb when attaching a module to a paragraph.</remarks>
</member>
<member name="P:Dynamicweb.Modules.ContentModule.Pageview">
 <summary>
 Gets the PageView instance and gives you information about the current page that your module is used in. It gives you access to properties like the Page, the AreaID, information like style sheets and templates that are effective and it provides access to the current User of the page.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.ContentModule.Paragraph">
 <summary>
 Gets or sets the paragraph rendering the instance of this module.
 </summary>
</member>
<member name="P:Dynamicweb.Modules.ContentModule.ParagraphId">
 <summary>
 Gets the paragraph ID of the current paragraph attaching the module
 </summary>
 <value></value>
 <returns>An integer of the ParagraphID in table Paragraph.</returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Modules.ContentModule.Properties">
 <summary>
 Gets or sets a Properties object with values of the settings set when this instance of the module was attached to a paragraph.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
 <example>
 <code title="How to get a value from ther property collection" lang="VB">
 	template.SetTag("Text", Properties.Value("HelloText"))
 </code>
 <code title="How to get a value from ther property collection" description="" lang="CS">
     template.SetTag("Text", Properties.Values["HelloText"]);
 </code>
 </example>
</member>
<member name="M:Dynamicweb.Modules.ContentModule.GetContent">
 <summary>
 Override this method and return the HTML output for the module.
 </summary>
 <returns>Must return the markup that renders the module.</returns>
 <remarks>The markup returned is what is inserted into the template tag <c>ParagraphModule</c> in the paragraph template.</remarks>
 <example>
 <code description="How to inherit ContentModule and override GetContent" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\ContentModuleSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Modules.ContentModule.InitializeModule(Dynamicweb.Content.Paragraph,Dynamicweb.Frontend.PageView)">
 <summary>
 Initializes the instance of a content module. Dynamicweb calls this method when a ContentModule instance is created when attached to paragraph. Can be overridden.
 </summary>
 <param name="renderingParagraph">The paragraph creating the instance of this module</param>
 <param name="pageviewContext">An instance of the current pageview being showed</param>
 <remarks>Used internally. Dynamicweb handles the initialization and this method should normally not be called, but only overriden if needed.</remarks>
</member>
<member name="M:Dynamicweb.Modules.ContentModule.RequestContext(System.String)">
 <summary>
 Gets the value of <c>Name</c> in HTTP query string or post variables. Instead of using Request.QueryString or Request.Form.
 INFO: Calling this function is context sensitive to the paragraph the module is attached to. That means it will only return a 
 value if PID=123 equals the ParagraphID of the paragraph currently attaching the module or if PID is not specified. This is usefull when the same module is attached
 several times on the same page and you want different states of the modules on each paragraph. I.e. adding a querystring variable
 PageNum=2 would cause 2 instances of the module on the same page to change to page 2 when using normal request. If changed to PID=123&amp;PageNum=2
 and using <see cref="M:Dynamicweb.Modules.ContentModule.RequestContext(System.String)">RequestContext</see> would make only one of the instances go to page 2.
 </summary>
 <param name="name">Name of the value in the request collection</param>
 <returns>The value of the specified key</returns>
 <remarks>
 By default the return value has been SQL Escaped (Database.SQLEscapeInjection)
 </remarks>
</member>
<member name="T:Dynamicweb.Notifications.CommentNotification">
 <summary>
 Notifications for comment module
 </summary>
</member>
<member name="F:Dynamicweb.Notifications.CommentNotification.OnBeforeRenderComment">
 <summary>Comment before rendering notification. Occurs just before a comment is rendered in the list</summary>        
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.CommentNotification.OnBeforeRenderCommentArgs">Dynamicweb.Notifications.CommentNotification.OnBeforeRenderCommentArgs</see></remarks>
 <example>
 <code description="Overriding the comment before rendering in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Commenting\OnBeforeRenderCommentObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.CommentNotification.OnBeforeRenderCommentArgs">
 <summary>Provides information about the comment</summary>        
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.CommentNotification.OnBeforeRenderComment">Dynamicweb.Notifications.CommentNotification.OnBeforeRenderComment</see> notification</remarks>
 <example>
 <code description="Overriding the comment before rendering in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Commenting\OnBeforeRenderCommentObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Notifications.CommentNotification.OnBeforeRenderCommentArgs.Comment">
 <summary>
 Gets or sets the comment.
 </summary>
 <value>The comment.</value>
</member>
<member name="P:Dynamicweb.Notifications.CommentNotification.OnBeforeRenderCommentArgs.Template">
 <summary>
 Gets or sets the template.
 </summary>
 <value>The template.</value>
</member>
<member name="F:Dynamicweb.Notifications.CommentNotification.OnBeforeRenderComments">
 <summary>Comments before rendering notification. Occurs just before comments are rendered</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.CommentNotification.OnBeforeRenderCommentsArgs">Dynamicweb.Notifications.CommentNotification.OnBeforeRenderCommentsArgs</see></remarks>
 <example>
 <code description="Overriding the comments before rendering in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Commenting\OnBeforeRenderCommentsObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.CommentNotification.OnBeforeRenderCommentsArgs">
 <summary>Provides information about the comments</summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.CommentNotification.OnBeforeRenderComments">Dynamicweb.Notifications.CommentNotification.OnBeforeRenderComments</see> notification</remarks>
 <example>
 <code description="Overriding the comments before rendering in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Commenting\OnBeforeRenderCommentsObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Notifications.CommentNotification.OnBeforeRenderCommentsArgs.Comments">
 <summary>
 Gets or sets the comments.
 </summary>
 <value>The comment.</value>
</member>
<member name="P:Dynamicweb.Notifications.CommentNotification.OnBeforeRenderCommentsArgs.Template">
 <summary>
 Gets or sets the template.
 </summary>
 <value>The template.</value>
</member>
<member name="F:Dynamicweb.Notifications.CommentNotification.OnBeforeSave">
 <summary>Comment before save notification. Occurs just before a comment is saved</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.CommentNotification.CommentArgs">Dynamicweb.Notifications.CommentNotification.CommentArgs</see></remarks>
 <example>
 <code description="Overriding the comment before save in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Commenting\OnBeforeSaveObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.CommentNotification.OnAfterSave">
 <summary>Comment after save notification. Occurs just after a comment is saved</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.CommentNotification.CommentArgs">Dynamicweb.Notifications.CommentNotification.CommentArgs</see></remarks>
 <example>
 <code description="Overriding the comment after save in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Commenting\OnAfterSaveObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.CommentNotification.OnBeforeComment">
 <summary>On before comment notification. Occurs on submit of new comments - before the data is saved</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.CommentNotification.CommentArgs">Dynamicweb.Notifications.CommentNotification.CommentArgs</see></remarks>
 <example>
 <code description="Overriding the before comment submit in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Commenting\OnBeforeCommentObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.CommentNotification.OnAfterComment">
 <summary>On after comment notification. Occurs on submit of new comments - after the data is in the <see cref="T:Dynamicweb.Content.Commenting.Comment"></see> instance</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.CommentNotification.CommentArgs">Dynamicweb.Notifications.CommentNotification.CommentArgs</see></remarks>
 <example>
 <code description="Overriding the after comment submit in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Commenting\OnAfterCommentObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.CommentNotification.CommentArgs">
 <summary>Generic notification argument for comments</summary>
 <remarks>Arguments passed to:
 <see cref="F:Dynamicweb.Notifications.CommentNotification.OnBeforeSave">Dynamicweb.Notifications.CommentNotification.OnBeforeSave</see> notification, 
 <see cref="F:Dynamicweb.Notifications.CommentNotification.OnAfterSave">Dynamicweb.Notifications.CommentNotification.OnAfterSave</see> notification, 
 <see cref="F:Dynamicweb.Notifications.CommentNotification.OnBeforeComment">Dynamicweb.Notifications.CommentNotification.OnBeforeComment</see> notification, 
 <see cref="F:Dynamicweb.Notifications.CommentNotification.OnAfterComment">Dynamicweb.Notifications.CommentNotification.OnAfterComment</see> notification
 </remarks>
 <example>
 <code description="Overriding the comment before save in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Commenting\OnBeforeSaveObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Notifications.CommentNotification.CommentArgs.Comment">
 <summary>
 Gets or sets the comment.
 </summary>
 <value>The comment.</value>
</member>
<member name="T:Dynamicweb.Notifications.ItemNotification">
 <summary>
 Provides notifications names as well as notification argument types related to management of items. This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.ItemNotification.Saving">
 <summary>
 Occurs when the item is being saved.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.ItemNotification.Saved">
 <summary>
 Occurs after the item was saved.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.ItemNotification.Deleting">
 <summary>
 Occurs when the item is being deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.ItemNotification.Deleted">
 <summary>
 Occurs after the item was deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.ItemNotification.UserEditorRendering">
 <summary>
 Occurs when the item of type UserEditor is rendered.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.ItemNotification.ItemTypeSourceLocationChanged">
 <summary>
 Occurs when the item type source location is changed.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Notifications.ItemNotification.ItemArgs">
 <summary>
 Provides information about the item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Notifications.ItemNotification.ItemArgs.Item">
 <summary>
 Gets or sets the item instance.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.ItemNotification.ItemArgs.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.ItemNotification.ItemArgs.#ctor(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="item">Item instance.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.ItemNotification.ItemArgs.ToItem(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Returns an instance of an <see cref="T:Dynamicweb.Content.Items.Item">Item</see> object that corresponds to the given <see cref="T:Dynamicweb.Content.Items.ItemEntry">ItemEntry</see> object.
 </summary>
 <param name="i"><see cref="T:Dynamicweb.Content.Items.ItemEntry">ItemEntry</see> object to convert.</param>
 <returns>An instance of an <see cref="T:Dynamicweb.Content.Items.Item">Item</see> object.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Notifications.ItemNotification.CancelableItemArgs">
 <summary>
 Provides information about the item with the ability to cancel the further execution.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Notifications.ItemNotification.CancelableItemArgs.Item">
 <summary>
 Gets or sets the item instance.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.ItemNotification.CancelableItemArgs.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.ItemNotification.CancelableItemArgs.#ctor(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="item">Item instance.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.ItemNotification.CancelableItemArgs.ToItem(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Returns an instance of an <see cref="T:Dynamicweb.Content.Items.Item">Item</see> object that corresponds to the given <see cref="T:Dynamicweb.Content.Items.ItemEntry">ItemEntry</see> object.
 </summary>
 <param name="i"><see cref="T:Dynamicweb.Content.Items.ItemEntry">ItemEntry</see> object to convert.</param>
 <returns>An instance of an <see cref="T:Dynamicweb.Content.Items.Item">Item</see> object.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Notifications.ItemNotification.ItemUpdateArgs">
 <summary>
 Provides information about the update process of an item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Notifications.ItemNotification.ItemUpdateArgs.IsNew">
 <summary>
 Gets or sets value indicating whether this is a new item record.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.ItemNotification.ItemUpdateArgs.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.ItemNotification.ItemUpdateArgs.#ctor(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="item">Item instance.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Notifications.ItemNotification.UserEditorArgs">
 <summary>
 Provides information about the user editor item.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.ItemNotification.UserEditorArgs.Context">
 <summary>
 Editor rendering context
 </summary>
</member>
<member name="F:Dynamicweb.Notifications.ItemNotification.UserEditorArgs.Users">
 <summary>
 Users to render
 </summary>
</member>
<member name="M:Dynamicweb.Notifications.ItemNotification.UserEditorArgs.#ctor(Dynamicweb.Content.Items.Editors.EditorRenderingContext,Dynamicweb.Security.UserManagement.UserCollection)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="context">Editor rendering context</param>
 <param name="users">Users to render</param>
</member>
<member name="T:Dynamicweb.Notifications.ItemNotification.ItemTypeSourceLocationArgs">
 <summary>
 Provides information about the item type source location.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Notifications.ItemNotification.ItemTypeSourceLocationArgs.SourceLocation">
 <summary>
 Gets or sets item type source location.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.ItemNotification.ItemTypeSourceLocationArgs.#ctor(Dynamicweb.Content.Items.Metadata.MetadataManager.SourceLocations)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="sourceLocation">The item type source location.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Notifications.Repositories">
 <summary>
 Provides notifications names as well as notification argument types related to management of repositories. This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.Repositories.Index.IndexBuildFinished">
 <summary>
 Occurs when the item is being saved.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Notifications.Repositories.Index.IndexBuildFinishedArgs">
 <summary>
 Provides the information about the finished index build
 </summary>
</member>
<member name="P:Dynamicweb.Notifications.Repositories.Index.IndexBuildFinishedArgs.Tracker">
 <summary>
 Gets the build tracker
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Notifications.Repositories.Index.IndexBuildFinishedArgs.NotificationSettings">
 <summary>
 Gets the build notification settings
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.Repositories.Index.IndexBuildFinishedArgs.#ctor(Dynamicweb.Diagnostics.Tracking.Tracker,Dynamicweb.Indexing.IIndexBuilderNotification)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="tracker">Build tracker.</param>
 ''' <param name="notificationSettings">Build notification settings.</param>
 <remarks>Must be public due to calls from other project</remarks>
</member>
<member name="T:Dynamicweb.Notifications.RepositoryNotification">
 <summary>
 Provides notifications names as well as notification argument types related to management of repositories. This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.RepositoryNotification.Index.IndexBuildFinished">
 <summary>
 Occurs when the item is being saved.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Notifications.RepositoryNotification.Index.IndexBuildFinishedArgs">
 <summary>
 Provides the information about the finished index build
 </summary>
</member>
<member name="P:Dynamicweb.Notifications.RepositoryNotification.Index.IndexBuildFinishedArgs.Tracker">
 <summary>
 Gets the build tracker
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Notifications.RepositoryNotification.Index.IndexBuildFinishedArgs.NotificationSettings">
 <summary>
 Gets the build notification settings
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.RepositoryNotification.Index.IndexBuildFinishedArgs.#ctor(Dynamicweb.Diagnostics.Tracking.Tracker,Dynamicweb.Indexing.IIndexBuilderNotification)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="tracker">Build tracker.</param>
 ''' <param name="notificationSettings">Build notification settings.</param>
 <remarks>Must be public due to calls from other project</remarks>
</member>
<member name="T:Dynamicweb.Notifications.NamespaceDoc">
 <summary>
 The Dynamicweb.Notifications namespace contains notificatioins and notification argument classes used in Dynamicweb assembly.
 </summary>
</member>
<member name="T:Dynamicweb.Notifications.Commenting">
 <summary>
 Notifications for comment module
 </summary>
</member>
<member name="F:Dynamicweb.Notifications.Commenting.OnBeforeRenderComment">
 <summary>Comment before rendering notification. Occurs just before a comment is rendered in the list</summary>        
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Commenting.OnBeforeRenderCommentArgs">Dynamicweb.Notifications.Commenting.OnBeforeRenderCommentArgs</see></remarks>
 <example>
 <code description="Overriding the comment before rendering in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Commenting\OnBeforeRenderCommentObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Commenting.OnBeforeRenderCommentArgs">
 <summary>Provides information about the comment</summary>        
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Commenting.OnBeforeRenderComment">Dynamicweb.Notifications.Commenting.OnBeforeRenderComment</see> notification</remarks>
 <example>
 <code description="Overriding the comment before rendering in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Commenting\OnBeforeRenderCommentObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Notifications.Commenting.OnBeforeRenderCommentArgs.Comment">
 <summary>
 Gets or sets the comment.
 </summary>
 <value>The comment.</value>
</member>
<member name="P:Dynamicweb.Notifications.Commenting.OnBeforeRenderCommentArgs.Template">
 <summary>
 Gets or sets the template.
 </summary>
 <value>The template.</value>
</member>
<member name="F:Dynamicweb.Notifications.Commenting.OnBeforeRenderComments">
 <summary>Comments before rendering notification. Occurs just before comments are rendered</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Commenting.OnBeforeRenderCommentsArgs">Dynamicweb.Notifications.Commenting.OnBeforeRenderCommentsArgs</see></remarks>
 <example>
 <code description="Overriding the comments before rendering in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Commenting\OnBeforeRenderCommentsObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Commenting.OnBeforeRenderCommentsArgs">
 <summary>Provides information about the comments</summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Commenting.OnBeforeRenderComments">Dynamicweb.Notifications.Commenting.OnBeforeRenderComments</see> notification</remarks>
 <example>
 <code description="Overriding the comments before rendering in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Commenting\OnBeforeRenderCommentsObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Notifications.Commenting.OnBeforeRenderCommentsArgs.Comments">
 <summary>
 Gets or sets the comments.
 </summary>
 <value>The comment.</value>
</member>
<member name="P:Dynamicweb.Notifications.Commenting.OnBeforeRenderCommentsArgs.Template">
 <summary>
 Gets or sets the template.
 </summary>
 <value>The template.</value>
</member>
<member name="F:Dynamicweb.Notifications.Commenting.OnBeforeSave">
 <summary>Comment before save notification. Occurs just before a comment is saved</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Commenting.CommentArgs">Dynamicweb.Notifications.Commenting.CommentArgs</see></remarks>
 <example>
 <code description="Overriding the comment before save in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Commenting\OnBeforeSaveObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Commenting.OnAfterSave">
 <summary>Comment after save notification. Occurs just after a comment is saved</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Commenting.CommentArgs">Dynamicweb.Notifications.Commenting.CommentArgs</see></remarks>
 <example>
 <code description="Overriding the comment after save in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Commenting\OnAfterSaveObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Commenting.OnBeforeComment">
 <summary>On before comment notification. Occurs on submit of new comments - before the data is saved</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Commenting.CommentArgs">Dynamicweb.Notifications.Commenting.CommentArgs</see></remarks>
 <example>
 <code description="Overriding the before comment submit in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Commenting\OnBeforeCommentObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Commenting.OnAfterComment">
 <summary>On after comment notification. Occurs on submit of new comments - after the data is in the <see cref="T:Dynamicweb.Content.Commenting.Comment"></see> instance</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Commenting.CommentArgs">Dynamicweb.Notifications.Commenting.CommentArgs</see></remarks>
 <example>
 <code description="Overriding the after comment submit in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Commenting\OnAfterCommentObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Commenting.CommentArgs">
 <summary>Generic notification argument for comments</summary>
 <remarks>Arguments passed to:
 <see cref="F:Dynamicweb.Notifications.Commenting.OnBeforeSave">Dynamicweb.Notifications.Commenting.OnBeforeSave</see> notification, 
 <see cref="F:Dynamicweb.Notifications.Commenting.OnAfterSave">Dynamicweb.Notifications.Commenting.OnAfterSave</see> notification, 
 <see cref="F:Dynamicweb.Notifications.Commenting.OnBeforeComment">Dynamicweb.Notifications.Commenting.OnBeforeComment</see> notification, 
 <see cref="F:Dynamicweb.Notifications.Commenting.OnAfterComment">Dynamicweb.Notifications.Commenting.OnAfterComment</see> notification
 </remarks>
 <example>
 <code description="Overriding the comment before save in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Commenting\OnBeforeSaveObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Notifications.Commenting.CommentArgs.Comment">
 <summary>
 Gets or sets the comment.
 </summary>
 <value>The comment.</value>
</member>
<member name="T:Dynamicweb.Notifications.Items">
 <summary>
 Provides notifications names as well as notification argument types related to management of items. This class cannot be inherited.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.Items.Saving">
 <summary>
 Occurs when the item is being saved.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.Items.Saved">
 <summary>
 Occurs after the item was saved.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.Items.Deleting">
 <summary>
 Occurs when the item is being deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.Items.Deleted">
 <summary>
 Occurs after the item was deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Notifications.Items.ItemArgs">
 <summary>
 Provides information about the item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Notifications.Items.ItemArgs.Item">
 <summary>
 Gets or sets the item instance.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.Items.ItemArgs.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.Items.ItemArgs.#ctor(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="item">Item instance.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.Items.ItemArgs.ToItem(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Returns an instance of an <see cref="T:Dynamicweb.Content.Items.Item">Item</see> object that corresponds to the given <see cref="T:Dynamicweb.Content.Items.ItemEntry">ItemEntry</see> object.
 </summary>
 <param name="i"><see cref="T:Dynamicweb.Content.Items.ItemEntry">ItemEntry</see> object to convert.</param>
 <returns>An instance of an <see cref="T:Dynamicweb.Content.Items.Item">Item</see> object.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Notifications.Items.CancelableItemArgs">
 <summary>
 Provides information about the item with the ability to cancel the further execution.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Notifications.Items.CancelableItemArgs.Item">
 <summary>
 Gets or sets the item instance.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.Items.CancelableItemArgs.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.Items.CancelableItemArgs.#ctor(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="item">Item instance.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.Items.CancelableItemArgs.ToItem(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Returns an instance of an <see cref="T:Dynamicweb.Content.Items.Item">Item</see> object that corresponds to the given <see cref="T:Dynamicweb.Content.Items.ItemEntry">ItemEntry</see> object.
 </summary>
 <param name="i"><see cref="T:Dynamicweb.Content.Items.ItemEntry">ItemEntry</see> object to convert.</param>
 <returns>An instance of an <see cref="T:Dynamicweb.Content.Items.Item">Item</see> object.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Notifications.Items.ItemUpdateArgs">
 <summary>
 Provides information about the update process of an item.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Notifications.Items.ItemUpdateArgs.IsNew">
 <summary>
 Gets or sets value indicating whether this is a new item record.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.Items.ItemUpdateArgs.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.Items.ItemUpdateArgs.#ctor(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="item">Item instance.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Notifications.Standard">
 <summary>Provides notifications for standard objects.
 Find the various notifications in the list:
 <list>
 <item><see cref="T:Dynamicweb.Notifications.Standard.Admin"></see></item>
 <item><see cref="T:Dynamicweb.Notifications.Standard.Application"></see></item>
 <item><see cref="T:Dynamicweb.Notifications.Standard.Page"></see></item>
 <item><see cref="T:Dynamicweb.Notifications.Standard.Paragraph"></see></item>
 <item><see cref="T:Dynamicweb.Security.UserManagement.User"></see></item>
 </list>
 </summary>
 <remarks></remarks>
 <example>
 <code description="How to subscribe to the notifications in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PageLoadedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Page">
 <summary>Provides notification names for pages.</summary>
 <example>
 <code description="How to subscribe to the notifications in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PageLoadedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Page.NotFound">
 <summary>Page not found notification. Occurs when the 404 handler is about to process the request.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Page.NotFoundArgs">Dynamicweb.Notifications.Standard.Page.NotFoundEventArgs</see></remarks>
 <example>
 <code description="Overriding the page loading in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PageNotFoundObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Page.NotFoundArgs">
 <summary>
 Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Page.NotFound">Dynamicweb.Notifications.Standard.Page.NotFound</see> notification
 </summary>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Page.NotFoundArgs.Url">
 <summary>
 Gets the absolute URL of the not found page
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.Standard.Page.NotFoundArgs.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="url">Absolute URL of the not found page.</param>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Page.Loaded">
 <summary>Page loaded notification. Occurs after the page has been loaded.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Page.LoadedArgs">Dynamicweb.Notifications.Standard.Page.LoadedArgs</see></remarks>
 <example>
 <code description="Overriding the page loading in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PageLoadedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Page.LoadedArgs">
 <summary>
 Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Page.Loaded">Dynamicweb.Notifications.Standard.Page.Loaded</see> notification
 </summary>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Page.LoadedArgs.PageViewInstance">
 <summary>
 Gets or sets the pageview instance.
 </summary>
 <value>The pageview.</value>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Page.OnBeforeRenderParagraphs">
 <summary>Page notification that occurs before the paragraphs will be rendered.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Page.OnBeforeRenderParagraphsArgs" /></remarks>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Page.OnBeforeRenderParagraphsArgs">
 <summary>
 Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Page.OnBeforeRenderParagraphs" /> notification
 </summary>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Page.OnBeforeRenderParagraphsArgs.PageView">
 <summary>
 Gets or sets the page view.
 </summary>
 <value>The current page view.</value>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Page.OnBeforeRenderParagraphsArgs.Paragraphs">
 <summary>
 Gets or sets the paragraphs that should be rendered.
 </summary>
 <value>The paragraphs to be rendered in the current page view.</value>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Page.AfterOutput">
 <summary>Page after output notification. Occurs after the page has been rendered.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Page.AfterOutputArgs">Dynamicweb.Notifications.Standard.Page.AfterOutputArgs</see></remarks>
 <example>
 <code description="Overriding the page after output in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PageAfterOutputObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Page.AfterOutputArgs">
 <summary>
 Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Page.AfterOutput">Dynamicweb.Notifications.Standard.Page.AfterOutput</see> notification
 </summary>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Page.AfterOutputArgs.PageViewTemplate">
 <summary>
 Gets or sets the template instance that contains the parsed pageview output just before it is send to the client.
 </summary>
 <value>The template.</value>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Page.OnOutput">
 <summary>Page on output notification. Occurs before Output method activation in page template</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Page.OnOutputArgs">Dynamicweb.Notifications.Standard.Page.OnOutputArgs</see></remarks>
 <example>
 <code description="Overriding the page before output in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PageOnOutputObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Page.OnOutputArgs">
 <summary>
 Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Page.OnOutput">Dynamicweb.Notifications.Standard.Page.OnOutput</see> notification
 </summary>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Page.OnOutputArgs.PageViewTemplate">
 <summary>
 Gets or sets the template instance that contains the parsed pageview output just before it is rendered. All page template tags are set on the object.
 </summary>
 <value>The template.</value>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Page.AfterRender">
 <summary>Page after render notification. Occurs after the page has been rendered.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Page.AfterRenderArgs">Dynamicweb.Notifications.Standard.Page.AfterRenderArgs</see></remarks>
 <example>
 <code description="Overriding the page after render in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PageAfterRenderObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Page.AfterRenderArgs">
 <summary>
 Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Page.AfterRender">Dynamicweb.Notifications.Standard.Page.AfterRender</see> notification.
 </summary>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Page.AfterRenderArgs.Template">
 <summary>
 Gets or sets the template instance that contains the parsed pageview output just before it is send to the client.
 </summary>
 <value>The template.</value>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Page.PageTitle">
 <summary>Page title notification. Occurs when the title is assigned to a page.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Page.PageTitleArgs">Dynamicweb.Notifications.Standard.Page.PageTitleArgs</see></remarks>
 <example>
 <code description="Overriding the page title in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PageTitleObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Page.PageTitleArgs">
 <summary>
 Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Page.PageTitle">Dynamicweb.Notifications.Standard.Page.PageTitle</see> notification
 </summary>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Page.PageTitleArgs.PageView">
 <summary>
 Gets or sets the pageview instance.
 </summary>
 <value>The pageview.</value>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Page.DeviceDetected">
 <summary>
 Device detected notification. Occurs when a visitors device type and platform is detected in a pageview in the frontend.
 </summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Page.DeviceDetectedArgs"></see></remarks>
 <example>
 <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\DeviceDetectedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Page.DeviceDetectedArgs">
 <summary>
 Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Page.DeviceDetected"></see> notification
 </summary>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Page.DeviceDetectedArgs.PageView">
 <summary>
 Gets or sets the pageview instance.
 </summary>
 <value>The pageview.</value>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Page.DeviceDetectedArgs.Platform">
 <summary>
 Gets or sets the platform.
 </summary>
 <value>
 The detected <see cref="T:Dynamicweb.Frontend.Devices.PlatformType"></see> of the pageview
 </value>
 <remarks>Set this property if an alternative or more precise detection is used</remarks>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Page.DeviceDetectedArgs.Device">
 <summary>
 Gets or sets the device.
 </summary>
 <value>
 The detected <see cref="T:Dynamicweb.Frontend.Devices.DeviceType"></see> of the pageview.
 </value>
 <remarks>Set this property if an alternative or more precise detection is used</remarks>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Page.OnBeforeSave">
 <summary>Page before save notification. Occurs before the page is saved.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Page.PageNotificationArgs">Dynamicweb.Notifications.Standard.Page.PageNotificationArgs</see></remarks>
 <example>
 <code description="Overriding on before page save in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PageOnBeforeSaveObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Page.Saved">
 <summary>Page saved notification. Occurs after the page has been saved.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Page.PageNotificationArgs">Dynamicweb.Notifications.Standard.Page.PageNotificationArgs</see></remarks>
 <example>
 <code description="Overriding the page saved in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PageSavedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Page.Deleted">
 <summary>Page deleted notification. Occurs after the page has been deleted.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Page.PageNotificationArgs">Dynamicweb.Notifications.Standard.Page.PageNotificationArgs</see></remarks>
 <example>
 <code description="Overriding the page deleted in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PageDeletedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Page.Restored">
 <summary>Page deleted notification. Occurs after the page has been restored from trashbin.</summary>
 <remarks>The passed PageRestoredEventArgs is <see cref="T:Dynamicweb.Notifications.Standard.Page.PageRestoredEventArgs">Dynamicweb.Notifications.Standard.Page.PageRestoredEventArgs</see></remarks>
 <example>
 <code description="Overriding the page deleted in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PageRestoreObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Page.PublishedStateChanged">
 <summary>Page published state changed notification. Occurs after the page "Published" state has been changed.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Page.PageNotificationArgs">Dynamicweb.Notifications.Standard.Page.PageNotificationArgs</see></remarks>
 <example>
 <code description="Overriding the page published state changed in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PagePublishedStateChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Page.ActiveStateChanged">
 <summary>Page active state changed notification. Occurs after the page "Active" state has been changed.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Page.PageNotificationArgs">Dynamicweb.Notifications.Standard.Page.PageNotificationArgs</see></remarks>
 <example>
 <code description="Overriding the page active state changed in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PageActiveStateChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Page.Optimized">
 <summary>Page optimized notification. Occurs after the page has been optimized.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Page.PageNotificationArgs">Dynamicweb.Notifications.Standard.Page.PageNotificationArgs</see></remarks>
 <example>
 <code description="Overriding the page optimized in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PageOptimizedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Page.OnGlobalTags">
 <summary>On global tags notification. Occurs when the globaltags are set.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Page.PageviewNotificationArgs">Dynamicweb.Notifications.Standard.Page.PageviewNotificationArgs</see></remarks>
 <example>
 <code description="Overriding the page global tags in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PageviewObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Page.PageviewNotificationArgs">
 <summary>Generic notification argument for notifications in pageviev object</summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Page.OnGlobalTags">Dynamicweb.Notifications.Standard.Page.OnGlobalTags</see> notification</remarks>
 <example>
 <code description="Overriding the page markup validation completed in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PageviewObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Page.PageNotificationArgs">
 <summary>Provides information about the single page.</summary>
 <remarks>
 Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Page.Saved">Dynamicweb.Notifications.Standard.Page.Saved</see> notification,
 <see cref="F:Dynamicweb.Notifications.Standard.Page.Deleted">Dynamicweb.Notifications.Standard.Page.Deleted</see> notification,
 <see cref="F:Dynamicweb.Notifications.Standard.Page.PublishedStateChanged">Dynamicweb.Notifications.Standard.Page.PublishedStateChanged</see> notification,
 <see cref="F:Dynamicweb.Notifications.Standard.Page.ActiveStateChanged">Dynamicweb.Notifications.Standard.Page.ActiveStateChanged</see> notification,
 <see cref="F:Dynamicweb.Notifications.Standard.Page.Optimized">Dynamicweb.Notifications.Standard.Page.Optimized</see> notification
 </remarks>
 <example>
 <code description="Using PageNotificationArgs in the page saved notification of Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PageSavedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Page.PageNotificationArgs.Target">
 <summary>
 Gets the instance to a target page.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.Standard.Page.PageNotificationArgs.#ctor(Dynamicweb.Content.Page)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="target">Target page.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Page.PageRestoredEventArgs">
 <summary>Provides information about restored page page.</summary>
 <example>
 <code description="Using PageRestoredEventArgs in the page restored notification of Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Page\PageRestoreObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Page.PageRestoredEventArgs.PageID">
 <summary>
 Gets the id of target page
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.Standard.Page.PageRestoredEventArgs.#ctor(System.Int32)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="id">Page id</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Paragraph">
 <summary>Provides notification names for paragraphs.</summary>
 <example>
 <code description="How to subscribe to the paragraph notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Paragraph\ParagraphOnBeforeRenderObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Paragraph.OnBeforeRender">
 <summary>Paragraph before render notification. Occurs before the paragraph will be rendered.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Paragraph.OnBeforeRenderArgs">Dynamicweb.Notifications.Standard.Paragraph.OnBeforeRenderArgs</see></remarks>
 <example>
 <code description="Overriding on before render the paragraph in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Paragraph\ParagraphOnBeforeRenderObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Paragraph.OnBeforeSave">
 <summary>Paragraph before save notification. Occurs before the paragraph is saved.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Paragraph.ParagraphNotificationArgs">Dynamicweb.Notifications.Standard.Paragraph.ParagraphNotificationArgs</see></remarks>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Paragraph.Saved">
 <summary>Paragraph saved notification. Occurs after the paragraph has been saved.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Paragraph.ParagraphNotificationArgs">Dynamicweb.Notifications.Standard.Paragraph.ParagraphNotificationArgs</see></remarks>
 <example>
 <code description="Overriding paragraph saved in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Paragraph\ParagraphSavedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Paragraph.Deleted">
 <summary>Paragraph deleted notification. Occurs after the paragraph has been deleted.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Paragraph.ParagraphNotificationArgs">Dynamicweb.Notifications.Standard.Paragraph.ParagraphNotificationArgs</see></remarks>
 <example>
 <code description="Overriding paragraph deleted in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Paragraph\ParagraphDeletedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Paragraph.Restored">
 <summary>Paragraph restored notification. Occurs after the paragraph has been restored from trashbin.</summary>
 <remarks>The passed ParagraphRestoredEventArgs is <see cref="T:Dynamicweb.Notifications.Standard.Paragraph.ParagraphRestoredEventArgs">Dynamicweb.Notifications.Standard.Paragraph.ParagraphRestoredEventArgs</see></remarks>
 <code description="Overriding paragraph deleted in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Paragraph\ParagraphRestoreObserver.cs" lang="CS"></code>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Paragraph.ActiveStateChanged">
 <summary>Paragraph active state changed notification. Occurs after the "Active" state of the paragraph has been changed.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Paragraph.ParagraphNotificationArgs">Dynamicweb.Notifications.Standard.Paragraph.ParagraphNotificationArgs</see></remarks>
 <example>
 <code description="Overriding paragraph active state changed in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Paragraph\ParagraphActiveStateChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Paragraph.ModuleAttached">
 <summary>Paragraph module attached notification. Occurs after the module has been attached to the paragraph.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Paragraph.ParagraphModuleNotificationArgs">Dynamicweb.Notifications.Standard.Paragraph.ParagraphModuleNotificationArgs</see></remarks>
 <example>
 <code description="Overriding paragraph module attached in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Paragraph\ParagraphModuleAttachedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Paragraph.ModuleDetached">
 <summary>Paragraph module detached notification. Occurs after the module has been detached from the paragraph.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Paragraph.ParagraphModuleNotificationArgs">Dynamicweb.Notifications.Standard.Paragraph.ParagraphModuleNotificationArgs</see></remarks>
 <example>
 <code description="Overriding paragraph module detached in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Paragraph\ParagraphModuleDetachedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Paragraph.ParagraphNotificationArgs">
 <summary>Provides information about the single paragraph.</summary>
 <remarks>Arguments passed to:
 <see cref="F:Dynamicweb.Notifications.Standard.Paragraph.Saved">Dynamicweb.Notifications.Standard.Paragraph.Saved</see> notification,
 <see cref="F:Dynamicweb.Notifications.Standard.Paragraph.Deleted">Dynamicweb.Notifications.Standard.Paragraph.Deleted</see> notification,
 <see cref="F:Dynamicweb.Notifications.Standard.Paragraph.ActiveStateChanged">Dynamicweb.Notifications.Standard.Paragraph.ActiveStateChanged</see> notification
 </remarks>
 <example>
 <code description="Overriding paragraph deleted in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Paragraph\ParagraphDeletedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Paragraph.ParagraphNotificationArgs.Target">
 <summary>
 Gets the target paragraph.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.Standard.Paragraph.ParagraphNotificationArgs.#ctor(Dynamicweb.Content.Paragraph)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="target">Target paragraph.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Paragraph.ParagraphRestoredEventArgs">
 <summary>Provides information about the restored paragraph.</summary>
 <example>
 <code description="Overriding paragraph restored in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Paragraph\ParagraphRestoreObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Paragraph.ParagraphRestoredEventArgs.ParagraphID">
 <summary>
 Gets the target paragraph id.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.Standard.Paragraph.ParagraphRestoredEventArgs.#ctor(System.Int32)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="id">Target paragraph id.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Paragraph.ParagraphModuleNotificationArgs">
 <summary>Provides information about the module which has been attached to/detached from the paragraph.</summary>
 <remarks>Arguments passed to:
 <see cref="F:Dynamicweb.Notifications.Standard.Paragraph.ModuleAttached">Dynamicweb.Notifications.Standard.Paragraph.ModuleAttached</see> notification,
 <see cref="F:Dynamicweb.Notifications.Standard.Paragraph.ModuleDetached">Dynamicweb.Notifications.Standard.Paragraph.ModuleDetached</see> notification
 </remarks>
 <example>
 <code description="Overriding paragraph module attached in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Paragraph\ParagraphModuleAttachedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Paragraph.ParagraphModuleNotificationArgs.Target">
 <summary>
 Gets the target paragraph.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Paragraph.ParagraphModuleNotificationArgs.ModuleSystemName">
 <summary>
 Gets the module system name which has been attached/detached.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.Standard.Paragraph.ParagraphModuleNotificationArgs.#ctor(Dynamicweb.Content.Paragraph,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="target">Target paragraph.</param>
 <param name="moduleSystemName">Module system name which has been attached/detached.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Paragraph.OnBeforeRenderArgs">
 <summary>Provides information about the paragraph before render.</summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Paragraph.OnBeforeRender">Dynamicweb.Notifications.Standard.Paragraph.OnBeforeRender</see> notification</remarks>
 <example>
 <code description="Overriding on before render the paragraph in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Paragraph\ParagraphOnBeforeRenderObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Paragraph.OnBeforeRenderArgs.ParagraphViewModel">
 <summary>
 Gets or sets the paragraph view model.
 </summary>
 <value>The paragraph view model.</value>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Admin">
 <summary>Provides notification names for Admin part of the site.</summary>
 <remarks></remarks>
 <example>
 <code description="How to subscribe to the admin started notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Admin\AdminStartedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Admin.Started">
 <summary>Admin started notification. Occurs after the user logged in and got to the website Administration.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Admin.StartArgs">Dynamicweb.Notifications.Standard.Admin.StartArgs</see></remarks>
 <example>
 <code description="Overriding the admin started notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Admin\AdminStartedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Admin.StartArgs">
 <summary>Provides information about the Admin default page after the user logged in.</summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Admin.Started">Dynamicweb.Notifications.Standard.Admin.Started</see> notification</remarks>
 <example>
 <code description="Overriding the admin started notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Admin\AdminStartedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Admin.PipelineStarted">
 <summary>Admin pipeline started notification. Occurs when the pipeline was launched</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Admin.PipelineStartArgs">Dynamicweb.Notifications.Standard.Admin.PipelineStartArgs</see></remarks>
 <example>
 <code description="Overriding the admin pipeline started notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Admin\PipelineStartedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Admin.PipelineStartArgs">
 <summary>Provides information about the page from which the pipeline was launched</summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Admin.PipelineStarted">Dynamicweb.Notifications.Standard.Admin.PipelineStarted</see> notification</remarks>
 <example>
 <code description="Overriding the admin pipeline started notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Admin\PipelineStartedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Admin.PipelineStartArgs.EventSender">
 <summary>
 Gets or sets the sender.
 </summary>
 <value>The sender.</value>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Admin.PipelineStartArgs.EventArgs">
 <summary>
 Gets or sets the event arguments.
 </summary>
 <value>The EventArgs.</value>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Application">
 <summary>Provides notification names for Application.</summary>
 <remarks></remarks>
 <example>
 <code description="How to subscribe to the application start notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Application\ApplicationStartObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Application.BeforeStart">
 <summary>Application prestart notification. Occurs the as the is launched</summary>
 <remarks>Event occurs in Application_Start in Global.asax.
 The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Application.BeforeStartArgs">Dynamicweb.Notifications.Standard.Application.BeforeStartArgs</see>
 </remarks>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Application.AfterStart">
 <summary>Application prestart notification.</summary>
 <remarks>Event occurs in Application_Start in Global.asax.
 The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Application.AfterStartArgs">Dynamicweb.Notifications.Standard.Application.AfterStartArgs</see>
 </remarks>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Application.BeforeDynamicwebStart">
 <summary>Application before start notification.</summary>
 <remarks>Event occurs in Application_Start in Global.asax.
 The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Application.BeforeDynamicwebStartArgs">Dynamicweb.Notifications.Standard.Application.BeforeDynamicwebStartArgs</see>
 </remarks>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Application.AfterDynamicwebStart">
 <summary>Application start notification. Occurs when Dynamicweb is finished with all setup, and only happens once.</summary>
 <remarks>Event occurs in Application_Start in Global.asax.
 The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Application.AfterDynamicwebStartArgs">Dynamicweb.Notifications.Standard.Application.AfterDynamicwebStartArgs</see>
 </remarks>
 <example>
 <code description="Overriding the application before start notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Application\ApplicationStartObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Application.BeforeBeginRequest">
 <summary>Application before prebegin request notification. Occurs as the first thing when application process the request</summary>
 <remarks>Event occurs when process the method Application_BeginRequest(ByVal sender As Object, ByVal e As EventArgs) in Global.asax.
 The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Application.BeforeBeginRequestArgs">Dynamicweb.Notifications.Standard.Application.BeginRequestArgs</see>
 </remarks>
 <example>
 <code description="Overriding the application begin request notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Application\ApplicationBeginRequestObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Application.BeforeEndRequest">
 <summary>Application before end request notification. Occurs as the last thing when application process the request</summary>
 <remarks>Event occurs when process the method Application_EndRequest(ByVal sender As Object, ByVal e As EventArgs) in Global.asax.
 The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Application.BeforeEndRequestArgs">Dynamicweb.Notifications.Standard.Application.BeforeEndRequestArgs</see>
 </remarks>
 <example>
 <code description="Overriding the application begin request notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Application\ApplicationBeginRequestObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Application.AfterBeginRequest">
 <summary>Application begin request notification. Occurs when application process the request</summary>
 <remarks>Event occurs when process the method Application_BeginRequest(ByVal sender As Object, ByVal e As EventArgs) in Global.asax.
 The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Application.BeforeBeginRequestArgs">Dynamicweb.Notifications.Standard.Application.BeginRequestArgs</see>
 </remarks>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Application.BeforePreRequestHandlerExecute">
 <summary>Application before prebegin request notification. Occurs as the first thing when application process the request</summary>
 <remarks>Event occurs when process the method Application_BeginRequest(ByVal sender As Object, ByVal e As EventArgs) in Global.asax.
 The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Application.BeforeBeginRequestArgs">Dynamicweb.Notifications.Standard.Application.BeginRequestArgs</see>
 </remarks>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Application.AfterPreRequestHandlerExecute">
 <summary>Application begin request notification. Occurs when application process the request</summary>
 <remarks>Event occurs when process the method Application_BeginRequest(ByVal sender As Object, ByVal e As EventArgs) in Global.asax.
 The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Application.BeforeBeginRequestArgs">Dynamicweb.Notifications.Standard.Application.BeginRequestArgs</see>
 </remarks>          
</member>
<member name="F:Dynamicweb.Notifications.Standard.Application.AuthenticateRequest">
 <summary>
 Occurs when the current HTTP request is being authenticated.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Application.BeforeStartArgs">
 <summary>Provides information about the application</summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Application.BeforeStart">Dynamicweb.Notifications.Standard.Application.PreStart</see> notification</remarks>
 <example>
 <code description="Overriding the application start notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Application\ApplicationStartObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Application.AfterStartArgs">
 <summary>Provides information about the application</summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Application.AfterStart">Dynamicweb.Notifications.Standard.Application.AfterStart</see> notification</remarks>
 <example>
 <code description="Overriding the application start notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Application\ApplicationStartObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Application.BeforeBeginRequestArgs">
 <summary>Provides information about the request.</summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Application.BeforeBeginRequest">Dynamicweb.Notifications.Standard.Application.BeforeBeginRequest</see> notification</remarks>
 <example>
 <code description="Overriding the application begin request notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Application\ApplicationBeginRequestObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Application.BeforeEndRequestArgs">
 <summary>Provides information about the request.</summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Application.BeforeEndRequest">Dynamicweb.Notifications.Standard.Application.BeforeEndRequest</see> notification</remarks>
 <example>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Application.AfterBeginRequestArgs">
 <summary>Provides information about the request.</summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Application.AfterBeginRequest">Dynamicweb.Notifications.Standard.Application.AfterBeginRequest</see> notification</remarks>
 <example>
 <code description="Overriding the application begin request notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Application\ApplicationBeginRequestObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Application.BeforePreRequestHandlerExecuteArgs">
 <summary>Provides information about the request.</summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Application.BeforePreRequestHandlerExecute">Dynamicweb.Notifications.Standard.Application.BeforePreRequestHandlerExecute</see> notification</remarks>     
</member>
<member name="T:Dynamicweb.Notifications.Standard.Application.AfterPreRequestHandlerExecuteArgs">
 <summary>Provides information about the request.</summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Application.AfterPreRequestHandlerExecute">Dynamicweb.Notifications.Standard.Application.AfterPreRequestHandlerExecute</see> notification</remarks>           
</member>
<member name="P:Dynamicweb.Notifications.Standard.Application.LifeCycleEventNotification.EventSender">
 <summary>
 Gets or sets the sender.
 </summary>
 <value>The sender.</value>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Application.LifeCycleEventNotification.EventArgs">
 <summary>
 Gets or sets the event arguments.
 </summary>
 <value>The EventArgs.</value>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Application.AfterDynamicwebStartArgs">
 <summary>Provides information about the application</summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Application.AfterDynamicwebStart">Dynamicweb.Notifications.Standard.Application.AfterDynamicwebStart</see> notification</remarks>
 <example>
 <code description="Using the application start notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Application\ApplicationStartObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Application.BeforeDynamicwebStartArgs">
 <summary>Provides information about the application</summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Application.BeforeDynamicwebStart">Dynamicweb.Notifications.Standard.Application.BeforeDynamicwebStart</see> notification</remarks>
 <example>
 <code description="Using the application start notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Application\ApplicationStartObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Application.AuthenticateRequestArgs">
 <summary>Provides information about the application</summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Application.AuthenticateRequest">Dynamicweb.Notifications.Standard.Application.AuthenticateRequest</see> notification</remarks>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Application.AuthenticateRequestArgs.Application">
 <summary>
 Gets the current HTTP application.
 </summary>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Application.AuthenticateRequestArgs.Handled">
 <summary>
 Gets or sets value indicating whether this request is handled by third party.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Notifications.Standard.Application.AuthenticateRequestArgs.#ctor(System.Web.HttpApplication)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="application">An instance of the current HTTP application.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="application">application</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Notifications.Standard.User">
 <summary>Provides notification names for Users.</summary>
 <remarks></remarks>
 <example>
 <code description="How to subscribe to the user extranet login notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\User\OnExtranetLoginObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.User.OnBeforeExtranetLogin">
 <summary>
 The on before extranet login event
 </summary>
</member>
<member name="F:Dynamicweb.Notifications.Standard.User.OnAfterLogin">
 <summary>Occurs when the user successfully logged in</summary>
 <remarks>This notification is obsolete.</remarks>
</member>
<member name="F:Dynamicweb.Notifications.Standard.User.OnExtranetLogin">
 <summary>User extranet login notification. Occurs when the user successfully logged in</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.User.OnExtranetLoginArgs">Dynamicweb.Notifications.Standard.User.OnExtranetLoginArgs</see></remarks>
 <example>
 <code description="Overriding the user extranet login notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\User\OnExtranetLoginObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.User.OnExtranetLoginFailed">
 <summary>User extranet login failed notification. Occurs when authorization failed</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.User.OnExtranetLoginFailedArgs">Dynamicweb.Notifications.Standard.User.OnExtranetLoginFailedArgs</see></remarks>
 <example>
 <code description="Overriding the user extranet login failed notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\User\OnExtranetLoginFailedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.User.OnBeforeExtranetLogOff">
 <summary>User before extranet LogOff notification. Occurs when user is logging off, but before the user have been logged out and the session is killed.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.User.OnBeforeExtranetLogOffArgs">Dynamicweb.Notifications.Standard.User.OnBeforeExtranetLogOffArgs</see></remarks>
 <example>
 <code description="Overriding the user extranet logoff notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\User\OnBeforeExtranetLogOffObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.User.OnBeforeForgotPassword">
 <summary>Forgotten password notification. Occurs before user is found in database.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.User.OnBeforeForgotPasswordArgs">Dynamicweb.Notifications.Standard.User.OnBeforeForgotPasswordArgs</see></remarks>
</member>
<member name="T:Dynamicweb.Notifications.Standard.User.OnBeforeExtranetLoginArgs">
 <summary>
 The notification args class containing relevant information for the OnBeforeExtranetLogin event.
 </summary>
</member>
<member name="P:Dynamicweb.Notifications.Standard.User.OnBeforeExtranetLoginArgs.UserName">
 <summary>
 Gets the user name.
 </summary>
 <value>The user name.</value>
</member>
<member name="P:Dynamicweb.Notifications.Standard.User.OnBeforeExtranetLoginArgs.Password">
 <summary>
 Gets the password.
 </summary>
 <value>
 The password.
 </value>
</member>
<member name="T:Dynamicweb.Notifications.Standard.User.OnAfterLoginArgs">
 <summary>Provides information about the user</summary>
 <remarks>This notification is obsolete.</remarks>
</member>
<member name="P:Dynamicweb.Notifications.Standard.User.OnAfterLoginArgs.User">
 <summary>
 Gets the user.
 </summary>
 <value>The user.</value>
</member>
<member name="T:Dynamicweb.Notifications.Standard.User.OnExtranetLoginArgs">
 <summary>Provides information about the user</summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.User.OnExtranetLogin">Dynamicweb.Notifications.Standard.User.OnExtranetLogin</see> notification</remarks>
 <example>
 <code description="Overriding the user extranet login notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\User\OnExtranetLoginObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Notifications.Standard.User.OnExtranetLoginArgs.User">
 <summary>
 Gets the user.
 </summary>
 <value>The user.</value>
</member>
<member name="T:Dynamicweb.Notifications.Standard.User.OnBeforeExtranetLogOffArgs">
 <summary>Provides information about the user </summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.User.OnBeforeExtranetLogOff">Dynamicweb.Notifications.Standard.User.OnBeforeExtranetLogOff</see> notification</remarks>
 <example>
 <code description="Overriding the user extranet logoff notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\User\OnBeforeExtranetLogOffObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Notifications.Standard.User.OnExtranetLoginFailedArgs">
 <summary>Provides information if authorization failed</summary>
 <remarks>Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.User.OnExtranetLoginFailed">Dynamicweb.Notifications.Standard.User.OnExtranetLoginFailed</see> notification</remarks>
 <example>
 <code description="Overriding the user extranet login failed notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\User\OnExtranetLoginFailedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Notifications.Standard.User.OnExtranetLoginFailedArgs.Username">
 <summary>The username specified for login</summary>
</member>
<member name="P:Dynamicweb.Notifications.Standard.User.OnExtranetLoginFailedArgs.Password">
 <summary>The password specified for login</summary>
</member>
<member name="T:Dynamicweb.Notifications.Standard.User.OnExtranetLoginFailedArgs.FailReason">
 <summary>Reason of authorisation failure.</summary>
</member>
<member name="F:Dynamicweb.Notifications.Standard.User.OnExtranetLoginFailedArgs.FailReason.IncorrectLogin">
 <summary>
 Wrong password
 </summary>
</member>
<member name="F:Dynamicweb.Notifications.Standard.User.OnExtranetLoginFailedArgs.FailReason.PasswordLengthInvalid">
 <summary>
 Incorrect password length
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.Standard.User.OnExtranetLoginFailedArgs.FailReason.PasswordExpired">
 <summary>
 Expired password
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.Standard.User.OnExtranetLoginFailedArgs.FailReason.ExceededFailedLogOnLimit">
 <summary>
 Exceeded limit of failed login
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.Standard.User.OnExtranetLoginFailedArgs.FailReason.LoginLocked">
 <summary>
 Exceeded limit of failed login, user login has benn locked
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Notifications.Standard.User.OnExtranetLoginFailedArgs.Reason">
 <summary>
 Gets or sets the reason.
 </summary>
 <value>The reason.</value>
</member>
<member name="P:Dynamicweb.Notifications.Standard.User.OnExtranetLoginFailedArgs.FailedReason">
 <summary>
 Gets or sets the reason.
 </summary>
 <value>The reason.</value>
</member>
<member name="M:Dynamicweb.Notifications.Standard.User.OnExtranetLoginFailedArgs.#ctor">
 <summary>Default constructor.</summary>
 <remarks>This constructor is not used.</remarks>
</member>
<member name="T:Dynamicweb.Notifications.Standard.User.OnBeforeForgotPasswordArgs">
 <summary></summary>
</member>
<member name="P:Dynamicweb.Notifications.Standard.User.OnBeforeForgotPasswordArgs.Email">
 <summary>The email used for finding the user</summary>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Area">
 <summary>Provides notification names for Areas.</summary>
 <remarks></remarks>
 <example>
 <code description="How to subscribe to the user extranet login notification in Dynamicweb" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\User\OnExtranetLoginObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Area.OnBeforeAreaSaved">
 <summary>Area saved notification. Occurs before the area is saved.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Area.AreaNotificationArgs">Dynamicweb.Notifications.Standard.Area.AreaNotificationArgs</see></remarks>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Area.OnAreaSaved">
 <summary>Area saved notification. Occurs after the area has been saved.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Area.AreaNotificationArgs">Dynamicweb.Notifications.Standard.Area.AreaNotificationArgs</see></remarks>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Area.OnBeforeAreaDeleted">
 <summary>Area deleted notification. Occurs before the area is deleted.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Area.AreaNotificationArgs">Dynamicweb.Notifications.Standard.Area.AreaNotificationArgs</see></remarks>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Area.OnAfterAreaDeleted">
 <summary>Area deleted notification. Occurs after the area has been deleted.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Standard.Area.AreaNotificationArgs">Dynamicweb.Notifications.Standard.Area.AreaNotificationArgs</see></remarks>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Area.OnAreaSavedArgs.Area">
 <summary>The area which was saved</summary>
</member>
<member name="M:Dynamicweb.Notifications.Standard.Area.OnAreaSavedArgs.#ctor">
 <summary>Default constructor.</summary>
 <remarks>This constructor is not used.</remarks>
</member>
<member name="P:Dynamicweb.Notifications.Standard.Area.AreaNotificationArgs.Area">
 <summary>The area which was saved</summary>
</member>
<member name="M:Dynamicweb.Notifications.Standard.Area.AreaNotificationArgs.#ctor">
 <summary>Default constructor.</summary>
 <remarks>This constructor is not used.</remarks>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Frontend">
 <summary>Provides notification names for Frontend.</summary>
 <code description="Url provider example" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Standard\OnDuplicateUrl.cs" lang="CS"></code>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Frontend.OnUrlProviderHandlerReset">
 <summary>
 Occurs after the url provider handler reset
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Frontend.OnUrlIndexReset">
 <summary>
 Occurs after the url index reset
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Notifications.Standard.Frontend.OnDuplicateUrl">
 <summary>
 Occurs if a url duplicate has been found
 </summary>
 <remarks></remarks>
 <code description="Url provider example" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Standard\OnDuplicateUrl.cs" lang="CS"></code>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Frontend.OnUrlProviderHandlerResetArgs">
 <summary>
 Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Frontend.OnUrlProviderHandlerReset">Dynamicweb.Notifications.Standard.Frontend.OnUrlProviderHandlerReset</see> notification
 </summary>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Frontend.OnUrlIndexResetArgs">
 <summary>
 Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Frontend.OnUrlIndexReset">Dynamicweb.Notifications.Standard.Frontend.OnUrlIndexReset</see> notification
 </summary>
</member>
<member name="T:Dynamicweb.Notifications.Standard.Frontend.OnDuplicateUrlArgs">
 <summary>
 Arguments passed to <see cref="F:Dynamicweb.Notifications.Standard.Frontend.OnDuplicateUrl">Dynamicweb.Notifications.Standard.Frontend.OnDuplicateUrl</see> notification
 </summary>
 <code description="Url provider example" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\Standard\Standard\OnDuplicateUrl.cs" lang="CS"></code>
</member>
<member name="T:Dynamicweb.Notifications.Module">
 <summary>
 Class provides information about possible module manipulations
 </summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Module.AddedArgs"></see></remarks>
 <example>
 <code description="Overriding notification of the module adding" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\ModuleAddedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Notifications.Module.Removed">
 <summary>
 Event occurs after the module was deleted
 </summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Module.RemovedArgs"></see></remarks>
 <example>
 <code description="Overriding notification of the module removing" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\ModuleRemovedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Notifications.Module.RemovedArgs.Module">
 <summary>
 Gets the module.
 </summary>
 
</member>
<member name="M:Dynamicweb.Notifications.Module.RemovedArgs.#ctor(Dynamicweb.Modules.Module)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Notifications.Module.RemovedArgs" /> class.
 </summary>
 <param name="module">The module removed.</param>
</member>
<member name="F:Dynamicweb.Notifications.Module.Added">
 <summary>
 Event occurs after the module was added
 </summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Notifications.Module.AddedArgs"></see></remarks>
 <example>
 <code description="Overriding notification of the module adding" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Notifications\ModuleAddedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Notifications.Module.AddedArgs.Module">
 <summary>
 Gets the module.
 </summary>
 
</member>
<member name="M:Dynamicweb.Notifications.Module.AddedArgs.#ctor(Dynamicweb.Modules.Module)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Notifications.Module.AddedArgs" /> class.
 </summary>
 <param name="module">The module added.</param>
</member>
<member name="T:Dynamicweb.Rendering.Designer.Grid">
 <summary>
 Helper functions to the grid system
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.Designer.Grid.DeseralizeSettings(System.String)">
 <summary>
 Deseralizes a grid settings object from a json file.
 </summary>
 <param name="fullPath">The full path to the json file, i.e. c:\dynamicweb\files\templates\designs\layout\gridsettings.json.</param>
 <returns>A GridSettings instance of the settings from the json file.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Designer.Grid.SerializeSettings(Dynamicweb.Rendering.Designer.GridSettings,System.String)">
 <summary>
 Serializes the grid settings to a json file.
 </summary>
 <param name="settings">A GridSettings instance of the settings that needs to be saved.</param>
 <param name="fullPath">The full path to the json file, i.e. c:\dynamicweb\files\templates\designs\layout\gridsettings.json.</param>
</member>
<member name="T:Dynamicweb.Rendering.Designer.GridContainer">
 <summary>
 Represents a container with grid enabled (dwcontent element with setting grid:true;grid-settings:file.json;grid-mode:auto).
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Designer.GridContainer.Settings">
 <summary>
 Gets or sets the settings for the grids.
 </summary>
 <value>A <see cref="T:Dynamicweb.Rendering.Designer.GridSettings"/> instance.</value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.GridContainer.Mode">
 <summary>
 Gets or sets the grid rendering mode. Can be either Auto or InlineTemplate. Setting this to Auto tells Dynamicweb to insert markup for containers, rows and columns. 
 Setting this to InlineTemplate tells Dynamicweb to not insert markup - that will need to be handled in the template using ParagraphColumnClass*, ParagraphIsLast, ParagraphSwitchRowAfterCurrent and ParagraphSwitchRowAfterNext tags. 
 </summary>
 <value>The mode switch.</value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.GridContainer.Type">
 <summary>
 Gets or sets the build-in grid type that can be used instead of a grid-settings file.
 </summary>
 <value>The grid type.</value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.GridContainer.Container">
 <summary>
 Gets or sets the container.
 </summary>
 <value>The originating container as a <see cref="T:Dynamicweb.Rendering.Designer.DynamicElement"/> instance.</value>
</member>
<member name="T:Dynamicweb.Rendering.Designer.GridContainer.GridMode">
 <summary>
 GridMode represents the rendering mode of the grid. grid:true;grid-mode:auto
 </summary>
</member>
<member name="F:Dynamicweb.Rendering.Designer.GridContainer.GridMode.Auto">
 <summary>
  Auto tells Dynamicweb to insert markup for containers, rows and columns. 
 </summary>
</member>
<member name="F:Dynamicweb.Rendering.Designer.GridContainer.GridMode.InlineTemplate">
 <summary>
 InlineTemplate tells Dynamicweb to NOT insert markup for containers, rows and columns - that will need to be handled in the template using paragraph grid template tags/ParagraphViewModel
 </summary>
</member>
<member name="T:Dynamicweb.Rendering.Designer.GridContainer.GridType">
 <summary>
 GridType represents built-in grids using setting grid:true;grid-type:bootstrap3|Table3Columns
 </summary>
</member>
<member name="F:Dynamicweb.Rendering.Designer.GridContainer.GridType.Bootstrap3">
 <summary>
 The bootstrap3
 </summary>
</member>
<member name="F:Dynamicweb.Rendering.Designer.GridContainer.GridType.Table3Columns">
 <summary>
 The table3 columns
 </summary>
</member>
<member name="T:Dynamicweb.Rendering.Designer.GridSettings">
 <summary>
 GridSettings represents how a grid should behave - how many columns, the format etc. Serialized and deserialized to disk by the <see cref="T:Dynamicweb.Rendering.Designer.Grid"/> object
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Designer.GridSettings.Columns">
 <summary>
 Gets or sets the number of columns in the grid.
 </summary>
 <value>The number of columns that the grid supports. The default is 12</value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.GridSettings.ColumnsSmall">
 <summary>
 Gets or sets the columns supported in the UI for small devices, i.e. 6 and 12 out of 12 columns.
 </summary>
 <value>List of columns supported on small devices. The default is 6, 12</value>
 <remarks>If the list is empty, small device classes will not be supported in UI and in templates to make the implementation more simple</remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.GridSettings.ColumnsMedium">
 <summary>
 Gets or sets the columns supported in the UI for medium devices, i.e. 4, 6 and 12 out of 12 columns.
 </summary>
 <value>List of columns supported on medium devices.The default is <code>null</code> meaning medium devices are not defined by default supporting only small and large displays</value>
 <remarks>If the list is empty, medium device classes will not be supported in UI and in templates to make the implementation more simple (Default)</remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.GridSettings.ColumnsLarge">
 <summary>
 Gets or sets the columns supported in the UI for large devices (desktop), i.e. 3, 4, 6, 8, 9 and 12 out of 12 columns.
 </summary>
 <value>List of columns supported on large devices. The default is 3, 4, 6, 8, 9 and 12</value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.GridSettings.ColumnDefaultSize">
 <summary>
 Gets or sets the default size of new columns or paragraphs that does not have a column value set.
 </summary>
 <value>The default size of the column. The default is 12</value>
 <remarks>If <see cref="P:Dynamicweb.Rendering.Designer.GridSettings.Columns"/> is changed, this setting should be changed accordingly </remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.GridSettings.ColumnClassSmall">
 <summary>
 Gets or sets the column css class used for small devices, i.e. col-sm-{columns}
 </summary>
 <value>The column class for small devices.</value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.GridSettings.ColumnClassMedium">
 <summary>
 Gets or sets the column css class used for medium devices, i.e. col-md-{columns}
 </summary>
 <value>The column class for medium devices.</value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.GridSettings.ColumnClassLarge">
 <summary>
 Gets or sets the column css class used for large devices, i.e. col-lg-{columns}
 </summary>
 <value>The column class for large devices.</value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.GridSettings.ContainerStart">
 <summary>
 Gets or sets the markup used for container start, i.e. &gt;div class="container" id="{containerId}"&lt;
 </summary>
 <value>The container start tag markup.</value>
 <remarks>{containerId} is needed as part of the value of the ID attribute</remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.GridSettings.ContainerEnd">
 <summary>
 Gets or sets the markup used for container end, i.e. &gt;/div&lt;
 </summary>
 <value>The container end markup.</value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.GridSettings.RowStart">
 <summary>
 Gets or sets the markup used for row start, i.e. &gt;div class="row" id="{rowId}"&lt;
 </summary>
 <value>The row start markup.</value>
 <remarks>{rowId} is needed as part of the value of the ID attribute</remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.GridSettings.RowEnd">
 <summary>
 Gets or sets the markup used for row end, i.e. &gt;/div&lt;
 </summary>
 <value>The row end markup.</value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.GridSettings.ColumnStart">
 <summary>
 Gets or sets the markup used for column start, i.e. &lt;div class="{columnClasses}"&gt;
 </summary>
 <value>The column start markup.</value>
 <remarks>{columnClasses} is needed as part of the value of the class attribute</remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.GridSettings.ColumnEnd">
 <summary>
 Gets or sets the markup used for column end, i.e. &gt;/div&lt;
 </summary>
 <value>The column end markup.</value>
</member>
<member name="M:Dynamicweb.Rendering.Designer.GridSettings.GetBootstrap3Grid">
 <summary>
 Gets an instance of a grid, based on Bootstrap 3.
 </summary>
 <returns>A configured <see cref="T:Dynamicweb.Rendering.Designer.GridSettings"/> instance.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Designer.GridSettings.GetTableBasedGrid">
 <summary>
 Gets an instance of a grid, based on tables.
 </summary>
 <returns>A configured <see cref="T:Dynamicweb.Rendering.Designer.GridSettings"/> instance.</returns>
</member>
<member name="T:Dynamicweb.Rendering.Designer.DynamicElement">
 <summary>
 Represents a dynamic element in a layout, i.e. navigation or contentcontainer
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.DynamicElement.Attributes">
 <summary>
 Gets a collection of settings from the elements settings attribute
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.DynamicElement.Settings">
 <summary>
 Gets a collection of settings from the elements settings attribute
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.DynamicElement.SettingsString">
 <summary>
 Gets the formatted settings string. From the attribute "data-settings"
 </summary>
 <value>The settings string. (key:val;key2:val2)</value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.DynamicElement.Id">
 <summary>
 Gets the ID of html tag from which the element origins
 </summary>
 <value></value>
 <returns>String.Empty if no id attribute is present</returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.DynamicElement.Name">
 <summary>
 Gets the name of the element when used in a parsed template
 </summary>
 <value></value>
 <returns>Escaped value of id if present, otherwise title or MD5 of html element</returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.DynamicElement.Title">
 <summary>
 Gets the title for this element
 </summary>
 <value></value>
 <returns>The value of the title tag</returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.DynamicElement.SortValue">
 <summary>
 Gets the sort value from the settings attribute.
 </summary>
 <value>The sort.</value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.DynamicElement.Sort">
 <summary>
 Gets or sets the sort of this element.
 </summary>
 <value>The sort.</value>
</member>
<member name="M:Dynamicweb.Rendering.Designer.DynamicElement.#ctor(System.Collections.Specialized.NameValueCollection)">
 <summary>
 Creates a new instance of a dynamic element
 </summary>
 <param name="attributes">A collection of attributes</param>
 <remarks></remarks>        
</member>
<member name="T:Dynamicweb.Rendering.Designer.DynamicElementCollection">
 <summary>
 A collection of <see cref="T:Dynamicweb.Rendering.Designer.DynamicElement"></see>
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.Designer.DynamicElementCollection.Add(Dynamicweb.Rendering.Designer.DynamicElement)">
 <summary>
 Adds the specified item.	
 </summary>
 <param name="item">The item.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Designer.DynamicElementCollection.ElementExits(System.String)">
 <summary>
 Checks if a <see cref="T:Dynamicweb.Rendering.Designer.DynamicElement"></see> exists based on the specified name.
 </summary>
 <param name="name">The name.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.Designer.DynamicElementCollection.GetElementByName(System.String)">
 <summary>
 Gets a <see cref="T:Dynamicweb.Rendering.Designer.DynamicElement"></see> by its name.
 </summary>
 <param name="name">The name.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.Designer.DynamicElementCollection.UpdateSort(System.Int32,System.Int32)">
 <summary>
 Updates the sort in the specified range.
 </summary>
 <param name="from">From.</param>
 <param name="to">To.</param>
</member>
<member name="M:Dynamicweb.Rendering.Designer.DynamicElementCollection.Sort(Dynamicweb.Rendering.Designer.DynamicElementCollection.SortBy)">
 <summary>
 Sorts the collection with the specified sort type.
 </summary>
 <param name="sortType">Type of the sort.</param>
</member>
<member name="T:Dynamicweb.Rendering.Designer.DynamicElementCollection.SortBy">
 <summary>
 Defines how DynamicElement collections should be sorted
 </summary>
</member>
<member name="F:Dynamicweb.Rendering.Designer.DynamicElementCollection.SortBy.Sort">
 <summary>
 Sort by sort
 </summary>
</member>
<member name="F:Dynamicweb.Rendering.Designer.DynamicElementCollection.SortBy.Title">
 <summary>
 Sort by title
 </summary>
</member>
<member name="T:Dynamicweb.Rendering.Designer.Design">
 <summary>
 Represents a design and its location
 </summary>
 <remarks>Instances of this object can only be retrieved from Design.Designs</remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Design.Folder">
 <summary>
 DirectoryInfo object of the design location
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Design.Path">
 <summary>
 Full path of the designs location
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Design.Name">
 <summary>
 Name of the design
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Design.Layouts">
 <summary>
 Return layouts for this design
 </summary>
 <value></value>
 <returns>An empty collection of Layouts if no Layouts are present</returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Design.UsesDictionary">
 <summary>
 Returns true if this design has Translations.xml used by Dictionary system
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Designer.Design.#ctor(System.IO.DirectoryInfo)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Rendering.Designer.Design" /> class.	
 </summary>
 <param name="directory">The directory.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Designer.Design.Designs">
 <summary>
 Returns a collection of Designs for this solution
 </summary>
 <returns>Only design folders with at least one layout. If no designs or layouts are present, an empty design collection is returned.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Rendering.Designer.DesignCollection">
 <summary>
 A collection of Designs
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Rendering.Designer.Layout">
 <summary>Represent a layout from a design</summary>
 <remarks>Instances can only be accessed through Design.Layouts</remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.HtmlDocument">
 <summary>
 Gets the HTML document instance (HtmlAgilityPack.HtmlDocument).
 </summary>
 <value>The HTML document.</value>
</member>
<member name="M:Dynamicweb.Rendering.Designer.Layout.GetGridContainerByName(System.String)">
 <summary>
 Gets a grid container by its name (id attribute of a dwcontent placeholder with grid:true).
 </summary>
 <param name="containerName">Name of the container.</param>
 <returns>GridContainer. <code>null</code> if the container does not exist</returns>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.GridContainers">
 <summary>
 Gets a collection of content containers present in this layout template that has a grid enabled (grid:true)
 </summary>
 <value>A list of <see cref="T:Dynamicweb.Rendering.Designer.GridContainer"/>.</value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.Containers">
 <summary>Gets a collection of the content containers present in this layout template</summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.Navigations">
 <summary>Gets a collection of navigations present in this layout template</summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.Reparsed">
 <summary>
 Gets a value indicating whether this <see cref="T:Dynamicweb.Rendering.Designer.Layout" /> was reparsed.
 </summary>
 <value><c>true</c> if reparsed; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.DefaultContainer">
 <summary>Gets the default content container present in the layout template - it is the first present in the template</summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Designer.Layout.GetParagraphTemplate(System.String)">
 <summary>
 Returns the default paragraph template for a content placeholder
 </summary>
 <param name="containerName">Name of the placeholder</param>
 <returns>A file reference to the paragraph template</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Designer.Layout.GetGridSettingsPath(System.String)">
 <summary>
 Finds the grid file location based on the layout. Context aware, see remarks
 </summary>
 <param name="gridFile">The name of the grid file without any path information, i.e MyGrid.json.</param>
 <returns>A full location path of the grid if found, otherwise <code>string.empty</code></returns>
 <remarks>Looks for the file in these locations and return the first instance: Templates/Designs/Design1/Layout1/Grid, Templates/Designs/Design1/Grid, Templates/Designs/Grid</remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.CssFiles">
 <summary>
 Gets the CSS file locations for this layout.
 </summary>
 <value>The CSS files.</value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.EditorCss">
 <summary>
 Gets the editor CSS used in backend for the RTE - called ~/Editor.css.
 </summary>
 <value>The editor CSS.</value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.Description">
 <summary>Gets the description of the layout - take from the meta description tag of the layout file, otherwise empty</summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.File">
 <summary>Gets an instance of TemplateFile object</summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.Name">
 <summary>Gets the name of layout - taken from the layout file title tag if it exists, otherwise name of the template file.</summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.TemplateFileInfo">
 <summary>Gets a fileinfo object of the layout template</summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.ParsedFullLocation">
 <summary>Gets the full location of the parsed layout template, i.e. C:\Folder\Files\Templates\Design\Design1\_parsed\Layout.parsed.html</summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.ParsedLocation">
 <summary>Gets the absolute location of the parsed layout template, i.e. /Files/Templates/Design/Design1/_parsed/Layout.parsed.html</summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.ParsedFolder">
 <summary>Gets the full location of the parsed layout folder, i.e. C:\Folder\Files\Templates\Design\Design1\_parsed\</summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.Design">
 <summary>Gets the design that this instance of a layout belongs to</summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.ParagraphTemplates">
 <summary>Gets a collection of paragraph templates for the current layout.</summary>
 <value></value>
 <returns></returns>
 <remarks>Looks for templates in a subfolder with the same name as the layout template file (Templates/Designs/Design1/Layout1/Paragraph). If nothing is found, it looks in the current designs folder (Templates/Designs/Design1/Paragraph), then the designs folder (Templates/Designs/Paragraph) and then falls back to the default paragraph template folder (Templates/Paragraph)</remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.ParagraphTemplates(Dynamicweb.Rendering.Designer.DynamicElement)">
 <summary>
 Gets the paragraph templates for a specific container based on the 'limit' setting on the placeholder
 </summary>
 <value>
 The paragraph templates.
 </value>
 <param name="container">The <see cref="T:Dynamicweb.Rendering.Designer.DynamicElement">DynamicElement</see> representing the container for which the templates has to be returned for.</param>
</member>
<member name="P:Dynamicweb.Rendering.Designer.Layout.DefaultParagraphTemplate">
 <summary>
 Gets the default paragraph template of this layout.
 </summary>
 <value>The default paragraph template.</value>
</member>
<member name="M:Dynamicweb.Rendering.Designer.Layout.Layouts(Dynamicweb.Rendering.Designer.Design)">
 <summary>Returns a collection of available layouts for a design</summary>
 <param name="design"></param>
 <returns>An empty LayoutCollection if no layouts are present</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Designer.Layout.GetLayoutByLocation(System.String)">
 <summary>Returns a Layout object based on the relative path to a layout template</summary>
 <param name="path">The relative path to a template, i.e. Design1/Layout.html</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Designer.Layout.GetLayoutByName(System.String,System.String)">
 <summary>Returns a Layout object based on the relative path to a layout template</summary>
 <param name="areaLayoutPath">The relative path to the area template, i.e. Design1/Layout.html</param>
 <param name="layoutName">The layout name, i.e. Produts.html</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Designer.Layout.GetElements(Dynamicweb.Rendering.Designer.Layout,System.String)">
 <summary>
 Returns a collection of content elements in a layout.
 </summary>
 <param name="l">An instance of a Layout</param>
 <returns>An empty collection if no elements are present</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Rendering.Designer.LayoutCollection">
 <summary>
 A collection of Layouts
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Designer.Parser.CleanUpParsedFolder(Dynamicweb.Rendering.Designer.Layout)">
 <summary>
 Clean layout parsed folder.
 </summary>
 <param name="l">The layout</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Designer.Parser.Parse(Dynamicweb.Rendering.Designer.Layout)">
 <summary>
 Parses a HTML layout template for tags, image, css and js sources etc.
 </summary>
 <param name="l">The layout to parse</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Designer.Parser.GetTitle(Dynamicweb.Rendering.Designer.Layout)">
 <summary>
 Retrieves the title text of a layouts html.
 </summary>
 <param name="l">The layout to parse</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Designer.Parser.GetDescription(Dynamicweb.Rendering.Designer.Layout)">
 <summary>
 Retrieves the description text of a layouts html.
 </summary>
 <param name="l">The layout to parse</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Designer.Parser.GetTemplateInfo(System.String,System.String)">
 <summary>
 Gets the value of a template property from the format @Whatever.PropertyName(PropertyValue).
 </summary>
 <param name="templatePath">The full template path.</param>
 <param name="propertyName">Name of the property to get the value from.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.Designer.Parser.GetHtmlDocument(Dynamicweb.Rendering.Designer.Layout)">
 <summary>
 Returns a merged and loaded layout html document. Only to be called from layout
 </summary>
 <param name="l"></param>
 <returns></returns>
 <remarks>Use layout.htmlDocument</remarks>
</member>
<member name="M:Dynamicweb.Rendering.Designer.Parser.RazorHelper.Escape(System.String)">
 <summary><![CDATA[
 Escape some Razor constructs before Html Agility Pack (HAP) processes the template. Otherwise HAP will be confused by < and other stuff in the content.
 Using StuffToEscape, Razor specific code is replaced with something that does not confuse HAP, e.g.
   @if (count < 10) { }
 is converted into
   @if (count ($[RAZOR_001]$))
 ]]></summary>
 <param name="html"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Rendering.Designer.TemplateFile">
 <summary>
 A representation of a template file.
 </summary>
 <remarks>Only files of type .html, .htm, .xsl, .xslt. Icon files can be placed in same location with same name, but with extension of png, gif or jpg</remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.TemplateFile.Icon">
 <summary>
 Gets the icon of the layout - a .gif, .png or .jpg with same name and location as the html file. 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.TemplateFile.Name">
 <summary>
 Gets the name of the template file, i.e. file.html
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.TemplateFile.FileNameWithoutExtension">
 <summary>
 Gets the name of the template file with out extension.
 </summary>
 <value>
 The name with out extension. I.e. Main if the layout file is /Designs/NameOfDesign/Main.html
 </value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.TemplateFile.Title">
 <summary>
 Gets the title of the template file from @Paragraph.Title(the title). Otherwise it returns the name of the template file.
 </summary>
 <value>
 The title value from the tag if present.
 </value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.TemplateFile.Description">
 <summary>
 Gets the description of the template file from @Paragraph.Description(the description). 
 </summary>
 <value>
 The description value from the tag if present.
 </value>
</member>
<member name="P:Dynamicweb.Rendering.Designer.TemplateFile.FullName">
 <summary>
 Gets the absolute path to the template , i.e /Files/Templates/Designs/Design1/Paragraph/file.html
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.TemplateFile.TemplateName">
 <summary>
 Gets the relative path to the template , i.e /Designs/Design1/Paragraph/file.html
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.TemplateFile.Location">
 <summary>
 Gets the absolute path to the template folder, i.e /Files/Templates/Designs/Design1/Paragraph/
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Rendering.Designer.TemplateFile.TemplateFileInfo">
 <summary>
 Gets a fileinfo object of the layout template
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Designer.TemplateFile.#ctor(System.IO.FileInfo)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Rendering.Designer.TemplateFile" /> class.	
 </summary>
 <param name="template">The template.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Designer.TemplateFile.GetTemplateFiles(System.String)">
 <summary>
 Gets a collection of template files in specified directory.
 </summary>
 <param name="path">Path to template files</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Rendering.Designer.TemplateFileCollection">
 <summary>
 A collection of TemplateFiles
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Rendering.NamespaceDoc">
 <summary>
 The Dynamicweb.Rendering namespace contains the rendering engine (<see cref="T:Dynamicweb.Rendering.Template"/>) handling html and Razor templates, Designs and Layout and translation of template labels.
 </summary>
</member>
<member name="T:Dynamicweb.Rendering.TemplateBase`1">
 <summary>
 TemplateBase is the base class for razor templates. Exposes methods that are shared between <see cref="T:Dynamicweb.Rendering.RazorTemplateBase`1"/> and <see cref="T:Dynamicweb.Rendering.ViewModelTemplate`1"/>.
 </summary>
 <typeparam name="T"></typeparam>
</member>
<member name="P:Dynamicweb.Rendering.TemplateBase`1.Pageview">
 <summary>
 Gets the pageview of the current pageview.
 </summary>
 <value>
 The <see cref="T:Dynamicweb.Frontend.PageView">PageView</see>.
 </value>
</member>
<member name="P:Dynamicweb.Rendering.TemplateBase`1.Consents">
 <summary>
 Gets the consents.
 </summary>
 <value>
 The consents.
 </value>
</member>
<member name="P:Dynamicweb.Rendering.TemplateBase`1.Template">
 <summary>
 Gets the template instance being rendered in this context.
 </summary>
 <value>
 The template instance.
 </value>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.PushPromise(System.String)">
 <summary>
 Support for sending push promises to HTTP 2.0 clients. Call this method for static ressources and images that the current response will trigger new requests for. Typically js, css and image files.
 </summary>
 <param name="path">The relative path, i.e. /Files/Templates/Designs/MyDesign/Css/main.css</param>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.Translate(System.String)">
 <summary>
 Translates a text using the current language and design context.
 </summary>
 <param name="text">The text to translate</param>
 <returns>The translated text if a translation exists. Otherwise the untranslated text.</returns>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.Translate(System.String,System.String)">
 <summary>
 Translates a text using the current language and design context using a specified default translation if no translation exists.
 </summary>
 <param name="text">The text to translate</param>
 <param name="defaultValue">The default translation</param>
 <returns>The translated text if a translation exists. Otherwise the default translation.</returns>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.Translate(System.String,System.String,System.String)">
 <summary>
 Translates a text using the current language and design context using a specified default translation if no translation exists.
 </summary>
 <param name="text">The text to translate</param>
 <param name="defaultValue">The default translation</param>
 <param name="cultureName">Name of the culture, i.e. 'en-gb'.</param>
 <returns>The translated text if a translation exists. Otherwise the default translation.</returns>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.GetPageIdByNavigationTag(System.String)">
 <summary>
 Gets the page id with the specified navigation tag.
 </summary>
 <param name="navigationTag">The navigation tag (<see cref="P:Dynamicweb.Content.Page.NavigationTag"></see>).</param>
 <returns>The first area page with the specified navigationtag. If no page is found, 0 is returned</returns>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.Title(System.String)">
 <summary>
 Define template title
 </summary>
 <param name="templateTitle"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.Description(System.String)">
 <summary>
 Define template description
 </summary>
 <param name="templateDescription"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.MasterPageFile(System.String)">
 <summary>
 Use master page file
 </summary>
 <param name="path"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.ContentPlaceholder">
 <summary>
 Insert template content in master template
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.IncludeFile(System.String)">
 <summary>
 Includes the file specified before the razor template is compiled.
 </summary>
 <param name="file">The relative file path, i.e. includes/myfile.cshtml.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.RenderNavigation(System.Object)">
 <summary>
 Render xml navigation from settings defined on an (anonymous) object
 </summary>
 <example>
 @RenderNavigation(new { Template = "Navigation.xslt", ExpandMode = "all" })
 </example>
 <param name="settings">An object defining the settings</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.RenderItemList(System.Object)">
 <summary>
 Render item list from settings defined on an (anonymous) object
 </summary>
 <example>
 @RenderItemList(new {
   ItemType = "Stuff",
   ListSourceType = "Area",
   ListSourceArea = 1,
   ItemFieldsList = "*",
   ListTemplate = "ItemPublisher/List/ListStuff.cshtml",
   ListPageSize = 100,
   ListOrderBy = "StartTime"
 })
 </example>
 <param name="settings"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.RenderItem(System.Object)">
 <summary>
 Render a single item from settings defined on an (anonymous) object
 </summary>
 <example>
 @RenderItem(new {
   ItemType = "Stuff",
   ItemId = 42,
   ItemFieldsList = "*",
   DetailsTemplate = "ItemPublisher/Details/Stuff.cshtml"
 })
 </example>
 <param name="settings"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.RenderItemCreationForm(System.Object)">
 <summary>
 Render item creating form from settings defined on an (anonymous) object
 </summary>
 <example>
 @RenderItemCreationForm(new {
   ItemType = "Stuff",
   TargetPageID = 10,
   ContentStructure = ItemCreator.ContentStructureType.Paragraphs,
   CreateTemplate = "ItemPublisher/List/ListStuff.cshtml"
 })
 </example>
 <param name="settings"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.RenderSnippet(System.String)">
 <summary>
 Add snippet placeholder
 </summary>
 <param name="name">Name of the snippet</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.SnippetStart(System.String)">
 <summary>
 Start a snippet
 </summary>
 <param name="name">Name of the snippet</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.SnippetEnd(System.String)">
 <summary>
 End a snippet
 </summary>
 <param name="name">Name of the snippet</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.RenderPageContent(System.Int32)">
 <summary>
 Render page content
 </summary>
 <param name="pageID">The id of the page</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.RenderParagraphContent(System.Int32)">
 <summary>
 Render paragraph content
 </summary>
 <param name="paragraphID">The id of the paragraph</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.TemplateBase`1.GetNameValueCollection(System.Object)">
 <summary>
 Return a NameValueCollection with a name and value for each property on an object
 </summary>
 <param name="o">The object</param>
 <returns>A NameValuesCollection</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Rendering.ViewModelBase">
 <summary>
 ViewModelBase represents a view model that can be used for rendering templates using a model instead of template tags.
 Inherit from this base class to create a view model.
 </summary>
 <example>
 <code title="How to implement a custom view model" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Rendering\ViewModelSample.cs" lang="CS"></code>
 <code title="How to use a custom view model" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Rendering\ViewModelTemplateSample.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Rendering.RazorTemplateBase`1">
 <summary>
 Base class for razor based templates.
 </summary>
 <typeparam name="TModel">The type of the Razor template model.</typeparam>
 <seealso cref="T:Dynamicweb.Rendering.TemplateBase`1" />
 <seealso cref="T:Dynamicweb.Rendering.RazorTemplateModel`1" />
</member>
<member name="P:Dynamicweb.Rendering.RazorTemplateBase`1.Template">
 <summary>
 Gets the template instance being rendered in this context.
 </summary>
 <value>
 The template instance.
 </value>
</member>
<member name="P:Dynamicweb.Rendering.RazorTemplateBase`1.Values">
 <summary>
 Gets the raw values of templates tags in a Dictionary. The key is the name of the tag, the value is value of the tag.
 </summary>
 <value>
 The values.
 </value>
 <remarks>This collection can be used for checking if a tag is available in the context or if it is defined.</remarks>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.GetGlobalValue(System.String)">
 <summary>
 Gets a value from the global tags collection.
 </summary>
 <param name="name">The name of the global tag to get the value of.</param>
 <returns>A string of the value. <c>string.empty</c> if the name does not exist in the global tags collection.</returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.GetValue(System.String)">
 <summary>
 Gets the value.
 </summary>
 <param name="name">The name.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.GetString(System.String)">
 <summary>
 Gets a string representation of the tag value.
 </summary>
 <param name="name">The name of the tag.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.GetBoolean(System.String)">
 <summary>
 Gets a boolean representation of the tag value.
 </summary>
 <param name="name">The name of the tag.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.GetInteger(System.String)">
 <summary>
 Gets a integer representation of the tag value.
 </summary>
 <param name="name">The name of the tag.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.GetDouble(System.String)">
 <summary>
 Gets a double representation of the tag value.
 </summary>
 <param name="name">The name of the tag.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.GetLong(System.String)">
 <summary>
 Gets a string representation of the tag value.
 </summary>
 <param name="name">The name of the tag.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.GetDate(System.String)">
 <summary>
 Gets a date representation of the tag value.
 </summary>
 <param name="name">The name of the tag.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.GetLoop(System.String)">
 <summary>
 Gets the loop.
 </summary>
 <param name="name">The name of the loop.</param>
 <returns>A <see cref="T:System.Collections.Generic.List`1">Generic.List</see> of <see cref="T:Dynamicweb.Rendering.RazorTemplateBase`1.LoopItem">LoopItem</see>.</returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.ToJson">
 <summary>
 Serializes the data in the template instance to json.
 </summary>
 <returns>System.String.</returns>
</member>
<member name="P:Dynamicweb.Rendering.RazorTemplateBase`1.Loops">
 <summary>
 Returns a list of loops on this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.TemplateTags">
 <summary>
 Prints a table of the template tags in the current template instance.
 </summary>
 <returns>A html table of tags</returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.TemplateTags(System.String)">
 <summary>
 Prints a table of the template tags containing the search string in the current template instance.
 </summary>
 <param name="search">The string to search for in keys.</param>
 <returns>A html table of tags</returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.PrintTemplateTags(System.Collections.Generic.Dictionary{System.String,System.Object},Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Prints a table of the template tags in the current template instance.
 </summary>
 <returns>A html table of tags</returns>
</member>
<member name="T:Dynamicweb.Rendering.RazorTemplateBase`1.LoopItem">
 <summary>
 A loop item, returned in a list by <see cref="M:Dynamicweb.Rendering.RazorTemplateBase`1.LoopItem.GetLoop(System.String)">GetLoop</see>.
 </summary>
 <remarks>Do not call or instanciate directly. Use </remarks>
</member>
<member name="P:Dynamicweb.Rendering.RazorTemplateBase`1.LoopItem.Index">
 <summary>
 Gets the index.
 </summary>
 <value>
 The index.
 </value>
</member>
<member name="P:Dynamicweb.Rendering.RazorTemplateBase`1.LoopItem.Values">
 <summary>
 Gets the raw values in a Dictonary. The key is the name of the tag, the value is value of the tag.
 </summary>
 <value>
 The values.
 </value>
 <remarks>This collection can be used for checking if a tag is available in the context or if it is defined.</remarks>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.LoopItem.GetValue(System.String)">
 <summary>
 Gets the value.
 </summary>
 <param name="name">The name.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.LoopItem.GetString(System.String)">
 <summary>
 Gets a string representation of the tag value.
 </summary>
 <param name="name">The name of the tag.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.LoopItem.GetBoolean(System.String)">
 <summary>
 Gets a boolean representation of the tag value.
 </summary>
 <param name="name">The name of the tag.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.LoopItem.GetInteger(System.String)">
 <summary>
 Gets a integer representation of the tag value.
 </summary>
 <param name="name">The name of the tag.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.LoopItem.GetDouble(System.String)">
 <summary>
 Gets a double representation of the tag value.
 </summary>
 <param name="name">The name of the tag.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.LoopItem.GetLong(System.String)">
 <summary>
 Gets a string representation of the tag value.
 </summary>
 <param name="name">The name of the tag.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.LoopItem.GetDate(System.String)">
 <summary>
 Gets a date representation of the tag value.
 </summary>
 <param name="name">The name of the tag.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.LoopItem.GetLoop(System.String)">
 <summary>
 Gets the loop.
 </summary>
 <param name="name">The name of the loop.</param>
 <returns>A <see cref="T:System.Collections.Generic.List`1">Generic.List</see> of <see cref="T:Dynamicweb.Rendering.RazorTemplateBase`1.LoopItem">LoopItem</see>.</returns>
</member>
<member name="P:Dynamicweb.Rendering.RazorTemplateBase`1.LoopItem.Loops">
 <summary>
 Returns a list of loops on this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.LoopItem.TemplateTags">
 <summary>
 Prints a table of the template tags in the current template instance.
 </summary>
 <returns>A html table of tags</returns>
</member>
<member name="M:Dynamicweb.Rendering.RazorTemplateBase`1.LoopItem.TemplateTags(System.String)">
 <summary>
 Prints a table of the template tags containing the search string in the current template instance.
 </summary>
 <param name="search">The string to search for in keys.</param>
 <returns>A html table of tags</returns>
</member>
<member name="T:Dynamicweb.Rendering.TagExtensionMethod">
 <summary>
 Tag extension add-in for creating extension methods for template tags
 </summary>
 <example>
   <code description="How to inherit TagExtensionMethod and override ExecuteMethod" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Rendering\TagExtensionMethodSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Rendering.TagExtensionMethod.Template">
 <summary>
 Gets the raw argument passed to the extension method.
 </summary>
 <value>
 Entire string argument passed to the extension method in the (). I.e. the string 'argument' in SomeTag.MyMethod(argument).
 </value>
</member>
<member name="P:Dynamicweb.Rendering.TagExtensionMethod.Argument">
 <summary>
 Gets the raw argument passed to the extension method.
 </summary>
 <value>
 Entire string argument passed to the extension method in the (). I.e. the string 'argument' in SomeTag.MyMethod(argument).
 </value>
</member>
<member name="P:Dynamicweb.Rendering.TagExtensionMethod.TagName">
 <summary>
 Gets the name of the tag that this instance of the method is applied to.
 </summary>
 <value>
 The name of the tag.
 </value>
</member>
<member name="P:Dynamicweb.Rendering.TagExtensionMethod.MethodName">
 <summary>
 Gets the name of the tag that this instance of the method is applied to.
 </summary>
 <value>
 The name of the tag.
 </value>
</member>
<member name="P:Dynamicweb.Rendering.TagExtensionMethod.Arguments">
 <summary>
 Gets the arguments parsed into a <c>Generic.List(Of Object)</c> with one entry for each argument seperated with comma.
 </summary>
 <value>
 A <c>Generic.List(Of Object)</c> containing the values from the arguments. The values are not trimmed, so 'arg1, arg2' would create to items in list, 'arg1' and ' arg2'
 </value>
</member>
<member name="M:Dynamicweb.Rendering.TagExtensionMethod.ExecuteMethod(System.String)">
 <summary>
 Override this method and return the modified string.
 </summary>
 <param name="value">The value of the template tag that the method is applied to.</param>
 <returns>
 Returns the string after it has been processed by the extension method.
 </returns>
 <example>
   <code description="How to inherit TagExtensionMethod and override ExecuteMethod" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Rendering\TagExtensionMethodSample.cs" lang="CS"></code>
   </example>
</member>
<member name="M:Dynamicweb.Rendering.TagExtensionMethod.GetExtensionMethods">
 <summary>
 Returns a list of all template tag extension method add-ins
 </summary>
 <returns>An <see cref="T:System.Collections.ArrayList">ArrayList</see> of strings of extension method names that inherits <see cref="T:Dynamicweb.Rendering.TagExtensionMethod">TagExtensionMethod</see>.</returns>
 <remarks>Values is from the <see cref="T:Dynamicweb.Extensibility.AddIns.AddInNameAttribute">AddInName</see> attribute. Used internally</remarks>
</member>
<member name="M:Dynamicweb.Rendering.TagExtensionMethod.CreateExtensionMethodInstance(System.String)">
 <summary>
 Creates a new instance of implementations of TagExtensionMethod
 </summary>
 <param name="extensionMethodName">Name of a method that an instance is required</param>
 <returns></returns>
 <remarks>Used internally</remarks>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Translation.GetTranslation(System.String,System.Globalization.CultureInfo,Dynamicweb.Rendering.Translation.KeyScope,Dynamicweb.Rendering.Designer.Design)">
 <summary>
 Gets the translation.
 </summary>
 <param name="key">The key.</param>
 <param name="culture">The culture.</param>
 <param name="scope">The scope.</param>
 <param name="design">The design.</param>
 <returns>Translation or <paramref name="key">key</paramref> if translation not found.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Translation.GetTranslation(System.String,System.Globalization.CultureInfo,Dynamicweb.Rendering.Designer.Design)">
 <summary>
 Gets the translation.
 </summary>
 <param name="key">The key.</param>
 <param name="culture">The culture.</param>
 <param name="design">The design.</param>
 <returns>Translation or <paramref name="key">key</paramref> if translation not found.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Translation.GetTranslation(System.String,System.String,Dynamicweb.Rendering.Designer.Design)">
 <summary>
 Gets the translation.
 </summary>
 <param name="key">The key.</param>
 <param name="cultureCode">The culture code.</param>
 <param name="design">The design.</param>
 <returns>Translation or <paramref name="key">key</paramref> if translation not found.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Translation.GetTranslation(System.String,Dynamicweb.Rendering.Designer.Design)">
 <summary>
 Gets the translation.
 </summary>
 <param name="key">The key.</param>
 <param name="design">The design.</param>
 <returns>Translation or <paramref name="key">key</paramref> if translation not found.</returns>
 <remarks>The culture is current culture of frontend.</remarks>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Translation.GetTranslation(System.String)">
 <summary>
 Gets the translation.
 </summary>
 <param name="key">The key.</param>
 <returns>Translation or <paramref name="key">key</paramref> if translation not found.</returns>
 <exception cref="T:System.Exception">Design for current page view not found.</exception>
 <remarks>
 The function used <c>PageView.Current.Layout.Design</c> to define current design. And throw exception if design not found. The culture is current culture of frontend.
 </remarks>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Translation.SetTranslation(System.String,System.String,System.Globalization.CultureInfo,Dynamicweb.Rendering.Translation.KeyScope,Dynamicweb.Rendering.Designer.Design)">
 <summary>
 Sets the translation for given key and culture. 
 </summary>
 <param name="key">The key.</param>
 <param name="translation">The translation.</param>
 <param name="culture">The culture.</param>
 <param name="scope">The scope.</param>
 <remarks>
  <para>
  The <paramref name="scope" /> parameter supports <c>KeyScope.DesignsShared</c> and <c>KeyScope.DesignsLocal</c> only.
  If <paramref name="scope" /> is <c>KeyScope.DesignsShared</c> the <paramref name="design" /> set <c>design</c> parameter to <c>null</c>
 </para>
 <para>
 To remove translation set <c>translation</c> parameter to <c>null</c>
 </para>
 </remarks>
 <exception cref="T:System.ArgumentException">designs only;scope</exception>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Translation.SetTranslation(System.String,System.String,System.String,Dynamicweb.Rendering.Translation.KeyScope,Dynamicweb.Rendering.Designer.Design)">
 <summary>
 Sets the translation for given key and culture. 
 </summary>
 <param name="key">The key.</param>
 <param name="translation">The translation.</param>
 <param name="cultureCode">The culture code.</param>
 <param name="scope">The scope.</param>
 <param name="design">The design.</param>
 <remarks>
  <para>
  The <paramref name="scope" /> parameter supports <c>KeyScope.DesignsShared</c> and <c>KeyScope.DesignsLocal</c> only.
  If <paramref name="scope" /> is <c>KeyScope.DesignsShared</c> set <c>design</c> parameter to <c>null</c>
 </para>
 <para>
 To remove translation set <c>translation</c> parameter to <c>null</c>
 </para>
 </remarks>
 <exception cref="T:System.ArgumentException">designs only;scope</exception>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Translation.GetTranslationKeys(Dynamicweb.Rendering.Translation.KeyScope,Dynamicweb.Rendering.Designer.Design)">
 <summary>
 Gets the translation keys.
 </summary>
 <param name="scope">The scope.</param>
 <param name="design">The design.</param>
 <remarks>
  <para>
  The <paramref name="scope" /> parameter supports <c>KeyScope.DesignsShared</c> and <c>KeyScope.DesignsLocal</c> only.
  If <paramref name="scope" /> is <c>KeyScope.DesignsShared</c> set <c>design</c> parameter to <c>null</c>
 </para>
 </remarks>
 <returns>The function returns <c>null</c> if translation storage not found and <see cref="T:Dynamicweb.Rendering.Translation.KeyCollection"/> instance otherwise</returns>
 <exception cref="T:System.ArgumentException">designs only;scope</exception>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Translation.GetTranslations(System.String,Dynamicweb.Rendering.Translation.KeyScope,Dynamicweb.Rendering.Designer.Design)">
 <summary>
 Gets the translations.
 </summary>
 <param name="key">The key.</param>
 <param name="scope">The scope.</param>
 <param name="design">The design.</param>
 <remarks>
  <para>
  The <paramref name="scope" /> parameter supports <c>KeyScope.DesignsShared</c> and <c>KeyScope.DesignsLocal</c> only.
  If <paramref name="scope" /> is <c>KeyScope.DesignsShared</c> set <c>design</c> parameter to <c>null</c>
 </para>
 </remarks>
 <returns>The function returns <c>null</c> if translation storage not found or storage has not translations for <paramref name="key" /> and <see cref="T:Dynamicweb.Rendering.Translation.TranslationEntryCollection"/> instance otherwise</returns>
 <exception cref="T:System.ArgumentException">designs only;scope</exception>
</member>
<member name="T:Dynamicweb.Rendering.Translation.KeyScope">
 <summary>
 Translation key scope - local, global, local for designs, global for designs, backend.
 </summary>
</member>
<member name="T:Dynamicweb.Rendering.Translation.TemplateHandler">
 <summary>
 Handles the translatable templates.
 </summary>
</member>
<member name="F:Dynamicweb.Rendering.Translation.TemplateHandler.SearchPattern">
 <remarks>
 The "Translate" tag search pattern.
 </remarks>
</member>
<member name="P:Dynamicweb.Rendering.Translation.TemplateHandler.LocalSource">
 <summary>
 Gets the local source object for current instance.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.TemplateHandler.GlobalSource">
 <summary>
 Gets the global source object for current instance.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.TemplateHandler.Html">
 <summary>
 Gets or sets the html output of the template.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.TemplateHandler.ModuleName">
 <summary>
 Gets or sets the module system name for current template.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.TemplateHandler.IsXsltTemplate">
 <summary>
 Gets the value indicating whether current template is XSLT template.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.TemplateHandler.HtmlOptimized">
 <summary>
 Gets output of the template optimized for regular expression parsing.
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.Translation.TemplateHandler.#ctor(System.String)">
 <summary>
 Creates new instance of the class.
 </summary>
 <param name="html">The html output of the template to be processed.</param>
</member>
<member name="M:Dynamicweb.Rendering.Translation.TemplateHandler.#ctor(System.String,System.String)">
 <summary>
 Creates new instance of the class.
 </summary>
 <param name="html">The html output of the template to be processed.</param>
 <param name="moduleName">The module system name for corresponding template.</param>
</member>
<member name="M:Dynamicweb.Rendering.Translation.TemplateHandler.GetLocalKeys(System.Boolean)">
 <summary>
 Returns all unique local translation keys from the current template output.
 </summary>
 <param name="loadTranslations">Value indicating whether to load translations for each key.</param>
 <returns>Found keys.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Translation.TemplateHandler.GetGlobalKeys(System.Boolean)">
 <summary>
 Returns all unique global translation keys from the current template output.
 </summary>
 <param name="loadTranslations">Value indicating whether to load translations for each key.</param>
 <returns>Found keys.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Translation.TemplateHandler.GetKeys(Dynamicweb.Rendering.Translation.KeyScope,System.Boolean)">
 <summary>
 Retrieves unique translation keys from the current template output according to their scope.
 </summary>
 <param name="scope">Keys scope to search.</param>
 <param name="loadTranslations">Value indicating whether to load translations for each key.</param>
 <returns>Found keys.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Translation.TemplateHandler.GetKeysFromHtmlTemplate(Dynamicweb.Rendering.Translation.KeyScope,System.Boolean)">
 <summary>
 Returns unique translation keys from the current HTML template output according to their scope.
 </summary>
 <param name="scope">Keys scope to search.</param>
 <param name="loadTranslations">Value indicating whether to load translations for each key.</param>
 <returns>Found keys.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Translation.TemplateHandler.GetKeysFromXsltTemplate(Dynamicweb.Rendering.Translation.KeyScope,System.Boolean)">
 <summary>
 Returns unique translation keys from the current XSLT template output according to their scope.
 </summary>
 <param name="scope">Keys scope to search.</param>
 <param name="loadTranslations">Value indicating whether to load translations for each key.</param>
 <returns>Found keys.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Translation.TemplateHandler.GetModuleName(System.String)">
 <summary>
 Returns the module system name from the template path.
 </summary>
 <param name="templatePath">Template virtual path.</param>
 <returns>Module system name.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Translation.TemplateHandler.GetVirtualPath(System.String)">
 <summary>
 Converts phisical template file path to its virutal equivalent.
 </summary>
 <param name="physicalPath">Phisical template file path.</param>
 <returns>Virtual template file path.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Translation.TemplateHandler.FullPath(System.String)">
 <summary>
 Returns the full virtual path of the template file.
 </summary>
 <param name="path">Template virtual path.</param>
 <returns>The full virtual path of the template file.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Translation.TemplateHandler.AreEqual(System.String,System.String)">
 <summary>
 Determines whether two string are equal.
 </summary>
 <param name="str1">The first string.</param>
 <param name="str2">The second string.</param>
 <returns>Value indicating whether two string are equal.</returns>
</member>
<member name="T:Dynamicweb.Rendering.Translation.TranslationEntry">
 <summary>
 Represents single key translation.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.TranslationEntry.CultureName">
 <summary>
 Gets or sets the culture name for current translation.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.TranslationEntry.Value">
 <summary>
 Gets or sets the value for current translation.
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.Translation.TranslationEntry.#ctor">
 <summary>
 Creates new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.Translation.TranslationEntry.#ctor(System.String,System.String)">
 <summary>
 Creates new instance of the class.
 </summary>
 <param name="cultureName">The culture name for current translation.</param>
 <param name="value">The value for current translation.</param>
</member>
<member name="T:Dynamicweb.Rendering.Translation.Key">
 <summary>
 Represents translation key.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.Key.Name">
 <summary>
 Gets or sets the name of the key.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.Key.Scope">
 <summary>
 Gets or sets the key scope.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.Key.DefaultValue">
 <summary>
 Gets or sets the key default value.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.Key.Translations">
 <summary>
 Gets or sets the key translations.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.Key.TagDefinitions">
 <summary>
 Gets or sets the template tag definitions for current key.
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Key.#ctor">
 <summary>
 Creates new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Key.#ctor(System.String)">
 <summary>
 Creates new instance of the class.
 </summary>
 <param name="name">The key name.</param>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Key.#ctor(System.String,Dynamicweb.Rendering.Translation.KeyScope)">
 <summary>
 Creates new instance of the class.
 </summary>
 <param name="name">The key name.</param>
 <param name="scope">The key scope.</param>
</member>
<member name="T:Dynamicweb.Rendering.Translation.KeyCollection">
 <summary>
 Represents translation keys collection.
 </summary>
</member>
<member name="T:Dynamicweb.Rendering.Translation.Source">
 <summary>
 Represents translation source.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.Source.Document">
 <summary>
 Gets or sets the xml document which contains keys with their translations.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.Source.ModuleName">
 <summary>
 Gets or sets the module system name for which the translation source is loaded.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.Source.DesignName">
 <summary>
 Gets or sets the source file Disngn Name.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.Source.Keys">
 <summary>
 Gets or sets the translation keys collection for current source.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.Source.Path">
 <summary>
 Gets or sets the current source path.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.Source.IsGlobal">
 <summary>
 Gets the value indicating whether the global source is loaded.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Translation.Source.Scope">
 <summary>
 Retrieves the source scope
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Source.#ctor">
 <summary>
 Creates new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Source.#ctor(System.String)">
 <summary>
 Creates new instance of the class.
 </summary>
 <param name="path">The path of source to load.</param>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Source.#ctor(System.String,System.String)">
 <summary>
 Creates new instance of the class.
 </summary>
 <param name="designName">The design name to search in first.</param>
 <param name="moduleName">The module name to search in second.</param>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Source.LoadKeys">
 <summary>
 Loads keys from the source. 
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Source.LoadDesignsShared">
 <summary>
 Returns the Designs global source.
 </summary>
 <returns>The <see cref="T:System.Xml.XmlDocument"/> object for Designs global source.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Source.GetTranslationsForKey(Dynamicweb.Rendering.Translation.Key)">
 <summary>
 Returns all translations for given key.
 </summary>
 <param name="item">Key object for which translations should be retrieved.</param>
 <returns>Translations for given key.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Source.GetTranslation(System.String,System.String,System.String)">
 <summary>
 Returns the translation for given key and culture.
 </summary>
 <param name="key">Key object for which translation should be retrieved.</param>
 <param name="cultureCode">Culture for which translation should be retrieved.</param>
 <param name="defaultTranslation">The result which should be removed if the key translation.</param>
 <returns>Translation string or defaultTranslation if not matched null if not.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Source.SetTranslation(System.String,System.String,System.String)">
 <summary>
 Sets the translation.
 </summary>
 <param name="key">The key.</param>
 <param name="translation">The translation.</param>
 <param name="cultureCode">The culture code.</param>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Source.RemoveTranslation(System.String,System.String)">
 <summary>
 Removes the translation.
 </summary>
 <param name="key">The key.</param>
 <param name="cultureCode">The culture code.</param>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Source.Save">
 <summary>
 Saves current source on the disk.
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Source.LoadDocument">
 <summary>
 Loads the <see cref="T:System.Xml.XmlDocument"/> object for current source.
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Source.WriteDocument(System.Xml.XmlDocument)">
 <summary>
 Writes the contens of the XmlDocument on the disk.
 </summary>
 <param name="document">The <see cref="T:System.Xml.XmlDocument"/> object to be written.</param>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Source.CreateEmptyDocument">
 <summary>
 Returns an empty XmlDocument object for current source.
 </summary>
 <returns>An empty XmlDocument object for current source.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Source.CreateCharacterData(System.String)">
 <summary>
 Returns valid CDATA section.
 </summary>
 <param name="value">CData value to examine.</param>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Source.GetPath(System.String,System.String)">
 <summary>
 Returns the path to the translation source file according to design name and module name.
 </summary>
 <param name="designName">The source file Design name. Leave empty for Global Design source.</param>
 <param name="moduleName">The source file Module name. Leave empty for search Source only in Design Folder.</param>
 <returns>The path to the translation source file.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Source.UpdateTranslationSource(Dynamicweb.Rendering.Translation.Source,System.Collections.Generic.IEnumerable{Dynamicweb.Rendering.Translation.Key},System.String,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Updates a translation source with new keys.
 </summary>
 <param name="source">The source to update</param>
 <param name="newKeys">The new translation keys</param>
 <param name="designName">Source file Design name. Leave empty for Global Design source</param>
 <param name="cultures">The culture names (e.g. da-DK, en-US)</param>
</member>
<member name="M:Dynamicweb.Rendering.Translation.Source.GetTranslationSource(System.String,System.String,System.String)">
 <summary>
 Returns a translation source for specified culture and design.
 </summary>
 <param name="designName">Source file Design name. Leave empty for Global Design source</param>
 <param name="moduleName">Source file Module name. Leave empty for search Source only in Design Folder</param>
 <param name="cultureName">The culture name(e.g. da-DK, en-US)</param>
 <returns>The translation source.</returns>
</member>
<member name="T:Dynamicweb.Rendering.Translation.TranslationEntryCollection">
 <summary>
 Represents translations collection.
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.Translation.TranslationEntryCollection.Add(System.String,System.String)">
 <summary>
 Adds new item to the collection.
 </summary>
 <param name="cultureName">The name of the culture for new item.</param>
 <param name="value">The translation value for the new item.</param>
</member>
<member name="T:Dynamicweb.Rendering.ViewModelTemplate`1">
 <summary>
 Base class for razor based templates using <see cref="T:Dynamicweb.Rendering.ViewModelBase"/>.
 </summary>
 <typeparam name="TViewModel">The type of view model.</typeparam>
 <seealso cref="T:Dynamicweb.Rendering.TemplateBase`1" />
</member>
<member name="M:Dynamicweb.Rendering.ViewModelTemplate`1.RenderPartial(System.String)">
 <summary>
 Renders a partial view using the current view model
 </summary>
 <param name="templatePath">Relative path to a view model template, e.g. "partials/part.cshtml</param>
 <returns>Output from rendering of the view model template</returns>
</member>
<member name="M:Dynamicweb.Rendering.ViewModelTemplate`1.RenderPartial``1(System.String,``0)">
 <summary>
 Renders a partial view using the given view model
 </summary>
 <typeparam name="T">The type of viewmodel. The type must inherit from Dynamicweb.Rendering.ViewModelBase</typeparam>
 <param name="templatePath">Relative path to a view model template, e.g. "partials/part.cshtml</param>
 <param name="model">Instance of a view model</param>
 <returns>Output from rendering of the view model template</returns>
</member>
<member name="T:Dynamicweb.Rendering.Loop">
 <summary>
 Represents a loop instance of a <see cref="P:Dynamicweb.Rendering.Loop.Template">template</see> instance.
 </summary>
 <remarks>Used internally. Only access this through a <see cref="P:Dynamicweb.Rendering.Loop.Template"></see> instance.</remarks>
 <example>See usage example in <see cref="P:Dynamicweb.Rendering.Loop.Template"></see></example>
</member>
<member name="F:Dynamicweb.Rendering.Loop.ID">
 <summary>
 The unique ID of this loop.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Loop.LoopElement">
 <summary>
 Gets or sets the loop xml element.
 </summary>
 <value>The loop element.</value>
</member>
<member name="P:Dynamicweb.Rendering.Loop.Tags">
 <summary>
 Gets the tags.
 </summary>
 <value>The tags.</value>
</member>
<member name="P:Dynamicweb.Rendering.Loop.RawTags(System.String)">
 <summary>
 Gets the raw tags by index.
 </summary>
 <value>
 The raw tags As Generic.List(Of Dictionary(Of String, Object)).
 </value>
</member>
<member name="P:Dynamicweb.Rendering.Loop.Name">
 <summary>
 Gets or sets the name of the loop.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Rendering.Loop.Data">
 <summary>
 Gets or sets the data collection. The data collection holds the different html parts of the loop if more than one loop is present in the same html file.
 </summary>
 <value>The data.</value>
</member>
<member name="P:Dynamicweb.Rendering.Loop.Template">
 <summary>
 Gets or sets the template.
 </summary>
 <value>The template.</value>
</member>
<member name="M:Dynamicweb.Rendering.Loop.AddData(System.String)">
 <summary>
 Adds the specified html to data collection. Called once for each piece of loop markup in the same template with the same name.
 </summary>
 <param name="html">The HTML.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.Loop.Commit(System.String,System.Int32,System.Int32)">
 <summary>
 Commits this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.Loop.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Rendering.Loop" /> class.
 </summary>
</member>
<member name="T:Dynamicweb.Rendering.LoopCollection">
 <summary>
 Represents a collection of loops.
 </summary>
 <remarks>Used internally. Only access this through a <see cref="T:Dynamicweb.Rendering.Template">template</see> instance.</remarks>
 <example>See usage example in <see cref="T:Dynamicweb.Rendering.Template"></see></example>
</member>
<member name="M:Dynamicweb.Rendering.LoopCollection.GetKeyForItem(Dynamicweb.Rendering.Loop)">
 <summary>
 Gets the key for item. The key is the name of the loop
 </summary>
 <param name="item">The loop.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.LoopCollection.GetLoopByName(System.String)">
 <summary>
 Gets a loop by its name.
 </summary>
 <param name="name">The name.</param>
 <returns></returns>
 <example>See usage example in <see cref="T:Dynamicweb.Rendering.Template"></see></example>
</member>
<member name="M:Dynamicweb.Rendering.LoopCollection.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Rendering.LoopCollection" /> class.
 </summary>
</member>
<member name="T:Dynamicweb.Rendering.LoopData">
 <summary>
 Represents the parsed temp data in a loop instance.
 </summary>
 <remarks>Used internally. Only access this through a <see cref="T:Dynamicweb.Rendering.Template">template</see> instance.</remarks>
</member>
<member name="P:Dynamicweb.Rendering.LoopData.UniqueName">
 <summary>
 Gets or sets the name of the unique.
 </summary>
 <value>The name of the unique.</value>
</member>
<member name="P:Dynamicweb.Rendering.LoopData.ParsedHtml">
 <summary>
 Gets or sets the parsed HTML.
 </summary>
 <value>The parsed HTML.</value>
</member>
<member name="P:Dynamicweb.Rendering.LoopData.Html">
 <summary>
 Gets or sets the HTML.
 </summary>
 <value>The HTML.</value>
</member>
<member name="P:Dynamicweb.Rendering.LoopData.OutputBuffer">
 <summary>
 Gets the output buffer.
 </summary>
 <value>The output buffer.</value>
</member>
<member name="P:Dynamicweb.Rendering.LoopData.Output">
 <summary>
 Gets the output.
 </summary>
 <value>The output.</value>
</member>
<member name="M:Dynamicweb.Rendering.LoopData.ClearOutputBuffer">
 <summary>
 Clears the output buffer.
 </summary>
</member>
<member name="T:Dynamicweb.Rendering.LoopDataCollection">
 <summary>
 Represents a collection of loop data.
 </summary>
 <remarks>Used internally. Only access this through a <see cref="T:Dynamicweb.Rendering.Template">template</see> instance.</remarks>
</member>
<member name="T:Dynamicweb.Rendering.Tag">
 <summary>
 Represents a template tag definition and its value. 
 </summary>
 <remarks>A <see cref="T:Dynamicweb.Rendering.Tag"></see> is represented asd &lt;!--@TagName--&gt; in HTML templates. In XSLT templates the tag is a node in the form &lt;TagName&gt;Value&lt;/TagName&gt;<br /><br />Creating new tags to a template object should use <see cref="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.Boolean)"></see></remarks>
 <example>
 <code title="Tag and TagCollection sample" description="Working with tags and tagcollection" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Rendering\TagSample.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Rendering.Tag.Type">
 <summary>
 A context of where the tag is used - in a normal template, inside a loop or a reference to the loop items parent template instance.
 </summary>
 <remarks>Used internally in the template object.</remarks>
</member>
<member name="F:Dynamicweb.Rendering.Tag.Type.Html">
 <summary>
 A normal tag
 </summary>
</member>
<member name="F:Dynamicweb.Rendering.Tag.Type.LoopItem">
 <summary>
 A tag inside a loop
 </summary>
</member>
<member name="F:Dynamicweb.Rendering.Tag.Type.Parent">
 <summary>
 A tag in the parent <see cref="T:Dynamicweb.Rendering.Template"></see> instance if the tag is in a loop.
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.Tag.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Rendering.Tag" /> class.
 </summary>
 <example>See usage example in <see cref="T:Dynamicweb.Rendering.Tag"></see></example>
</member>
<member name="M:Dynamicweb.Rendering.Tag.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Rendering.Tag" /> class and sets the value of a tag with the specified name.
 </summary>
 <param name="tagName">Name of the tag.</param>
 <param name="tagValue">The tag value.</param>
 <example>See usage example in <see cref="T:Dynamicweb.Rendering.Tag"></see></example>
</member>
<member name="M:Dynamicweb.Rendering.Tag.#ctor(System.String,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Rendering.Tag" /> class and sets the value of a tag with the specified name and also renderes an attribute on the xml (if template is using a xslt template).
 </summary>
 <param name="tagName">Name of the tag.</param>
 <param name="tagValue">The tag value.</param>
 <param name="xmlAttributeName">Name of the XML attribute.</param>
 <param name="xmlAttributeValue">The XML attribute value.</param>
 <example>See usage example in <see cref="T:Dynamicweb.Rendering.Tag"></see></example>
</member>
<member name="P:Dynamicweb.Rendering.Tag.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
 <example>See usage example in <see cref="T:Dynamicweb.Rendering.Tag"></see></example>
</member>
<member name="P:Dynamicweb.Rendering.Tag.Value">
 <summary>
 Gets or sets the value.
 </summary>
 <value>The value.</value>
 <example>See usage example in <see cref="T:Dynamicweb.Rendering.Tag"></see></example>
</member>
<member name="P:Dynamicweb.Rendering.Tag.XmlAttributeName">
 <summary>
 Gets or sets the name of the XML attribute. A tag is rendered as &lt;DWPageID&gt;54&lt;/DWPageID&gt; in the XML. Using <see cref="P:Dynamicweb.Rendering.Tag.XmlAttributeName"></see> and <see cref="P:Dynamicweb.Rendering.Tag.XmlAttributeValue"></see> adds an attribute and the specified value to the tagname node.
 </summary>
 <value>The name of the XML attribute.</value>
</member>
<member name="P:Dynamicweb.Rendering.Tag.XmlAttributeValue">
 <summary>
 Gets or sets the XML attribute value. A tag is rendered as &lt;DWPageID&gt;54&lt;/DWPageID&gt; in the XML. Using <see cref="P:Dynamicweb.Rendering.Tag.XmlAttributeName"></see> and <see cref="P:Dynamicweb.Rendering.Tag.XmlAttributeValue"></see> adds an attribute and the specified value to the tagname node.
 </summary>
 <value>The XML attribute value.</value>
</member>
<member name="M:Dynamicweb.Rendering.Tag.Clone">
 <summary>
 Clones this instance.
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Rendering.TagCollection">
 <summary>
 Represents a collection of <see cref="T:Dynamicweb.Rendering.Tag"></see>.
 </summary>
 <example>
 <code title="Tag and TagCollection sample" description="Working with tags and tagcollection" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Rendering\TagSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Rendering.TagCollection.GetKeyForItem(Dynamicweb.Rendering.Tag)">
 <summary>
 Gets the key for item. The key is the tag name.
 </summary>
 <param name="item">The item - a <see cref="T:Dynamicweb.Rendering.Tag"></see> instance.</param>
 <returns>The name of the passed <see cref="T:Dynamicweb.Rendering.Tag"></see></returns>
</member>
<member name="M:Dynamicweb.Rendering.TagCollection.Add(Dynamicweb.Rendering.TagCollection)">
 <summary>
 Adds the specified collection of tags to this instance of the collection.
 </summary>
 <param name="tags">The collection of tags to add to this instance.</param>
 <remarks>If a tag with the same name already exists, the tag is not inserted.</remarks>
 <example>See usage example in <see cref="T:Dynamicweb.Rendering.TagCollection"></see></example>
</member>
<member name="M:Dynamicweb.Rendering.TagCollection.Add(Dynamicweb.Rendering.Tag)">
 <summary>
 Adds the specified tag.
 </summary>
 <param name="tag">The tag of the tag.</param>
 <remarks>If a tag with the same name already exists, the tag is not inserted.</remarks>
 <example>See usage example in <see cref="T:Dynamicweb.Rendering.TagCollection"></see></example>
</member>
<member name="M:Dynamicweb.Rendering.TagCollection.ContainsTagName(System.String)">
 <summary>
 Determines whether the collection contains a tag with the specified name.
 </summary>
 <param name="name">The name of the tag.</param>
 <returns>
 <c>true</c> if the specified name is found; otherwise, <c>false</c>.
 </returns>
 <example>See usage example in <see cref="T:Dynamicweb.Rendering.TagCollection"></see></example>
</member>
<member name="M:Dynamicweb.Rendering.TagCollection.GetTagByName(System.String)">
 <summary>
 Gets the tag object by tag name.
 </summary>
 <param name="name">The name of the tag.</param>
 <returns>A <see cref="T:Dynamicweb.Rendering.Tag"></see> instance if the collection contains a tag with the specified name, otherwise <c>null</c> (<c>Nothing</c> in Visual Basic)</returns>
 <example>See usage example in <see cref="T:Dynamicweb.Rendering.TagCollection"></see></example>
</member>
<member name="M:Dynamicweb.Rendering.TagCollection.Clone">
 <summary>
 Clones this instance. Used internally
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.TagCollection.GetSorted">
 <summary>
 Gets the collection sorted by tag.name.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.TagCollection.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Rendering.TagCollection" /> class.
 </summary>
 <example>See usage example in <see cref="T:Dynamicweb.Rendering.TagCollection"></see></example>
</member>
<member name="T:Dynamicweb.Rendering.Template">
 <summary>
 Loads HTML (XSLT) based templates and expose methods for setting dynamic values and loops. Returns a parsed version of the template replacing template tags with dynamic values.
 </summary>
 <remarks>
 Templates are HTML or XSLT files placed in the /Files/Templates folder of a Dynamicweb
 installation. Templates are the rendering engine of Dynamicweb merging the markup (or XSLT) with the dynamicweb values delivered by the system.<br /><br />
 Template language looks like normal markup with comment style variables: &lt;h1&gt;&lt;--@TagName--&gt;&lt;h1&gt;. Runtime the &lt;--@TagName--&gt; is replaced by a
 value set with <see cref="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.Boolean)"></see>.<br /><br />
 Template tag reference: <a href="http://templates.dynamicweb-cms.com/" target="_blank">http://templates.dynamicweb-cms.com/</a> <br />
 Implementing designs with Dynamicweb templates: <a href="http://developer.dynamicweb-cms.com/documentation/for-designers.aspx" target="_blank">http://developer.dynamicweb-cms.com/documentation/for-designers.aspx</a>
 </remarks>
 <example>
 <code title="Render a template" description="Full template example" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Rendering\TemplateSample.cs" lang="CS"></code>
 <code description="Simple template usage example"  lang="CS">
 //Load a template from /Files/Templates/MyFolder/MyTemplate.html
 Rendering.Template t = new Template("MyFolder/MyTemplate.html");
 //Set a tag value
 t.SetTag("MyTag", "Hello world!");
 //Return the parsed template
 return t.Output();</code>
 <code description="Template usage example with loop"  lang="CS">
 Template t = new Template("MyFolder/MyTemplate.html");
 //Set a tag value
 t.SetTag("MyTag", "Hello world!");

 //Create a loop in the template
 Template loopTemplate = t.GetLoop("MyLoop");
 foreach (Content.Page p in Content.Page.GetPagesByAreaID(1)) {
 	loopTemplate.SetTag("PageName", p.MenuText);
 	loopTemplate.CommitLoop();
 }

 //Return the parsed template
 return t.Output();
 </code>
 </example>
</member>
<member name="P:Dynamicweb.Rendering.Template.CultureName">
 <summary>
 Gets the name of the culture.
 </summary>
 <value>
 The name of the culture.
 </value>
</member>
<member name="M:Dynamicweb.Rendering.Template.GetRawValue(System.String)">
 <summary>
 Gets the value of the passed variable name.
 </summary>
 <param name="name">The name of the variable.</param>
 <returns>Returns <c>null</c> (Nothing in VB) if the passed name is not found in the <see cref="F:Dynamicweb.Rendering.Template._rawTags">rawTags collection</see></returns>
</member>
<member name="P:Dynamicweb.Rendering.Template.IsXsltTemplate">
 <summary>
 Gets a value indicating whether this instance is XSLT template.
 </summary>
 <value>
 <c>true</c> if this instance is XSLT template; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Rendering.Template.Type">
 <summary>
 Gets a enum of the type of template.
 </summary>
 <value>
 The template type.
 </value>
</member>
<member name="P:Dynamicweb.Rendering.Template.TemplateBaseType">
 <summary>
 Gets a enum of the type of template.
 </summary>
 <value>
 The template type.
 </value>
</member>
<member name="P:Dynamicweb.Rendering.Template.XmlDocument">
 <summary>
 Gets a XML document representing the template tags as xml - tags are not present until <see cref="M:Dynamicweb.Rendering.Template.Output">Template.Output</see> has been called.
 </summary>
 <value>The XML document.</value>
</member>
<member name="P:Dynamicweb.Rendering.Template.ParseScript">
 <summary>
 Gets a value indicating whether if tags should be parsed.
 </summary>
 <value>
   <c>true</c> if script should be parsed; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Rendering.Template.Path">
 <summary>
 Gets or sets the full path of the template path.
 </summary>
 <value>
 The path.
 </value>
</member>
<member name="P:Dynamicweb.Rendering.Template.Html">
 <summary>
 Gets or sets the HTML of the template. Usually loaded when instantiated <c>New Template("MyFolder/MyTemplate.html")</c>.
 </summary>
 <value>The HTML of a template.</value>
 <example>
 <code description="Load template html from string"  lang="VB"><![CDATA[
 Dim t As New Template
	t.Html = "<h1><!--@MyTag--></h1>"
	t.SetTag("MyTag", "Hello world!")
	Return t.Output()]]></code>
 <code description="Load template html from string"  lang="CS"><![CDATA[
 Template t = new Template();
 t.Html = "<h1><!--@MyTag--></h1>";
 t.SetTag("MyTag", "Hello world!");
 return t.Output();]]></code>
 </example>
</member>
<member name="P:Dynamicweb.Rendering.Template.Tags">
 <summary>
 Gets or sets the collection of template tags.
 </summary>
 <value>The tag collection.</value>
 <remarks>Use <see cref="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.Boolean)"></see> to add tags or tag collections to the current instance.</remarks>
 <returns>If no tags have been added to the template instance using <see cref="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.Boolean)"></see>, an empty instance of a <see cref="T:Dynamicweb.Rendering.TagCollection"></see>is returned. Never returns <c>null</c> (<c>Nothing</c> in Visual Basic)</returns>
</member>
<member name="P:Dynamicweb.Rendering.Template.HtmlTags">
 <summary>
 Gets the collection of template tags.
 </summary>
 <value>The tag collection.</value>
</member>
<member name="P:Dynamicweb.Rendering.Template.Loop">
 <summary>
 Gets or sets the loop instance if the current template object is a member of a parent template
 objects loop collection. Otherwise null (Nothing in Visual Basic).
 </summary>
 <value>The loop instance of the current template object</value>
 <remarks>
 This property is used by the template object in loop situations. Should not be
 called.
 </remarks>
</member>
<member name="P:Dynamicweb.Rendering.Template.CurrentLoop">
 <summary>
 Gets or sets the loop instance if the current template object is a member of a parent template
 objects loop collection. Otherwise null (Nothing in Visual Basic).
 </summary>
 <value>The loop instance of the current template object</value>
 <remarks>
 This property is used by the template object in loop situations. Should not be
 called.
 </remarks>
</member>
<member name="P:Dynamicweb.Rendering.Template.Loops">
 <summary>
 Gets or sets the loops.
 </summary>
 <value>The loop collection.</value>
</member>
<member name="P:Dynamicweb.Rendering.Template.LoopName">
 <summary>
 Gets or sets the name of the loop.
 </summary>
 <value>The name of the loop.</value>
</member>
<member name="P:Dynamicweb.Rendering.Template.Parent">
 <summary>
 Gets or sets the parent template - if the template instance is a loop item.
 </summary>
 <value>
 The parent template object instance.
 </value>
</member>
<member name="P:Dynamicweb.Rendering.Template.Root">
 <summary>
 Gets the root template instance - the document of all loops, sub loops etc.
 </summary>
 <value>
 The root (originating) template object instance.
 </value>
</member>
<member name="P:Dynamicweb.Rendering.Template.HasDwTemplateTag">
 <summary>
 Gets or sets a value indicating whether this instance has DwTemplateTags.
 </summary>
 <value>
 <c>true</c> if this instance has DwTemplateTags; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Rendering.Template.Filename">
 <summary>
 Gets the filename of the template, i.e. /News/Template.html.
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.Template.#ctor">
 <summary>
 Initializes a new instance of the <see cref="M:Dynamicweb.Rendering.Template.Template(System.String)" /> class without reading a template file.
 </summary>
 <remarks>Use <see cref="P:Dynamicweb.Rendering.Template.Html"></see> property or <see cref="M:Dynamicweb.Rendering.Template.LoadTemplate(System.String)"></see> to load html to the instance.</remarks>
 <example>See usage example in <see cref="M:Dynamicweb.Rendering.Template.LoadTemplate(System.String)"></see></example>
</member>
<member name="M:Dynamicweb.Rendering.Template.SetViewModel(Dynamicweb.Rendering.ViewModelBase)">
 <summary>
 Sets the view model.
 </summary>
 <param name="viewModel">The view model.</param>
</member>
<member name="M:Dynamicweb.Rendering.Template.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="M:Dynamicweb.Rendering.Template.Template(System.String)" /> class and loads a template into the object.
 </summary>
 <param name="path">The path to the template relative to /Files/Templates directory, i.e. "MyModule/item.html" to load a template from /Files/Templates/MyModule/item.html.</param>
 <example>
 <code description="Simple template usage example"  lang="VB">
 'Load a template from /Files/Templates/MyFolder/MyTemplate.html
 Dim t As New Template("MyFolder/MyTemplate.html")
 'Set a tag value
 t.SetTag("MyTag", "Hello world!")
 'Return the parsed template
 Return t.Output</code>
 <code description="Simple template usage example"  lang="CS">
 //Load a template from /Files/Templates/MyFolder/MyTemplate.html
 Rendering.Template t = new Template("MyFolder/MyTemplate.html");
 //Set a tag value
 t.SetTag("MyTag", "Hello world!");
 //Return the parsed template
 return t.Output();</code>
 </example>
</member>
<member name="M:Dynamicweb.Rendering.Template.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="M:Dynamicweb.Rendering.Template.Template(System.String)"/> class and loads a template into the object.
 </summary>
 <param name="path">The path to the template relative to /Files/Templates directory, i.e. "MyModule/item.html" to load a template from /Files/Templates/MyModule/item.html.</param>
 <param name="cultureName">Name of the culture used for translation of translate tags, ie. 'en-GB'</param>
</member>
<member name="M:Dynamicweb.Rendering.Template.LoadTemplate(System.String)">
 <summary>
 Loads a Template file into the object from disk specified by <paramref name="path">Path</paramref> parameter.
 </summary>
 <param name="path">The path to the Template file relative to the /Files/Templates/ folder.</param>
 <example>
 <code lang="VB" title="Load template example" description="Loading a template file into the template object">
 'Create a new Template object
 Dim NewsTemplate As New Template
 'Initialize and set the <paramref name="path">Path</paramref> parameter
 Dim strNewTemplatePath as String = "News/NewsElement.html"
 'Load the The template file
 NewsTemplate.LoadTemplate(strNewTemplatePath)
 </code>
 </example>
 <remarks>Usually used with the constructor of the <see cref="M:Dynamicweb.Rendering.Template.Template(System.String)"></see> object. See the <see cref="M:Dynamicweb.Rendering.Template.Template(System.String)"></see> reference for a full example.
 Use <see cref="P:Dynamicweb.Rendering.Template.Html"></see> property to load markup from a string.
 </remarks>
</member>
<member name="M:Dynamicweb.Rendering.Template.LoadTemplate(System.String,System.Boolean)">
 <summary>
 Loads a Template file into the object from disk specified by <paramref name="path">Path</paramref> parameter.
 </summary>
 <param name="path">The path to the Template file relative to the /Files/Templates/ folder.</param>
 <example>
 <code lang="VB" title="Load template example" description="Loading a template file into the template object">
 'Create a new Template object
 Dim NewsTemplate As New Template
 'Initialize and set the <paramref name="path">Path</paramref> parameter
 Dim strNewTemplatePath as String = "News/NewsElement.html"
 'Load the The template file
 NewsTemplate.LoadTemplate(strNewTemplatePath)
 </code>
 </example>
 <remarks>Usually used with the constructor of the <see cref="M:Dynamicweb.Rendering.Template.Template(System.String)"></see> object. See the <see cref="M:Dynamicweb.Rendering.Template.Template(System.String)"></see> reference for a full example.
 Use <see cref="P:Dynamicweb.Rendering.Template.Html"></see> property to load markup from a string.
 </remarks>
</member>
<member name="M:Dynamicweb.Rendering.Template.GetVariable(System.String)">
 <summary>
 Gets xslt variable.
 </summary>
 <param name="name">The name.</param>
 <returns>Value of xslt variable.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Template.Output">
 <summary>
 Parses the loaded template html with the data set on the object with <see cref="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.Boolean)"></see>. If the loaded template is a XSLT file, the passed tags are converted into a XML-document which is applied with the loaded XSLT.
 </summary>
 <returns>A merged string of the resulting html.</returns>
 <example>
 <code title="Render a template" description="Full template example" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Rendering\TemplateSample.cs" lang="CS"></code>
 <code description="Simple template usage example"  lang="VB">
 'Load a template from /Files/Templates/MyFolder/MyTemplate.html
 Dim t As New Template("MyFolder/MyTemplate.html")
 'Set a tag value
 t.SetTag("MyTag", "Hello world!")
 'Return the parsed template
 Return t.Output</code>
 <code description="Simple template usage example"  lang="CS">
 //Load a template from /Files/Templates/MyFolder/MyTemplate.html
 Rendering.Template t = new Template("MyFolder/MyTemplate.html");
 //Set a tag value
 t.SetTag("MyTag", "Hello world!");
 //Return the parsed template
 return t.Output();</code>
 </example>
 <remarks>Should only be called once for each instance of the template object. Use <see cref="M:Dynamicweb.Rendering.Template.CommitLoop"></see> inside a loop.</remarks>
</member>
<member name="F:Dynamicweb.Rendering.Template.TemplateTagRegex">
 <summary>
 Regular expression for matching template tags

 Capturing groups:
   1: tag name
   2: tag name without any optional encoding specification
   3: tag value encoding (HtmlEncoded, UrlEncoded or Raw)
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.Template.HtmlEncodeAsDefault">
 <summary>
 Gets a value indicating whether tag values are htmlencoded as default.
 </summary>
 <value>
 <c>true</c> if [HTMLencode as default] otherwise, <c>false</c>.
 </value>
</member>
<member name="M:Dynamicweb.Rendering.Template.Translate(System.String,System.String)">
 <summary>
 Translates given html according to current culture.
 </summary>
 <param name="html">The html text to be processed.</param>
 <param name="path">Physical template file path.</param>
 <returns>Translated html output.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Template.Translate(System.String,System.String,System.String)">
 <summary>
 Translates given html according to current culture.
 </summary>
 <param name="html">The html text to be processed.</param>
 <param name="path">Physical template file path.</param>
 <param name="cultureName">Name of the culture, i.e. en-UK or da-DK.</param>
 <returns>Translated html output.</returns>
</member>
<member name="M:Dynamicweb.Rendering.Template.Reset">
 <summary>
 Resets this instance. Clears the buffers, the tags and loops.
 </summary>
</member>
<member name="F:Dynamicweb.Rendering.Template._rawTags">
 <summary>
 Contains a collection of tags for use in Razor templates. Keeps the original object type instead of converting values to strings.
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.Template.SetRawTag(System.String,System.Object)">
 <summary>
 Sets the raw tag.
 </summary>
 <param name="name">The name.</param>
 <param name="value">The value.</param>
</member>
<member name="M:Dynamicweb.Rendering.Template.SetTagValue(System.String,System.Object)">
 <summary>
 Sets a tag as its object value for use in Razor templates.
 </summary>
 <param name="name">The name of the tag.</param>
 <param name="value">The value of the tag as an object.</param>
 <remarks>
 If the template is Razor the value will persist as an object of the passed type and can be used directly in the template. In this way it is possible to pass
 a full object, i.e. a 'Person', 'Product' or similar to the template engine. If the template being used is HTML or XSLT the passed value is converted to
 either <c>string</c>, <c>integer</c>, <c>boolean</c>, <c>date</c>, <c>double</c> or <c>decimal</c>.
 </remarks>
</member>
<member name="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Sets the tag and value to the tags collection. MUST be private.
 </summary>
 <param name="name">The name of the tag.</param>
 <param name="value">The value of the tag.</param>
 <param name="xmlAttributeName">Name of the XML attribute.</param>
 <param name="xmlAttributeValue">The XML attribute value.</param>
 <param name="htmlEncode">if set to <c>true</c> HTML encode the value.</param>
</member>
<member name="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.String)">
 <summary>
 Specifies a tag name and value for the instance of the template object.
 </summary>
 <param name="name">The name of the template tag, &lt;--@NameOfTag--&gt;.</param>
 <param name="value">The value replacing the template tag specified in the name.</param>
 <example>
 <code description="Simple template usage example"  lang="VB">
 'Load a template from /Files/Templates/MyFolder/MyTemplate.html
 Dim t As New Template("MyFolder/MyTemplate.html")
 'Set a tag value
 t.SetTag("MyTag", "Hello world!")
 'Return the parsed template
 Return t.Output</code>
 <code description="Simple template usage example"  lang="CS">
 //Load a template from /Files/Templates/MyFolder/MyTemplate.html
 Rendering.Template t = new Template("MyFolder/MyTemplate.html");
 //Set a tag value
 t.SetTag("MyTag", "Hello world!");
 //Return the parsed template
 return t.Output();</code>
 </example>
</member>
<member name="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.String,System.Boolean)">
 <summary>
 Specifies a tag name and value for the instance of the template object.
 </summary>
 <param name="name">The name of the template tag, &lt;--@NameOfTag--&gt;.</param>
 <param name="value">The value replacing the template tag specified in the name.</param>
 <param name="htmlEncode">if set to <c>true</c> the value is HTML encoded.</param>
 <example>
 <code description="Simple template usage example"  lang="VB">
 'Load a template from /Files/Templates/MyFolder/MyTemplate.html
 Dim t As New Template("MyFolder/MyTemplate.html")
 'Set a tag value
 t.SetTag("MyTag", "Hello &lt;b&gt;world!&lt;/b&gt;", True)
 'Return the parsed template with the value of MyTag html encoded.
 Return t.Output</code>
 <code description="Simple template usage example"  lang="CS">
 //Load a template from /Files/Templates/MyFolder/MyTemplate.html
 Rendering.Template t = new Template("MyFolder/MyTemplate.html");
 //Set a tag value
 t.SetTag("MyTag", "Hello &lt;b&gt;world!&lt;/b&gt;", true);
 //Return the parsed template with the value of MyTag html encoded.
 return t.Output();</code>
 </example>
</member>
<member name="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.String,System.String,System.String)">
 <summary>
 Specifies a tag value for the instance of the template object and add an attribute with a value on the xml node when using xslt templates.
 </summary>
 <param name="name">The name of the template tag, &lt;--@NameOfTag--&gt;.</param>
 <param name="value">The value replacing the template tag specified in the name.</param>
 <param name="xmlAttributeName">Name of an additional XML attribute that should be added to the tag node when using XSLT.</param>
 <param name="xmlAttributeValue">The XML attribute value of the <c>XmlAttributeName</c> when specified.</param>
 <example>
 <code title="Render a template" description="Full template example" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Rendering\TemplateSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.DateTime,System.Globalization.CultureInfo,System.String)">
 <summary>
 Specifies a tag value of type date with the specified culture. Adds a series of Date/Time extensions to the base template name. See http://templates.dynamicweb-cms.com/TemplateTags/Dynamicweb-template-tags/General-tags/Date/time-tag-extensions.aspx.
 </summary>
 <param name="name">The name of the template tag, &lt;--@NameOfTag--&gt;.</param>
 <param name="value">The date value replacing the template tag specified in the name.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo">culture</see>.</param>
 <param name="dateFormat">The date format.</param>
 <remarks>Used internally. Use <see cref="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.Boolean)">SetTag(String, Date)</see> instead.</remarks>
 <example>
 <code title="Render a template" description="Full template example" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Rendering\TemplateSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.DateTime,System.Globalization.CultureInfo)">
 <summary>
 Specifies a tag value of type date with the specified culture. Adds a series of Date/Time extensions to the base template name. See http://templates.dynamicweb-cms.com/TemplateTags/Dynamicweb-template-tags/General-tags/Date/time-tag-extensions.aspx.
 </summary>
 <param name="name">The name of the template tag, &lt;--@NameOfTag--&gt;.</param>
 <param name="value">The date value replacing the template tag specified in the name.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo">culture</see>.</param>
 <example>
   <code title="Render a template" description="Full template example" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Rendering\TemplateSample.cs" lang="CS"></code>
 </example>
 <remarks>Used internally. Use <see cref="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.Boolean)">SetTag(String, Date)</see> instead.</remarks>
</member>
<member name="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.DateTime,System.String)">
 <summary>
 Specifies a tag value of type date with the specified culture. Adds a series of Date/Time extensions to the base template name. See http://templates.dynamicweb-cms.com/TemplateTags/Dynamicweb-template-tags/General-tags/Date/time-tag-extensions.aspx.
 </summary>
 <param name="name">The name of the template tag, &lt;--@NameOfTag--&gt;.</param>
 <param name="value">The date value replacing the template tag specified in the name.</param>
 <param name="dateFormat">The <see cref="T:Dynamicweb.Core.Helpers.DateHelper">date format</see>.</param>
 <remarks>Used internally. Use <see cref="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.Boolean)">SetTag(String, Date)</see> instead.</remarks>
 <example>
 <code title="Render a template" description="Full template example" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Rendering\TemplateSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.DateTime)">
 <summary>
 Specifies a tag value of type date with the specified culture. Adds a series of Date/Time extensions to the base template name. See http://templates.dynamicweb-cms.com/TemplateTags/Dynamicweb-template-tags/General-tags/Date/time-tag-extensions.aspx.
 </summary>
 <param name="name">The name of the template tag, &lt;--@NameOfTag--&gt;.</param>
 <param name="value">The date value replacing the template tag specified in the name.</param>
 <example>
 <code title="Render a template" description="Full template example" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Rendering\TemplateSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.Int32)">
 <summary>
 Specifies a tag value of type integer.
 </summary>
 <param name="name">The name of the template tag, &lt;--@NameOfTag--&gt;.</param>
 <param name="value">The integer value replacing the template tag specified in the name.</param>
 <example>
 <code title="Render a template" description="Full template example" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Rendering\TemplateSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.Int64)">
 <summary>
 Specifies a tag value of type long (Int64).
 </summary>
 <param name="name">The name of the template tag, &lt;--@NameOfTag--&gt;.</param>
 <param name="value">The long value replacing the template tag specified in the name.</param>
 <example>
 <code title="Render a template" description="Full template example" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Rendering\TemplateSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.Double)">
 <summary>
 Specifies a tag value of type double.
 </summary>
 <param name="name">The name of the template tag, &lt;--@NameOfTag--&gt;.</param>
 <param name="value">The double value replacing the template tag specified in the name.</param>
 <example>
 <code title="Render a template" description="Full template example" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Rendering\TemplateSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.Decimal)">
 <summary>
 Specifies a tag value of type decimal.
 </summary>
 <param name="name">The name of the template tag, &lt;--@NameOfTag--&gt;.</param>
 <param name="value">The decimal value replacing the template tag specified in the name.</param>
 <example>
 <code title="Render a template" description="Full template example" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Rendering\TemplateSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Rendering.Template.SetTag(System.String,System.Boolean)">
 <summary>
 Specifies a tag value of type boolean.
 </summary>
 <param name="name">The name of the template tag, &lt;--@NameOfTag--&gt;.</param>
 <param name="value">if set to <c>true</c> the tag returns "True", otherwise Sting.empty.</param>
 <remarks>It renders an empty string if false so if defined can be used on the output.</remarks>
 <example>
 <code title="Render a template" description="Full template example" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\Rendering\TemplateSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Rendering.Template.TagExists(System.String)">
 <summary>
 Checks if a tag exists in the loaded template.
 </summary>
 <param name="name">The name of tag to check for.</param>
 <returns><c>true</c> if the tag is found in the template; otherwise <c>false</c></returns>
 <remarks>Used for optimizing performance. If the value of a tag is expensive to render, there is no need to execute the code if the template is not going to use the data.</remarks>
 <example>
 <code description="Use TagExists to avoid expensive operations"  lang="VB">
 Dim t As New Template("MyFolder/MyTemplate.html")
	t.SetTag("MyTag", "Hello world!")
	If t.TagExists("MyOtherTag") Then
		t.SetTag("MyOtherTag", RunExpensiveOperation())
	End If</code>
 </example>
</member>
<member name="M:Dynamicweb.Rendering.Template.TagExists(System.String,System.Boolean)">
 <summary>
 Tags the exists.
 </summary>
 <param name="name">The name.</param>
 <param name="partial">if set to <c>true</c> [partial].</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.Template.LoopExists(System.String)">
 <summary>
 Checks if a loop exists in the loaded template.
 </summary>
 <param name="name">The name of loop to check for.</param>
 <returns><c>true</c> if the loop is found in the template; otherwise <c>false</c></returns>
 <remarks>Used for optimizing performance. If the loop is expensive to render, there is no need to execute the code if the template is not going to use the data.</remarks>
 <example>
 <code description="Use LoopExists to avoid expensive operations"  lang="VB">
 'Load a template from /Files/Templates/MyFolder/MyTemplate.html
 Dim t As New Template("MyFolder/MyTemplate.html")
 'Set a tag value
 t.SetTag("MyTag", "Hello world!")
 'Check if the loop exists in template before getting the data
 If t.LoopExists("MyLoop") Then
 Dim loopTemplate As Template = t.GetLoop("MyLoop")
 For Each p As Content.Page In Content.Page.GetPagesByAreaID(1)
 	loopTemplate.SetTag("PageName", p.MenuText)
 	loopTemplate.CommitLoop()
 Next
 End If</code>
 </example>
</member>
<member name="M:Dynamicweb.Rendering.Template.HtmlHasPartialTag(System.String)">
 <summary>
 Determines whether there is a tag in the current HTML template that starts with the given prefix.
 </summary>
 <param name="name">Tag name prefix.</param>
 <returns>Value indicating whether there is a tag in the current HTML template that starts with the given prefix.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Template.HtmlHasPartialTag(System.String,System.Boolean)">
 <summary>
 Determines whether there is a tag in the current HTML template that starts with the given prefix.
 </summary>
 <param name="name">Tag name prefix.</param>
 <param name="checkIfStatements">Value indicating whether to check "If" statements for tag presence.</param>
 <returns>Value indicating whether there is a tag in the current HTML template that starts with the given prefix.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Template.GetLoop(System.String)">
 <summary>
 Gets a loop.
 </summary>
 <param name="name">The name.</param>
 <returns>An instance of <see cref="M:Dynamicweb.Rendering.Template.Template(System.String)">template</see> representing the markup of the loop.</returns>
 <example>
 <code description="Template usage example with loop"  lang="VB">
 'Load a template from /Files/Templates/MyFolder/MyTemplate.html
 Dim t As New Template("MyFolder/MyTemplate.html")
 'Set a tag value
 t.SetTag("MyTag", "Hello world!")

 'Create a loop in the template
 Dim loopTemplate As Template = t.GetLoop("MyLoop")
 For Each p As Content.Page In Content.Page.GetPagesByAreaID(1)
 	loopTemplate.SetTag("PageName", p.MenuText)
 	loopTemplate.CommitLoop()
 Next

 'Return the parsed template
 Return t.Output()</code>
 <code description="Template usage example with loop"  lang="CS">
 Template t = new Template("MyFolder/MyTemplate.html");
 //Set a tag value
 t.SetTag("MyTag", "Hello world!");

 //Create a loop in the template
 Template loopTemplate = t.GetLoop("MyLoop");
 foreach (Content.Page p in Content.Page.GetPagesByAreaID(1)) {
 	loopTemplate.SetTag("PageName", p.MenuText);
 	loopTemplate.CommitLoop();
 }

 //Return the parsed template
 return t.Output();
 </code>
 </example>
</member>
<member name="M:Dynamicweb.Rendering.Template.GetLoopContents(System.String)">
 <summary>
 Retrieves a pieces of HTML that corresponds to the given loop within the current template.
 </summary>
 <param name="loopName">Name of the loop.</param>
 <returns>An array containing all matches of the given loop within the current template.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.Template.CommitLoop">
 <summary>
 Commits a loop.
 </summary>
 <remarks>Call this every time an iteration of a template loop is done. See <see cref="M:Dynamicweb.Rendering.Template.GetLoop(System.String)">GetLoop</see> for example.</remarks>
 <example>See usage example in <see cref="M:Dynamicweb.Rendering.Template.GetLoop(System.String)"></see></example>
</member>
<member name="M:Dynamicweb.Rendering.Template.ContainsDwTemplateTag(System.String)">
 <summary>
 Determines whether the loaded template contains the DwTemplateTags tag.
 </summary>
 <param name="html">The HTML.</param>
 <returns>
   <c>true</c> if the specified HTML contains dw template tag; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.Rendering.Template.SetLoopCounter">
 <summary>
 Sets the loop counter.
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.Template.TagListExtended">
 <summary>
  Writes a list of template tags in the tag collection. Table based.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.Template.TagListExtendedGlobal">
 <summary>
  Writes a list of template tags in the global template tag collection.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.Template.TagListExtendedRequest">
 <summary>
  Writes a list of template tags in the global template tag collection.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Rendering.Template.CombineTagName(System.String,System.String[])">
 <summary>
 Combines an array of strings into a template tag name.
 </summary>
 <param name="tagNamespace">A tag name namespace.</param>
 <param name="components">An array of parts of the tag name.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Rendering.Template.TemplateType">
 <summary>
 The type of template
 </summary>
</member>
<member name="F:Dynamicweb.Rendering.Template.TemplateType.Html">
 <summary>
 Html based template
 </summary>
</member>
<member name="F:Dynamicweb.Rendering.Template.TemplateType.Xslt">
 <summary>
 XSLT based template
 </summary>
</member>
<member name="F:Dynamicweb.Rendering.Template.TemplateType.Razor">
 <summary>
 Razor based template
 </summary>
</member>
<member name="M:Dynamicweb.Rendering.TemplateScriptParser.#ctor">
 <summary>
 Prevents a default instance of the <see cref="T:Dynamicweb.Rendering.TemplateScriptParser"/> class from being created.
 </summary>
</member>
<member name="P:Dynamicweb.Rendering.TemplateScriptParser.CountOfIfTags">
 <summary>
 Holds the number of If tags processed. Reset to 0 before call to Output
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Rendering.TemplateScriptParser.ParseLoopIf(System.String,Dynamicweb.Rendering.LoopCollection)">
 <summary>
 Parses the "If LoopDefined" constructs.
 </summary>
 <param name="output">Template output.</param>
 <param name="loops">A collection of all available loops.</param>
 <returns>Processed output.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Services">
 <summary>
 Provides convenient access to known Dynamicweb services.
 </summary>
</member>
<member name="P:Dynamicweb.Services.Areas">
 <summary>
 Gets an instance of IAreaService.
 </summary>
</member>
<member name="P:Dynamicweb.Services.Pages">
 <summary>
 Gets an instance of IPageService.
 </summary>
</member>
<member name="P:Dynamicweb.Services.Paragraphs">
 <summary>
 Gets an instance of IParagraphService.
 </summary>
</member>
<member name="P:Dynamicweb.Services.Items">
 <summary>
 Gets an instance of IItemService.
 </summary>
</member>
<member name="M:Dynamicweb.SystemTools.ExpressionEvaluator.EvaluateExpression(System.String)">
 <summary>
 Evaluate C# code
 </summary>
 <param name="expression"></param>
 <returns></returns>
 <remarks>See http://stackoverflow.com/q/53844/2380601</remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Security.SqlInjection.SqlEscapeInjection(System.String)">
 <summary>Strips a string of all SQL-commands used to create SQL-injection.</summary>
 <param name="text">The text being checked</param>
 <remarks>This function must be used before user input is inserted into SQL-strings.</remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Security.SqlInjection.SqlEscapeInjection(System.String,System.Boolean)">
 <summary>Strips a string of all SQL-commands used to create SQL-injection.</summary>
 <param name="text">The text being checked</param>
 <param name="escapeApostrophes">Value indicating whether to escape single apostrophes by replacing them with double apostrohpes.</param>
 <remarks>This function must be used before user input is inserted into SQL-strings.</remarks>
</member>
<member name="T:Dynamicweb.SystemTools.Security.FormAntispam">
 <summary>
 Internal methods for handling possible spam posts to forms and other modules posting data to Dynamicweb
 </summary>
</member>
<member name="M:Dynamicweb.SystemTools.Security.FormAntispam.SpamCheck">
 <summary>
 Stops spam attempts on forms being posted. NOT for get operations.
 </summary>
</member>
<member name="M:Dynamicweb.SystemTools.Security.FormAntispam.SpamCheck(System.Boolean)">
 <summary>
 Stops spam attempts on forms being posted. NOT for get operations.
 </summary>
 <param name="extended">if set to <c>true</c> [extended].</param>
</member>
<member name="M:Dynamicweb.SystemTools.Security.FormAntispam.AntiSpamFields(System.String)">
 <summary>
 Returns a string containing the markup of hidden fields and their values used for the anti spam form submit
 </summary>
 <param name="id">The identifier - usually the ID of the form os something similar.</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Security.FormAntispam.AntiSpamFieldsScript(System.String)">
 <summary>
 Returns a string containing the javascript used for the anti spam functionality
 </summary>
 <param name="action">The form action to be used.</param>
 <returns>System.String.</returns>
</member>
<member name="T:Dynamicweb.SystemTools.Security.IpBanner">
 <summary>
 Handling banning of IP's
 </summary>
</member>
<member name="M:Dynamicweb.SystemTools.Security.IpBanner.BanIp(System.String,System.DateTime,System.String)">
 <summary>
 Bans the specified IP for till the specified expiration time.
 </summary>
 <param name="ip">The ip to ban. Use <see cref="M:Dynamicweb.SystemTools.Security.IpBanner.GetClientIpAddress"/> to handle forward IPs</param>
 <param name="banExpiration">The ban expiration datetime.</param>
</member>
<member name="M:Dynamicweb.SystemTools.Security.IpBanner.BanIp(System.String,System.DateTime)">
 <summary>
 Bans the specified IP for till the specified expiration time.
 </summary>
 <param name="ip">The ip to ban.</param>
 <param name="banExpiration">The ban expiration datetime.</param>
</member>
<member name="M:Dynamicweb.SystemTools.Security.IpBanner.IsBanned(System.String)">
 <summary>
 Determines whether the specified ip is banned.
 </summary>
 <param name="ip">The ip.</param>
 <returns>
 <c>true</c> if the specified ip is banned; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.SystemTools.Security.IpBanner.GetString">
 <summary>
 Returns a string of the list of banned ips.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.SystemTools.Security.IpBanner.GetClientIpAddress">
 <summary>
 Gets the client ip address either from X_FORWARDED_FOR or X-CLIENT-IP header or UserHostAddress of the request.
 </summary>
 <returns>An ip address. If X_FORWARDED_FOR or X-CLIENT-IP header contains a value of more IPs, the string is analyzed from the right and returns the first instance that is not a private IP (192.168.*/10.*/172.16.*-172.32.*/169.254.*)</returns>
</member>
<member name="T:Dynamicweb.SystemTools.NamespaceDoc">
 <summary>
 The Dynamicweb.SystemTools namespace contains types used internally by Dynamicweb.
 </summary>
</member>
<member name="M:Dynamicweb.SystemTools.DateSelectModel.#ctor(System.Boolean,System.String,System.Int32,System.Int32,Dynamicweb.SystemTools.DateSelectMode)">
 <summary>
 Handles all date/time for a dateselector. Initializes the default date.
 </summary>
 <param name="useTime">Specifies whether drop down for time should be generated.</param>
 <param name="name">Name for the control.</param>
 <param name="startYear">The start year.</param>
 <param name="endYear">The end year.</param>
 <remarks>Default date is Now, unless dateSelecMode is AllowNeverExpire. Then it is 2999-12-31</remarks>
</member>
<member name="M:Dynamicweb.SystemTools.DateSelectModel.#ctor(System.Nullable{System.DateTime},System.Boolean,System.String,System.Int32,System.Int32,Dynamicweb.SystemTools.DateSelectMode)">
 <summary>
 Handles all date/time for a dateselector.
 </summary>
 <param name="dateTime">Date for use in drop down on the form yyyy-mm-dd</param>
 <param name="useTime">Specifies whether drop down for time should be generated.</param>
 <param name="name">Name for the control.</param>
 <param name="startYear">The start year.</param>
 <param name="endYear">The end year.</param>
</member>
<member name="T:Dynamicweb.SystemTools.Download">
 <summary>
 Class Download.
 </summary>
 <example>
 Example: Move to Dynamicweb.(web/http).HttpHelper.DownloadFile()
 </example>
</member>
<member name="M:Dynamicweb.SystemTools.Download.FetchFile(System.String,System.String,System.IO.FileMode)">
 <summary>
 Fetches the file.
 </summary>
 <param name="url">The URL.</param>
 <param name="saveAs">The save as.</param>
 <param name="fileMode">The file mode.</param>
</member>
<member name="T:Dynamicweb.SystemTools.Downloader">
 <summary>
 Class contains functions for server file download handling.
 </summary>
 <remarks>This class do not provides statistics of the downloaded files.It is used for temporary file download.</remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Downloader.Download(System.Byte[],System.String)">
 <summary>
 Download the current file.
 </summary>
 <param name="fileBytes">File represented as bytes array.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.SystemTools.Downloader.DownloadConstants">
 <summary>
 Class contains constants for download handling.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.SystemTools.Downloader.DownloadConstants.BufferLength">
 <summary>
 Stores the buffer length.
 </summary>
</member>
<member name="F:Dynamicweb.SystemTools.Downloader.DownloadConstants.ErrorStatusCode">
 <summary>
 Stores an error status number.
 </summary>
</member>
<member name="F:Dynamicweb.SystemTools.Downloader.DownloadConstants.MaxFileSize">
 <summary>
 Stores a maximum file size value.
 </summary>
</member>
<member name="T:Dynamicweb.SystemTools.RecycleBin.IRecycleBinRepository">
 <summary>
 The IRecycleBinRepository defines operations for working with RecycleBins
 </summary>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.IRecycleBinRepository.Save(Dynamicweb.SystemTools.RecycleBin.RecycleBin)">
 <summary>
 Saves the specified <see cref="T:Dynamicweb.SystemTools.RecycleBin.RecycleBin"/> and its content to persistence
 </summary>
 <param name="bin">The bin to save to persistence</param>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.IRecycleBinRepository.Get(System.String,System.String)">
 <summary>
 Gets a specific <see cref="T:Dynamicweb.SystemTools.RecycleBin.RecycleBin"/> for the type and Id
 </summary>
 <param name="type">The type of object for which to get the RecycleBin it is associated with</param>
 <param name="id">The id of the object for which to get the RecycleBin it is associated with</param>
 <returns>The RecycleBin containing the object of the specified type and with the specified id</returns>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.IRecycleBinRepository.GetRecycleBins">
 <summary>
 Gets all recycle bins currently available
 </summary>
 <returns>A list of RecycleBins</returns>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.IRecycleBinRepository.GetRecycleBins(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Gets all recycle bins having their primary item being one of the types as specified in the list of types
 </summary>
 <param name="types">A list of types for which to get RecycleBins where the bins primary item is on of the specified types</param>
 <returns>A list of recycle bins</returns>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.IRecycleBinRepository.Delete(Dynamicweb.SystemTools.RecycleBin.RecycleBin)">
 <summary>
 Deletes the specified <see cref="T:Dynamicweb.SystemTools.RecycleBin.RecycleBin"/>
 </summary>
 <param name="recycleBin">The recyclebin to delete</param>
</member>
<member name="T:Dynamicweb.SystemTools.RecycleBin.RecycleBin">
 <summary>
 The RecycleBin Class handles one or more RecycleItems recycled under the same bin id, which enables clients to restore a previously recycled bin
 </summary>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.RecycleBin.#ctor">
 <summary>
 Initializes a new instance of the Dynamicweb.SystemTools.RecycleBin class
 </summary>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.RecycleBin.#ctor(System.Guid)">
 <summary>
 Initializes a new instance of the Dynamicweb.SystemTools.RecycleBin class with an existing unit id, enabling clients to add new recycle items to an already existing RecycleBin
 </summary>
 <param name="unitId">The unit id for which to add new recycle items</param>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.RecycleBin.#ctor(System.Guid,System.Collections.Generic.IList{Dynamicweb.SystemTools.RecycleBin.RecycleItem})">
 <summary>
 Initializes a new instance of the Dynamicweb.SystemTools.RecycleBin class with the given id and items that are part of the bin
 </summary>
 <param name="unitId">The id of the bin</param>
 <param name="items">The items part of the RecycleBin with the specified id</param>
</member>
<member name="P:Dynamicweb.SystemTools.RecycleBin.RecycleBin.UnitID">
 <summary>
 Gets the unique id of this bin and it's content
 </summary>
</member>
<member name="P:Dynamicweb.SystemTools.RecycleBin.RecycleBin.PrimaryItem">
 <summary>
 Gets the primary deleted item
 </summary>
</member>
<member name="P:Dynamicweb.SystemTools.RecycleBin.RecycleBin.Items">
 <summary>
 Gets all items deleted as a consequence of deleting the primary item
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.SystemTools.RecycleBin.RecycleBin.IsExistingBin">
 <summary>
 Gets a value indicating if this recycle bin will be commited to an existing bin
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.RecycleBin.AddItem(Dynamicweb.SystemTools.RecycleBin.RecycleItem)">
 <summary>
 Adds an item to this bin instance
 </summary>
 <param name="item">The item to move to this bin instance</param>
 <exception cref="T:Dynamicweb.SystemTools.RecycleBin.RecycleBinException">Thrown if item is Nothing</exception>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.RecycleBin.Dispose">
 <summary>
 Cleans up and commits the recycle bin
 </summary>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.RecycleBin.Commit">
 <summary>
 Commits the content of this RecycleBin to persistence
 </summary>
 <returns>The newlys assigned id of this RecycleBin instance</returns>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.RecycleBin.Restore">
 <summary>
 Restores the content of this RecycleBin
 </summary>
</member>
<member name="T:Dynamicweb.SystemTools.RecycleBin.RecycleBinRepository">
 <summary>
 The RecycleBinRepository class implements the <see cref="T:Dynamicweb.SystemTools.RecycleBin.IRecycleBinRepository"/> interface and provides operations for working with RecycleBins
 </summary>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.RecycleBinRepository.Delete(Dynamicweb.SystemTools.RecycleBin.RecycleBin)">
 <summary>
 Deletes the specified <see cref="T:Dynamicweb.SystemTools.RecycleBin.RecycleBin"/>
 </summary>
 <param name="recycleBin">The recyclebin to delete</param>
 <exception cref="T:System.ArgumentNullException"></exception>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.RecycleBinRepository.Save(Dynamicweb.SystemTools.RecycleBin.RecycleBin)">
 <summary>
 Saves the specified <see cref="T:Dynamicweb.SystemTools.RecycleBin.RecycleBin"/> and its content to persistence
 </summary>
 <param name="bin">The bin to save to persistence</param>
 <exception cref="T:System.ArgumentNullException"></exception>
 <exception cref="T:Dynamicweb.SystemTools.RecycleBin.RecycleBinException"></exception>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.RecycleBinRepository.Get(System.String,System.String)">
 <summary>
 Gets a specific <see cref="T:Dynamicweb.SystemTools.RecycleBin.RecycleBin"/> for the type and Id
 </summary>
 <param name="type">The type of object for which to get the RecycleBin it is associated with</param>
 <param name="id">The id of the object for which to get the RecycleBin it is associated with</param>
 <returns>The RecycleBin containing the object of the specified type and with the specified id</returns>
 <exception cref="T:Dynamicweb.SystemTools.RecycleBin.RecycleBinException"></exception>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.RecycleBinRepository.GetRecycleBins">
 <summary>
 Gets all recycle bins currently available
 </summary>
 <returns>A list of RecycleBins</returns>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.RecycleBinRepository.GetRecycleBins(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Gets all recycle bins having their primary item being one of the types as specified in the list of types
 </summary>
 <param name="types">A list of types for which to get RecycleBins where the bins primary item is on of the specified types</param>
 <returns>A list of recycle bins</returns>
 <exception cref="T:System.ArgumentNullException"></exception>
 <exception cref="T:System.ArgumentException"></exception>
 <exception cref="T:Dynamicweb.SystemTools.RecycleBin.RecycleBinException"></exception>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.RecycleBinRepository.GetBinIdForItem(System.String,System.String)">
 <summary>
 Gets the id of the <see cref="T:Dynamicweb.SystemTools.RecycleBin.RecycleBin"/> containing the object of the specified type and with the specified id
 </summary>
 <param name="type">The type for which to locate in a RecycleBin</param>
 <param name="id">The id of the type for which to locate in a RecycleBin</param>
 <returns>The id of the RecycleBin containing the object of the specified type and with the specified id</returns>
</member>
<member name="M:Dynamicweb.SystemTools.RecycleBin.RecycleBinRepository.CreateRecycleItem(System.Data.IDataReader)">
 <summary>
 Constructs a <see cref="T:Dynamicweb.SystemTools.RecycleBin.RecycleItem"/> from data in the dataReader
 </summary>
 <param name="dataReader">The dataReader containing the data needed to construct the RecycleItem</param>
 <returns>A RecycleItem representing a given object in a RecycleBin</returns>
</member>
<member name="T:Dynamicweb.SystemTools.RecycleBin.RecycleItem">
 <summary>
 The class RecycleItem defines an item to move to the recycle bin
 </summary>
</member>
<member name="P:Dynamicweb.SystemTools.RecycleBin.RecycleItem.ID">
 <summary>
 Gets the unique id of the RecycleItem
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.SystemTools.RecycleBin.RecycleItem.ObjectID">
 <summary>
 Gets the id of the object being moved to the recycle bin
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.SystemTools.RecycleBin.RecycleItem.AssemblyQualifiedName">
 <summary>
 Gets or sets the type of object that this item encapsulates
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.SystemTools.RecycleBin.RecycleItem.Description">
 <summary>
 Gets or sets a description of the recycled item
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.SystemTools.RecycleBin.RecycleItem.DeletedBy">
 <summary>
 Gets or sets an identification of the user who deleted this item
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.SystemTools.RecycleBin.RecycleItem.DeletedAt">
 <summary>
 Gets or sets the date the item was deleted
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.SystemTools.RecycleBin.RecycleItem.Data">
 <summary>
 Gets or sets the actual object that will be moved to the recycle bin
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.SystemTools.RecycleBin.RecycleItem.IsPrimary">
 <summary>
 Gets or sets a value indicating if this is the recycle item a given user initiated a delete on
 </summary>
 <returns>True if this is the primary for a given Recycle bin, otherwise false</returns>
</member>
<member name="T:Dynamicweb.SystemTools.Translate">
 <summary>
 This class contains function used for inner translation. 
 </summary>
</member>
<member name="M:Dynamicweb.SystemTools.Translate.Translate(System.String)">
 <summary>
 Translates the key.
 </summary>
 <param name="key">The key for translation.</param>
 <returns>Translated word. Otherwise the key.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Translate.Translate(System.String,System.Int32)">
 <summary>
 Translates the key.
 </summary>
 <param name="key">The key for translation.</param>
 <param name="intAlternative"></param>
 <returns>Translated word. Otherwise the key.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Translate.Translate(System.String,System.String,System.String)">
 <summary>
 Translates the key and replaces one statement with another within translated string.
 </summary>
 <param name="key">The key for translation.</param>
 <param name="find1">The search text.</param>
 <param name="replacement1">The replacement text.</param>
 <returns>Replaced translated string.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Translate.Translate(System.String,System.String,System.String,System.Int32)">
 <summary>
 Translates the key and replaces one statement with another within translated string.
 </summary>
 <param name="key">The key for translation.</param>
 <param name="find1">The search text.</param>
 <param name="replacement1">The replacement text.</param>
 <param name="intAlternative"></param>
 <returns>Replaced translated string.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Translate.Translate(System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Translates the key and replaces the replaced translated string.
 </summary>
 <param name="key">The key for translation.</param>
 <param name="find1">The search text.</param>
 <param name="replacement1">The replacement text.</param>
 <param name="find2">The search text.</param>
 <param name="replacement2">The replacement text.</param>
 <returns>Replaced translated string.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Translate.Translate(System.String,System.String,System.String,System.String,System.String,System.Int32)">
 <summary>
 Translates the key and replaces the replaced translated string.
 </summary>
 <param name="key">The key for translation.</param>
 <param name="find1">The search text.</param>
 <param name="replacement1">The replacement text.</param>
 <param name="find2">The search text.</param>
 <param name="replacement2">The replacement text.</param>
 <param name="intAlternative"></param>
 <returns>Replaced translated string.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Translate.JsTranslate(System.String)">
 <summary>
 Translates the key within the javascript.
 </summary>
 <param name="key">The key for translation.</param>
 <returns>Translated string. Otherwise the key.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Translate.JsTranslate(System.String,System.Int32)">
 <summary>
 Translates the key within the javascript.
 </summary>
 <param name="key">The key for translation.</param>
 <param name="intAlternative"></param>
 <returns>Translated string. Otherwise the key.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Translate.JsTranslate(System.String,System.String,System.String)">
 <summary>
 Translates the key within the javascript and replaces one statement with another within translated string. 
 </summary>
 <param name="key">The key for translation.</param>
 <param name="find1">The search text.</param>
 <param name="replacement1">The replacement text.</param>
 <returns>Replaced translated string.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Translate.JsTranslate(System.String,System.String,System.String,System.Int32)">
 <summary>
 Translates the key within the javascript and replaces one statement with another within translated string. 
 </summary>
 <param name="key">The key for translation.</param>
 <param name="find1">The search text.</param>
 <param name="replacement1">The replacement text.</param>
 <param name="intAlternative"></param>
 <returns>Replaced translated string.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Translate.JsTranslate(System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Translates the key within the javascript and replaces the replaced translated string.
 </summary>
 <param name="key">The key for translation.</param>
 <param name="find1">The search text.</param>
 <param name="replacement1">The replacement text.</param>
 <param name="find2">The search text.</param>
 <param name="replacement2">The replacement text.</param>
 <returns>Replaced translated string.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Translate.JsTranslate(System.String,System.String,System.String,System.String,System.String,System.Int32)">
 <summary>
 Translates the key within the javascript and replaces the replaced translated string.
 </summary>
 <param name="key">The key for translation.</param>
 <param name="find1">The search text.</param>
 <param name="replacement1">The replacement text.</param>
 <param name="find2">The search text.</param>
 <param name="replacement2">The replacement text.</param>
 <param name="intAlternative"></param>
 <returns>Replaced translated string.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Translate.GetWord(System.String)">
 <summary>
 Gets an equal word translation for the current key.
 </summary>
 <param name="key"></param>
 <returns>Translated word. Otherwise the key.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Translate.SetSelectedLanguage(System.Int32,System.Boolean)">
 <summary>
 Sets new current language for backend.
 </summary>
 <param name="languageId">The language ID.</param>
 <param name="resetLanguage"></param>
</member>
<member name="M:Dynamicweb.SystemTools.Translate.SetSelectedLanguage(System.Int32)">
 <summary>
 Sets new current language for backend.
 </summary>
 <param name="languageId">The language ID.</param>
</member>
<member name="M:Dynamicweb.SystemTools.Translate.GetEditOnlineScript">
 <summary>
 Gets an online edit script.
 </summary>
</member>
<member name="P:Dynamicweb.SystemTools.Translate.CurrentLanguageId">
 <summary>
 Returns current language ID.
 </summary>
</member>
<member name="P:Dynamicweb.SystemTools.Translate.GetLanguageLocale(System.Int32)">
 <summary>
 Returns the locale for the specified language.
 </summary>
 <param name="languageId"></param>
 <value>Returns a string with the locale as defined in the language database e.g. da, ja, en, en-US</value>
</member>
<member name="T:Dynamicweb.SystemTools.Translate.Word">
 <summary>
  This class contains public variables for <see cref="T:Dynamicweb.SystemTools.Translate">Translate class</see>. 
 </summary>
</member>
<member name="M:Dynamicweb.SystemTools.Translate.Word.#ctor(System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Initialize a new instance of the Word class.
 </summary>
 <param name="languageId"></param>
 <param name="key"></param>
 <param name="word"></param>
 <param name="isJavaScript"></param>
 <param name="translated"></param>
</member>
<member name="M:Dynamicweb.SystemTools.Translate.Word.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Initialize a new instance of the Word class.
 </summary>
 <param name="intLanguageId"></param>
 <param name="strKey"></param>
 <param name="strWord"></param>
 <param name="strPagePath"></param>
 <param name="blnJs"></param>
 <param name="blnTranslated"></param>
 <param name="intAlt"></param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.SystemTools.TranslationLanguage">
 <summary>
 Class represents the language for the backend interface
 </summary>
</member>
<member name="P:Dynamicweb.SystemTools.TranslationLanguage.Id">
 <summary>
 Gets or sets the language id.
 </summary>
</member>
<member name="P:Dynamicweb.SystemTools.TranslationLanguage.Name">
 <summary>
 Gets or sets the language name.
 </summary>
</member>
<member name="P:Dynamicweb.SystemTools.TranslationLanguage.Active">
 <summary>
 Gets or sets the value, determines whether language is active or not.
 </summary>
</member>
<member name="P:Dynamicweb.SystemTools.TranslationLanguage.DateFormatShort">
 <summary>
 Gets or sets the short date format.
 </summary>
</member>
<member name="P:Dynamicweb.SystemTools.TranslationLanguage.DateFormatShortAndTime">
 <summary>
 Gets or sets the short date and time format.
 </summary>
</member>
<member name="P:Dynamicweb.SystemTools.TranslationLanguage.DateFormatMedium">
 <summary>
 Gets or sets the medium date format.
 </summary>
</member>
<member name="P:Dynamicweb.SystemTools.TranslationLanguage.DateFormatMediumAndTime">
 <summary>
 Gets or sets the medium date and time format.
 </summary>
</member>
<member name="P:Dynamicweb.SystemTools.TranslationLanguage.DateFormatLong">
 <summary>
 Gets or sets the long date format.
 </summary>
</member>
<member name="P:Dynamicweb.SystemTools.TranslationLanguage.DateFormatLongAndTime">
 <summary>
 Gets or sets the long date and time format.
 </summary>
</member>
<member name="P:Dynamicweb.SystemTools.TranslationLanguage.DateFormatDropDown">
 <summary>
 Gets or sets the date format for drop-down.
 </summary>
</member>
<member name="P:Dynamicweb.SystemTools.TranslationLanguage.DateFormatDropDownAndTime">
 <summary>
 Gets or sets the date and time format for drop-down.
 </summary>
</member>
<member name="P:Dynamicweb.SystemTools.TranslationLanguage.Locale">
 <summary>
 Gets or sets the language locale.
 </summary>
</member>
<member name="M:Dynamicweb.SystemTools.TranslationLanguage.#ctor">
 <summary>
 Initializes new instance of the class.
 </summary>
</member>
<member name="T:Dynamicweb.SystemTools.TranslationLanguageRepository">
 <summary>
 Class contains database methods for the <see cref="T:Dynamicweb.SystemTools.TranslationLanguage"/> class.
 </summary>
</member>
<member name="M:Dynamicweb.SystemTools.TranslationLanguageRepository.Delete(System.Int32)">
 <summary>
 Deletes the translation language.
 </summary>
 <param name="languageId">The translation language id.</param>
</member>
<member name="M:Dynamicweb.SystemTools.TranslationLanguageRepository.Save(Dynamicweb.SystemTools.TranslationLanguage)">
 <summary>
 Saves the translation language.
 </summary>
 <param name="language">The translation language.</param>
</member>
<member name="M:Dynamicweb.SystemTools.TranslationLanguageRepository.GetLanguage(System.Int32)">
 <summary>
 Gets the translation language by ID.
 </summary>
 <param name="languageId">The translation language id.</param>
 <returns>The <see cref="T:Dynamicweb.SystemTools.TranslationLanguage"/>, or <c>Nothing</c> if language is not exists.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.TranslationLanguageRepository.GetLanguages">
 <summary>
 Gets all translation languages.
 </summary>
 <returns>The collection of the translation languages.</returns>
</member>
<member name="T:Dynamicweb.SystemTools.TranslationLanguageService">
 <summary>
 Class contains methods for working with the <see cref="T:Dynamicweb.SystemTools.TranslationLanguageRepository"/> using index.
 </summary>
</member>
<member name="M:Dynamicweb.SystemTools.TranslationLanguageService.Delete(System.Int32)">
 <summary>
 Deletes the translation language.
 </summary>
 <param name="languageId">The translation language id.</param>
</member>
<member name="M:Dynamicweb.SystemTools.TranslationLanguageService.Save(Dynamicweb.SystemTools.TranslationLanguage)">
 <summary>
 Saves the translation language.
 </summary>
 <param name="language">The translation language.</param>
</member>
<member name="M:Dynamicweb.SystemTools.TranslationLanguageService.SetActive(System.Int32,System.Boolean)">
 <summary>
 Sets the active state for <see cref="T:Dynamicweb.SystemTools.TranslationLanguage"/> item.
 </summary>
 <param name="languageId">The <see cref="T:Dynamicweb.SystemTools.TranslationLanguage"/> id.</param>
 <param name="active">The active state.</param>
</member>
<member name="M:Dynamicweb.SystemTools.TranslationLanguageService.GetActiveLanguages">
 <summary>
 Gets active translation languages.
 </summary>
 <returns>Collection of the active <see cref="T:Dynamicweb.SystemTools.TranslationLanguage"/>.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.TranslationLanguageService.GetByLocale(System.String)">
 <summary>
 Gets the translation languages by locale name.
 </summary>
 <param name="languageLocale">The locale name.</param>
 <returns>Collection of the <see cref="T:Dynamicweb.SystemTools.TranslationLanguage"/>.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.TranslationLanguageService.GetLanguage(System.Int32)">
 <summary>
 Gets the translation language by ID.
 </summary>
 <param name="languageId">The translation language id.</param>
 <returns>The <see cref="T:Dynamicweb.SystemTools.TranslationLanguage"/>, or <c>Nothing</c> if language is not exists.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.TranslationLanguageService.GetLanguages">
 <summary>
 Gets all translation languages.
 </summary>
 <returns>Collection of the <see cref="T:Dynamicweb.SystemTools.TranslationLanguage"/>.</returns>
</member>
<member name="T:Dynamicweb.SystemTools.UrlParser">
 <summary>
 Class UrlParser contains methods for parsing url parts to different formats
 </summary>
</member>
<member name="M:Dynamicweb.SystemTools.UrlParser.GetFullHrefString(System.String)">
 <summary>Get an appropriate Href from the input URL that can be used in a href attribute.</summary>
 <param name="url">Input URL string, i.e. Default.aspx?ID=123, www.google.com or info@dynamicweb.com.</param>
 <returns>Returns string representation of the link with the right protocol etc.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.UrlParser.GetFullHrefString(System.String,System.Boolean)">
 <summary>Get an appropriate Href from the input URL that can be used in a href attribute.</summary>
 <param name="url">Input URL string, i.e. Default.aspx?ID=123, www.google.com or info@dynamicweb.com.</param>
 <param name="frontend">Optional. Parses the data for the frontend.</param>
 <returns>Returns string representation of the link with the right protocol etc.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.UrlParser.RequestObject(System.String,System.Type)">
 <summary>
 Request data from the context and parse it into the specified type.
 </summary>
 <param name="key">The parameter key to request.</param>
 <param name="type">The type to parse the value to.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.SystemTools.UrlParser.ParseData(System.String,System.Type)">
 <summary>
 Parses the data.
 </summary>
 <param name="input">The input.</param>
 <param name="type">The type.</param>
 <returns>System.Object.</returns>
</member>
<member name="T:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer">
 <summary>
 Web Page Anlyzer - methods to calculate data related to pae perfomance
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer.CountOfMudules(System.Int32)">
 <summary>
 Calculates number of modules used on the page
 </summary>
 <param name="pageID">ID of the page</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer.CountOfDBCalls(System.Int32)">
 <summary>
 Calculates number of DB calls made during page render
 </summary>
 <param name="pageID">ID of the page</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer.OutputHTMLSize(System.Int32)">
 <summary>
 Calculates the size of the resulting html Page
 </summary>
 <param name="pageID">ID of the page</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer.CountOfParagraphs(System.Int32)">
 <summary>
 Calculates the number of Paragraphs
 </summary>
 <param name="pageID">ID of the page</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer.CountOfIfTags(System.Int32)">
 <summary>
 Return number of If's processed
 </summary>
 <param name="pageID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer.CountOfImages(System.Int32)">
 <summary>
 Calculates the number of image tags
 </summary>
 <param name="pageID">ID of the page</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer.CountOfJSTags(System.Int32)">
 <summary>
 Calculates the number of javascript tags
 </summary>
 <param name="pageID">ID of the page</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer.CountOfCSSTags(System.Int32)">
 <summary>
 Calculates the number of CSS tags
 </summary>
 <param name="pageID">ID of the page</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer.SizeOfImages(System.Int32)">
 <summary>
 Calculates the size of images
 </summary>
 <param name="pageID">ID of the page</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer.SizeOfJSFiles(System.Int32)">
 <summary>
 Calculates the size of js files
 </summary>
 <param name="pageID">ID of the page</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer.SizeOfCSSFiles(System.Int32)">
 <summary>
 Calculates the size of CSS files
 </summary>
 <param name="pageID">ID of the page</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer.GetRenderTime(System.Int32)">
 <summary>
 Get render time of webpage
 </summary>
 <param name="pageID">ID of the page</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer.GetRegExMatches(System.Int32,System.String,System.String)">
 <summary>
 Getting regular expression matches
 </summary>
 <param name="pageID">ID of the page</param>
 <param name="pattern">The regular expression pattern</param>
 <returns>Returns regular expression matches</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer.GetSizeOfIncludedFiles(System.Int32,System.String,System.Text.RegularExpressions.MatchCollection,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.KeyValuePair{System.Int32,System.Double}}@)">
 <summary>
 Getting size of included files
 </summary>
 <param name="pageID">ID of the page</param>
 <param name="pattern">The regular expression pattern</param>
 <returns>Returns size of included files calcukated in kb (images, css, js)</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer.GetImgSizeFromCSSFiles(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.KeyValuePair{System.Int32,System.Double}}@)">
 <summary>
 Getting size of images which are included in css files
 </summary>
 <param name="pageID">ID of the page</param>
 <returns>Returns size of images which are included in css files</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer.GetImgCountFromCSSFiles(System.Int32)">
 <summary>
 Getting count of images which are included in css files
 </summary>
 <param name="pageID">ID of the page</param>
 <returns>Returns count of images which are included in css files</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer.GetFileSize(System.IO.Stream)">
 <summary>
 Getting size of file stream in bytes
 </summary>
 <param name="fileStream">stream of file</param>
 <returns>Returns size of file stream in bytes</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzer.GetHTTPRequestSize(System.String)">
 <summary>
 Getting size of remote file by http request in bytes
 </summary>
 <param name="url">url of file</param>
 <returns>Returns size of remote file in bytes</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzeReportItem">
 <summary>
 Represents report item to be displayed in the report
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzeReportItem.Name">
 <summary>
 Name of the parameter to Display
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzeReportItem.Value">
 <summary>
 Value(Amount) of The Parameter
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzeReportItem.FilesList">
 <summary>
 List of files with size 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzeReportItem.Units">
 <summary>
 Units in which Value is measured (%, Kb, Times, Seconds)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzeReportItem.Status">
 <summary>
 Assessment of the parameter according to the limits.
 </summary>
 <value></value>
 <returns>String text Good, Caution, Warning</returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzeReportItem.GoodLimit">
 <summary>
 Limit below which everything is OK
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.SystemTools.WebPageAnalyze.WebPageAnalyzeReportItem.CautionLimit">
 <summary>
 "Warning" limit
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.SystemTools.Gui">
 <summary>
 This class contains the graphic user interface functions used in Dynamicweb.
 </summary>
</member>
<member name="T:Dynamicweb.SystemTools.Gui.LinkManagerSettings">
 <summary>
 Represents a link manager settings.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.SystemTools.Gui.LinkManagerSettings.ItemsOnly">
 <summary>
 Gets or sets value indicating whether to allow selection of only item-based pages (or paragraphs).
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.SystemTools.Gui.LinkManagerSettings.AreaId">
 <summary>
 Gets or sets areaId for link selector
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.LinkManagerSettings.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.LinkManagerSettings.FromJson(System.String)">
 <summary>
 Converts the given object from its JSON representation.
 </summary>
 <param name="json">JSON literal.</param>
 <returns>An instance of a given object constructed from its JSON representation.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.LinkManagerSettings.ToJson(Dynamicweb.SystemTools.Gui.LinkManagerSettings)">
 <summary>
 Converts the given object to its JSON representation.
 </summary>
 <param name="settings">Settings.</param>
 <returns>JSON representation of the given object.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.LinkManagerSettings.FromQuery">
 <summary>
 Converts the given object from its query-string representation retrieved from the current request.
 </summary>
 <returns>An instance of a given object constructed from its query-string representation.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.LinkManagerSettings.FromQuery(Dynamicweb.Environment.IRequest)">
 <summary>
 Converts the given object from its query-string representation retrieved from the given request.
 </summary>
 <param name="request">Request.</param>
 <returns>An instance of a given object constructed from its query-string representation.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.LinkManagerSettings.ToQuery(Dynamicweb.SystemTools.Gui.LinkManagerSettings)">
 <summary>
 Converts the given object to the query-string representation.
 </summary>
 <param name="settings">Settings.</param>
 <returns>Query-string representation of the given object.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.LinkManagerSettings.FromForm">
 <summary>
 Converts the given object from its form representation retrieved from the current request.
 </summary>
 <returns>An instance of a given object constructed from its form representation.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.LinkManagerSettings.FromForm(Dynamicweb.Environment.IRequest)">
 <summary>
 Converts the given object from its form representation retrieved from the given request.
 </summary>
 <param name="request">Request.</param>
 <returns>An instance of a given object constructed from its form representation.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.LinkManagerSettings.ToForm(Dynamicweb.SystemTools.Gui.LinkManagerSettings)">
 <summary>
 Converts the given object to the form representation.
 </summary>
 <param name="settings">Settings.</param>
 <returns>Form representation of the given object.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.LinkManagerSettings.FromValues(System.Collections.Specialized.NameValueCollection)">
 <summary>
 Converts the given object from its representation retrieved from the given collection of values.
 </summary>
 <param name="values">Values.</param>
 <returns>An instance of a given object constructed from the given collection of values.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.ApprovalBox(System.Int32,System.Int32,System.Boolean)">
 <summary>
 Creates the approval type box.
 </summary>
 <param name="approvalType"></param>
 <param name="approvalState"></param>
 <param name="includeScript"></param>
 <returns>String with specified source.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.ApprovalBox(System.Int32,System.Int32,System.Boolean,System.Boolean)">
 <summary>
 Creates the approval type box.
 </summary>
 <param name="approvalType"></param>
 <param name="approvalState"></param>
 <param name="includeScript"></param>
 <returns>String with specified source.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.RadioButton(System.String,System.String,System.String)">
 <summary>
 Creates a radio button and sets its state.
 </summary>
 <param name="selectedFieldValue">Selects the radio button if FieldValue = SelectedFieldValue.</param>
 <param name="fieldName">Specifies Name and Id field for the radio button.''' </param>
 <param name="fieldValue">Specifies Value field for the radio button.</param>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.RadioButton(System.String,System.String,System.String,System.String)">
 <summary>
 Creates a radio button and sets its state.
 </summary>
 <param name="selectedFieldValue">Selects the radio button if FieldValue = SelectedFieldValue.</param>
 <param name="fieldName">Specifies Name and Id field for the radio button.''' </param>
 <param name="fieldValue">Specifies Value field for the radio button.</param>
 <param name="onClientClick">The client script that is executed when the user clicks the radio-button.</param>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.CheckBox(System.String,System.String)">
 <summary>
 Creates a checkbox and sets its state.
 </summary>
 <param name="selectedFieldValue">Selects the checkbox if SelectedFieldValue is "1" or "True".</param>
 <param name="fieldName">Specifies Name and Id field for the checkbox.</param>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.CheckBox(System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Creates a checkcolorselebox and sets its state.
 </summary>
 <param name="selectedFieldValue">Selects the checkbox if SelectedFieldValue is "1" or "True".</param>
 <param name="fieldName">Specifies Name and Id field for the checkbox.</param>
 <param name="attributes">Additional parameters for the input tag, ie 'onchange="alert();"'</param>
 <param name="value">Specifies the Value for the checkbox</param>
 <param name="label">Specifies the Text for the checkbox</param>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.CheckBox(System.String,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Creates a checkcolorselebox and sets its state.
 </summary>
 <param name="selectedFieldValue">Selects the checkbox if SelectedFieldValue is "1" or "True".</param>
 <param name="fieldId">Specifies the Id for the checkbox.</param>
 <param name="fieldName">Specifies the Name for the checkbox.</param>
 <param name="attributes">Additional parameters for the input tag, ie 'onchange="alert();"'</param>
 <param name="value">Specifies the Value for the checkbox</param>
 <param name="label">Specifies the Text for the checkbox</param>        
 <returns></returns>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.CheckBox(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Creates a checkcolorselebox and sets its state.
 </summary>
 <param name="selectedFieldValue">Selects the checkbox if SelectedFieldValue is "1" or "True".</param>
 <param name="fieldId">Specifies the Id for the checkbox.</param>
 <param name="fieldName">Specifies the Name for the checkbox.</param>
 <param name="attributes">Additional parameters for the input tag, ie 'onchange="alert();"'</param>
 <param name="value">Specifies the Value for the checkbox</param>
 <param name="label">Specifies the Text for the checkbox</param>
 <param name="onclick">Specifies the onclick function</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.GroupBoxStart(System.String)">
 <summary>
 Marks the begining of a groupbox.
 </summary>
 <param name="title">Label text placed in the top of the groupbox.</param>
 <returns>HTML tag for FIELDSET and LEGEND.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.GroupBoxStart(System.String,System.String,System.String,System.Boolean)">
 <summary>
 Marks the begining of a groupbox with a Dynamicweb online help topic.
 </summary>
 <param name="title">Label text placed in the top of the groupbox.</param>
 <param name="onclick">JS function</param>
 <param name="onMouseOver">JS function</param>
 <param name="useOnEvents">Activate JS</param>
 <returns>HTML tag for FIELDSET and multiple LEGENDs.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.GroupBoxEnd">
 <summary>
 Marks the end of a groupbox.
 </summary>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.MakeHeaders(System.String,System.String,System.String,System.Boolean,System.String)">
 <summary>
 Creates tabs.
 </summary>
 <param name="title">Title for the tab.</param>
 <param name="headers">Comma separated string with titles for each tab.</param>
 <param name="returnWhat">Possible inputs are "javascript" or "html". Every other input makes use of both.</param>
 <param name="navigation">Specifies if navigation is used. Then the width is set to 512 and not de default 600.</param>
 <param name="specialTotalWidth">Specifies custom width. Default is 600.</param>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.MakeHeaders(System.String,System.String,System.String,System.Boolean,System.String,System.String)">
 <summary>
 Creates tabs.
 </summary>
 <param name="title"></param>
 <param name="headers"></param>
 <param name="returnWhat"></param>
 <param name="navigation"></param>
 <param name="specialTotalWidth"></param>
 <param name="disableTabs"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.SelectTab(System.Int32)">
 <summary>
 Returns JavaScript that activates the correct tab.
 </summary>
 <remarks>
 The function should be called at the bottom of the code page.
 The active tab will be the number held in QueryString("Tab"). The number is 1-indexed.
 </remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.SelectTab">
 <summary>
 Returns JavaScript that activates the correct tab.
 </summary>
 <remarks>
 The function should be called at the bottom of the code page.
 The active tab will be the number held in QueryString("Tab"). The number is 1-indexed.
 </remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.EncodingList(System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Generates a drop down with encodings.
 </summary>
 <param name="selectedCharset">Specifies the charset intially selected in the drop down.</param>
 <param name="name">Specifies Name property for the drop down.</param>
 <param name="cdo">Specifies whether to leave "windows-1252" out of the drop down.</param>
 <param name="standardBlank">Specifies whether to included a default option at the top of the drop down.</param>
 <remarks>
 This is mostly used for mail encoding setup.
 </remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.EncodingList(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Generates a drop down with encodings.
 </summary>
 <param name="selectedCharset">Specifies the charset intially selected in the drop down.</param>
 <param name="name">Specifies Name property for the drop down.</param>
 <param name="cdo">Specifies whether to leave "windows-1252" out of the drop down.</param>
 <param name="standardBlank">Specifies whether to included a default option at the top of the drop down.</param>
 <param name="enabled">Is the selectbox enabled or not</param>
 <remarks>
 This is mostly used for mail encoding setup.
 </remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.UserGroupManager(System.String,System.String,System.String,System.Int32,System.String[],System.String[])">
 <summary>
 Helper method for Gui.UserGroupManagerOld and Gui.UserGroupManagerExt.
 </summary>
 <param name="nameMemberBox">Specifies Name property for the member box.</param>
 <param name="nameGroupBox">Specifies Name property for the group box.</param>
 <param name="formName">Specifies Name property for the form.</param>
 <param name="intTypes">Specifies types of users to be listed.</param>
 <param name="checkForPermissionArray"></param>
 <param name="settingsArray">Array containing values of: Select box width,
 text for "Allow" and text for "Groups"</param>
 <remarks>
 Calls UserGroupManagerOld or UserGroupManagerExt depending on the settings in
 Control Panel -> Users -> Extended.
 </remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.FileManager(System.String,System.String,System.String)">
 <summary>
 Returns an instance of Filemanager.
 </summary>
 <param name="file">Specifies the file intially selected in the drop down.</param>
 <param name="folder">Folder to show files from in drop down.</param>
 <param name="inputName">Specifies Name property for the drop down.</param>
 <remarks>
 <para>For Folder = "billeder" or "navigation" the following extentions are shown:
 gif, jpg, jpeg, png, swf, htm, html, mov</para>
 <para>For Folder = "system" the following extentions are shown:
 gif, jpg, jpeg, png, swf, htm, html, css, js</para>
 <para>For Folder = "templates" or "html" the following extentions are shown:
 gif, jpg, jpeg, png, swf, htm, html, css, js</para>
 </remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.FormatFileSize(System.Int64)">
 <summary>
 Creates string representation of file size.
 If file size greater than 1 mb, it is formatted as xxx.x Mb.
 If file size greater than 1 kb, it is formatted as xxx.x Kb.
 Else the format is xxx B.
 </summary>
 <param name="size">File size in bytes.</param>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.IntegerDropdown(System.String,System.String)">
 <summary>
 Creates a drop down with integers from 0 to 25.
 </summary>
 <param name="selectedFieldValue">Specifies the value intially selected in the drop down.</param>
 <param name="fieldName">Specifies Name property for the drop down box.</param>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.IntegerDropdown(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Creates a drop down with custom integers.
 </summary>
 <param name="selectedField">Specifies the value intially selected in the drop down.</param>
 <param name="name">Specifies Name property for the drop down.</param>
 <param name="startRange">Specifies start value in the drop down.</param>
 <param name="endRange">Specifies end value in the drop down.</param>
 <param name="stepValue">Specifies step value.</param>
 <param name="prepend">String to place after each integer value in the drop down.</param>
 <param name="formatAsMonthName">Specifies if the values are to be used with MonthName function.</param>
 <param name="width">Specifies width of drop down. Default is 55.</param>
 <param name="defaultValue">Specifies value for option to be placed in top of drop down.</param>
 <param name="defaultName">Specifies option to be placed at top of drop down box.</param>
 <param name="postfix">Specifies postfix of the options value attribute, ie 'px'.</param>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.ColorSelect(System.String,System.String,System.Boolean,System.String,System.Boolean,System.String,System.String)">
 <summary>
 Shows a pop-up with a color picker.
 </summary>
 <param name="selectedFieldValue">Specifies the value intially selected in the color picker.</param>
 <param name="fieldName">'Specifies Name of the input field to received the chosen color value.</param>
 <param name="colorSelectStart">Specifies whether this is the first use of color selector on the current page. Set to true when using it subsequently</param>
 <remarks>
 Uses Windows build in color selector if "Control Panel -> Stylesheet -> Windows colors" is set.
 Otherwise a custom color picker is used.
 </remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.ColorSelect(System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,System.String,System.String)">
 <summary>
 Shows a pop-up with a color picker.
 </summary>
 <param name="selectedFieldValue">Specifies the value intially selected in the color picker.</param>
 <param name="fieldName">'Specifies Name of the input field to received the chosen color value.</param>
 <param name="colorSelectStart">Specifies whether this is the first use of color selector on the current page. Set to true when using it subsequently</param>
 <remarks>
 Uses Windows build in color selector if "Control Panel -> Stylesheet -> Windows colors" is set.
 Otherwise a custom color picker is used.
 </remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.MakeLinkManager(System.String,System.String,System.Boolean@,System.String@,System.Boolean)">
 <summary>
 Makes a GUI with input field and link buttons for "internal link" and "link to file".
 </summary>
 <param name="url">Link to be shown.</param>
 <param name="name">Specifies Name property for the input field.</param>
 <param name="linkStart">Specifies whether this is first call of LinkManager.</param>
 <param name="showParagraphsOption">Specifies whether to show "Show paragraph" button.</param>
 <param name="linkManagerDisableFileArchive">Specifies whether to disable the "link to file" button.</param>
 <remarks>
 "link to file" will be disabled if user does not have access to "Filearchive" or LinkManagerDisableFileArchive is set.
 </remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.MakeLinkManager(System.String,System.String,System.Boolean@,System.String@,System.Boolean,System.Boolean)">
 <summary>
 Makes a GUI with input field and link buttons for "internal link" and "link to file".
 </summary>
 <param name="url">Link to be shown.</param>
 <param name="name">Specifies Name property for the input field.</param>
 <param name="linkStart">Specifies whether this is first call of LinkManager.</param>
 <param name="showParagraphsOption">Specifies whether to show "Show paragraph" button.</param>
 <param name="linkManagerDisableFileArchive">Specifies whether to disable the "link to file" button.</param>
 <param name="enabled">Specifies whether the manager is enabled</param>
 <remarks>
 "link to file" will be disabled if user does not have access to "Filearchive" or LinkManagerDisableFileArchive is set.
 </remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.MakeLinkManager(System.String,System.String,System.Boolean@,System.Boolean@,System.Boolean,System.String@,System.Boolean@,System.Boolean@,System.Boolean,Dynamicweb.SystemTools.Gui.LinkManagerSettings,System.String,System.Web.UI.AttributeCollection,System.Boolean,System.String)">
 <summary>
 Makes a GUI with input field and link buttons for "internal link" and "link to file".
 </summary>
 <param name="url">Link to be shown.</param>
 <param name="name">Specifies Name property for the input field.</param>
 <param name="linkStart">Specifies whether this is first call of LinkManager.</param>
 <param name="enablePageSelect">Specifies whether to show "Select page" button.</param>
 <param name="enableParagraphSelect">Specifies whether to show "Select paragraph" button.</param>
 <param name="paragraphSelect">Specifies if "Select page" will select paragraphs</param>
 <param name="enableFileSelect">Specifies whether to disable the "link to file" button.</param>
 <param name="enabled">Specifies whether the manager is enabled</param>
 <param name="enableTyping">Specifies whether to enable typing.</param>
 <param name="advancedSettings">Advanced settings.</param>
 <remarks>
 "link to file" will be disabled if user does not have access to "Filearchive" or enableFileSelect is not set.
 </remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.MakeLinkManager(System.String,System.String,System.Boolean@,System.Boolean)">
 <summary>
 Makes a GUI with input field and link buttons for "internal link" and "link to file".
 </summary>
 <param name="url"></param>
 <param name="name"></param>
 <param name="disableParagraphsOption"></param>
 <param name="disableFileArchive"></param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.LinkButton(System.String@,System.String@,System.String@,System.String@)">
 <summary>
 Used in frontend for making button link, text link or both.
 </summary>
 <param name="buttonType">1 = text link, 2 = image link or 3 = text and image link.</param>
 <param name="buttonImage">URL for image to be used as link.</param>
 <param name="ButtonText">Text for link.</param>
 <param name="buttonLink">URL for link.</param>
 <remarks>
 Used in connection with Gui.ButtonText (makes the backend part of the job).
 </remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.MakeButtonText(System.String,System.String,System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Used in backend for chosing link type (button , text or both). Creates a GUI for choosing link options.
 </summary>
 <param name="name">Specifies Name property for the input field.</param>
 <param name="selectedValue">Specifies the radiobutton intially selected.</param>
 <param name="pictureName">Specifies chosen picture for the link.</param>
 <param name="text">Specifies text for the link.</param>
 <param name="includeTextScript">Specifies whether JavaScript for toggle should be rendered.</param>
 <returns>
 String containing HTML.
 </returns>
 <remarks>
 Used in connection with Gui.LinkButton (makes the frontend part of the job).
 Image is assigned to field named "<i>Name</i>Picture"
 </remarks>
 <history>
     [bbr]   11-04-2005  Comments edited
 	[jte]	29-03-2005	Created
 </history>
 -----------------------------------------------------------------------------
</member>
<member name="M:Dynamicweb.SystemTools.Gui.MakeButtonText(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Used in backend for chosing link type (button , text or both). Creates a GUI for choosing link options.
 </summary>
 <param name="name">Specifies Name property for the input field.</param>
 <param name="selectedValue">Specifies the radiobutton intially selected.</param>
 <param name="pictureName">Specifies chosen picture for the link.</param>
 <param name="text">Specifies text for the link.</param>
 <param name="pictureText">Text to append to <i>Name</i> to get image field.</param>
 <param name="includeTextScript">Specifies whether JavaScript for toggle should be rendered.</param>
 <returns>String containing HTML.</returns>
 <remarks>
 Used in connection with Gui.LinkButton (makes the frontend part of the job).
 Image is assigned to field named "<i>Name</i><b><i>strPictureText</i></b>"
 </remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.FolderManager(System.String,System.String,System.Boolean,System.Boolean,System.String)">
 <summary>
 Returns an instance of the folder manager.
 </summary>
 <param name="folder">Folder to browse.</param>
 <param name="inputName">Name property for the input field.</param>
 <param name="folderManagerStart">Specifies whether this is the first call of the method.</param>
 <param name="fileManagerStart">Specifies whether this is the first call of the method.</param>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.MakeEditor(System.String,System.String)">
 <summary>
 Returns an instance of the editor.
 </summary>
 <param name="name">Name of the text area.</param>
 <param name="text">Text for the textarea.</param>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.MakeEditor(System.String,System.Int32,System.Int32,System.String,System.String)">
 <summary>
 Returns an instance of the editor.
 </summary>
 <param name="name"></param>
 <param name="width"></param>
 <param name="height"></param>
 <param name="text"></param>
 <param name="css"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.SystemTools.Gui.EditorEdition">
 <summary>
 Determins the editor edition.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.MakeEditor(System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
 <summary>
 Returns an instance of the editor.
 </summary>
 <param name="name">Name of the text area.</param>
 <param name="width">Width of the editor. Default is 565.</param>
 <param name="height">Height of the editor. Default is 280.</param>
 <param name="text">Text for the textarea.</param>
 <param name="css">Extra CSS values to be placed in HTML header.</param>
 <param name="skinPath">Absolute virtual path to the skin that should be used by the editor.</param>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.MakeEditor(System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Returns an instance of the editor.
 </summary>
 <param name="name">Name of the text area.</param>
 <param name="width">Width of the editor. Default is 565.</param>
 <param name="height">Height of the editor. Default is 280.</param>
 <param name="text">Text for the textarea.</param>
 <param name="css">Extra CSS values to be placed in HTML header.</param>
 <param name="skinPath">Absolute virtual path to the skin that should be used by the editor.</param>
 <param name="encodeOutput">Tells the editor to HTML encode some characters before posting the editor data. The encoded chars are: &amp;, &lt; and &gt;.</param>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.MakeEditor(System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.Int32)">
 <summary>
 Returns an instance of the editor.
 </summary>
 <param name="name">Name of the text area.</param>
 <param name="width">Width of the editor. Default is 565.</param>
 <param name="height">Height of the editor. Default is 280.</param>
 <param name="text">Text for the textarea.</param>
 <param name="css">Extra CSS values to be placed in HTML header.</param>
 <param name="skinPath">Absolute virtual path to the skin that should be used by the editor.</param>
 <param name="encodeOutput">Tells the editor to HTML encode some characters before posting the editor data. The encoded chars are: &amp;, &lt; and &gt;.</param>
 <param name="configurationId">Provider based editor configuration id.</param>    
</member>
<member name="M:Dynamicweb.SystemTools.Gui.HelpPopup(System.String)">
 <summary>
 Returns URL for button to make pop-up with help.
 </summary>
 <param name="keyword">Keyword to look up in help file.</param>
 <returns>JavaScript 'window.open' command with parameters.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.HelpPopup(System.String,System.String)">
 <summary>
 Returns URL for button to make pop-up with help.
 </summary>
 <param name="keyword">'Classic' Dynamicweb online manual keyword.</param>
 <param name="dotNetKeyword">New Dynamicweb .NET online manual keyword.</param>
 <returns>JavaScript 'window.open' command with parameters.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.HelpPopup(System.String,System.String,System.String)">
 <summary>
 Returns pop-up URL for help button .
 </summary>
 <param name="keyword">'Classic' Dynamicweb online manual keyword.</param>
 <param name="dotNetKeyword">New Dynamicweb .NET online manual keyword.</param>
 <param name="locale">Name of language/area layer in on-line manual to use.</param>
 <returns>JavaScript 'window.open' command with parameters.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.HelpIconButton(System.String,System.String,System.String)">
 <summary>
 Returns a help icon with a URL to make pop-up with help.
 </summary>
 <param name="title">Help topic for icon tooltip.</param>
 <param name="keyword">'Classic' Dynamicweb online manual keyword.</param>
 <param name="dotNetKeyword">New Dynamicweb .NET online manual keyword.</param>
 <returns>HTML IMG tag with onclick event</returns>
 <remarks>Only returns IMG for version 18.2.1.0 or later.</remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.HelpIconButton(System.String,System.String,System.String,System.String)">
 <summary>
 Returns a help icon with a URL to make pop-up with help.
 </summary>
 <param name="title">Help topic for icon tooltip.</param>
 <param name="keyword">'Classic' Dynamicweb online manual keyword.</param>
 <param name="dotNetKeyword">New Dynamicweb .NET online manual keyword.</param>
 <param name="iconLocation">Path to image file for icon.</param>
 <returns>HTML IMG tag with onclick event</returns>
 <remarks>Only returns IMG for version 18.2.1.0 or later.</remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.HelpButtonHtml(System.String,System.String,System.Int32)">
 <summary>
 Returns a help button with a URL to make pop-up with help.
 </summary>
 <param name="keyword">'Classic' Dynamicweb online manual keyword.</param>
 <param name="dotNetKeyword">New Dynamicweb .NET online manual keyword.</param>
 <returns>Table cell containing BUTTON tag with onclick event</returns>
 <remarks>Only returns button for version 18.2.1.0 or later.</remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.HelpButtonHtml(System.String)">
 <summary>
 Returns a help button with a URL to make pop-up with help.
 </summary>
 <param name="dotNetKeyword">Dynamicweb .NET online manual keyword.</param>
 <returns>A translated help button with manual link</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.MakeMedia(System.String@,System.String@,System.String,System.String@,System.String@,System.Boolean@,System.String@,System.String@,System.String,System.String,System.Boolean)">
 <summary>
 Returns a media (HTML file, Flash movie or image file).
 </summary>
 <param name="pathToMedia">Specifies path for the media.</param>
 <param name="link">Specifies &lt;a href&gt; link for the media.</param>
 <param name="target">Specifies Target information for the media.</param>
 <param name="mouseover">Specifies "Mouseover" text to be placed in the browsers status bar.</param>
 <param name="caption">Specifies text string to be caption for the table (PutInTable).</param>
 <param name="putInTable">Specifies if media is to be placed inside table tags.</param>
 <param name="settings">Specifies extra parameters for &lt;img src&gt; tag.</param>
 <param name="placement">Array of values for Halign, Hspace, Valign, Vspace. In that order!</param>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.MakeHeaderForModule(System.String,System.String,System.Boolean)">
 <summary>
 Creates top line for editing module attached to a paragraph.
 It includes module icon, module name and remove and help button (as specified).
 </summary>
 <param name="moduleSystemName">Module system name</param>
 <param name="moduleName">Name of module to be show in top line</param>
 <param name="showButtons">Whether or not to show the "Remove" and "Help" buttons</param>
 <returns>String containing HTML with a table in a GroupBox</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.DateSelect(System.String,System.Boolean,System.Boolean,System.String)">
 <summary>
 Returns a calendar control as a raw html-string.
 </summary>
 <param name="dateTime">Date for use in drop down on the form yyyy-mm-dd</param>
 <param name="useTime">Specifies whether drop down for time should be generated.</param>
 <param name="allowNeverExpire">If set to true, the initial year will be "Never"</param>
 <param name="name">Name for the drop downs.</param>
 <returns>System.String.</returns>
 <remarks>Helper method for calling DateSelect.</remarks>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.DateSelect(System.DateTime,System.Boolean,System.Boolean,System.String,System.Boolean,System.Int32)">
 <summary>
 Returns a calendar control as a raw html-string. Endyear defaults to Year(Now()) + 5.
 </summary>
 <param name="dateTime">Date for use in drop down on the form yyyy-mm-dd</param>
 <param name="useTime">Specifies whether drop down for time should be generated.</param>
 <param name="allowNeverExpire">If set to true, the initial year will be "Never"</param>
 <param name="name">Name for the drop downs.</param>
 <param name="enabled">if set to <c>true</c> [enabled].</param>
 <param name="startYear">The start year.</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.DateSelect(System.Nullable{System.DateTime},System.Boolean,System.Boolean,System.String,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Boolean)">
 <summary>
 Returns a calendar control as a raw html-string.
 </summary>
 <param name="dateTime">Date for use in drop down on the form yyyy-mm-dd</param>
 <param name="useTime">Specifies whether drop down for time should be generated.</param>
 <param name="allowNeverExpire">If set to true, the initial year will be "Never"</param>
 <param name="name">Name for the drop downs.</param>
 <param name="enabled">if set to <c>true</c> [enabled].</param>
 <param name="startYear">The start year.</param>
 <param name="endYear">The end year.</param>
 <param name="allowNotSet">if set to <c>true</c> [allow not set].</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.DateSelect(System.String,System.Nullable{System.DateTime},System.Boolean,System.Boolean,System.String,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Boolean)">
 <summary>
 Returns a calendar control as a raw html-string.
 </summary>
 <param name="label">label of date selector</param>
 <param name="dateTime">Date for use in drop down on the form yyyy-mm-dd</param>
 <param name="useTime">Specifies whether drop down for time should be generated.</param>
 <param name="allowNeverExpire">If set to true, the initial year will be "Never"</param>
 <param name="name">Name for the drop downs.</param>
 <param name="enabled">if set to <c>true</c> [enabled].</param>
 <param name="startYear">The start year.</param>
 <param name="endYear">The end year.</param>
 <param name="allowNotSet">if set to <c>true</c> [allow not set].</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.DateSelect(Dynamicweb.SystemTools.DateSelectModel)">
 <summary>
 Returns a calendar control as a raw html-string.
 </summary>
 <param name="dateSelectModel">model containing the information needed to configure a calendar control</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.WrapInScriptBlock(System.String[])">
 <summary>
 Returns a html "script" block with the content of the enumerable strings as it's content.
 </summary>
 <param name="lines"></param>
 <returns>htmlScript</returns>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.WrapInWaitForDomContentLoadedBlock(System.String[])">
 <summary>
 Wraps the scriptblocks in an eventlistener that waits for DOMContentLoaded to fire.
 </summary>
 <param name="scriptBlocks"></param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.CreateJsFunction(System.String,System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
 <summary>
 Creates a js function on one of the following forms: 
 "function name(parameters){ body; };"
 Or
 "function name(parameters){ return body; };"
 </summary>
 <param name="name"></param>
 <param name="body"></param>
 <param name="parameters"></param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.SystemTools.Gui.ArrayToJsArray(System.Collections.Generic.IEnumerable{System.String},System.String)">
 <summary>
 Returns a javascript object (array) with strings in the format:
 "{'One', 'Two', 'Tree'}"
 The character "'" can be replaced if needed
 </summary>
 <param name="array"></param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.NamespaceDoc">
 <summary>
 The Dynamicweb namespace contains fundamental classes and basic infrastucture of Dynamicweb application. The sub namespaces to Dynamicweb is the main functionality of Dynamicweb. 
 Dynamicweb.Content contains the API for managing content, items and the system it self. 
 Dynamicweb.Frontend is the runtime executing the frontend of the website running Dynamicweb through the <see cref="T:Dynamicweb.Frontend.PageView"/> class.
 </summary>
</member>
<member name="T:Dynamicweb.dk.infodirekt.search.InfoDirektService">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.infodirekt.search.InfoDirektService.#ctor">
<remarks/>
</member>
<member name="E:Dynamicweb.dk.infodirekt.search.InfoDirektService.InfoDirektSearchCompleted">
<remarks/>
</member>
<member name="E:Dynamicweb.dk.infodirekt.search.InfoDirektService.InfoDirektSearchWithIDCompleted">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.infodirekt.search.InfoDirektService.InfoDirektSearch(Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.infodirekt.search.InfoDirektService.BeginInfoDirektSearch(Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.infodirekt.search.InfoDirektService.EndInfoDirektSearch(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.infodirekt.search.InfoDirektService.InfoDirektSearchAsync(Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.infodirekt.search.InfoDirektService.InfoDirektSearchAsync(Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest,System.Object)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.infodirekt.search.InfoDirektService.InfoDirektSearchWithID(Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequestByID)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.infodirekt.search.InfoDirektService.BeginInfoDirektSearchWithID(Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequestByID,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.infodirekt.search.InfoDirektService.EndInfoDirektSearchWithID(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.infodirekt.search.InfoDirektService.InfoDirektSearchWithIDAsync(Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequestByID)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.infodirekt.search.InfoDirektService.InfoDirektSearchWithIDAsync(Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequestByID,System.Object)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.infodirekt.search.InfoDirektService.CancelAsync(System.Object)">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest.Phone">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest.PhoneType">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest.FirstName">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest.Surname">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest.PNR">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest.CompanyName">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest.NameStartWith">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest.FuzzySearch">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest.Street">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest.StreetStartWith">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest.HouseNumber">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest.ZipCode">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest.District">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest.MunicipalCode">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest.Business">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest.Sort">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequest.UserID">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.infodirekt.search.PhoneKind">
<remarks/>
</member>
<member name="F:Dynamicweb.dk.infodirekt.search.PhoneKind.Mobile">
<remarks/>
</member>
<member name="F:Dynamicweb.dk.infodirekt.search.PhoneKind.PSTN">
<remarks/>
</member>
<member name="F:Dynamicweb.dk.infodirekt.search.PhoneKind.Both">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.infodirekt.search.BusinessType">
<remarks/>
</member>
<member name="F:Dynamicweb.dk.infodirekt.search.BusinessType.Private">
<remarks/>
</member>
<member name="F:Dynamicweb.dk.infodirekt.search.BusinessType.Business">
<remarks/>
</member>
<member name="F:Dynamicweb.dk.infodirekt.search.BusinessType.Both">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.infodirekt.search.SortExpression">
<remarks/>
</member>
<member name="F:Dynamicweb.dk.infodirekt.search.SortExpression.Name">
<remarks/>
</member>
<member name="F:Dynamicweb.dk.infodirekt.search.SortExpression.ZipCode">
<remarks/>
</member>
<member name="F:Dynamicweb.dk.infodirekt.search.SortExpression.Rank">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequestByID">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequestByID.SubscriberID">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchRequestByID.UserID">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.infodirekt.search.SubscriberResponse">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.SubscriberID">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.Title">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.FirstName">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.Surname">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.CompanyName">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.ZipCode">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.District">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.Address">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.StreetName">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.StreetBuildingNumberFrom">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.StreetBuildingLetterFrom">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.StreetBuildingNumberEnd">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.StreetBuildingLetterEnd">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.Floor">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.Direction">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.Door">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.City">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.Phone">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.PhoneType">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.MainNumber">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.Fax">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.Business">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.MunicipalCode">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.StreetCode">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.TelephoneSubscriberProtection">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.KVHX">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.SubscriberResponse.MovementDate">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.infodirekt.search.TelephoneSubscriberProtectionCode">
<remarks/>
</member>
<member name="F:Dynamicweb.dk.infodirekt.search.TelephoneSubscriberProtectionCode.Normal">
<remarks/>
</member>
<member name="F:Dynamicweb.dk.infodirekt.search.TelephoneSubscriberProtectionCode.SecretNumber">
<remarks/>
</member>
<member name="F:Dynamicweb.dk.infodirekt.search.TelephoneSubscriberProtectionCode.SecretAddress">
<remarks/>
</member>
<member name="F:Dynamicweb.dk.infodirekt.search.TelephoneSubscriberProtectionCode.Unlisted">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.infodirekt.search.InfoDirektResponse">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektResponse.Error">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektResponse.ReturnCount">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektResponse.SubscriberResponseList">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.infodirekt.search.InfoDirektSearchCompletedEventHandler">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.infodirekt.search.InfoDirektSearchCompletedEventArgs">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.infodirekt.search.InfoDirektSearchWithIDCompletedEventHandler">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.infodirekt.search.InfoDirektSearchWithIDCompletedEventArgs">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.infodirekt.search.InfoDirektSearchWithIDCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.#ctor">
<remarks/>
</member>
<member name="E:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.AuthenticateUserCompleted">
<remarks/>
</member>
<member name="E:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.AuthenticateUserNewCompleted">
<remarks/>
</member>
<member name="E:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.AuthenticateCompleted">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.AuthenticateUser(System.Byte[],System.Byte[])">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.BeginAuthenticateUser(System.Byte[],System.Byte[],System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.EndAuthenticateUser(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.AuthenticateUserAsync(System.Byte[],System.Byte[])">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.AuthenticateUserAsync(System.Byte[],System.Byte[],System.Object)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.AuthenticateUserNew(System.Byte[],System.Byte[],System.String,System.String)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.BeginAuthenticateUserNew(System.Byte[],System.Byte[],System.String,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.EndAuthenticateUserNew(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.AuthenticateUserNewAsync(System.Byte[],System.Byte[],System.String,System.String)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.AuthenticateUserNewAsync(System.Byte[],System.Byte[],System.String,System.String,System.Object)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.Authenticate(System.String,System.String)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.BeginAuthenticate(System.String,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.EndAuthenticate(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.AuthenticateAsync(System.String,System.String)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.AuthenticateAsync(System.String,System.String,System.Object)">
<remarks/>
</member>
<member name="M:Dynamicweb.dk.dynamicsystems.webservice.ActiveDirectoryAuthenticationService.CancelAsync(System.Object)">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.dynamicsystems.webservice.AuthenticateUserCompletedEventHandler">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.dynamicsystems.webservice.AuthenticateUserCompletedEventArgs">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.dynamicsystems.webservice.AuthenticateUserCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.dynamicsystems.webservice.AuthenticateUserNewCompletedEventHandler">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.dynamicsystems.webservice.AuthenticateUserNewCompletedEventArgs">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.dynamicsystems.webservice.AuthenticateUserNewCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.dynamicsystems.webservice.AuthenticateCompletedEventHandler">
<remarks/>
</member>
<member name="T:Dynamicweb.dk.dynamicsystems.webservice.AuthenticateCompletedEventArgs">
<remarks/>
</member>
<member name="P:Dynamicweb.dk.dynamicsystems.webservice.AuthenticateCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Dynamicweb.Solutionreporting.Report">
<remarks/>
</member>
<member name="M:Dynamicweb.Solutionreporting.Report.#ctor">
<remarks/>
</member>
<member name="E:Dynamicweb.Solutionreporting.Report.CallReportCompleted">
<remarks/>
</member>
<member name="E:Dynamicweb.Solutionreporting.Report.ReportWithCrmInfoXmlCompleted">
<remarks/>
</member>
<member name="M:Dynamicweb.Solutionreporting.Report.CallReport(System.String,System.String)">
<remarks/>
</member>
<member name="M:Dynamicweb.Solutionreporting.Report.BeginCallReport(System.String,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Dynamicweb.Solutionreporting.Report.EndCallReport(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Dynamicweb.Solutionreporting.Report.CallReportAsync(System.String,System.String)">
<remarks/>
</member>
<member name="M:Dynamicweb.Solutionreporting.Report.CallReportAsync(System.String,System.String,System.Object)">
<remarks/>
</member>
<member name="M:Dynamicweb.Solutionreporting.Report.ReportWithCrmInfoXml(System.String,System.String)">
<remarks/>
</member>
<member name="M:Dynamicweb.Solutionreporting.Report.BeginReportWithCrmInfoXml(System.String,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
<member name="M:Dynamicweb.Solutionreporting.Report.EndReportWithCrmInfoXml(System.IAsyncResult)">
<remarks/>
</member>
<member name="M:Dynamicweb.Solutionreporting.Report.ReportWithCrmInfoXmlAsync(System.String,System.String)">
<remarks/>
</member>
<member name="M:Dynamicweb.Solutionreporting.Report.ReportWithCrmInfoXmlAsync(System.String,System.String,System.Object)">
<remarks/>
</member>
<member name="M:Dynamicweb.Solutionreporting.Report.CancelAsync(System.Object)">
<remarks/>
</member>
<member name="T:Dynamicweb.Solutionreporting.CallReportCompletedEventHandler">
<remarks/>
</member>
<member name="T:Dynamicweb.Solutionreporting.CallReportCompletedEventArgs">
<remarks/>
</member>
<member name="P:Dynamicweb.Solutionreporting.CallReportCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Dynamicweb.Solutionreporting.ReportWithCrmInfoXmlCompletedEventHandler">
<remarks/>
</member>
<member name="T:Dynamicweb.Solutionreporting.ReportWithCrmInfoXmlCompletedEventArgs">
<remarks/>
</member>
<member name="P:Dynamicweb.Solutionreporting.ReportWithCrmInfoXmlCompletedEventArgs.Result">
<remarks/>
</member>
</members>
</doc>
