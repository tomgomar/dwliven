<?xml version="1.0"?>
<doc>
<assembly>
<name>
Dynamicweb.ItemPublisher
</name>
</assembly>
<members>
<member name="T:Dynamicweb.ItemPublisher.FilterHelper">
 <summary>
 The class helps to work with searching rules.
 </summary>
</member>
<member name="T:Dynamicweb.ItemPublisher.Frontend">
 <summary>
 Represents a frontend of the ItemPublisher module.
 </summary>
</member>
<member name="P:Dynamicweb.ItemPublisher.Frontend.Query">
 <summary>
 Gets or sets the query that defines items what will be selected.
 </summary>
</member>
<member name="P:Dynamicweb.ItemPublisher.Frontend.ItemType">
 <summary>
 Gets or sets the target item type.
 </summary>
</member>
<member name="P:Dynamicweb.ItemPublisher.Frontend.ItemFields">
 <summary>
 Gets or sets the fields of target item type.
 </summary>
</member>
<member name="P:Dynamicweb.ItemPublisher.Frontend.Mode">
 <summary>
 Gets the module view mode.
 </summary>
</member>
<member name="P:Dynamicweb.ItemPublisher.Frontend.ItemIdFromQuery">
 <summary>
 Gets the item Id specified via query string.
 </summary>
</member>
<member name="P:Dynamicweb.ItemPublisher.Frontend.ItemTypeFromQuery">
 <summary>
 Gets the item type specified via query string.
 </summary>
</member>
<member name="M:Dynamicweb.ItemPublisher.Frontend.InitializeModule(Dynamicweb.Content.Paragraph,Dynamicweb.Frontend.PageView)">
 <summary>
 Initializes the module.
 </summary>
 <param name="renderingParagraph">Paragraph that the module renderes on.</param>
 <param name="pageviewContext">Pageview instance.</param>
</member>
<member name="M:Dynamicweb.ItemPublisher.Frontend.GetContent">
 <summary>
 Gets the content of ItemPublisher module.
 </summary>
 <returns>String representation of content</returns>
</member>
<member name="M:Dynamicweb.ItemPublisher.Frontend.GetContentBySettings(System.String)">
 <summary>
 Retrieves module content from specified settings.
 </summary>
 <param name="settings">A string with item publisher module settings.</param>
 <returns>Module content.</returns>
 <remarks>
 The method is used to render an item directly in a template without the use of a page or paragraph.
 There are some template tags related to it: Item.Render, Item.RenderList and razor version - @RenderItemList.
 </remarks>
</member>
<member name="M:Dynamicweb.ItemPublisher.Frontend.Details(System.String)">
 <summary>
 Returns rendered details for a given item.
 </summary>
 <param name="itemId">Item Id.</param>
 <returns>String representation of the given item.</returns>
</member>
<member name="M:Dynamicweb.ItemPublisher.Frontend.Edit(System.String)">
 <summary>
 Returns edit form for a given item.
 </summary>
 <param name="itemId">Item Id.</param>
 <returns>Edit form for the given item.</returns>
</member>
<member name="M:Dynamicweb.ItemPublisher.Frontend.List">
 <summary>
 Returns rendered item list.
 </summary>
 <returns>String representation of item list.</returns>
</member>
<member name="M:Dynamicweb.ItemPublisher.Frontend.GetItems">
 <summary>
 Returns a list of items that needs to be rendered.
 </summary>
 <returns>A list of items that needs to be rendered.</returns>
</member>
<member name="M:Dynamicweb.ItemPublisher.Frontend.CreateRenderer">
 <summary>
 Creates new renderer.
 </summary>
 <returns>Renderer.</returns>
</member>
<member name="M:Dynamicweb.ItemPublisher.Frontend.GetQuery">
 <summary>
 Returns the query parsed from the current paragraph settings (and request).
 </summary>
 <returns>Parsed query.</returns>
</member>
<member name="M:Dynamicweb.ItemPublisher.Frontend.GetItemType(System.Boolean)">
 <summary>
 Returns target item metadata.
 </summary>
 <param name="isOriginal">Is it original item type needed or copy with selected field only.</param>
 <returns>Target item metadata.</returns>
</member>
<member name="M:Dynamicweb.ItemPublisher.Frontend.Status(System.Net.HttpStatusCode)">
 <summary>
 Responds with the given status code.
 </summary>
 <param name="code">Status code.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.ItemPublisher.Frontend.GetItemFields">
 <summary>
 Returns the initial list of item fields to operate with.
 </summary>
 <returns>The list of item fields.</returns>
</member>
<member name="M:Dynamicweb.ItemPublisher.Frontend.GetPermissions(Dynamicweb.Content.Items.ItemEntry)">
 <summary>
 Returns value indicating whether has the current user access or not.
 </summary>
 <param name="item">Item entry</param>
 <returns>Boolean</returns>
</member>
<member name="T:Dynamicweb.ItemPublisher.ItemPublisherSettings">
 <summary>
 Allowed item publisher settings
 </summary>
</member>
<member name="T:Dynamicweb.ItemPublisher.ListViewModes">
 <summary>
 Represents the modes of the list ViewMode.
 </summary>
</member>
<member name="F:Dynamicweb.ItemPublisher.ListViewModes.Normal">
 <summary>
 Full list with paging.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.ItemPublisher.ListViewModes.Partial">
 <summary>
 Partial list with selected items range.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.ItemPublisher.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Dynamicweb.ItemPublisher.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Dynamicweb.ItemPublisher.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Dynamicweb.ItemPublisher.ShowOnParagraphInfo">
 <summary>
 Class ShowOnParagraphInfo.
 </summary>
</member>
<member name="T:Dynamicweb.ItemPublisher.ViewMode">
 <summary>
 Represents the module view mode.
 </summary>
</member>
<member name="F:Dynamicweb.ItemPublisher.ViewMode.List">
 <summary>
 List items.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.ItemPublisher.ViewMode.Details">
 <summary>
 Item details.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.ItemPublisher.ViewMode.Edit">
 <summary>
 Edit item.
 </summary>
 <remarks></remarks>
</member>
</members>
</doc>
