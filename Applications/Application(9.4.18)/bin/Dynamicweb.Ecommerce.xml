<?xml version="1.0"?>
<doc>
<assembly>
<name>
Dynamicweb.Ecommerce
</name>
</assembly>
<members>
<member name="T:Dynamicweb.Ecommerce.Analytics.ExperimentUtilities">
 <summary>
 Class ExperimentUtilities.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Analytics.ExperimentUtilities.GetOrderIDsFromExperimentView(System.Int32,System.Int32,System.DateTime,System.String,System.String)">
 <summary>
     Returns the order ids string
 </summary>
 <param name="viewID">View Id.</param>
 <param name="pageID">Page Id.</param>
 <param name="viewDate">Date when the page has been viewed.</param>
 <param name="visitorID">ID of visitor which viewed the page.</param>
 <param name="typeNameOfObject">Object type name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Analytics.ExperimentUtilities.GetOneHighestTotalValueOrder(System.Int32,System.Int32,System.DateTime,System.String)">
 <summary>
     Returns data for highest total markup order provider
 </summary>
 <param name="viewID">View Id.</param>
 <param name="pageID">Page Id.</param>
 <param name="viewDate">Date when the page has been viewed.</param>
 <param name="visitorID">ID of visitor which viewed the page.</param>
 <returns>Tuple(Of System.Double, System.Int32).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Analytics.ExperimentUtilities.GetTotalAndAverageOrderValue(System.Int32,System.Boolean)">
 <summary>
     Returns data for total and average order values
 </summary>
 <param name="experimentID">Experiment Id.</param>
 <param name="isOriginal">Is original or variants.</param>
 <returns>Tuple(Of System.Double, System.Double).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Analytics.ExperimentUtilities.GetOneHighestTotalMarkupOrder(System.Int32,System.Int32,System.DateTime,System.String)">
 <summary>
     Returns data for highest total markup order
 </summary>
 <param name="viewID">The view identifier.</param>
 <param name="pageID">Page Id.</param>
 <param name="viewDate">Date when the page has been viewed.</param>
 <param name="visitorID">ID of visitor which viewwed the page.</param>
 <returns>Tuple(Of System.Double, System.Int32).</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Analytics.GroupIdentityConverter">
 <summary>
     Allows converting eCommerce group identity to its name.
 </summary>
 <seealso cref="T:Dynamicweb.Analytics.Model.Converters.ValueConverter" />
</member>
<member name="P:Dynamicweb.Ecommerce.Analytics.GroupIdentityConverter.ConversionType">
 <summary>
     Gets the type of converted value.
 </summary>
 <value>The type of the conversion.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Analytics.GroupIdentityConverter.#ctor">
 <summary>
     Initializes a new instance of an object.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Analytics.GroupIdentityConverter.ConvertFrom(System.Object,System.Type)">
 <summary>
     Gets the group name of the group encoded in the given object as a string.
 </summary>
 <param name="value">String value representing a <see cref="T:Dynamicweb.Analytics.ShopItemIdentity" />.</param>
 <param name="valueType">Parameter is not in use.</param>
 <returns>The name of the <see cref="T:Dynamicweb.Ecommerce.Products.Group" /> that is encoded in the given value string.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Analytics.HighestAverageMarkupGoalProvider">
 <summary>
     HighestAverageMarkupGoalProvider class.
 </summary>
 <seealso cref="T:Dynamicweb.Analytics.Goals.ConversionGoalProvider" />
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Analytics.HighestAverageMarkupGoalProvider.GetCustomerOrder(System.String)">
 <summary>
     Gets the related customer <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> from the given
     <paramref name="goalValue">goal value</paramref> if possible.
 </summary>
 <param name="goalValue">The value to get the order id from.</param>
 <returns>An <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> if the goal value contains a valid order id; <c>null</c> otherwise.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Analytics.HighestAverageMarkupGoalProvider.TrackGoal(System.String)">
 <summary>
     Custom track your goal value
 </summary>
 <param name="goalValue">The experiment goal value</param>
 <returns>To track the goal returns true</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Analytics.HighestAverageMarkupGoalProvider.#ctor">
 <summary>
     Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Analytics.HighestAverageMarkupGoalProvider" /> class.
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Analytics.HighestAverageOrderValueGoalProvider">
 <summary>
     HighestAverageOrderValueGoalProvider class.
 </summary>
 <seealso cref="T:Dynamicweb.Analytics.Goals.ConversionGoalProvider" />
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Analytics.HighestAverageOrderValueGoalProvider.GetCustomerOrder(System.String)">
 <summary>
     Gets the related customer <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> from the given
     <paramref name="goalValue">goal value</paramref> if possible.
 </summary>
 <param name="goalValue">The value to get the order id from.</param>
 <returns>An <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> if the goal value contains a valid order id; <c>null</c> otherwise.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Analytics.HighestAverageOrderValueGoalProvider.TrackGoal(System.String)">
 <summary>
     Custom track your goal value
 </summary>
 <param name="goalValue">The experiment goal value</param>
 <returns>To track the goal returns true</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Analytics.HighestAverageOrderValueGoalProvider.#ctor">
 <summary>
     Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Analytics.HighestAverageOrderValueGoalProvider" /> class.
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Analytics.TrackProductAddedObserver">
 <summary>
     Class TrackProductAddedObserver.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationSubscriber" />
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Analytics.TrackProductAddedObserver.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
     Called when [notify].
 </summary>
 <param name="notification">The notification.</param>
 <param name="args">The arguments.</param>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Assortments.Assortment">
 <summary>
 Assortment class.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.Assortment.AutoID">
 <summary>
 Gets the auto id of the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" />.
 </summary>
 <value>The automatic identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.Assortment.ID">
 <summary>
 Gets or sets the the id of the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" />.
 </summary>
 <value>The identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.Assortment.LanguageID">
 <summary>
 Gets or sets the language id of the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" />.
 </summary>
 <value>The language identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.Assortment.Name">
 <summary>
 Gets or sets the name of the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" />.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.Assortment.Number">
 <summary>
 Gets or sets the number of the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" />.
 </summary>
 <value>The number.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.Assortment.PeriodID">
 <summary>
 Gets or sets the period id of the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" />.
 </summary>
 <value>The period identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.Assortment.LastBuildDate">
 <summary>
 Gets the <see cref="T:System.DateTime" /> when the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" /> was last built.
 </summary>
 <value>The last build date.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.Assortment.RebuildRequired">
 <summary>
 Gets or sets a value indicating whether a rebuild of the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" /> is required.
 </summary>
 <value><c>true</c> if rebuild is required; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.Assortment.Active">
 <summary>
 Gets or sets a value indicating whether the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" /> is active.
 </summary>
 <value><c>true</c> if active; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.Assortment.IncludeSubgroups">
 <summary>
 Gets or sets a value indicating whether the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" /> should include subgroups of selected groups when building the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" />.
 </summary>
 <value><c>true</c> if subgroups are included; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.Assortment.AllowAnonymousUsers">
 <summary>
 Gets or sets a value indicating whether the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" /> is available to anonymous uses.
 </summary>
 <value><c>true</c> if assortment is available to anonymous users; otherwise, <c>false</c>.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.#ctor">
 <summary>
 Creates an <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" /> object with default property values.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.#ctor(System.Data.IDataReader)">
 <summary>
 Creates an <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" /> object using property values from the given <see cref="T:System.Data.IDataReader" />.
 </summary>
 <param name="dataReader">DataReader containing the values to create the Assortment.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.Fill(System.Data.IDataReader)">
 <summary>
 Fills the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" /> object with property values from the given <see cref="T:System.Data.IDataReader" />.
 </summary>
 <param name="dataReader">DataReader containing the values to fill the Assortment.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.Save">
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.GetAssortmentByID(System.String)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" /> with the given id.
 </summary>
 <param name="assortmentID">The assortment id.</param>
 <returns>Assortment.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.GetAssortmentByID(System.String,System.Boolean)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" /> with the given id.
 </summary>
 <param name="assortmentID">The assortment id.</param>
 <param name="showUntranslated">If set to <c>true</c> and no assortment was translated to the current language, an untranslated assortment with the given id is return; otherwise <c>null</c> is returned.</param>
 <returns>Assortment.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.GetAssortmentByID(System.String,System.String)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" /> with the given id that was translated into the language with the given id.
 </summary>
 <param name="assortmentID">The assortment id.</param>
 <param name="languageID">The language id of the translation.</param>
 <returns>Assortment.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.GetAllAssortments">
 <summary>
 Gets all <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" />s.
 </summary>
 <returns>AssortmentCollection.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.GetActiveAssortments">
 <summary>
 Gets all active <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" /> versions in the current language.
 </summary>
 <returns>AssortmentCollection.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.GetActiveAssortmentIDs">
 <summary>
 Gets the ids of all active <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" /> versions in the current language.
 </summary>
 <returns>IEnumerable(Of System.String).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.GetNotActiveAssortmentIDs">
 <summary>
 Gets the ids of all <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" /> versions that are not active in the current language.
 </summary>
 <returns>IEnumerable(Of System.String).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.GetAllowAnonymousUsersAssortmentIDs">
 <summary>
 Gets the ids of all active <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" /> versions in the current language that are available to anonymous uses.
 </summary>
 <returns>IEnumerable(Of System.String).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.GetAssortmentsByIDs(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Gets <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" />s who's id is in the given list.
 </summary>
 <param name="assortmentIDs">The ids of the assortments to get.</param>
 <returns>AssortmentCollection.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.FlagForRebuild(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Flags the assortment for rebuild without clearing the cache.
 </summary>
 <param name="assortment">The assortment to flag for rebuild.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.GetAllAssortmentsByLanguageID(System.String)">
 <summary>
 Gets all assortments by language id, both translated and untranslated.
 </summary>
 <param name="languageID">The language id.</param>
 <returns>Dictionary(Of System.String, Assortment).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.ClearCache">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.Build(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Builds the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" />. If the Assortment is already built, only new relations are appended.
 </summary>
 <param name="assortment">The Assortment to build.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.Rebuild(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Rebuilds the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" />. All relations are rebuilt.
 </summary>
 <param name="assortment">The assortment.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.Assortment.GetAssortmentsForBuild">
 <summary>
 Get the assortments that require building or rebuilding.
 </summary>
 <returns>AssortmentCollection.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Assortments.AssortmentCollection">
 <summary>
 Collection of assortments.
 </summary>
 <seealso cref="T:System.Collections.ObjectModel.Collection`1" />
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentCollection.#ctor">
 <summary>
 Empty constructor.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Assortments.Assortment})">
 <summary>
 Initializes a new instance of <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentCollection" /> with the given assortments.
 </summary>
 <param name="assortments">Assortments to be added to the collection.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentCollection.ContainsByID(System.String)">
 <summary>
 Determines whether the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentCollection" /> contains an assortment with the specified ID.
 </summary>
 <param name="assortmentID">The id of the assortment to find.</param>
 <returns><c>true</c> if the assortment is found; otherwise <c>false</c></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentCollection.Sort(Dynamicweb.Ecommerce.Assortments.AssortmentSortBy)">
 <summary>
 Sorts the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentCollection" /> by specified <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentSortBy">field</see>.
 Default <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentSortDirection" /> is <see cref="F:Dynamicweb.Ecommerce.Assortments.AssortmentSortDirection.Ascending" />.
 </summary>
 <param name="sortBy">The field to sort by.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentCollection.Sort(Dynamicweb.Ecommerce.Assortments.AssortmentSortBy,Dynamicweb.Ecommerce.Assortments.AssortmentSortDirection)">
 <summary>
 Sorts the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentCollection" /> by specified <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentSortBy">field</see>.
 </summary>
 <param name="sortBy">The field to sort by.</param>
 <param name="sortDirection">The direction to sort the collection.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Assortments.AssortmentComparer">
 <summary>
 Assortment Comparer class
 </summary>
 <seealso cref="T:System.Collections.Generic.IComparer`1" />
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentComparer.#ctor">
 <summary>
 Empty constructor
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentComparer.#ctor(Dynamicweb.Ecommerce.Assortments.AssortmentSortBy)">
 <summary>
 Initializes a new AssortmentComparer that sorts by the specified sortable field ascending
 </summary>
 <param name="sortBy">Field to sort by</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentComparer.#ctor(Dynamicweb.Ecommerce.Assortments.AssortmentSortBy,Dynamicweb.Ecommerce.Assortments.AssortmentSortDirection)">
 <summary>
 Initializes a new AssortmentComparer that sorts by the specified sortable field in the specified direction
 </summary>
 <param name="sortBy">Field to sort by</param>
 <param name="sortDirection">Direction to sort</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentComparer.SortBy">
 <summary>
 Gets or sets the field to sort by
 </summary>
 <value>Field to sort by</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentComparer.SortDirection">
 <summary>
 Gets or sets the sort direction
 </summary>
 <value>The direction to sort</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentComparer.Compare(Dynamicweb.Ecommerce.Assortments.Assortment,Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Compares two assortments and returns a value indicating whether one is less than, equal to or greater than the other.
 </summary>
 <param name="x">The first assortment.</param>
 <param name="y">The second assortment.</param>
 <returns>A signed integer that indicates the relative values of x and y.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation">
 <summary>
 Assortment group relation class.
 </summary>
 <seealso cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation" />
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.GroupID">
 <summary>
 Gets or sets the id of the <see cref="T:Dynamicweb.Ecommerce.Products.Group" /> associated with this <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation" />.
 </summary>
 <value>The group identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.Group">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Products.Group" /> with the <see cref="P:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.GroupID" />.
 </summary>
 <value>The group.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.#ctor(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation" /> class.
 </summary>
 <param name="assortment">The assortment used in this relation.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.#ctor(Dynamicweb.Ecommerce.Assortments.Assortment,Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation" /> class.
 </summary>
 <param name="assortment">The assortment used in this relation.</param>
 <param name="group">The group used in this relation.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation" /> class.
 </summary>
 <param name="assortmentID">The id of the assortment used in this relation.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation" /> class.
 </summary>
 <param name="assortmentID">The id of the assortment used in this relation.</param>
 <param name="groupID">The id of the group used in this relation.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation" /> class.
 </summary>
 <param name="dataReader">The data reader containing the values used to fill the property values of this instance.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.Fill(System.Data.IDataReader)">
 <summary>
 Fills the assortment group relation property values from the specified data reader.
 </summary>
 <param name="dataReader">The data reader containing the values used to fill the property values of this instance.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.Save">
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.Delete(Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Deletes the assortment relations by the specified group.
 </summary>
 <param name="group">The group to use to find <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation" />s by to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.Delete(Dynamicweb.Ecommerce.Assortments.Assortment,Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Deletes the assortment relations by the specified assortment with the specified group.
 </summary>
 <param name="assortment">The assort to use to find <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation" />s by to delete.</param>
 <param name="group">The group to use to find <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation" />s by to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.Delete(System.String)">
 <summary>
 Deletes the assortment relations by the specified group ID.
 </summary>
 <param name="groupID">The group id to use to find <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation" />s by to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.Delete(Dynamicweb.Ecommerce.Assortments.Assortment,System.String)">
 <summary>
 Deletes the assortment relations by the specified assortment and group ID.
 </summary>
 <param name="assortment">The assort to use to find <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation" />s by to delete.</param>
 <param name="groupID">The group id to use to find <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation" />s by to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.Delete(Dynamicweb.Ecommerce.Products.GroupCollection)">
 <summary>
 Deletes the assortment relations by the specified groups.
 </summary>
 <param name="groups">The group to use to find <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation" />s by to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.Delete(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Deletes the assortment relations for the specified group IDs.
 </summary>
 <param name="groupIDs">The group ids to use to find <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation" />s by to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.Delete(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Assortments.AssortmentRelation})">
 <summary>
 Deletes the specified assortment group relations.
 </summary>
 <param name="assortmentRelations">The assortment group relations to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.GetAssortmentRelationsByGroup(Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Gets the assortment relations by group.
 </summary>
 <param name="group">The group to use to find <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation" />s by.</param>
 <returns>IEnumerable(Of AssortmentRelation).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation.GetAssortmentRelationsByGroupID(System.String)">
 <summary>
 Gets the assortment relations by group ID.
 </summary>
 <param name="groupID">The group id to use to find <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation" />s by.</param>
 <returns>IEnumerable(Of AssortmentRelation).</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem">
 <summary>
 AssortmentItem class.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentItem.AutoID">
 <summary>
 Gets the auto id of this <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" />.
 </summary>
 <value>The automatic identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentItem.RelationAutoID">
 <summary>
 Gets or sets the relation auto id of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation" /> this <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" /> is part of.
 </summary>
 <value>The relation automatic identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentItem.RelationType">
 <summary>
 Gets or sets the type of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation" /> this <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" /> is part of.
 </summary>
 <value>The type of the relation.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentItem.AssortmentID">
 <summary>
 Gets or sets the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" /> this <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" />.
 </summary>
 <value>The assortment identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentItem.LanguageID">
 <summary>
 Gets or sets the language id of the <see cref="T:Dynamicweb.Ecommerce.Products.Product" /> this <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" /> represents.
 </summary>
 <value>The language identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentItem.ProductID">
 <summary>
 Gets or sets the product id of the <see cref="T:Dynamicweb.Ecommerce.Products.Product" /> this <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" /> represents.
 </summary>
 <value>The product identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentItem.ProductVariantID">
 <summary>
 Gets or sets the product variant id of the <see cref="T:Dynamicweb.Ecommerce.Products.Product" /> this <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" /> represents.
 </summary>
 <value>The product variant identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentItem.Assortment">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" /> this <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" /> is part of.
 </summary>
 <value>The assortment.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" /> class.
 </summary>
 <param name="dataReader">The data reader containing the values used to fill the property values of this instance.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.Fill(System.Data.IDataReader)">
 <summary>
 Fills property values from the given data reader.
 </summary>
 <param name="dataReader">The data reader containing the values used to fill the property values of this instance.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.Save">
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.Delete(System.String,System.Int32)">
 <summary>
 Deletes <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" />s with the specified relation type and relation auto ID.
 </summary>
 <param name="relationType">Type of the relation to use to find the assortment items to delete.</param>
 <param name="relationAutoID">The relation auto id to use to find the assortment items to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.Delete(Dynamicweb.Ecommerce.Assortments.AssortmentRelationType,System.Int32)">
 <summary>
 Deletes the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" />s with the specified relation type and relation auto id.
 </summary>
 <param name="relationType">Type of the relation to use to find the assortment items to delete.</param>
 <param name="relationAutoID">The relation auto id to use to find the assortment items to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.Delete(System.String,System.String)">
 <summary>
 Deletes the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" />s with the specified assortment id and language id.
 </summary>
 <param name="assortmentID">The assortment id to use to find assortment items to delete.</param>
 <param name="languageID">The language id to use to find assortment items to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.Delete(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Deletes the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" />s in the specified assortment.
 </summary>
 <param name="assortment">Assortment items related to this <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" /> are deleted.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.Delete(Dynamicweb.Ecommerce.Assortments.AssortmentRelation)">
 <summary>
 Deletes the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" />s with the specified <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation" />.
 </summary>
 <param name="assortmentRelation">The assortment relation used to find assortment items to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.Delete(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Assortments.AssortmentRelation})">
 <summary>
 Deletes the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" />s with the specified <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation" />s.
 </summary>
 <param name="assortmentRelations">The assortment relations used to find assortment items to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.Delete(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Assortments.AssortmentItem})">
 <summary>
 Deletes the specified <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" />s.
 </summary>
 <param name="assortmentItems">The assortment item list containing the assortment items to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.GetAllAssortmentItems">
 <summary>
 Gets all <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" />s.
 </summary>
 <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all assortment items.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.GetAssortmentItemsByAssortment(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Gets all <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" />s related to the specified <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" />.
 </summary>
 <param name="assortment">Assortment items with relations to this assortment are returned.</param>
 <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all assortment items related to the specified assortment.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.GetAssortmentItemsByAssortmentID(System.String,System.String)">
 <summary>
 Gets all <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" />s related to the specified assortment and language.
 </summary>
 <param name="assortmentID">The assortment id to use to find assortment items.</param>
 <param name="languageID">The language id to use to find assortment items.</param>
 <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all assortment items related to the specified assortment in the specified language.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.GetAssortmentItemsByLanguage(Dynamicweb.Ecommerce.International.Language)">
 <summary>
 Gets all <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" />s in the specified <see cref="T:Dynamicweb.Ecommerce.International.Language" />.
 </summary>
 <param name="language">The language used to find assortment items.</param>
 <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all assortment items in the specified language.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.GetAssortmentItemsByLanguageID(System.String)">
 <summary>
 Gets all <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" />s related to the specified language.
 </summary>
 <param name="languageID">The language id used to find assortment items.</param>
 <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all assortment items related to the specified language.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.GetAssortmentItemsByAssortmentRelation(Dynamicweb.Ecommerce.Assortments.AssortmentRelation)">
 <summary>
 Gets all <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" />s with the specified <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation" />.
 </summary>
 <param name="assortmentRelation">The assortment relation used to find assortment items.</param>
 <returns>IEnumerable(Of AssortmentItem).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.GetAssortmentItemsByAssortmentRelation(System.String,System.Int32)">
 <summary>
 Gets all <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" />s with the specified relation type and relation auto id.
 </summary>
 <param name="relationType">Type of the relation.</param>
 <param name="relationAutoID">The relation auto ID.</param>
 <returns>IEnumerable(Of AssortmentItem).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.GetAssortmentsByProduct(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Gets all <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" />s representing the specified <see cref="T:Dynamicweb.Ecommerce.Products.Product" />.
 </summary>
 <param name="product">Assortment items representing this product are found.</param>
 <returns>AssortmentCollection.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.GetAssortmentsByProductID(System.String,System.String)">
 <summary>
 Gets all <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem" />s representing the product with the specified id and variant id.
 </summary>
 <param name="productID">The id of the product that is represented by the assortment items.</param>
 <param name="variantID">The variant id of the product that is represented by the assortment items.</param>
 <returns>AssortmentCollection.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentItem.ClearCache">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Assortments.AssortmentPermission">
 <summary>
 AssortmentPermission class
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.AutoID">
 <summary>
 Gets the auto ID of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentPermission" />.
 </summary>
 <value>The automatic identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.AssortmentID">
 <summary>
 Gets or sets the id of the associated <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment" />.
 </summary>
 <value>The assortment ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.UserID">
 <summary>
 Gets or sets the user/group ID.
 </summary>
 <value>The user/group ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.Assortment">
 <summary>
 Gets the assortment.
 </summary>
 <value>The assortment.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentPermission" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.#ctor(System.String,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentPermission" /> class.
 </summary>
 <param name="assortmentID">The assortment identifier.</param>
 <param name="userID">The user identifier.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.#ctor(Dynamicweb.Ecommerce.Assortments.Assortment,Dynamicweb.Security.UserManagement.User)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentPermission" /> class.
 </summary>
 <param name="assortment">The assortment.</param>
 <param name="user">The user.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.#ctor(Dynamicweb.Ecommerce.Assortments.Assortment,Dynamicweb.Security.UserManagement.Group)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentPermission" /> class.
 </summary>
 <param name="assortment">The assortment.</param>
 <param name="group">The group.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentPermission" /> class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.Fill(System.Data.IDataReader)">
 <summary>
 Fills the specified data reader.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.Save">
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.GetAllAssortmentPermissions">
 <summary>
 Gets all assortment permissions.
 </summary>
 <returns>IEnumerable(Of AssortmentPermission).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.GetAssortmentPermissionsByUserID(System.Int32)">
 <summary>
 Gets the assortment permissions by user ID.
 </summary>
 <param name="userID">The user ID.</param>
 <returns>IEnumerable(Of AssortmentPermission).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.GetAssortmentPermissionsByUser(Dynamicweb.Security.UserManagement.User)">
 <summary>
 Gets the assortment permissions by user.
 </summary>
 <param name="user">The user.</param>
 <returns>IEnumerable(Of AssortmentPermission).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.GetAssortmentPermissionsByUser(Dynamicweb.Security.UserManagement.User,System.Boolean)">
 <summary>
 Gets the assortment permissions by user.
 </summary>
 <param name="user">The user.</param>
 <param name="includeGroups">If set to <c>true</c> include the user's groups as well.</param>
 <returns>IEnumerable(Of AssortmentPermission).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.GetAssortmentIDsByUserID(System.Int32)">
 <summary>
 Gets the assortment IDs by user.
 </summary>
 <param name="userID">The user ID.</param>
 <returns>IEnumerable(Of System.String).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.GetAssortmentIDsByUser(Dynamicweb.Security.UserManagement.User)">
 <summary>
 Gets the assortment IDs by user.
 </summary>
 <param name="user">The user.</param>
 <returns>IEnumerable(Of System.String).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.GetAssortmentIDsForCurrentUser">
 <summary>
 Gets the assortment IDs for current user. If not user is logged in, the anonymous assortments is assumed.
 </summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1">list</see> of assortment ids for the current user.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.GetAssortmentPermissionsByAssortmentID(System.String)">
 <summary>
 Gets the assortment permissions by assortment ID.
 </summary>
 <param name="assortmentID">The assortment ID.</param>
 <returns>IEnumerable(Of AssortmentPermission).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.GetAssortmentPermissionsByAssortment(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Gets the assortment permissions by assortment.
 </summary>
 <param name="assortment">The assortment.</param>
 <returns>IEnumerable(Of AssortmentPermission).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentPermission.ClearCache">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation">
 <summary>
 Assortment product relation class
 </summary>
 <seealso cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation" />
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.ProductID">
 <summary>
 Gets or sets the product identifier.
 </summary>
 <value>The product identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.ProductVariantID">
 <summary>
 Gets or sets the product variant identifier.
 </summary>
 <value>The product variant identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.Product">
 <summary>
 Gets the product.
 </summary>
 <value>The product.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.#ctor(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation" /> class.
 </summary>
 <param name="assortment">The assortment.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.#ctor(Dynamicweb.Ecommerce.Assortments.Assortment,Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation" /> class.
 </summary>
 <param name="assortment">The assortment.</param>
 <param name="product">The product.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation" /> class.
 </summary>
 <param name="assortmentID">The assortment identifier.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation" /> class.
 </summary>
 <param name="assortmentID">The assortment identifier.</param>
 <param name="productID">The product identifier.</param>
 <param name="productVariantID">The product variant identifier.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation" /> class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.Fill(System.Data.IDataReader)">
 <summary>
 Fills the assortment relation properties from the specified data reader.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.Save">
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.Delete(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Deletes the assortment relations by the specified product.
 </summary>
 <param name="product">The product.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.Delete(System.String,System.String)">
 <summary>
 Deletes the assortment relations by the specified product and product variant ID.
 </summary>
 <param name="productID">The product ID.</param>
 <param name="productVariantID">The product variant ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.Delete(Dynamicweb.Ecommerce.Assortments.Assortment,Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Deletes the assortment relations by the specified assortment and product.
 </summary>
 <param name="assortment">The assortment.</param>
 <param name="product">The product.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.Delete(Dynamicweb.Ecommerce.Assortments.Assortment,System.String,System.String)">
 <summary>
 Deletes the assortment relations by the specified assortment, product ID and product variant ID.
 </summary>
 <param name="assortment">The assortment.</param>
 <param name="productID">The product ID.</param>
 <param name="productVariantID">The product variant ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.Delete(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Deletes the assortment relations by the specified products.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.Delete(Dynamicweb.Ecommerce.Assortments.Assortment,Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Deletes the assortment relations by the specified assortment and products.
 </summary>
 <param name="assortment">The assortment.</param>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.Delete(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Assortments.AssortmentRelation})">
 <summary>
 Deletes the specified assortment product relations.
 </summary>
 <param name="assortmentRelations">The assortment product relations.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.GetAssortmentRelationsByProduct(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Gets the assortment relations by specified product.
 </summary>
 <param name="product">The product.</param>
 <returns>Returns an <seealso cref="T:System.Collections.Generic.IEnumerable`1"></seealso> by the specified <seealso cref="T:Dynamicweb.Ecommerce.Products.Product"></seealso></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation.GetAssortmentRelationsByProductID(System.String,System.String)">
 <summary>
 Gets the assortment relations by product ID and product variant ID.
 </summary>
 <param name="productID">The product ID.</param>
 <param name="productVariantID">The product variant ID.</param>
 <returns>Returns an <seealso cref="T:System.Collections.Generic.IEnumerable`1"></seealso> by the specified  product ID and product variant ID.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation">
 <summary>
 Assortment relation base class
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.AutoID">
 <summary>
 Gets the automatic ID.
 </summary>
 <value>The automatic ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.AssortmentID">
 <summary>
 Gets or sets the assortment ID.
 </summary>
 <value>The assortment ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.Type">
 <summary>
 Gets the type of the relation.
 </summary>
 <value>The relation type.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.TypeName">
 <summary>
 Gets the name of the relation type.
 </summary>
 <value>The name of the relation type.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.#ctor(Dynamicweb.Ecommerce.Assortments.AssortmentRelationType)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation" /> class.
 </summary>
 <param name="relationType">Type of the relation.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.#ctor(Dynamicweb.Ecommerce.Assortments.AssortmentRelationType,Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation" /> class.
 </summary>
 <param name="relationType">Type of the relation.</param>
 <param name="assortment">The assortment.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.#ctor(Dynamicweb.Ecommerce.Assortments.AssortmentRelationType,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation" /> class.
 </summary>
 <param name="relationType">Type of the relation.</param>
 <param name="assortmentID">The assortment ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.Fill(System.Data.IDataReader)">
 <summary>
 Fills the assortment relation properties from the specified data reader.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.Save">
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.ClearCache">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.Delete(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Deletes the assortment relations for the specified assortment.
 </summary>
 <param name="assortment">The assortment.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.Delete(Dynamicweb.Ecommerce.Assortments.AssortmentCollection)">
 <summary>
 Deletes the assortment relations for the specified assortments.
 </summary>
 <param name="assortments">The assortments.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.Delete(System.String)">
 <summary>
 Deletes the assortment relations for the specified assortment ID.
 </summary>
 <param name="assortmentID">The assortment ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.Delete(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Deletes the specified assortment ids.
 </summary>
 <param name="assortmentIDs">The assortment i ds.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.Delete(Dynamicweb.Ecommerce.Assortments.AssortmentRelationType)">
 <summary>
 Deletes the specified relation type.
 </summary>
 <param name="relationType">Type of the relation.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.GetAllAssortmentRelations">
 <summary>
 Gets all assortment relations.
 </summary>
 <returns>Collection of assortment relations</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.GetAssortmentRelationsByRelationType(Dynamicweb.Ecommerce.Assortments.AssortmentRelationType)">
 <summary>
 Gets the assortment relations by specified relation type.
 </summary>
 <param name="relationType">Type of the relation.</param>
 <returns>Returns an <seealso cref="T:System.Collections.Generic.IEnumerable`1"></seealso> by the specified relation type.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.GetAssortmentRelationsByAssortment(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Gets the assortment relations by the specified assortment.
 </summary>
 <param name="assortment">The assortment.</param>
 <returns>Returns an <seealso cref="T:System.Collections.Generic.IEnumerable`1"></seealso> by the specified assortment.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.GetAssortmentRelationsByAssortmentID(System.String)">
 <summary>
 Gets the assortment relations by the specified assortment ID.
 </summary>
 <param name="assortmentID">The assortment ID.</param>
 <returns>Return an <seealso cref="T:System.Collections.Generic.IEnumerable`1"></seealso> by the specified assortment ID.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.GetAssortmentRelationsByAssortment(Dynamicweb.Ecommerce.Assortments.Assortment,Dynamicweb.Ecommerce.Assortments.AssortmentRelationType)">
 <summary>
 Gets the assortment relations by the specified assortment and relation type.
 </summary>
 <param name="assortment">The assortment.</param>
 <param name="relationType">Type of the relation.</param>
 <returns>Returns an <seealso cref="T:System.Collections.Generic.IEnumerable`1"></seealso> by the specified assortment and relation type.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRelation.GetAssortmentRelationsByAssortmentID(System.String,Dynamicweb.Ecommerce.Assortments.AssortmentRelationType)">
 <summary>
 Gets the assortment relations by the specified assortment ID and relation type.
 </summary>
 <param name="assortmentID">The assortment ID.</param>
 <param name="relationType">Type of the relation.</param>
 <returns>Returns an <seealso cref="T:System.Collections.Generic.IEnumerable`1"></seealso> by the specified assortment ID and relation type.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelationType">
 <summary>
 Describes the different relation types.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Assortments.AssortmentRelationType.Shop">
 <summary>
 Assortment relation to a shop.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Assortments.AssortmentRelationType.Group">
 <summary>
 Assortment relation to a group.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Assortments.AssortmentRelationType.Product">
 <summary>
 Assortment relation to a product.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.SaveAssortment(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Saves the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment"/>.
 </summary>
 <param name="assortment">The assortment object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.DeleteAssortment(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Deletes the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment"/>.
 </summary>
 <param name="assortment">The assortment object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.FlagAssortmentForRebuild(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Flags the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment"/> for build.
 </summary>
 <param name="assortment">The assortment object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.GetAssortmentsForBuild">
 <summary>
 Gets assortments which require build.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.SaveAssortmentItem(Dynamicweb.Ecommerce.Assortments.AssortmentItem)">
 <summary>
 Saves the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem"/>.
 </summary>
 <param name="assortmentItem">The assortment item object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.DeleteAssortmentItems(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Assortments.AssortmentItem})">
 <summary>
 Deletes the assortment items,
 </summary>
 <param name="assortmentItems">The collection of the assortment items.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.DeleteGroupAssortmentRelations(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation})">
 <summary>
 Deletes the group assortment relations.
 </summary>
 <param name="assortmentRelations">The collection of the group assortment relations.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.DeleteProductAssortmentRelations(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation})">
 <summary>
 Deletes the product assortment relations.
 </summary>
 <param name="assortmentRelations">The collection of the product assortment relations.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.DeleteShopAssortmentRelations(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation})">
 <summary>
 Deletes the shop assortment relations.
 </summary>
 <param name="assortmentRelations">The collection of the shop assortment relations.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.SaveRelationTypeOfProduct(Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation)">
 <summary>
 Saves the product assortment relation.
 </summary>
 <param name="assortmentRelation">The product assortment relation object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.SaveRelationTypeOfGroup(Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation)">
 <summary>
 Saves the group assortment relation.
 </summary>
 <param name="assortmentRelation">The group assortment relation object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.SaveRelationTypeOfShop(Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation)">
 <summary>
 Saves the shop assortment relation.
 </summary>
 <param name="assortmentRelation">The shop assortment relation object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.RebuildAssortment(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Starts the assortment building.
 </summary>
 <param name="assortment">The assortment object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.GetAllAssortments">
 <summary>
 Gets all assortments.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.GetAllAssortmentItems">
 <summary>
 Gets all assortment items.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.GetAllAssortmentRelations">
 <summary>
 Gets all assortment relations.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.GetAllAssortmentPermissions">
 <summary>
 Gets all assortment permissions.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentPermission"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.DeleteAssortmentPermission(Dynamicweb.Ecommerce.Assortments.AssortmentPermission)">
 <summary>
 Deletes the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentPermission"/>.
 </summary>
 <param name="assortmentPermission">The assortment permission object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentRepository.SaveAssortmentPermission(Dynamicweb.Ecommerce.Assortments.AssortmentPermission)">
 <summary>
 Saves the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentPermission"/>.
 </summary>
 <param name="assortmentPermission">The assortment permission object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.SaveAssortment(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Saves the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment"/>.
 </summary>
 <param name="assortment">The assortment object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.DeleteAssortment(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Deletes the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment"/> and all its items, relations and permissions.
 </summary>
 <param name="assortment">The assortment object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentById(System.String)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment"/> by ID.
 </summary>
 <param name="assortmentId">The assortment ID.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentById(System.String,System.Boolean)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment"/> by ID.
 </summary>
 <param name="assortmentId">The assortment ID.</param>
 <param name="showUntranslated">Determines whether untranslated assortment could be returned.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentById(System.String,System.String)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment"/> by ID.
 </summary>
 <param name="assortmentId">The assortment ID.</param>
 <param name="languageId">The language ID.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAllAssortments">
 <summary>
 Gets all assortments.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetActiveAssortments">
 <summary>
 Gets all active assortments.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.HasActiveAssortments">
 <summary>
 Determines whether there are active assortments.
 </summary>
 <returns><c>True</c>, if solution have one or more active assortments, otherwise <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetActiveAssortmentIds">
 <summary>
 Gets the IDs of the active assortments.
 </summary>
 <returns>A collection of the assortment IDs.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetNotActiveAssortmentIds">
 <summary>
 Gets the IDs of the not active assortments.
 </summary>
 <returns>A collection of the assortment IDs.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAllowAnonymousUsersAssortmentIds">
 <summary>
 Gets the ids of all active assortments for the current language that are available to anonymous uses.
 </summary>
 <returns>A collection of the assortment IDs.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.FlagAssortmentForRebuild(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Flags the assortment for rebuild.
 </summary>
 <param name="assortment">The assortment object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.BuildAssortment(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Starts the assortment building.
 </summary>
 <param name="assortment">The assortment object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentsForBuild">
 <summary>
 Gets assortments which require build.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.ClearAssortmentCache">
 <summary>
 Clears the assortments cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.SaveAssortmentItem(Dynamicweb.Ecommerce.Assortments.AssortmentItem)">
 <summary>
 Saves the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem"/>.
 </summary>
 <param name="assortmentItem">The assortment item object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.DeleteAssortmentItem(Dynamicweb.Ecommerce.Assortments.AssortmentItem)">
 <summary>
 Deletes the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem"/>
 </summary>
 <param name="assortmentItem">The assortment item object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.DeleteAssortmentItems(System.String,System.String)">
 <summary>
 Deletes the assortment items.
 </summary>
 <param name="assortmentId">The assortment ID.</param>
 <param name="languageId">The language ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.DeleteAssortmentItems(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Deletes the assortment items.
 </summary>
 <param name="assortment">The assortment object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.DeleteAssortmentItems(Dynamicweb.Ecommerce.Assortments.AssortmentRelation)">
 <summary>
 Deletes the assortment items.
 </summary>
 <param name="assortmentRelation">The assortment relation object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.DeleteAssortmentItems(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Assortments.AssortmentRelation})">
 <summary>
 Deletes the assortment items.
 </summary>
 <param name="assortmentRelations">The assortment relations collection.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.DeleteAssortmentItems(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Assortments.AssortmentItem})">
 <summary>
 Deletes the assortment items.
 </summary>
 <param name="assortmentItems">The assortment items collection.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAllAssortmentItems">
 <summary>
 Gets all assortment items.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentItemsByAssortmentId(System.String,System.String)">
 <summary>
 Gets the assortment items by assortment ID.
 </summary>
 <param name="assortmentId">The assortment ID.</param>
 <param name="languageId">The language ID.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentItemsByLanguageId(System.String)">
 <summary>
 Gets the assortment items by language ID.
 </summary>
 <param name="languageId">The language ID.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentItemsByAssortmentRelation(System.String,System.Int32)">
 <summary>
 Gets the assortment items by relation type.
 </summary>
 <param name="relationType">The relation type.</param>
 <param name="relationAutoId">The relation auto-ID.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentItem"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentsByProduct(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Gets the assortments by product.
 </summary>
 <param name="product">The product object.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentsByProductId(System.String,System.String)">
 <summary>
 Gets the assortments by product ID.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="variantId">The variant ID.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.Assortment"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.ClearAssortmentItemCache">
 <summary>
 Clears the assortment items cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.DeleteAssortmentRelations(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Deletes the assortment relations.
 </summary>
 <param name="assortment">The assortment object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.DeleteAssortmentRelation(Dynamicweb.Ecommerce.Assortments.AssortmentRelation)">
 <summary>
 Deletes the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation"/>.
 </summary>
 <param name="assortmentRelation">The assortment relation object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.DeleteAssortmentRelations(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Assortments.AssortmentRelation})">
 <summary>
 Deletes the assortment relations.
 </summary>
 <param name="assortmentRelations">The collection of the assortment relations.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.DeleteGroupAssortmentRelations(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation})">
 <summary>
 Deletes the group assortment relations.
 </summary>
 <param name="assortmentRelations">The group assortment relations collection.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.DeleteGroupAssortmentRelations(Dynamicweb.Ecommerce.Assortments.Assortment,System.String)">
 <summary>
 Deletes the group assortment relations.
 </summary>
 <param name="assortment">The assortment object.</param>
 <param name="groupId">The group ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.DeleteProductAssortmentRelations(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation})">
 <summary>
 Deletes the product assortment relations.
 </summary>
 <param name="assortmentRelations">The product assortment relations collection.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.DeleteProductAssortmentRelations(Dynamicweb.Ecommerce.Assortments.Assortment,System.String,System.String)">
 <summary>
 Deletes the product assortment relations.
 </summary>
 <param name="assortment">The assortment object.</param>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The product variant ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.DeleteShopAssortmentRelations(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation})">
 <summary>
 Deletes the shop assortment relations.
 </summary>
 <param name="assortmentRelations">The shop assortment relations collection.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.DeleteShopAssortmentRelations(Dynamicweb.Ecommerce.Assortments.Assortment,System.String)">
 <summary>
 Deletes the assortment relations.
 </summary>
 <param name="assortment">The assortment object.</param>
 <param name="shopId">The shop ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.SaveAssortmentRelation(Dynamicweb.Ecommerce.Assortments.AssortmentRelation)">
 <summary>
 Saves the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation"/>.
 </summary>
 <param name="assortmentRelation">The assortment relation object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAllAssortmentRelations">
 <summary>
 Gets all assortment relations.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentRelationsByRelationType(Dynamicweb.Ecommerce.Assortments.AssortmentRelationType)">
 <summary>
 Gets the assortment relations by relation type.
 </summary>
 <param name="relationType">The relation type.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentRelationsByAssortmentId(System.String)">
 <summary>
 Gets the assortment relations by assortment ID.
 </summary>
 <param name="assortmentId">The assortment ID.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentRelationsByAssortmentId(System.String,Dynamicweb.Ecommerce.Assortments.AssortmentRelationType)">
 <summary>
 Gets the assortment relations by assortment ID.
 </summary>
 <param name="assortmentId">The assortment ID.</param>
 <param name="relationType">The relation type.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentRelationsByGroupId(System.String)">
 <summary>
 Gets the assortment relations by group ID.
 </summary>
 <param name="groupId">The group ID.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentGroupRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentRelationsByProductId(System.String,System.String)">
 <summary>
 Gets the assortment relations by product ID.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The product variant ID.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentProductRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentRelationsByShopId(System.String)">
 <summary>
 Gets the assortment relations by shop ID.
 </summary>
 <param name="shopId">The shop ID.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.ClearAssortmentRelationCache">
 <summary>
 Clears the assortment relations cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.DeleteAssortmentPermission(Dynamicweb.Ecommerce.Assortments.AssortmentPermission)">
 <summary>
 Deletes the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentPermission"/>.
 </summary>
 <param name="assortmentPermission">The assortment permission object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.SaveAssortmentPermission(Dynamicweb.Ecommerce.Assortments.AssortmentPermission)">
 <summary>
 Saves the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentPermission"/>.
 </summary>
 <param name="assortmentPermission">The assortment permission object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAllAssortmentPermissions">
 <summary>
 Gets all assortment permissions.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentPermission"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentPermissionsByUser(Dynamicweb.Security.UserManagement.User)">
 <summary>
 Gets the assortment permission for user.
 </summary>
 <param name="user">The user.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentPermission"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentPermissionsByUser(Dynamicweb.Security.UserManagement.User,System.Boolean)">
 <summary>
 Gets the assortment permission for user.
 </summary>
 <param name="user">The user.</param>
 <param name="includeGroups">Determines whether assortment permissions for user groups should be included in result collection.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentPermission"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentIdsByUser(Dynamicweb.Security.UserManagement.User)">
 <summary>
 Gets the assortment IDs by user.
 </summary>
 <param name="user">The user.</param>
 <returns>A collection of the assortment IDs.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.GetAssortmentPermissionsByAssortmentId(System.String)">
 <summary>
 Gets the assortment permission IDs by user. 
 </summary>
 <param name="assortmentId">The assortment ID.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentPermission"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentService.ClearAssortmentPermissionCache">
 <summary>
 Clears the assortment relations cache.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation">
 <summary>
 Assortment shop relation class
 </summary>
 <seealso cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentRelation" />
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation.ShopID">
 <summary>
 Gets or sets the shop ID.
 </summary>
 <value>The shop ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation.Shop">
 <summary>
 Gets the shop.
 </summary>
 <value>The shop.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation.#ctor(Dynamicweb.Ecommerce.Assortments.Assortment)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation" /> class.
 </summary>
 <param name="assortment">The assortment.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation.#ctor(Dynamicweb.Ecommerce.Assortments.Assortment,Dynamicweb.Ecommerce.Shops.Shop)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation" /> class.
 </summary>
 <param name="assortment">The assortment.</param>
 <param name="shop">The shop.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation" /> class.
 </summary>
 <param name="assortmentID">The assortment ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation" /> class.
 </summary>
 <param name="assortmentID">The assortment ID.</param>
 <param name="shopID">The shop ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation" /> class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation.Fill(System.Data.IDataReader)">
 <summary>
 Fills the assortment shop relation properties from the specified data reader.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation.Save">
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation.Delete(Dynamicweb.Ecommerce.Assortments.Assortment,System.String)">
 <summary>
 Deletes the assortment relations by the specified assortment, shop ID.
 </summary>
 <param name="assortment">The assortment.</param>
 <param name="shopID">The shop ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation.Delete(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Assortments.AssortmentRelation})">
 <summary>
 Deletes the assortment relations.
 </summary>
 <param name="assortmentRelations">The assortment relations.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation.GetAssortmentRelationsByShop(Dynamicweb.Ecommerce.Shops.Shop)">
 <summary>
 Gets the assortment relations by shop.
 </summary>
 <param name="shop">The shop.</param>
 <returns>IEnumerable(Of AssortmentRelation).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.AssortmentShopRelation.GetAssortmentRelationsByShopID(System.String)">
 <summary>
 Gets the assortment relations by shop.
 </summary>
 <param name="shopID">The shop ID.</param>
 <returns>IEnumerable(Of AssortmentRelation).</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Assortments.AssortmentSortBy">
 <summary>
 Sorting fields for assortments.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Assortments.AssortmentSortBy.AssortmentID">
 <summary>
 Assortment ID.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Assortments.AssortmentSortBy.Name">
 <summary>
 Assortment Name.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Assortments.AssortmentSortDirection">
 <summary>
 Sorting directions for assortments.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Assortments.AssortmentSortDirection.Ascending">
 <summary>
 Sort ascending.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Assortments.AssortmentSortDirection.Descending">
 <summary>
 Sort descending.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Assortments.ProductItem">
 <summary>
 ProductItem class.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Assortments.ProductItem.ProductID">
 <summary>
 The product identifier
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Assortments.ProductItem.ProductVariantID">
 <summary>
 The product variant identifier
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Assortments.ProductItem.RelationType">
 <summary>
 The relation type
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Assortments.ProductItem.RelationAutoID">
 <summary>
 The relation automatic identifier
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.ProductItem.#ctor(System.String,System.String,System.String,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Assortments.ProductItem"/> class.
 </summary>
 <param name="id">The identifier.</param>
 <param name="variantId">The variant identifier.</param>
 <param name="relationType">Type of the relation.</param>
 <param name="relationAutoID">The relation automatic identifier.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.ProductItem.Equals(Dynamicweb.Ecommerce.Assortments.ProductItem,Dynamicweb.Ecommerce.Assortments.ProductItem)">
 <summary>
 Determines whether two specified System.String objects have the same value.
 </summary>
 <param name="item1">The first item to compare.</param>
 <param name="item2">The second item to compare.</param>
 <returns><c>true</c> if equal, <c>false</c> otherwise.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.ProductItem.GetHashCode(Dynamicweb.Ecommerce.Assortments.ProductItem)">
 <summary>
 Returns a hash code for this instance.
 </summary>
 <param name="item">The item.</param>
 <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Assortments.ProductItemEqualityComparer">
 <summary>
 Class ProductItemEqualityComparer.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.ProductItemEqualityComparer.Equals(Dynamicweb.Ecommerce.Assortments.ProductItem,Dynamicweb.Ecommerce.Assortments.ProductItem)">
 <summary>
 Determines whether two specified System.String objects have the same value.
 </summary>
 <param name="item1">The first item to compare.</param>
 <param name="item2">The second item to compare.</param>
 <returns><c>true</c> if equal, <c>false</c> otherwise.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.ProductItemEqualityComparer.GetHashCode(Dynamicweb.Ecommerce.Assortments.ProductItem)">
 <summary>
 Returns a hash code for this instance.
 </summary>
 <param name="item">The item.</param>
 <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Assortments.UserMacro">
 <summary>
 UserMacro class.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Macros.Macro" />
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.UserMacro.Evaluate(System.String)">
 <summary>
 Evaluates the specified action.
 </summary>
 <param name="action">The action.</param>
 <returns>The value of the action that was evaluated; <c>null</c> if the action did not evaluate to a specific value.</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.UserMacro.Name">
 <summary>
 Gets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Assortments.UserMacro.SupportedActions">
 <summary>
 Gets the supported actions.
 </summary>
 <value>The supported actions.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Assortments.UserDeleteSubscriber">
 <summary>
 UserDeleteSubscriber class.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationSubscriber" />
</member>
<member name="M:Dynamicweb.Ecommerce.Assortments.UserDeleteSubscriber.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Called when the <see cref="F:Dynamicweb.Security.UserManagement.Notifications.Notifications.UserDeleted" /> notification fires.
 </summary>
 <param name="notification">The notification that was fired. This value is in lowercase.</param>
 <param name="args">The arguments related to the fired notification.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.CartCalculationManager">
 <summary>
     CartCalculationManager class.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CartCalculationManager.CalculateCart(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     Calculates the cart.
 </summary>
 <param name="cart">The cart.</param>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.CartCalculationProvider">
 <summary>
     Represents a cart calculation provider.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CartCalculationProvider.CalculateCart(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     Calculate the cart.
 </summary>
 <param name="cart">The order.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.CartReEnterAction">
 <summary>
     Enum CartReEnterAction
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.CartReEnterAction.FirstStep">
 <summary>
     The first step
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.CartReEnterAction.LastStepVisited">
 <summary>
     The last step visited
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.CheckoutHandler">
 <summary>
     A CheckoutHandler does all the business logic required to complete an order. Inherit from this base class to extend
     to checkout logic in
     Dynamicweb Ecommerce Cart.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.AddIns.ConfigurableAddIn" />
 <remarks>Make use of the Dynamicweb Configurable AddIn API to add editable properties to the checkout handler.</remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.CheckoutHandler.OrderIdRequestName">
 <summary>
     Returns the name of the request value that CartV2 should look for in order to forward the call to the
     CheckoutHandler's Redirect method.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.CheckoutHandler.HasServerCallback">
 <summary>
     Gets or sets a value indicating whether the payment gateway makes a callback request to the server with payment
     transaction details or not.
     Use order.SaveGatewayResult to save transaction details in callback processing.
     Default value is <c>false</c>.
 </summary>
 <value><c>true</c> if this instance has server callback; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.CheckoutHandler.CheckoutHandlerOrderId">
 <summary>
     Gets the OrderId based on the CheckoutHandler redirect parameter.
 </summary>
 <value>The checkout handler order identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.CheckoutHandler.ShouldRedirectToCheckoutHandler">
 <summary>
     Gets a value indicating whether CartV2 should redirect to CheckoutHandler.
 </summary>
 <value><c>true</c> if CartV2 should redirect to CheckoutHandler; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.CheckoutHandler.ParameterSeparator">
 <summary>
     Gets the string used as parameter separator when  FormSubmit is called.
 </summary>
 <value>The parameter separator.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.StartCheckout(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     This method is called when the checkout procedure is started and the order is handled to the checkout handler.
 </summary>
 <param name="order">The order that need to be checked out.</param>
 <returns>The module output.</returns>
 <example>
     <code title="Example"
         description="This is the actual implementation of the default checkout handler which is called if no checkout handler is selected on the payment."
         lang="VB.NET">
 Public Overrides Function StartCheckout(ByVal order As eCommerce.Orders.Order) As String
 LogEvent(order, "StartCheckout")
 Try
 SetOrderComplete(order)
 LogEvent(order, "SetOrderComplete succeeded")
 Catch ex As Exception
 LogError(order, "SetOrderComplete failed with the message: {0}", ex.Message)
 End Try
 CheckoutDone(order)
 RedirectToCart(order)
 Return Nothing
 End Function</code>
 </example>
 <remarks>
     Return a string to control the module output. If a redirect is made, like in the example, it is not needed to
     return a string.
 </remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.Redirect(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     <para>Function that is called from CartV2 when OrderIdRequestName is in the Request.</para>
     <para>Implement this method to receive redirects from CartV2</para>
 </summary>
 <param name="order">The order with order ID equal to the request OrderIdRequestName</param>
 <returns>Returns the output to the module.</returns>
 <example>
     <code title="Example"
         description="Example of how to create an url that will be redirected to this checkout handler's Redirect method when called:"
         lang="C#">//Write the port if it is not default
 var portString = HttpContext.Current.Request.Url.IsDefaultPort ? "" : string.Format(":{0}", HttpContext.Current.Request.Url.Port);
 var pageId = Dynamicweb.Context.Current.Request("ID") == null ? string.Empty : string.Format("ID={0}&amp;", Dynamicweb.Context.Current.Request("ID"));
 //Url
 var myUrl = string.Format("{0}://{1}{2}/Default.aspx?{3}{4}={5}",
 HttpContext.Current.Request.Url.Scheme,
 HttpContext.Current.Request.Url.Host,
 portString,
 pageId,
 OrderIdRequestName,
 order.Id);</code>
 </example>
 <remarks>
     <para>The most common use of this method is to receive callbacks and redirect urls from a gateway.</para>
     <para>
         To enable the Redirect method to be called on a callback parse an url with the current page id and the order id
         in the query string to the gateway as the
         callback url. The order id must be stored in a query string variable named with the return value of the
         property OrderIdRequestName of the CheckoutHandler base
         class.
     </para>
     <para></para>
     <para>
         Return a string to control the module output. If a redirect is made within the method, it is not needed to
         return a string.
     </para>
 </remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.CheckoutDone(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     This method should be called when the handler is done with the checkout even if the checkout fails.
 </summary>
 <param name="order">The order</param>
 <example>
     <code title="Example"
         description="This is the actual implementation of the default checkout handler which is called if no checkout handler is selected on the payment."
         lang="VB.NET">Public Overrides Function StartCheckout(ByVal order As eCommerce.Orders.Order) As String
 LogEvent(order, "StartCheckout")
 Try
 SetOrderComplete(order)
 LogEvent(order, "SetOrderComplete succeeded")
 Catch ex As Exception
 LogError(order, "SetOrderComplete failed with the message: {0}", ex.Message)
 End Try
 CheckoutDone(order)
 RedirectToCart(order)
 Return Nothing
 End Function</code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.RedirectToCart(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     This method should be called when ready to redirect back to the cart.
 </summary>
 <param name="order">The order.</param>
 <example>
     <code title="Example"
         description="This is the actual implementation of the default checkout handler which is called if no checkout handler is selected on the payment."
         lang="VB.NET">Public Overrides Function StartCheckout(ByVal order As eCommerce.Orders.Order) As String
 LogEvent(order, "StartCheckout")
 Try
 SetOrderComplete(order)
 LogEvent(order, "SetOrderComplete succeeded")
 Catch ex As Exception
 LogError(order, "SetOrderComplete failed with the message: {0}", ex.Message)
 End Try
 CheckoutDone(order)
 RedirectToCart(order)
 Return Nothing
 End Function</code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.SubmitForm(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
     Submits a form to e.g. a gateway
 </summary>
 <param name="formAction">The url of the action</param>
 <param name="hiddenInputs">Dictionary of input name and input value</param>
 <example>
     <code title="Example" description="" lang="C#">string myMerchant;
 string myPriceFormatted;
 string myCurrency;
 ...
 var formValues = new Dictionary&lt;string, string&gt;
 {
 {"merchant", myMerchantId},
 {"amount", myPriceFormatted},
 {"currency", myCurrency}
 }
 SubmitForm("https://secure.somegateway.com/authorize", formValues);</code>
 </example>
 <remarks>
     The generated form is posted with javascript. If you need to be able to post without javascript, just render a
     template with a form and a
     submit button.
 </remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.SubmitForm(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
 <summary>
     Submits a form to e.g. a gateway
 </summary>
 <param name="formAction">The url of the action</param>
 <param name="hiddenInputs">Dictionary of input name and input value</param>
 <param name="urlEncodeAtPost">if set to <c>true</c> [URL encode at post].</param>
 <example>
     <code title="Example" description="" lang="C#">string myMerchant;
 string myPriceFormatted;
 string myCurrency;
 ...
 var formValues = new Dictionary&lt;string, string&gt;
 {
 {"merchant", myMerchantId},
 {"amount", myPriceFormatted},
 {"currency", myCurrency}
 }
 SubmitForm("https://secure.somegateway.com/authorize", formValues);</code>
 </example>
 <remarks>
     The generated form is posted with javascript. If you need to be able to post without javascript, just render a
     template with a form and a
     submit button.
 </remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.SetOrderComplete(Dynamicweb.Ecommerce.Orders.Order,System.String)">
 <summary>
     Sets the transaction number and performs the logic for setting the order complete
 </summary>
 <param name="order">The order to set complete</param>
 <param name="transactionNumber">The transaction number</param>
 <example>
     <code title="Example1" description="" lang="C#">Order myOrder;
 // Get transaction number from gateway
 string transNum;
 ...
 // Set the order complete
 SetOrderComplete(myOrder, transNum);</code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.SetOrderComplete(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     Performs the logic for setting the order complete
 </summary>
 <param name="order">The order to set complete</param>
 <example>
     <code title="Example1"
         description="This is the actual implementation of the default checkout handler which is called if no checkout handler is selected on the payment."
         lang="VB.NET">Public Overrides Function StartCheckout(ByVal order As eCommerce.Orders.Order) As String
 LogEvent(order, "StartCheckout")
 Try
 SetOrderComplete(order)
 LogEvent(order, "SetOrderComplete succeeded")
 Catch ex As Exception
 LogError(order, "SetOrderComplete failed with the message: {0}", ex.Message)
 End Try
 CheckoutDone(order)
 RedirectToCart(order)
 Return Nothing
 End Function</code>
 </example>
 <remarks>
     If you have a transaction number from e.g. a gateway, use SetOrderComplete(Order order, string
     transactionNumber).
 </remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.TrackOrderComplete(Dynamicweb.Ecommerce.Orders.Order@)">
 <summary>
     Track order complete
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.GetPostedInfo(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     Returns all posted info as xml string
 </summary>
 <param name="order">The order</param>
 <returns>System.String.</returns>
 <example>
     <code title="Example1" description="" lang="C#">Order myOrder;
 // Get transaction number from gateway
 string transNum;
 ...
 // Set the order complete
 SetOrderComplete(myOrder, transNum);</code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.RedirectToCheckoutHandler">
 <summary>
     Shared function to redirect to the custom CheckoutHandler. This handler is found through the order created by the
     id in OrderIdRequestName
 </summary>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.RedirectToCheckoutHandler(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     Shared function to redirect to the custom CheckoutHandler. 
 </summary>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.GetCheckoutHandlerFromPaymentID(System.String)">
 <summary>
     Returns the checkout handler from the given payment id, or null if it doesn't exist
 </summary>
 <param name="paymentID">Id of the payment</param>
 <returns>The CheckoutHandler linked with the payment.</returns>
 <example>
     <code title="Example" description="" lang="C#">string myPaymentId;
 ...
 CheckoutHandler myCheckoutHandler = CheckoutHandler.GetCheckoutHandlerByPaymentId(myPaymentId);</code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.GetCheckoutHandlerFromPaymentID(System.String,System.String)">
 <summary>
     Returns the checkout handler from the given payment id, or null if it doesn't exist
 </summary>
 <param name="paymentID">Id of the payment</param>
 <param name="langID">The Language code</param>
 <returns>The CheckoutHandler linked with the payment.</returns>
 <example>
     <code title="Example" description="" lang="C#">string myPaymentId;
 ...
 CheckoutHandler myCheckoutHandler = CheckoutHandler.GetCheckoutHandlerByPaymentId(myPaymentId);</code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.GetCheckoutHandlerFromPayment(Dynamicweb.Ecommerce.Orders.Payment)">
 <summary>
     Returns the CheckoutHandler from the given payment, or null if it doesn't exist
 </summary>
 <param name="payment">The payment</param>
 <returns>CheckoutHandler.</returns>
 <example>
     <code title="Example" description="" lang="C#">Payment myPayment;
 ...
 CheckoutHandler myCheckoutHandler = CheckoutHandler.GetCheckoutHandlerFromPayment(myPayment);</code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.CheckoutHandler.DefaultCheckoutHandler">
 <summary>
     Returns an instance of <see cref="T:Dynamicweb.Ecommerce.Cart.DefaultCheckoutHandler" />.
 </summary>
 <value>The default checkout handler.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.LogEvent(Dynamicweb.Ecommerce.Orders.Order,System.String,System.Object[])">
 <summary>
     Logs an event. This is written in the event log.
 </summary>
 <param name="order">The current order or null. This is used to link the log entry to the order.</param>
 <param name="message">The message to log</param>
 <param name="args">String.Format args to the message</param>
 <example>
     <code title="Example without format string" description="Example without format string" lang="CS">Order myOrder;
 ...
 LogEvent(myOrder, "Something happened in the flow");</code>
     <code title="Example with format string" description="Example with format string" lang="CS">Order myOrder;
 string eventMessage;
 ...
 LogEvent(myOrder, "Something happened in the flow: {0}", eventMessage);</code>
 </example>
 <remarks>
     <para>It is highly recommended to make use of the logging methods of the CheckoutHandler base class.</para>
     <para>
         The LogEvent method creates a single line entry to the event log file, with the time of the event, the order id
         and the message. If the order given is not
         null, the entry is also linked to the order, making it visible in the order details view of the admin area.
     </para>
 </remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.LogEvent(Dynamicweb.Ecommerce.Orders.Order,System.String,Dynamicweb.Ecommerce.Orders.DebuggingInfoType,System.Object[])">
 <summary>
     Logs an event. This is written in the event log.
 </summary>
 <param name="order">The current order or null. This is used to link the log entry to the order.</param>
 <param name="message">The message to log</param>
 <param name="infoType">Type of message to log</param>
 <param name="args">String.Format args to the message</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.LogError(Dynamicweb.Ecommerce.Orders.Order,System.String,System.Object[])">
 <summary>
     Logs an error. This is written in the error log and in the event log
 </summary>
 <param name="order">The current order or null</param>
 <param name="message">The message to log</param>
 <param name="args">String.Format args to the message</param>
 <example>
     <code title="Example without format string" description="Example without format string" lang="CS">Order myOrder;
 ...
 LogError(myOrder, "Something happened in the flow");</code>
     <code title="Example with format string" description="Example with format string" lang="CS">Order myOrder;
 string eventMessage;
 ...
 LogEvent(myOrder, "Something happened in the flow: {0}", eventMessage);</code>
 </example>
 <remarks>
     <para>It is highly recommended to make use of the logging methods of the CheckoutHandler base class.</para>
     <para>
         The LogError methods creates a text file of all known system information including session variables, server
         variables and more. All objects logged are
         parsed and sub-objects stored in properties are also logged down to a certain level.
     </para>
     <para>
         This log file can easily consume several Mb of disk space, wo use only LogError on true errors. Otherwise use
         LogEvent.
     </para>
 </remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.LogError(Dynamicweb.Ecommerce.Orders.Order,System.Exception,System.String,System.Object[])">
 <summary>
     Logs an error. This is written in the error log and in the event log
 </summary>
 <param name="order">The current order or null</param>
 <param name="ex">Optional Exception that caused the error</param>
 <param name="message">The message to log</param>
 <param name="args">String.Format args to the message</param>
 <example>
     <code title="Example without format string" description="Example without format string" lang="CS">Order myOrder;
 ...
 LogError(myOrder, "Something happened in the flow");</code>
     <code title="Example with format string" description="Example with format string" lang="CS">Order myOrder;
 string eventMessage;
 ...
 LogEvent(myOrder, "Something happened in the flow: {0}", eventMessage);</code>
 </example>
 <remarks>
     <para>It is highly recommended to make use of the logging methods of the CheckoutHandler base class.</para>
     <para>
         The LogError methods creates a text file of all known system information including session variables, server
         variables and more. All objects logged are
         parsed and sub-objects stored in properties are also logged down to a certain level.
     </para>
     <para>
         This log file can easily consume several Mb of disk space, wo use only LogError on true errors. Otherwise use
         LogEvent.
     </para>
 </remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.GetBaseUrl(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     Gets the base URL.
 </summary>
 <param name="order">The order.</param>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.Render(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Rendering.Template)">
 <summary>
     Renders the specified order.
 </summary>
 <param name="order">The order.</param>
 <param name="template">The template.</param>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandler.HideCardNumber(System.String)">
 <summary>
     Hide part of card number, e.g. for card number 4711100000009999 it returns XXXXXXXXXXXX9999
 </summary>
 <param name="cardNumber">The card number</param>
 <returns>System.String.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.CheckoutHandlerWithStatusPage">
 <summary>
     A CheckoutHandlerWithStatusPage does all the business logic required to complete an order.
     Inherit from this base class to extend to checkout logic in DynamicWeb eCommerce Cart V2.
 </summary>
 <seealso cref="T:Dynamicweb.Ecommerce.Cart.CheckoutHandler" />
 <remarks>Make use of the Dynamicweb AddIn API to add editable properties to the checkout handler.</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandlerWithStatusPage.CheckoutDone(Dynamicweb.Ecommerce.Orders.Order,System.Int32)">
 <summary>
     This method should be called when the handler is done with the checkout even if the checkout fails.
 </summary>
 <param name="order">The order</param>
 <param name="pageID">Cart's page ID</param>
 <example>
     <code title="Example"
         description="This is the actual implementation of the default checkout handler which is called if no checkout handler is selected on the payment."
         lang="VB.NET">Public Overrides Function StartCheckout(ByVal order As eCommerce.Orders.Order) As String
 LogEvent(order, "StartCheckout")
 Try
 SetOrderComplete(order)
 LogEvent(order, "SetOrderComplete succeeded")
 Catch ex As Exception
 LogError(order, "SetOrderComplete failed with the message: {0}", ex.Message)
 End Try
 CheckoutDone(order)
 RedirectToCart(order)
 Return Nothing
 End Function</code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandlerWithStatusPage.GetInfoFromQueryString(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     Returns all info from query string as xml string
 </summary>
 <param name="order">The order</param>
 <returns>System.String.</returns>
 <example>
     <code title="Example1" description="" lang="C#">Order myOrder;
 // Get transaction number from gateway
 string transNum;
 ...
 // Set the order complete
 SetOrderComplete(myOrder, transNum);</code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandlerWithStatusPage.PrepareGatewayResult(System.String)">
 <summary>
     Save cart's pageID in suitable form for recording in the GatewayResult field
 </summary>
 <param name="pageID">The page identifier.</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandlerWithStatusPage.RetrievePageID(System.String)">
 <summary>
     Retrieve cart's pageID from order.GatewayResult, previously prepared with PrepareGatewayResult() function
 </summary>
 <param name="gatewayResult">The gateway result.</param>
 <returns>System.Int32.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandlerWithStatusPage.SetOrderCompleteSafety(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     Performs the logic for setting the order complete
 </summary>
 <param name="order">The order to set complete</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CheckoutHandlerWithStatusPage.SetTransactionState(Dynamicweb.Ecommerce.Orders.Order,System.Boolean,System.Double,System.String,System.String)">
 <summary>
     Save gateway's transaction sensibility parameters on order
 </summary>
 <param name="order">The order to set complete</param>
 <param name="isSuccess">if set to <c>true</c> [is success].</param>
 <param name="transactionAmount">The transaction amount.</param>
 <param name="transactionNumber">The transaction number.</param>
 <param name="transactionCardType">Type of the transaction card.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.DefaultCheckoutHandler">
 <summary>
     The default checkout handler that is used if no checkout handler is selected on a payment.
 </summary>
 <seealso cref="T:Dynamicweb.Ecommerce.Cart.CheckoutHandler" />
 <seealso cref="T:Dynamicweb.Ecommerce.Orders.Gateways.IRecurring" />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.DefaultCheckoutHandler.StartCheckout(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     This method is called when the checkout procedure is started and the order is handled to the checkout handler.
 </summary>
 <param name="order">The order that need to be checked out.</param>
 <returns>The module output.</returns>
 <example>
     <code title="Example"
         description="This is the actual implementation of the default checkout handler which is called if no checkout handler is selected on the payment."
         lang="VB.NET">
 Public Overrides Function StartCheckout(ByVal order As eCommerce.Orders.Order) As String
 LogEvent(order, "StartCheckout")
 Try
 SetOrderComplete(order)
 LogEvent(order, "SetOrderComplete succeeded")
 Catch ex As Exception
 LogError(order, "SetOrderComplete failed with the message: {0}", ex.Message)
 End Try
 CheckoutDone(order)
 RedirectToCart(order)
 Return Nothing
 End Function</code>
 </example>
 <remarks>
     Return a string to control the module output. If a redirect is made, like in the example, it is not needed to
     return a string.
 </remarks>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.DefaultCheckoutHandler.Redirect(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     <para>Function that is called from CartV2 when OrderIdRequestName is in the Request.</para>
     <para>Implement this method to receive redirects from CartV2</para>
 </summary>
 <param name="order">The order with order ID equal to the request OrderIdRequestName</param>
 <returns>Returns the output to the module.</returns>
 <example>
     <code title="Example"
         description="Example of how to create an url that will be redirected to this checkout handler's Redirect method when called:"
         lang="C#">//Write the port if it is not default
 var portString = HttpContext.Current.Request.Url.IsDefaultPort ? "" : string.Format(":{0}", HttpContext.Current.Request.Url.Port);
 var pageId = Dynamicweb.Context.Current.Request("ID") == null ? string.Empty : string.Format("ID={0}&amp;", Dynamicweb.Context.Current.Request("ID"));
 //Url
 var myUrl = string.Format("{0}://{1}{2}/Default.aspx?{3}{4}={5}",
 HttpContext.Current.Request.Url.Scheme,
 HttpContext.Current.Request.Url.Host,
 portString,
 pageId,
 OrderIdRequestName,
 order.Id);</code>
 </example>
 <remarks>
     <para>The most common use of this method is to receive callbacks and redirect urls from a gateway.</para>
     <para>
         To enable the Redirect method to be called on a callback parse an url with the current page id and the order id
         in the query string to the gateway as the
         callback url. The order id must be stored in a query string variable named with the return value of the
         property OrderIdRequestName of the CheckoutHandler base
         class.
     </para>
     <para></para>
     <para>
         Return a string to control the module output. If a redirect is made within the method, it is not needed to
         return a string.
     </para>
 </remarks>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.DefaultCheckoutHandler.Recurring(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     Recurrings the specified order.
 </summary>
 <param name="order">The order.</param>
 <param name="initialOrder">The initial order.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.DefaultCheckoutHandler.RecurringSupported(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     Shows if order supports recurring payments
 </summary>
 <param name="order">Instance of order</param>
 <returns>True, if recurring payments are supported</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.CartEmptyAction">
 <summary>
     Enum CartEmptyAction
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.CartEmptyAction.Redirect">
 <summary>
     The redirect
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.CartEmptyAction.Template">
 <summary>
     The template
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.CartEmptyAction.None">
 <summary>
     The none
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.FieldValidator">
 <summary>
     FieldValidator class.
 </summary>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.FieldValidator.FieldNameToOrderProperty">
 <summary>
     Gets the field name to order property.
 </summary>
 <value>The field name to order property.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.FieldValidator.ValidateOrder(Dynamicweb.Ecommerce.Cart.ModuleSettings,Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     Validates the given order based on the module settings
 </summary>
 <param name="settings">The module settings of the Cart V2</param>
 <param name="order">The order to validate</param>
 <returns>An IEnumerable of ValidationError</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.FieldValidator.ValidateTaxProvider(System.Collections.Generic.List{Dynamicweb.Ecommerce.Orders.Validation.ValidationError},Dynamicweb.Ecommerce.Orders.Order)">
 <param name="errors">List of errors</param>
 <param name="order">The order to validate</param>
 <summary>Validates the active tax provider for order </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.FieldValidator.ValidateShippingMethod(System.Collections.Generic.List{Dynamicweb.Ecommerce.Orders.Validation.ValidationError},Dynamicweb.Ecommerce.Orders.Order)">
 <param name="errors">List of errors</param>
 <param name="order">The order to validate</param>
 <summary>Validates the selected shipping method for order </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.FieldValidator.ValidateGiftCardsBalance(System.Collections.Generic.List{Dynamicweb.Ecommerce.Orders.Validation.ValidationError},Dynamicweb.Ecommerce.Orders.Order)">
 <param name="errors">List of errors</param>
 <param name="order">The order to validate</param>
 <summary>Validates the selected shipping method for order </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.FieldValidator.ValidateRequest(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Cart.ValidationGroupInfo},Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     Validates the current request on the given validation groups
 </summary>
 <param name="validationGroups">An IEnumerable of ValidationGroupInfo containing ValidationInfo</param>
 <param name="order">The order to validate</param>
 <returns>The validation errors as an IEnumerable of ValidationError</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.FieldValidator.ValidationFieldInfo">
 <summary>
     Represents a field validation
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.FieldValidator.ValidationFieldInfo.Validation">
 <summary>
     The validation
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.FieldValidator.ValidationFieldInfo.ValidationField">
 <summary>
     The validation field
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.FieldValidator.ValidationFieldInfo.ErrorMessage">
 <summary>
     The error message
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.FieldValidator.ValidationFieldInfo.GetValidationFieldInfos(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Cart.ValidationGroupInfo})">
 <summary>
     Gets the validation field infos.
 </summary>
 <param name="validationGroups">The validation groups.</param>
 <returns>List(Of ValidationFieldInfo).</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.FieldValidator.ValidationFieldInfo.GetValidationFieldInfos(Dynamicweb.Ecommerce.Cart.ValidationGroupInfo)">
 <summary>
     Gets the validation field infos.
 </summary>
 <param name="validationGroup">The validation group.</param>
 <returns>List(Of ValidationFieldInfo).</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.Frontend.GetContent">
 <summary>
 Handles the front end requests and returns the HTML output for the module.
 </summary>
 <returns>Module output rendered as HTML.</returns>
 <remarks>The markup returned is what is inserted into the template tag <c>ParagraphModule</c> in the paragraph template.</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.Frontend.UpdateCartViewModel(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Updates cart view model discounts prices
 </summary>
 <param name="cart"></param>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.Frontend.ValidateStep(Dynamicweb.Ecommerce.Orders.Order,System.Int32)">
 <summary>
 Private function to validate that the next step is allowed as next step in the context.
 </summary>
 <param name="stepIndex">The index of the step to validate</param>
 <returns>True if step is allowed. False if the step isn't allowed.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.Frontend.CheckoutDone(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Called by CheckoutHandler when the checkout procedure is done
 </summary>
 <param name="order">The order</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.Frontend.CheckoutDone(Dynamicweb.Ecommerce.Orders.Order,System.Int32)">
 <summary>
 Called by CheckoutHandler when the checkout procedure is done
 </summary>
 <param name="order">The order</param>
 <param name="pageID">Cart's page ID</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.Frontend.Redirect(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Called by the CheckoutHandler to redirect to the order. This will redirect to the first step or the first reciept step based on Order.Complete
 </summary>
 <param name="order">The order</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.Frontend.TrackStep(System.Int32)">
 <summary>
 Adds a record to statistics database about the given cart step.
 </summary>
 <param name="stepIndex">1-based step index.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.Frontend.SetOrderAsRecurring(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>Sets the payment information and performs the logic for creating recurring based on given order</summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.IShippingDocumentProvider">
 <summary>
     IShippingDocumentProvider interface.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.IShippingDocumentProvider.CreateShippingDocument(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
     Create a shipping document
 </summary>
 <param name="order">The order.</param>
 <returns>true on success</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.ModuleSettings">
 <summary>
     Class CartModuleSettings.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.Steps">
 <summary>
     Gets the steps.
 </summary>
 <value>The steps.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.Mails">
 <summary>
     Gets the mails.
 </summary>
 <value>The mails.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.ValidationGroups">
 <summary>
     Gets the validation groups.
 </summary>
 <value>The validation groups.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.UseNewsletterSubscription">
 <summary>
     Gets a value indicating whether [use newsletter subscription].
 </summary>
 <value><c>true</c> if [use newsletter subscription]; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.NewsletterCategories">
 <summary>
     Gets the newsletter categories.
 </summary>
 <value>The newsletter categories.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.CartEmptyAction">
 <summary>
     Gets the empty cart action.
 </summary>
 <value>The empty cart action.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.EmptyCartRedirectPage">
 <summary>
     Gets the empty cart redirect page.
 </summary>
 <value>The empty cart redirect page.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.ModuleSettings.CreateEmptyCartTemplate">
 <summary>
     Creates the empty cart template.
 </summary>
 <returns>Template.</returns>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.EmptyCartTemplate">
 <summary>
     Gets the empty cart template.
 </summary>
 <value>The empty cart template.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.ReEnterAction">
 <summary>
     Gets the re enter action.
 </summary>
 <value>The re enter action.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.CountryForShipping">
 <summary>
     Gets the country for shipping.
 </summary>
 <value>The country for shipping.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.CountryForPayment">
 <summary>
     Gets the country for payment.
 </summary>
 <value>The country for payment.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.ShopID">
 <summary>
     Gets the shop identifier.
 </summary>
 <value>The shop identifier.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.OrderContextID">
 <summary>
     Gets the order context identifier.
 </summary>
 <value>The order context identifier.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.DoValidateCustomerAccepted">
 <summary>
     Gets a value indicating whether [do validate customer accepted].
 </summary>
 <value><c>true</c> if [do validate customer accepted]; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.CustomerAcceptedErrorMessage">
 <summary>
     Gets the customer accepted error message.
 </summary>
 <value>The customer accepted error message.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.DoValidateStockStatus">
 <summary>
     Gets a value indicating whether [do validate stock status].
 </summary>
 <value><c>true</c> if [do validate stock status]; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.StockStatusErrorMessage">
 <summary>
     Gets the stock status error message.
 </summary>
 <value>The stock status error message.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.DoRemoveNonExistingProductsFromCart">
 <summary>
     Gets a value indicating whether [do remove non existing products from cart].
 </summary>
 <value><c>true</c> if [do remove non existing products from cart]; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.SetUserDetailsOnOrder">
 <summary>
     Gets a value indicating whether [set user details on order].
 </summary>
 <value><c>true</c> if [set user details on order]; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.ImagePatternProductCatalog">
 <summary>
     Gets the image pattern product catalog.
 </summary>
 <value>The image pattern product catalog.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.SelectAllPayments">
 <summary>
     Gets a value indicating whether [select all payments].
 </summary>
 <value><c>true</c> if [select all payments]; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.PaymentTypes">
 <summary>
     Gets the payment types.
 </summary>
 <value>The payment types.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.SelectAllDeliveries">
 <summary>
     Gets a value indicating whether [select all deliveries].
 </summary>
 <value><c>true</c> if [select all deliveries]; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.DeliveryTypes">
 <summary>
     Gets the delivery types.
 </summary>
 <value>The delivery types.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.DoCreateUserAtCheckout">
 <summary>
     Gets a value indicating whether [do create user at checkout].
 </summary>
 <value><c>true</c> if [do create user at checkout]; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.DoUpdateUsersByEmail">
 <summary>
 Gets value indicating if users will be updated by its email
 </summary>
 <returns><see cref="T:System.Boolean">Boolean</see> value whether to update users</returns>  
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.GroupsForNewUsers">
 <summary>
     Gets the groups for new users.
 </summary>
 <value>The groups for new users.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.ErrorEmptyUserName">
 <summary>
     Gets the name of the error empty user.
 </summary>
 <value>The name of the error empty user.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.ErrorEmptyPassword">
 <summary>
     Gets the error empty password.
 </summary>
 <value>The error empty password.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.ErrorPasswordsNotMatch">
 <summary>
     Gets the error passwords not match.
 </summary>
 <value>The error passwords not match.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.ErrorPasswordLength">
 <summary>
     Gets the length of the error password.
 </summary>
 <value>The length of the error password.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.ErrorUserNameTaken">
 <summary>
     Gets the error user name taken.
 </summary>
 <value>The error user name taken.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.ErrorIllegalPasswordCharacters">
 <summary>
     Gets the error illegal password characters.
 </summary>
 <value>The error illegal password characters.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ModuleSettings.CheckoutToQuote">
 <summary>
     Gets a value indicating whether [checkout to quote].
 </summary>
 <value><c>true</c> if [checkout to quote]; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.ModuleSettings.#ctor(Dynamicweb.Modules.Properties)">
 <summary>
     Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Cart.ModuleSettings" /> class.
 </summary>
 <param name="properties">The properties.</param>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.MailInfo">
 <summary>
     MailInfo class.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.MailInfo.Recipient">
 <summary>
     The recipient
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.MailInfo.Subject">
 <summary>
     The subject
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.MailInfo.Template">
 <summary>
     The template
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.MailInfo.TemplatePath">
 <summary>
     The template path
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.MailInfo.SenderName">
 <summary>
     The sender name
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.MailInfo.SenderMail">
 <summary>
     The sender mail
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.MailInfo.IsCustomer">
 <summary>
     The is customer
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.MailInfo.IsDelivery">
 <summary>
     The is delivery
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.MailInfo.EncodingCodePage">
 <summary>
     The encoding code page
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.MailInfo.Attachment">
 <summary>
     The attachment
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.MailInfo.AttachmentPath">
 <summary>
     The attachment path
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.MailInfo.IsCustomField">
 <summary>
 Use order or user field for email address 
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.MailInfo.RecipientCustomField">
 <summary>
 The order or user field for email address to send to
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.PaymentCardToken">
 <summary>
 Class PaymentCardToken.
 </summary>
 <seealso cref="T:Dynamicweb.Data.DbObject" />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.PaymentCardToken.UserID">
 <summary>
 Gets the card user.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.PaymentCardToken.Name">
 <summary>
 Gets or sets the name to identify the card.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.PaymentCardToken.CardType">
 <summary>
 Gets or sets the card type: visa/mastercard/etc.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.PaymentCardToken.Identifier">
 <summary>
 Gets or sets the card identifier. It will usually contain the last four digits of the card number. However, this depends on the payment provider.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.PaymentCardToken.Token">
 <summary>
 Gets or sets the token issued from the payment provider to be used when processing payments with this card.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.PaymentCardToken.PaymentID">
 <summary>
 Gets or sets which configured PaymentProvider instance is used with this card.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.PaymentCardToken.LanguageID">
 <summary>
 Gets or sets payment provider language.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.PaymentCardToken.UsedDate">
 <summary>
 Gets or sets date when token was used
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.PaymentCardToken.CheckSum">
 <summary>
 Gets the checksum
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.PaymentCardToken.Payment">
 <summary>
 Gets <see cref="T:Dynamicweb.Ecommerce.Orders.Payment"/> provider instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.PaymentCardToken.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Cart.PaymentCardToken">PaymentCardToken</see> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.PaymentCardToken.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Cart.PaymentCardToken">PaymentCardToken</see> class from the data reader.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.PaymentCardToken.FillRow(System.Data.DataRow)">
 <summary>
 Fills the given <see cref="T:System.Data.DataRow"/> object with property values from this instance.
 </summary>
 <param name="row">The data row to fill.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.PaymentCardToken.Fill(System.Data.IDataReader)">
 <summary>
 Fills the Card token properties from the specified data reader.
 </summary>
 <param name="reader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.PaymentCardToken.Delete">
 <summary>
 Delete card token.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.PaymentCardToken.GetTokenByID(System.Int32)">
 <summary>
 Retrieve card token by ID.
 </summary>
 <param name="tokenID">The id of payment token.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.PaymentCardToken.GetTokensByCustomerNumber(System.String)">
 <summary>
 Retrieve card tokens by user customer number
 </summary>
 <param name="customerNumber">The user customer number</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.PaymentCardToken.GetTokensByUserID(System.Int32)">
 <summary>
 Retrieve card tokens for an user.
 </summary>
 <param name="userID">The id of user.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.PaymentCardToken.GetTokensByUserID(System.Int32,System.String,System.String)">
 <summary>
 Retrieve card tokens for an user for specified payment id and language id.
 </summary>
 <param name="userID">The id of the user.</param>
 <param name="paymentID">The id of the payment.</param>
 <param name="languageID">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.PaymentCardToken.SaveTokenForUser(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Save card token for specified user.
 </summary>
 <param name="userID">The id of user</param>
 <param name="paymentID">The id of payment gateway</param>
 <param name="languageID">The language id</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.PaymentCardToken.SetDefaultTokenForUser(System.Int32,System.Int32,System.Boolean)">
 <summary>
 mark\unmark token as default token for the user.
 </summary>
 <param name="userId">The id of user</param>
 <param name="tokenId">The id of token <see cref="T:Dynamicweb.Ecommerce.Cart.PaymentCardToken"/></param>
 <param name="isDefault"><c>true</c> if the token should be default; <c>false</c> otherwise.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.PaymentCardToken.Save">
 <summary>
 Saves current data to the data base.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.PaymentCardTokenException">
 <summary>The exception that is thrown when a card token is expired or invalid.</summary>
 <seealso cref="T:System.Exception" />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.PaymentCardTokenException.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Cart.PaymentCardTokenException"/> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.PaymentCardTokenException.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Cart.PaymentCardTokenException"/> class.
 </summary>
 <param name="message">The message that describes the error.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.PaymentCardTokenException.#ctor(System.String,System.Exception)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Cart.PaymentCardTokenException"/> class.
 </summary>
 <param name="message">The message.</param>
 <param name="inner">The inner exception.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.Renderer">
 <summary>
     Renderer class.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.Renderer.RenderStep(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Ecommerce.Cart.ModuleSettings,System.Int32,Dynamicweb.Frontend.PageView,System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Orders.Validation.ValidationError},System.Collections.Generic.IEnumerable{System.String})">
 <summary>
     Renders a step of the CartV2
 </summary>
 <param name="order">The order to be rendered</param>
 <param name="settings">The paragraph module settings</param>
 <param name="stepIndex">The zero-based index of the step</param>
 <param name="pageView">The current PageView object</param>
 <param name="validationErrors">The validation errors</param>
 <param name="removedProductNames">Removed product names rendered in a loop</param>
 <returns>A string containing the rendered order</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.Renderer.RenderEmptyCartStep(Dynamicweb.Ecommerce.Cart.ModuleSettings,System.Int32,Dynamicweb.Frontend.PageView)">
 <summary>
     Renders a step of the CartV2
 </summary>
 <param name="settings">The paragraph module settings</param>
 <param name="stepIndex">The zero-based index of the step</param>
 <param name="pageView">The current PageView object</param>
 <returns>A string containing the rendered order</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.Renderer.RenderStep(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Frontend.PageView,System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Orders.Validation.ValidationError},System.Collections.Generic.IEnumerable{System.String},System.Boolean,Dynamicweb.Rendering.Template)">
 <summary>
     Renders the order to the template
 </summary>
 <param name="order">The order that should be rendered</param>
 <param name="pageView">The current pageview object</param>
 <param name="validationErrors">Validation errors or null if no validation errors should be rendered</param>
 <param name="removedProductNames">Removed product names or null if no removed product names should be rendered</param>
 <param name="useNewsletterSubscription">
     Renders the tag Ecom:Cart.UseNewsletterSubscription to 'true' or the empty
     string based on the boolean
 </param>
 <param name="template">The template to render the order to</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.Renderer.RenderStep(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Frontend.PageView,System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Orders.Validation.ValidationError},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Collections.Generic.IEnumerable{System.String},Dynamicweb.Rendering.Template)">
 <summary>
     Renders the order to the template
 </summary>
 <param name="order">The order that should be rendered</param>
 <param name="pageView">The current pageview object</param>
 <param name="validationErrors">Validation errors or null if no validation errors should be rendered</param>
 <param name="removedProductNames">Removed product names or null if no removed product names should be rendered</param>
 <param name="useNewsletterSubscription">
     Renders the tag Ecom:Cart.UseNewsletterSubscription to 'true' or the empty
     string based on the boolean
 </param>
 <param name="imagePatternProductCatalog">The URL of product catalog with image patterns</param>
 <param name="payments">Selected payments(multishop)</param>
 <param name="template">The template to render the order to</param>
 <param name="deliveries">Selected delivery methods</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.Renderer.RenderUser(Dynamicweb.Ecommerce.Cart.ModuleSettings,Dynamicweb.Rendering.Template)">
 <summary>
     Renders the user.
 </summary>
 <param name="settings">The settings.</param>
 <param name="template">The template.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.Renderer.RenderUser(Dynamicweb.Rendering.Template)">
 <summary>
     Renders the user.
 </summary>
 <param name="template">The template.</param>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.SavedForLater">
 <summary>
     SavedForLater Data Object
 </summary>
 <seealso cref="T:Dynamicweb.Data.DbObject" />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.SavedForLater.SavedForLaterID">
 <summary>
     ID of the "Saved for Later"
 </summary>
 <value>The saved for later identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.SavedForLater.ProductID">
 <summary>
     Gets or sets the product ID.
 </summary>
 <value>The product ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.SavedForLater.VariantID">
 <summary>
     Gets or sets the variant ID.
 </summary>
 <value>The variant ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.SavedForLater.LanguageID">
 <summary>
     Gets or sets the language ID.
 </summary>
 <value>The language ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.SavedForLater.DateAdded">
 <summary>
     Gets or sets the date added.
 </summary>
 <value>The date added.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.SavedForLater.SavedForLaterSessionID">
 <summary>
     Gets or sets the saved for later session ID.
 </summary>
 <value>The saved for later session ID.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.SavedForLater.#ctor">
 <summary>
     Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Cart.SavedForLater" /> class.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.SavedForLater.#ctor(System.Data.IDataReader)">
 <summary>
     Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Cart.SavedForLater" /> class.
 </summary>
 <param name="dataReader">The data reader.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.SavedForLater.FillRow(System.Data.DataRow)">
 <summary>
     Fills the row.
 </summary>
 <param name="row">The row.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.SavedForLater.Fill(System.Data.IDataReader)">
 <summary>
     Fills the specified data reader.
 </summary>
 <param name="dataReader">The data reader.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.SavedForLater.GetSavedForLaterByID(System.Int32)">
 <summary>
     Get the Saved For Later item by ID.
 </summary>
 <param name="id">ID.</param>
 <returns>SavedForLater.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.SavedForLater.GetSavedForLaterBySessionID(System.String)">
 <summary>
     Get <see cref="T:Dynamicweb.Ecommerce.Cart.SavedForLater" /> by session id.
 </summary>
 <param name="sessionID">The session identifier.</param>
 <returns>SavedForLaterCollection.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.SavedForLater.SaveSavedForLaterIdToCookie">
 <summary>
     Saves the SaveSavedForLater id to a cookie
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.SavedForLater.GetSavedForLaterIdFromCookie">
 <summary>
     Saves the SaveSavedForLater id to a cookie
 </summary>
 <returns>System.String.</returns>
 <history></history>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.SavedForLater.AddProductToSavedForLater(System.String,System.String,System.String)">
 <summary>
     Add product to "Saved For Later"
 </summary>
 <param name="productID">Product Id</param>
 <param name="productVariantID">Product variant Id</param>
 <param name="languageId">Language Id</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.SavedForLater.RemoveProductFromSavedForLater(System.String,System.String,System.String)">
 <summary>
     Remove product from "Saved For Later"
 </summary>
 <param name="productId">The product identifier.</param>
 <param name="productVariantId">The product variant identifier.</param>
 <param name="languageId">Language Id</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.Session">
 <summary>
 Represents cart session class. This class cannot be inherited.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.Session.Current">
 <summary>
 Gets the current instance of cart session.
 </summary>
 <value>The current.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.Session.Add(System.String,System.Object)">
 <summary>
 Adds the specified item to the cart session.
 </summary>
 <param name="key">The session key used to reference the item.</param>
 <param name="value">The item to be added to the session.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.Session.Contains(System.String)">
 <summary>
 Determines whether the cart session contains an item.
 </summary>
 <param name="key">The identifier for the session item to determines.</param>
 <returns><c>true</c> if an object with the given key exists; otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.Session.GetValue(System.String)">
 <summary>
 Retrieves the specified item from the session.
 </summary>
 <param name="key">The identifier for the session item to retrieve.</param>
 <returns>System.Object.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.Session.Remove(System.String)">
 <summary>
 Removes the specified item from the cart session.
 </summary>
 <param name="key">A String identifier for the session item to remove.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.ShippingProvider">
 <summary>
 A ShippingProvider calculates rate of goods delivery.
 Inherit from this base class to extend shipping services in DynamicWeb eCommerce
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.AddIns.ConfigurableAddIn" />
 <remarks>Make use of the Dynamicweb AddIn API to add editable properties to the shipping provider.</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ShippingProvider.ShippingID">
 <summary>
 Gets or sets the shipping identifier.
 </summary>
 <value>The shipping identifier.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.ShippingProvider.CalculateShippingFee(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Calculate shipping fee for the specified order
 </summary>
 <param name="order">The order.</param>
 <returns>Returns shipping fee for the specified order</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.ShippingProvider.GetShippingProviderByShipping(Dynamicweb.Ecommerce.Orders.Shipping)">
 <summary>
 Returns the ShippingProvider from the given shipping, or null if it doesn't exist
 </summary>
 <param name="shipping">The shipping represents information about the shipping method</param>
 <returns>ShippingProvider.</returns>
 <example>
   <code title="Example" description="" lang="C#">Shipping myShipping;
 ...
 ShippingProvider myShippingProvider = ShippingProvider.GetShippingProviderFromShipping(myPayment);</code>
 </example>
 <see cref="T:Dynamicweb.Ecommerce.Cart.ShippingProvider">Create an instance of the extension type</see>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.ShippingProvider.SaveXmlLog(System.Xml.XmlDocument,System.Boolean)">
 <summary>
 Saves the xml log.
 </summary>
 <param name="xml">The xml.</param>
 <param name="isRequest">if set to <c>true</c> the context is a request.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.ShippingProvider.SaveLog(System.String,System.Boolean)">
 <summary>
 Saves the log.
 </summary>
 <param name="message">The message.</param>
 <param name="isRequest">if set to <c>true</c> [is request].</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.ShippingProvider.RenderFrontend(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Renders the frontend.
 </summary>
 <param name="order">The order currently being checked out.</param>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.ShippingProvider.Render(Dynamicweb.Rendering.Template,Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Makes it possible to extend the shipping method template instance.
 </summary>
 <param name="template">The template instance rendering the shipping method.</param>
 <param name="order">The order currently being checked out.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.ShippingProvider.RenderBackend(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Renders the backend.
 </summary>
 <param name="order">The order.</param>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.ShippingProvider.ProcessOrder(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Processes the order.
 </summary>
 <param name="order">The order.</param>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Cart.ShippingProvider.FieldPrefix">
 <summary>
 Gets the field prefix.
 </summary>
 <value>The field prefix.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.ShippingProvider.GetFieldValues">
 <summary>
 Gets the field values.
 </summary>
 <returns>Dictionary(Of System.String, System.String).</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.CartStepInfo">
 <summary>
     CartStepInfo class.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.CartStepInfo.Name">
 <summary>
     The name
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.CartStepInfo.Template">
 <summary>
     The template
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.CartStepInfo.TemplatePath">
 <summary>
     The template path
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.CartStepInfo.IsCheckout">
 <summary>
     The is checkout
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CartStepInfo.#ctor">
 <summary>
     Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Cart.CartStepInfo" /> class.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.CartStepInfo.#ctor(System.String,System.String,System.String,System.Boolean)">
 <summary>
     Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Cart.CartStepInfo" /> class.
 </summary>
 <param name="name">The name.</param>
 <param name="template">The template.</param>
 <param name="templatePath">The template path.</param>
 <param name="isCheckOut">if set to <c>true</c> [is check out].</param>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.UserSavedSubscriber">
 <summary>
 UserSavedSubscriber class.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationSubscriber" />
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Cart.UserSavedSubscriber.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Called when notification is broadcast.
 </summary>
 <param name="notification">The notification.</param>
 <param name="args">The arguments.</param>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.ValidationGroupInfo">
 <summary>
     ValidationGroupInfo class.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.ValidationGroupInfo.Id">
 <summary>
     The identifier
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.ValidationGroupInfo.Name">
 <summary>
     The name
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.ValidationGroupInfo.Fields">
 <summary>
     The fields
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.ValidationGroupInfo.DoNotValidateIfAllFieldsAreEmpty">
 <summary>
 Do not validate if all fields are empty
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.ValidationInfo">
 <summary>
     ValidationInfo class.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.ValidationInfo.Id">
 <summary>
     The identifier
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.ValidationInfo.IsChecked">
 <summary>
     The is checked
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.ValidationInfo.NiceName">
 <summary>
     The nice name
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.ValidationInfo.ErrorMessage">
 <summary>
     The error message
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Cart.ValidationInfo.Rules">
 <summary>
     The rules
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Cart.NamespaceDoc">
 <summary>
 The Dynamicweb.Ecommerce.Cart namespace contains the types and logic used for the cart module and infrastructure of the checkout process.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Common.AfterLoginSubscriber">
 <summary>
 AfterLoginSubscriber class.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationSubscriber" />
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Common.AfterLoginSubscriber.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Called when notification is broadcast.
 </summary>
 <param name="notification">The notification.</param>
 <param name="args">The arguments.</param>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Common.Application">
 <summary>
 The class Application represents application level cache service.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.UpdateContext">
 <summary>
 Gets a value indicating whether the application Context.UpdatedTime is set.
 </summary>
 <value><currency>true</currency> if the application Context.UpdatedTime; otherwise, <currency>false</currency>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.Languages">
 <summary>
 Gets the languages from current Application.
 </summary>
 <value>The languages from eCommerce.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.Language(System.String)">
 <summary>
 Gets the language.
 </summary>
 <value>The language by LanguageId.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.DefaultLanguage">
 <summary>
 Gets the default language.
 </summary>
 <value>The default language.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.ProductFields">
 <summary>
 Gets the product fields.
 </summary>
 <value>The product fields.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.ProductGroupFields">
 <summary>
 Gets the product group fields.
 </summary>
 <value>The product group fields.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.OrderFields">
 <summary>
 Gets the order fields.
 </summary>
 <value>The order fields.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.Currencies">
 <summary>
 Gets the currencies.
 </summary>
 <value>The currencies for the current language.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.Currency(System.String)">
 <summary>
 Gets the currency.
 </summary>
 <value>The currency for the current language otherwise the default currency.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.DefaultCurrency">
 <summary>
 Gets the default currency.
 </summary>
 <value>The default currency. If currencies haven't been created - DKK will be returned</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.Shops">
 <summary>
 Gets the shops.
 </summary>
 <value>The shops.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.DefaultShop">
 <summary>
 Gets the default shop.
 </summary>
 <value>The default shop.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.Shop(System.String)">
 <summary>
 Gets the shop.
 </summary>
 <value>The shop.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.StockGroups">
 <summary>
 Gets the stock groups.
 </summary>
 <value>The stock groups.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.RelatedGroups">
 <summary>
 Gets the related groups.
 </summary>
 <value>The related groups.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.VariantGroups">
 <summary>
 Gets the variant groups.
 </summary>
 <value>The variant groups.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.VatGroups">
 <summary>
 Gets the vat groups.
 </summary>
 <value>The vat groups.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.ValidationGroups">
 <summary>
 Gets the validation groups.
 </summary>
 <value>The validation groups.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.OrderLineFields">
 <summary>
 Gets the order line fields.
 </summary>
 <value>The order line fields.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.Periods">
 <summary>
 Gets the periods.
 </summary>
 <value>The periods.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.Period(System.String)">
 <summary>
 Gets the period.
 </summary>
 <value>The period.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.Countries">
 <summary>
 Gets the countries.
 </summary>
 <value>The countries.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.Country(System.String)">
 <summary>
 Gets the country.
 </summary>
 <value>The country.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Application.OrderStates">
 <summary>
 Gets the order states.
 </summary>
 <value>The order states.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.GetLanguage(System.String)">
 <summary>
 Gets the language.
 </summary>
 <param name="languageId">
 The id of language.
 </param>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.GetProductFields">
 <summary>
 Gets the product fields.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.GetProductGroupFields">
 <summary>
 Gets the product group fields.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.GetOrderFields">
 <summary>
 Gets the order fields.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.GetCurrencies">
 <summary>
 Gets the currencies.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.GetCurrency(System.String)">
 <summary>
 Gets the currency.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.GetDefaultCurrency">
 <summary>
 Gets the default currency.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.GetShops">
 <summary>
 Gets the shops.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.GetDefaultShop">
 <summary>
 Gets the default shop.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.GetShop(System.String)">
 <summary>
 Gets the shop.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.GetStockGroups">
 <summary>
 Gets the stock groups.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.GetRelatedGroups">
 <summary>
 Gets the related groups.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.GetVariantGroups">
 <summary>
 Gets the variant groups.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.GetVatGroups">
 <summary>
 Gets the vat groups.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.GetPeriods">
 <summary>
 Gets the periods.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.GetPeriod(System.String)">
 <summary>
 Gets the period.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.GetOrderStates">
 <summary>
 Gets the order states.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.SetContextUpdatedTime">
 <summary>
 Sets the context updated time - Date.Now.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillAll">
 <summary>
 Kills/clears all application variables. 
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillGroups">
 <summary>
 Kills the group cache.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillPeriods">
 <summary>
 Kills the period application variable.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillCurrencies">
 <summary>
 Kills the currency application variable.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillCountries">
 <summary>
 Kills the country application variable.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillProductFields">
 <summary>
 Kills the product fields application variable.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillProductGroupFields">
 <summary>
 Kills the product group fields application variable.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillOrderFields">
 <summary>
 Kills the order fields application variable.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillLanguages">
 <summary>
 Kills the languages application variable.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillVariantGroups">
 <summary>
 Kills the variant groups application variable for each languages.
 </summary>        
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillVariantOptions">
 <summary>
 Kills the variant options cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillStockGroups">
 <summary>
 Kills the stock groups application variable.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillRelatedGroups">
 <summary>
 Kills the related groups application variable for each languages.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillShops">
 <summary>
 Kills the shop application variable and session.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillManufacturers">
 <summary>
 Kills the manufacturer application variable.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillVatGroups">
 <summary>
 Kills the vat groups application variable.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillOrderStates">
 <summary>
 Kills the order states application variable.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillValidationGroups">
 <summary>
 Kills the validation groups application variable.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillOrderLineFields">
 <summary>
 Kills the order line fields application variable and clears the cached orderlinefields.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillAssortments">
 <summary>
 Kills the assortments application variables.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Application.KillDiscounts">
 <summary>
 Kills the discounts.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Common.BeforeLogoffSubscriber">
 <summary>
 BeforeLogoffSubscriber class.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationSubscriber" />
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Common.BeforeLogoffSubscriber.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Called when [notify].
 </summary>
 <param name="notification">The notification.</param>
 <param name="args">The arguments.</param>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Common.BeforeLoginSubscriber">
 <summary>
 BeforeLoginSubscriber class.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationSubscriber" />
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Common.BeforeLoginSubscriber.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Called when [notify].
 </summary>
 <param name="notification">The notification.</param>
 <param name="args">The arguments.</param>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Common.Context">
 <summary>
 Get and set context variables of the eCommerce system like language, country and currency.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.CartContext">
 <summary>
 Gets or sets the current <see cref="T:Dynamicweb.Ecommerce.Orders.OrderContext">cart context</see>.
 </summary>
 <value>The cart context.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.SessionCartKey">
 <summary>
 Gets the session cart key.
 </summary>
 <value>The session cart key.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.CartSession">
 <summary>
 Gets the cart session.
 </summary>
 <value>The cart session.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.Cart">
 <summary>
 Gets the cart.
 </summary>
 <value>Returns the cart from a session variables otherwise NULL is returned.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.OrderTime">
 <summary>
 The value of this property is used when calculating prices, discounts, periods and all other places where products or order (or related information) are affected by time.
 </summary>
 <value>The order time.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.CartDiscountsAndTaxesAreHandled">
 <summary>
 The flag - the current cart discounts and taxes are handled or not.
 </summary>
 <value>The current cart discounts and taxes are handled.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.Currency">
 <summary>
 Gets or sets the currency.
 </summary>
 <value>The currency from the session variables otherwise the default currency.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.CurrencySetByCustomer">
 <summary>
 Gets or sets a value indicating whether the CurrencySetByCustomer session exists and has a value.
 </summary>
 <value><c>true</c> if the CurrencySetByCustomer session exists and has a value; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.Country">
 <summary>
 Gets or sets the country.
 </summary>
 <value>The country. If no country found, <c>null</c> will be returned</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.CountrySetByCustomer">
 <summary>
 Gets or sets a value indicating whether the CurrencySetByCustomer session exists and has a value.
 </summary>
 <value><c>true</c> if the CurrencySetByCustomer session exists and has a value; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.TimeOfLoad">
 <summary>
 Gets the time of load.
 </summary>
 <value>The time of load. Value from the TimeOfLoad session.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.LanguageSetByCustomer">
 <summary>
 Gets or sets a value indicating whether the LanguageSetByCustomer session exists and has a value.
 </summary>
 <value><c>true</c> if the LanguageSetByCustomer session exists and has a value; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.Language">
 <summary>
 Gets or sets the language.
 </summary>
 <value>The language.</value>
 <exception cref="T:System.ArgumentNullException">Setting a <see cref="P:Dynamicweb.Ecommerce.Common.Context.Language" /> that is <c>null</c>.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.LanguageID">
 <summary>
 Gets or sets the language ID.
 </summary>
 <value>The language ID.</value>
 <exception cref="T:System.InvalidOperationException">Language ID does not exist in the context and default language does not exist.</exception>
 <exception cref="T:System.InvalidOperationException">Setting a language ID that does not exist.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.Manufacturers">
 <summary>
 Gets the manufacturers.
 </summary>
 <value>The manufacturers.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.Periods">
 <summary>
 Gets the periods.	
 </summary>
 <value>The periods.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.SaveMethodCombos">
 <summary>
 Gets the save method combos.
 </summary>
 <value>The save method combos.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.SaveMethodCustomCombos">
 <summary>
 Gets the save method custom combos.
 </summary>
 <value>The save method custom combos.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.DisplayPricesWithVat">
 <summary>
 Gets or sets a value indicating whether prices in frontend are displayed with or without VAT.
 </summary>
 <value><c>true</c> if prices should be displayed with VAT; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.DisplayPricesWithVatSetByCustomer">
 <summary>
 Gets or sets a value indicating whether <see cref="P:Dynamicweb.Ecommerce.Common.Context.DisplayPricesWithVat" /> property has been set explicitly in QueryString.
 </summary>
 <value><c>true</c> if set explicitly; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.ReverseChargeForVatEnabled">
 <summary>
 Gets or sets a value indicating whether VAT is in a reverse charge situation.
 In this case, VAT is not present in the product price for the affected VAT groups.
 This is standard VAT law in EU for B2B, where the buyer must handle the VAT rather than the reseller.
 </summary>
 <value><c>true</c> if VAT is in a reverse charge situation; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Context.StockLocation">
 <summary>
 Gets or sets the stock location.
 </summary>
 <value>The stock location. If no stock location found NULL will be returned</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Context.GetCartContext">
 <summary>
 Gets the current <see cref="T:Dynamicweb.Ecommerce.Orders.OrderContext">cart context</see>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Context.SetPersistentCartContext(System.String)">
 <summary>
 Sets the persistent <see cref="T:Dynamicweb.Ecommerce.Orders.OrderContext">cart context</see>.
 </summary>
 <param name="contextId">The cart context ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Context.GetCart">
 <summary>
 Gets the cart.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Context.SetCart(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Sets the cart and saves it.
 </summary>
 <param name="cart">The cart.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Context.GetCurrency">
 <summary>
 Gets the currency.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Context.SetCurrency(Dynamicweb.Ecommerce.International.Currency)">
 <summary>
 Sets the currency.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Context.GetCountry">
 <summary>
 Gets the country.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Context.GetLanguageID">
 <summary>
 Gets the language ID.
 </summary>
 <returns>The language ID.</returns>
 <exception cref="T:System.InvalidOperationException">Language ID does not exist in the context and default language does not exist.</exception>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Context.SetLanguageID(System.String)">
 <summary>
 Sets the language ID.
 </summary>
 <exception cref="T:System.InvalidOperationException">Setting a language ID that does not exist.</exception>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Context.GetSaveMethodCombos">
 <summary>
 Gets the save method combos.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Context.GetSaveMethodCustomCombos">
 <summary>
 Gets the save method custom combos.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Context.CheckLoad">
 <summary>
 Checks is the Context is updated and sets TimeOfLoad,PropertyTypes,Manufacturers and Periods sessions.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Context.SetCurrencyWithoutResettingTaxesAndDiscounts(Dynamicweb.Ecommerce.International.Currency)">
 <summary>
 Sets the currency without resetting taxes and discounts.
 </summary>
 <param name="newCurrency">The new currency.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Context.ConvertKeyToCartContextAwareKey(System.String)">
 <summary>
 Converts the key to a cart context aware key. If no context is present, the key is not changed.
 </summary>
 <param name="key">The key.</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Context.LoadUserContextCarts">
 <summary>
 Loads the user context carts.
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Common.ContextMacro">
 <summary>
 ContextMacro class.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Macros.Macro" />
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Common.ContextMacro.Evaluate(System.String)">
 <summary>
 Evaluates the specified action.
 </summary>
 <param name="action">The action.</param>
 <returns>System.Object.</returns>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Common.ContextMacro.Name">
 <summary>
 Gets the name.
 </summary>
 <value>The name.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Common.ContextMacro.SupportedActions">
 <summary>
 Gets the supported actions.
 </summary>
 <value>The supported actions.</value>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Common.eCom7.Functions">
 <summary>
 Class Functions represents Ecommerce UI related fucntion container
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.GetBreadcrumb(System.String,System.String,System.Action{System.Collections.Generic.List{System.String}})">
 <summary>
 Gets breadcrumb markup
 </summary>
 <param name="shopFilter">shop filter</param>
 <param name="treeOpenTo">path from tree</param>
 <param name="prosessBeforeRender">actions to be processed before compose result markup</param>
 <returns>String representation of breadcrumb</returns>
 <example>
 /GROUPS/SHOP1/GROUP3/GROUP2/GROUP4/GROUP2/GROUP4/GROUP2 - if showFilter == "ALL"
 /GROUPS/GROUP3/GROUP2/GROUP4/GROUP2/GROUP4/GROUP2
 /ORDERS
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.ButtonPropertyImage(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Returns the image property for a button.
 </summary>
 <param name="buttonName">Name of the button.</param>
 <returns>String with the image path.</returns>
 <history>
 	[bbr]	25-08-2006	Created
 </history>
 -----------------------------------------------------------------------------
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.ButtonPropertyLabel(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Returns the label property for a button.
 </summary>
 <param name="buttonName">Name of the button.</param>
 <returns>String with the label text.</returns>
 <history>
 	[bbr]	25-08-2006	Created
 </history>
 -----------------------------------------------------------------------------
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.FormCreator(System.String)">
 <summary>
 Creates search box forms for eCommerce top toolbar
 </summary>
 <param name="formType">Type of search form</param>
 <returns>String representation of search form markup</returns>
 <remarks>
 Form Types:
 "ProdSearchGroupTree" 
 "ProdSearchQuery"
 "OrderSearch"
 "SpanHolder"
 </remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.ButtonCreator(System.String,System.String,System.Boolean,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Overload for ButtonCreator using button properties.
 </summary>
 <param name="buttonName">DW button alias</param>
 <param name="jsurl">Button onclick action</param>
 <param name="disabled">If <c>true</c> - button will be disabled</param>
 <param name="imgId">If <c>true</c> - button will imitate pressed state</param>
 <returns>String representation of button markup</returns>
 <history>
 	[bbr]	25-08-2006	Created
 </history>
 -----------------------------------------------------------------------------
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.ButtonCreator(System.String,System.String,System.String,System.Boolean,System.String,System.Boolean)">
 <summary>
 Creates buttons for eCommerce top toolbar.
 </summary>
 <param name="img">Font AwesomeClassname for button icon</param>
 <param name="title">Button title</param>
 <param name="jsurl">Button onclick action</param>
 <param name="disabled">If <c>true</c> - button will be disabled</param>
 <param name="imgId">Id for the icon</param>
 <param name="isPressed">If <c>true</c> - button will imitate pressed state</param>
 <returns>String representation of button markup</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.ShowBoxLayerStart(System.String,System.String,System.String,Dynamicweb.Ecommerce.Common.eCom7.Renderer{System.String},System.Boolean,System.String)">
 <summary>
 Renders the eCommerce top toolbar with misc. functionallity an buttons.
 </summary>
 <param name="idName">Name of the id.</param>
 <param name="header">The header.</param>
 <param name="menuHolder">The menu holder.</param>
 <param name="languageRenderer">language dropdown instance</param>
 <param name="hideLangSelector">if set to <c>true</c> [hide lang selector].</param>
 <param name="type">Ecommerce area type alias (COUNTRY, LANG, CURR etc.)</param>
 <returns>String representation of toolbar markup</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.GetCountryRelData(System.String,System.String)">
 <summary>
 Gets the country relation selector - GUI.
 </summary>
 <param name="methodId">The method ID.</param>
 <param name="methodType">Type of the method. (PAY / SHIP)</param>
 <returns>Returns a HTML table with a Country Relation selector</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.GetCountryRelData(System.String,System.String,System.Boolean)">
 <summary>
 Gets the country relation selector - GUI.
 </summary>
 <param name="methodId">The method ID.</param>
 <param name="methodType">Type of the method. (PAY / SHIP)</param>
 <param name="valueField">if set to <c>true</c> then it show the values in a input field.</param>
 <returns>Returns a HTML table with a Country Relation selector</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.GetCountryRelData(System.String,System.String,System.Boolean,System.String)">
 <summary>
 Gets the country relation selector - GUI.
 </summary>
 <param name="methodId">The method ID.</param>
 <param name="methodType">Type of the method. (PAY / SHIP)</param>
 <param name="valueField">if set to <c>true</c> then it show the values in a input field.</param>
 <param name="header">The header.</param>
 <returns>Returns a HTML table with a Country Relation selector</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.GetCountryRelData(System.String,System.String,System.Boolean,System.String,System.Boolean,System.Boolean)">
 <summary>
 Gets the country relation selector - GUI.
 </summary>
 <param name="methodId">The method ID.</param>
 <param name="methodType">Type of the method. (PAY / SHIP)</param>
 <param name="valueField">if set to <c>true</c> then it show the values in a input field.</param>
 <param name="header">The header.</param>
 <param name="foldoutDefaultMethods">if set to <c>true</c> show the default methods selector.</param>
 <param name="showRegions">if set to <c>true</c> show the regions</param>
 <returns>Returns a HTML table with a Country Relation selector</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.GetCountryRelData(System.String,System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Gets the country relation selector - GUI.
 </summary>
 <param name="methodId">The method ID.</param>
 <param name="methodType">Type of the method. (PAY / SHIP)</param>
 <param name="valueField">if set to <c>true</c> then it show the values in a input field.</param>
 <param name="header">The header.</param>
 <param name="foldoutDefaultMethods">if set to <c>true</c> show the default methods selector.</param>
 <param name="showRegions">if set to <c>true</c> show the regions</param>
 <param name="showReverseCharge">if set to <c>true</c> show the reverrse charge</param>
 <returns>Returns a HTML table with a Country Relation selector</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.GetCountryRelData(System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Gets the country relation selector - GUI.
 </summary>
 <param name="methodId">The method ID.</param>
 <param name="methodType">Type of the method. (PAY / SHIP)</param>
 <param name="valueField">if set to <c>true</c> then it show the values in a input field.</param>
 <param name="isRenderAsFieldset">if set to <c>true</c> html markup will be composed using fieldset</param>
 <param name="header">The header.</param>
 <param name="foldoutDefaultMethods">if set to <c>true</c> show the default methods selector.</param>
 <param name="showRegions">if set to <c>true</c> show the regions</param>
 <param name="showReverseCharge">if set to <c>true</c> show the reverrse charge</param>
 <returns>Returns a HTML table with a Country Relation selector</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.GetCountryRelData(System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
 <summary>
 Gets the country relation selector - GUI.
 </summary>
 <param name="methodId">The method ID.</param>
 <param name="methodType">Type of the method. (PAY / SHIP)</param>
 <param name="valueField">if set to <c>true</c> then it show the values in a input field.</param>
 <param name="isRenderAsFieldset">if set to <c>true</c> html markup will be composed using fieldset</param>
 <param name="header">The header.</param>
 <param name="foldoutDefaultMethods">if set to <c>true</c> show the default methods selector.</param>
 <param name="showRegions">if set to <c>true</c> show the regions</param>
 <param name="showReverseCharge">if set to <c>true</c> show the reverrse charge</param>
 <param name="label">Label on the left of control</param>
 <returns>Returns a HTML table with a Country Relation selector</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.SetCountryRelData(System.String,System.String,System.String)">
 <summary>
 Sets the country relations for the payment or shipping method.
 </summary>
 <param name="methodId">The method ID.</param>
 <param name="methodType">Type of the method. (PAY / SHIP)</param>
 <param name="countryIdArray">The country ID. If multiple, seperated with comma (,) </param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.UpdateCreateDefaultCountryRel(System.String,System.String,System.String)">
 <summary>
 Updates or Creates the default country relations for the payment or shipping method.
 </summary>
 <param name="countryId">The country ID.</param>
 <param name="methodType">Type of the method. (PAY / SHIP)</param>
 <param name="defaultId">The default method ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.ActiveProductIsVariant">
 <summary>
 Checks is the active product is variant.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.IsEcom">
 -----------------------------------------------------------------------------
 <summary>
 Checks which eCommerce modules has access and returns true if the right eCommerce modules is installed.
 </summary>
 <returns>Returns true if eCom module is installed</returns>
 <remarks>
 </remarks>
 <history>
 	[tfc]	19-10-2006	Created
 </history>
 -----------------------------------------------------------------------------
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.ReplaceForEditor(System.String)">
 <summary>
 Replaces output string for editor. Removes specific characters.
 </summary>
 <param name="stringToReplace">The string to replace.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.ShowUnTranslatedItems">
 <summary>
 Determines whether to show the untranslated items if the ShowUnTranslatedItems setting is checked.
 </summary>
 <returns><c>true</c> if the ShowUnTranslatedItems setting is checked; otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.eCom7.Functions.ShowUnTranslatedItems(System.String)">
 <summary>
 Determines whether to show the untranslated items.
 </summary>
 <param name="type">The type.</param>
 <returns><c>true</c> if the ShowUnTranslatedItems setting is checked; otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.Loader(System.String)">
 <summary>
 Shows default eCommercer loader animation
 </summary>
 <param name="elementName">Name of the element.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.Loader(System.String,System.Boolean,System.String)">
 <summary>
 Shows default eCommercer loader animation
 </summary>
 <param name="elementName">Name of the element.</param>
 <param name="clearCache">if set to <c>true</c> [clear cache].</param>
 <param name="headerStr">The header STR.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.ClearBrowserCache">
 <summary>
 Clears the browser cache. Uses the response cache control
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.CreateDropDownArrayList(System.Collections.ArrayList,System.Web.UI.WebControls.DropDownList,System.String,System.Boolean,System.String)">
 <summary>
 Fills up the drop down (ListItem webcontrol). Used in eCommerce backend for misc. dropdown selectors
 </summary>
 <param name="datalist">The datalist.</param>
 <param name="dropdownObj">The dropdown list webcontrol.</param>
 <param name="selectedData">The selected data.</param>
 <param name="showNothingSelectedItem">if set to <c>true</c> [show none value].</param>
 <param name="nothingSelectedLabel">The none value tx T.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.CreateDropDown(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Web.UI.WebControls.DropDownList,System.String,System.Boolean,System.String)">
 <summary>
 Fills up the drop down (ListItem webcontrol). Used in eCommerce backend for misc. dropdown selectors
 </summary>
 <param name="datalist">The datalist.</param>
 <param name="dropdownObj">The dropdown list webcontrol.</param>
 <param name="selectedData">The selected data.</param>
 <param name="showNothingSelectedItem">if set to <c>true</c> [show none value].</param>
 <param name="nothingSelectedLabel">The none value tx T.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.CreateDropDown(System.Collections.SortedList,System.Web.UI.WebControls.DropDownList,System.String,System.Boolean,System.String)">
 <summary>
 Fills up the drop down (ListItem webcontrol). Used in eCommerce backend for misc. dropdown selectors
 </summary>
 <param name="datalist">The datalist.</param>
 <param name="dropdownObj">The dropdown list webcontrol.</param>
 <param name="selectedData">The selected data.</param>
 <param name="showNothingSelectedItem">if set to <c>true</c> [show none value].</param>
 <param name="nothingSelectedLabel">The none value tx T.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.CreateHtmlDropdown(System.Collections.SortedList,System.Web.UI.HtmlControls.HtmlSelect,System.String,System.Boolean,System.String)">
 <summary>
 Fills up the drop down (ListItem webcontrol). Used in eCommerce backend for misc. dropdown selectors
 </summary>
 <param name="datalist">The datalist.</param>
 <param name="dropdownObj">The dropdown HtmlSelect list webcontrol.</param>
 <param name="selectedData">The selected data.</param>
 <param name="showNothingSelectedItem">if set to <c>true</c> [show none value].</param>
 <param name="nothingSelectedLabel">The none value tx T.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.CountryRelDefaultData(System.String)">
 <summary>
 Country relation selector for payment and shipping. Set default data UI.
 </summary>
 <param name="methodCode">The method(sipping or payment) code.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.CountryRelDefaultData(System.String,System.Boolean)">
 <summary>
 Country relation selector for payment and shipping. Set default data UI.
 </summary>
 <param name="methodCode">The method(sipping or payment) code.</param>
 <param name="advancedLayout">if set to <c>true</c> [advanced layout].</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.CountryRelDefaultData(System.String,System.Boolean,System.String)">
 <summary>
 Country relation selector for payment and shipping. Set default data UI.
 </summary>
 <param name="methodCode">The method(sipping or payment) code.</param>
 <param name="advancedLayout">if set to <c>true</c> [advanced layout].</param>
 <param name="fieldPostFix">The field post fix.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.CountryFeeData(System.String,System.String,System.String)">
 <summary>
 Renders country fee matrix UI.
 </summary>
 <param name="methodType">Type of the method.</param>
 <param name="methodId">The method id.</param>
 <param name="countryId">The country id.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.SaveFeeData(System.String)">
 <summary>
 Saves the fee data.
 </summary>
 <param name="preFix">The pre fix.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.SaveFeeData(System.String,System.String)">
 <summary>
 Saves the fee data.
 </summary>
 <param name="preFix">The pre fix.</param>
 <param name="methodId">The method id</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.AccessDbAlert">
 <summary>
 Renders javascript alert for use of ms access with eCommerce.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.AlertMessageBox(System.String,System.String)">
 <summary>
 Creates a nice formated alertbox (NOT Javascript)
 </summary>
 <param name="translatedText">The translated text.</param>
 <param name="boxWidth">Width of the box.</param>
 <returns></returns>
 <history>
 	[tfc]	29-08-2006	Created
 </history>        
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.AlertMessageBox(System.String,System.String,System.String)">
 <summary>
 Creates a nice formated alertbox (NOT Javascript)
 </summary>
 <param name="translatedText">The translated text.</param>
 <param name="boxWidth">Width of the box.</param>
 <param name="cssClass">The CSS class.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.GetWeightUnit">
 <summary>
 Gets the weight unit text from global settings.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.GetVolumeUnit">
 <summary>
 Gets the volume unit text from global settings.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.GroupListData(System.String)">
 <summary>
 Show a UI list of product groups.
 </summary>
 <param name="selectedCsv">The selected CSV.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.GroupListData(System.String,System.String)">
 <summary>
 Show a UI list of product groups.
 </summary>
 <param name="selectedCsv">The selected CSV.</param>
 <param name="inputFieldName">Name of the input field.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.GroupListData(System.String,System.String,System.String)">
 <summary>
 Show a UI list of product groups.
 </summary>
 <param name="selectedCsv">The selected CSV.</param>
 <param name="inputFieldName">Name of the input field.</param>
 <param name="removeJsFunction">The remove js function.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Gui.GroupListData(System.String,System.String,System.String,System.String)">
 <summary>
 Show a UI list of product groups. 
 </summary>
 <param name="selectedCsv">The selected CSV.</param>
 <param name="inputFieldName">Name of the input field.</param>
 <param name="removeJsFunction">The remove js function.</param>
 <param name="altPostFixRemoveId">The alt post fix remove ID.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Common.Number">
 <summary>
 Number class.
 </summary>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Number.ID">
 <summary>
 Gets or sets the ID.
 </summary>
 <value>The ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Number.Type">
 <summary>
 Gets or sets the type.
 </summary>
 <value>The type.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Number.Description">
 <summary>
 Gets or sets the description.
 </summary>
 <value>The description.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Number.Counter">
 <summary>
 Gets or sets the counter.
 </summary>
 <value>The counter.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Number.Prefix">
 <summary>
 Gets or sets the prefix.
 </summary>
 <value>The prefix.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Number.PostFix">
 <summary>
 Gets or sets the post fix.
 </summary>
 <value>The post fix.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Number.Add">
 <summary>
 Gets or sets the add.
 </summary>
 <value>The add.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Number.Editable">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Common.Number" /> is editable.
 </summary>
 <value><c>true</c> if editable; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Number.TableName">
 <summary>
 Gets or set the table name
 </summary>
 <returns>Name of the related table</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Common.Number.ColumnName">
 <summary>
 Gets or set the column name
 </summary>
 <returns>Name of the related column</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Number.NewNumber">
 <summary>
 Gets new number and saves the result.
 </summary>
 <returns>A new number with prefix and postfix</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Number.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Common.Number" /> class.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Number.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Common.Number" /> class.
 </summary>
 <param name="dataReader">The data record.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Number.LoadFromType(System.String)">
 <summary>
 Loads from type.
 </summary>
 <param name="type">The type.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Number.Fill(System.Data.IDataReader)">
 <summary>
 Fills the specified data record.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Number.Save">
 <summary>
 Saves this instance.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Number.Delete">
 <summary>
 Deletes this instance.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Number.GetNumberById(System.String)">
 <summary>
 Gets the number by identifier. Number must be editable.
 </summary>
 <param name="id">The identifier.</param>
 <returns>Number.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Number.GetNumbersByEditability(System.Boolean)">
 <summary>
 Gets the numbers by their editability.
 </summary>
 <param name="editable">if set to <c>true</c> [editable].</param>
 <returns>A list of editable/not editable numbers</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Number.GetAllNumbers">
 <summary>
 Gets all numbers.
 </summary>
 <returns>IEnumerable(Of Number).</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Common.Number.GetNumbersBySql(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Loads the specified SQL and adds numbers to the list.
 </summary>
 <param name="commandBuilder">The <see cref="T:Dynamicweb.Data.CommandBuilder"/>.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Common.NumberGenerator">
 <summary>
 NumberGenerator class.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Common.NumberGenerator.GetNumber(System.String)">
 <summary>
 Gets the number for a specific type (ex. ORDER or PROD).
 </summary>
 <param name="type">The type. (ex. ORDER or PROD)</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Content.Items.Annotations.ProductAttribute">
 <summary>
 Provides information about the product field.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Content.Items.Annotations.ProductAttribute.ShowOnParagraph">
 <summary>
 Gets or sets the paragraph identifier.
 </summary>
 <example>This sample shows how to set the property: <c>ShowOnParagraph = "Default.aspx?Id=1015#1022"</c></example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Content.Items.Annotations.ProductAttribute.ShowType">
 <summary>
 Gets or sets the value which defines objects types to show.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Content.Items.Annotations.ProductAttribute.RenderProductsFromGroups">
 <summary>
 Gets or sets the flag is the products from groups should be rendered on frontend.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Content.Items.Annotations.ProductAttribute.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Content.Items.Annotations.ProductAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="name">User-friendly name of the field.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Content.Items.Editors.EcomEditor`1">
 <summary>
 EcomEditor class.
 </summary>
 <typeparam name="T"></typeparam>
 <seealso cref="T:Dynamicweb.Content.Items.Editors.Editor" />
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Content.Items.Editors.EcomEditor`1.DataType">
 <summary>
 Gets the data type for this editor.
 </summary>
 <value>The type of the data.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Content.Items.Editors.EcomEditor`1.BeginEdit(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process.
 </summary>
 <param name="context">Editor context.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Content.Items.Editors.EcomEditor`1.EndEdit">
 <summary>
 Returns the edited value.
 </summary>
 <returns>The edited value.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Content.Items.Editors.EcomEditor`1.BeginEditFrontend(Dynamicweb.Content.Items.Editors.EditorContext)">
 <summary>
 Enables the editor to populate its UI to the client and initiate the editing process at frontend.
 </summary>
 <remarks>
 Ecom Editor disabled for frontend editing so it does not contain any implementation.
 </remarks>
 <param name="context">The context.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Content.Items.Editors.EcomEditor`1.HasValue">
 <summary>
 Tell if this editor returns a value
 </summary>
 <returns><c>true</c> if this instance has value; otherwise, <c>false</c>.</returns>
 <remarks>
 Ecom Editor disabled for frontend editing so it returns <c>false</c> if called from frontend.
 </remarks>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Content.Items.Editors.EcomEditor`1.RenderControl(System.IO.TextWriter,`0)">
 <summary>
 Renders the control.
 </summary>
 <param name="output">The output.</param>
 <param name="value">The value.</param>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditor">
 <summary>
 Represents a eCom product editor.
 </summary>
 <seealso cref="T:Dynamicweb.Ecommerce.Content.Items.Editors.EcomEditor`1" />
</member>
<member name="P:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditor.ParagraphID">
 <summary>
 Gets or sets the paragraph identifier.
 </summary>
 <value>The paragraph identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditor.ShowType">
 <summary>
 Gets or sets the value which defines objects types to show.
 </summary>
 <value></value>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditor.RenderProductsFromGroups">
 <summary>
 Gets or sets the flag is the products from groups should be rendered on frontend.
 </summary>
 <value></value>
</member>
<member name="M:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditor.EndEdit">
 <summary>
 Returns the edited value.
 </summary>
 <returns>The edited value.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditor.RenderValue(Dynamicweb.Content.Items.Editors.EditorRenderingContext)">
 <summary>
 Renders the value.
 </summary>
 <param name="context">The context.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditor.RenderItemListValue(System.String)">
 <summary>
 Render of the Item List value.
 </summary>
 <param name="value">Value</param>
 <returns>Rendered Value</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditor.ParseValue(System.String)">
 <summary>
 Parses the value.
 </summary>
 <param name="value">The value.</param>
 <returns>Parsed value as <c>IEnumerable(Of System.Object)</c>.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditor.ParseValue(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Parses the value.
 </summary>
 <param name="value">The value.</param>
 <returns>IEnumerable(Of System.Object).</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditor.GetItemsJson(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Gets JSON of selected product items in editor
 </summary>
 <param name="fieldValue">Editor value</param>
 <returns>The JSON object [{"value":"productItemId1", "text":"productItemDisplayedText", "icon":"productItemDisplayedIconClassName"}]</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditor.GetProductsNamesByIDs(System.String)">
 <summary>
 Gets the products names by ids.
 </summary>
 <param name="ids">The ids.</param>
 <returns>Comma separated products Names.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditor.RenderControl(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Renders the control.
 </summary>
 <param name="output">The output.</param>
 <param name="value">The value.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditor.GroupValue(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Groups object's ids by their type for group fetching from Db.
 </summary>
 <param name="value"></param>
 <returns>Values grouped by type</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditor.CreateRenderer(Dynamicweb.Content.Items.Editors.EditorRenderingContext)">
 <summary>
 Creates the renderer.
 </summary>
 <param name="context">The context.</param>
 <returns>Ecommerce.Frontend.Renderer.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditorListBoxItem">
 <summary>
 The class ProductEditorListBoxItem represents product editor list box item.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditorListBoxItem.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes new instance of ProductEditorListBoxItem class.
 </summary>
 <param name="itemId">The item id.</param>
 <param name="text">The item text.</param>
 <param name="iconClass">The item icon class.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditorListBoxItem.ItemId">
 <summary>
 Gets or sets the item id.
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditorListBoxItem.Text">
 <summary>
 Gets or sets the item displayed text.
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Content.Items.Editors.ProductEditorListBoxItem.IconClass">
 <summary>
 Gest or sets the item icon class name.
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Constants">
 <summary>
 A collection of constant values for Customer Center.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Constants.TemplateFolder">
 <summary>
 Stores relative path to the template folder.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler">
 <summary>
 The class CustomerCenterHandler represents handle of Customer Center actions.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.GetParagraphId(System.String)">
 <summary>
 Gets the paragraph Id.
 </summary>
 <param name="paramName">Name of the parameter.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleAddRmaComment">
 <summary>
 Handles the add RMA comment.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleAddRma">
 <summary>
 Handles the add RMA.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleCancelRma">
 <summary>
 Handles the cancel RMA.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleDeleteToken">
 <summary>
 Handles the deleting of payment token.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleDeleteRecurring">
 <summary>
 Handles the deleting of recurring order.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleCancelRecurringDelivery">
 <summary>
 Handles the cancel of recurring order delivery.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleAddToProductsList">
 <summary>
 Handles the add to favorites.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleCreateProductList">
 <summary>
 Handles the create new favorites list.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleEditProductList">
 <summary>
 Handles the edit favorites list.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandlePublishing">
 <summary>
 Handles the publish / unpublish favorites list.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleRemoveProductList">
 <summary>
 Handles the remove favorites list.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleUpdateQuantity">
 <summary>
 Handles the updating product quantity in the favorite list.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleUpdateSortOrder">
 <summary>
 Handles the updating product sort order in the favorite list.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleRemoveFromProductList">
 <summary>
 Handles the remove from favorites.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleSendList(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings,Dynamicweb.Frontend.PageView)">
 <summary>
 Handles the send favorites list as email.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleReorder">
 <summary>
 Handles the reorder.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleAddToCart">
 <summary>
 Handles add to cart.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleQuoteChangeState">
 <summary>
 Handles the change state.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleLedgerEntryPayBySavedCard">
 <summary>
 Handles payment by saved card.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterHandler.HandleLedgerEntryAddToCart">
 <summary>
 Handles add to cart command for ledger entries.
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings">
 <summary>
 The Class CustomerCenterSettings represents settings for customer center.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings.#ctor(Dynamicweb.Modules.Properties)">
 <summary>
 Initializes a new instance of a <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings">CustomerCenterSettings</see> class.
 </summary>
 <param name="properties">The customer center properties.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings.#ctor(System.Int32)">
 <summary>
 Initializes a new instance of a <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings">CustomerCenterSettings</see> class.
 </summary>
 <param name="paragraphId">The id of paragraph customer center properties will be taken from.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList">
 <summary>
 CustomerProductList class.
 </summary>
 <seealso cref="T:Dynamicweb.Data.DbObject" />
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.ListId">
 <summary>
 Gets or sets the list identifier.
 </summary>
 <value>The list identifier.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.AccessUserId">
 <summary>
 Gets or sets the access user identifier.
 </summary>
 <value>The access user identifier.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.IsPublished">
 <summary>
 Gets or sets a value indicating whether this instance is published.
 </summary>
 <value><c>true</c> if this instance is published; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.PublishedToDate">
 <summary>
 Gets or sets the published to date.
 </summary>
 <value>The published to date.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.Type">
 <summary>
 Gets or sets the type.
 </summary>
 <value>The type.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.IsDefault">
 <summary>
 Gets or sets a value indicating whether this instance is default.
 </summary>
 <value><c>true</c> if this instance is default; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.Description">
 <summary>
 Gets or sets the description.
 </summary>
 <value>The description.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.PublishedId">
 <summary>
 Gets or sets the published identifier.
 </summary>
 <value>The published identifier.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList" /> class.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.Fill(System.Data.IDataReader)">
 <summary>
 Fills the specified reader.
 </summary>
 <param name="reader">The reader.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.FillRow(System.Data.DataRow)">
 <summary>
 Fills the row.
 </summary>
 <param name="row">The row.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.Save">
 <summary>
 Saves current data to the database.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.Delete(System.Int32)">
 <summary>
 Deletes the object with specified Id.
 </summary>
 <param name="id">Specified Id.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.Products">
 <summary>
 Gets user's favorits products
 </summary>
 <value>User's favorite products. The collection is read-only.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.ProductsCount">
 <summary>
 Gets the count of products
 </summary>
 <value>The count of products.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.ProductsQuantity">
 <summary>
 Gets the quantity of products
 </summary>
 <value>The quantity of products.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.ClearCache(System.Int32)">
 <summary>
 Clears the cache.
 </summary>
 <param name="userId">The user identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.AddToFavorites(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Adds to favorites.
 </summary>
 <param name="product">The product.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.AddToFavorites(System.String,System.String,System.String)">
 <summary>
 Adds to favorites.
 </summary>
 <param name="productId">The product identifier.</param>
 <param name="variantId">The variant identifier.</param>
 <param name="languageId">The language identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.AddToFavorites(System.String,System.String,System.String,System.Int32)">
 <summary>
 Adds to favorites.
 </summary>
 <param name="productId">The product identifier.</param>
 <param name="variantId">The variant identifier.</param>
 <param name="languageId">The language identifier.</param>
 <param name="favoriteListId">The favorite list identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.RemoveFromFavorites(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Removes from favorites.
 </summary>
 <param name="order">The order.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.RemoveFromFavorites(System.String,System.String,System.String)">
 <summary>
 Removes from favorites.
 </summary>
 <param name="productId">The product identifier.</param>
 <param name="variantId">The variant identifier.</param>
 <param name="languageId">The language identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.RemoveFromFavorites(System.String,System.String,System.String,System.Int32,System.Double)">
 <summary>
 Removes from favorites.
 </summary>
 <param name="productId">The product identifier.</param>
 <param name="variantId">The variant identifier.</param>
 <param name="languageId">The language identifier.</param>
 <param name="favoriteListId">The favorite list identifier.</param>
 <param name="quantity">The quantity.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.RemoveFromFavorites(System.String,System.String,System.String,System.Int32,System.Double,System.Boolean)">
 <summary>
 Removes from favorites.
 </summary>
 <param name="productId">The product identifier.</param>
 <param name="variantId">The variant identifier.</param>
 <param name="languageId">The language identifier.</param>
 <param name="favoriteListId">The favorite list identifier.</param>
 <param name="quantity">The quantity.</param>
 <param name="isRemoveFromList">if set to <c>true</c> [is remove from list].</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.AddToFavorites(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
 <summary>
 Adds to favorites.
 </summary>
 <param name="productId">The product identifier.</param>
 <param name="variantId">The variant identifier.</param>
 <param name="languageId">The language identifier.</param>
 <param name="listName">Name of the list.</param>
 <param name="listType">Type of the list.</param>
 <param name="listDescription">The list description.</param>
 <param name="favoriteListId">The favorite list identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.AddToFavorites(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
 <summary>
 Adds to favorites.
 </summary>
 <param name="productId">The product identifier.</param>
 <param name="variantId">The variant identifier.</param>
 <param name="languageId">The language identifier.</param>
 <param name="listName">Name of the list.</param>
 <param name="listType">Type of the list.</param>
 <param name="listDescription">The list description.</param>
 <param name="favoriteListId">The favorite list identifier.</param>
 <param name="userId">The user identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.GneratePublishedId">
 <summary>
 Gnerates the published identifier.
 </summary>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.GetListTypesByUser(System.Int32)">
 <summary>
 Gets the favorites list by user id.
 </summary>
 <param name="customerId">The id of user</param>
 <returns>The favorites list</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.GetListTypesByCustomerNumber(System.String)">
 <summary>
 Gets the favorites list types by user customer number.
 </summary>
 <param name="customerNumber">The user customer number</param>
 <returns>The favorites list</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.GetListById(System.Int32)">
 <summary>
 Gets the favorite list by id.
 </summary>
 <param name="id">The id of favorite list.</param>
 <returns>The favorite list</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.GetListById(System.Int32,System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList})">
 <summary>
 Gets the list by identifier.
 </summary>
 <param name="id">The identifier.</param>
 <param name="favouriteListCollection">The favourite list collection.</param>
 <returns>CustomerProductList.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.GetListByPublishedId(System.String)">
 <summary>
 Gets the favorite list by published id.
 </summary>
 <param name="publishedId">The published id of favorite list.</param>
 <returns>The favorite list</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.GetAllProductLists(System.Int32)">
 <summary>
 Gets the default favorite list by user id.
 </summary>
 <param name="userId">The user id of favorite list.</param>
 <returns>The favorites list</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.GetDefaultList(System.Int32)">
 <summary>
 Gets the default favorite list by user id.
 </summary>
 <param name="userId">The user id of favorite list.</param>
 <returns>The favorites list</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.GetDefaultList(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList})">
 <summary>
 Gets the default favorite list by user id.
 </summary>
 <param name="favouriteListCollection">The user id of favorite list.</param>
 <returns>The favorites list</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.GetListByType(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList},System.String)">
 <summary>
 Gets the favorites list by type.
 </summary>
 <param name="productListCollection">The product list collection.</param>
 <param name="type">The type.</param>
 <returns>The favorites list by type</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.GetListByType(System.Int32,System.String)">
 <summary>
 Gets the favorites list by user id.
 </summary>
 <param name="customerId">The id of user</param>
 <param name="type">The type.</param>
 <returns>The favorites list</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.GetListByCustomerId(System.Int32)">
 <summary>
 Gets the favorites list by user id.
 </summary>
 <param name="customerId">The id of user</param>
 <returns>The favorites list</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.GetListsByUserCustomerNumber(System.String)">
 <summary>
 Gets the lists by user customer number.
 </summary>
 <param name="customerNumber">The customer number of user</param>
 <returns>The favorites list</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList.GetProductListBySql(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Gets the stock location by SQL.
 </summary>
 <param name="builder">The command builder containing the query.</param>
 <returns>The collection of stock location.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer">
 <summary>
 BaseCustomerCenterRenderer class.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.Tags.CustomerCenterMenu">
 <summary>
 The customer center menu
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.Tags.CustomerCenterErrorMessage">
 <summary>
 The error from customer center handlers
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.Tags.PagingCurrentPage">
 <summary>
 The paging current page
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.Tags.PagingNumPages">
 <summary>
 The paging number pages
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.Tags.PagingHasPages">
 <summary>
 The paging has pages
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.Tags.PagingBack">
 <summary>
 The paging back
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.Tags.PagingBackUrl">
 <summary>
 The paging back URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.Tags.PagingForward">
 <summary>
 The paging forward
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.Tags.PagingForwardUrl">
 <summary>
 The paging forward URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.Tags.PagingCurrentPageClass">
 <summary>
 The paging current page class
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.Tags.PagingPageIndex">
 <summary>
 The paging page index
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.Tags.PagingPageIndexUrl">
 <summary>
 The paging page index URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.Tags.LoopPaging">
 <summary>
 The loop paging
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.Tags.EvenRow">
 <summary>
 The even row
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.Tags.CustomerCenterParagraphId">
 <summary>
 The paragraph identifier
 </summary>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.ErrorMessage">
 <summary>
 Get or set the error from customer center handlers
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.Settings">
 <summary>
 Settings of the customer center page.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.PageView">
 <summary>
 PageView of the customer center module.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.ParagraphId">
 <summary>
 Paragraph id of the customer center module.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.RawUrl">
 <summary>
 Raw url of customer center page.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.ViewModeUrl(System.String,System.String)">
 <summary>
 Gets the url with given view mode.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.ViewMode">
 <summary>
 Gets the current view mode.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.SortBy">
 <summary>
 Gets the current sort by field.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.SortOrder">
 <summary>
 Gets the current sort order.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.GetParameter(System.String)">
 <summary>
 Gets the parameter from request.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.SetParameter(System.String,System.String,System.String)">
 <summary>
 Gets the url with given parameter.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings,Dynamicweb.Frontend.PageView,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer"/> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphID">The paragraph identifier.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.Output">
 <summary>
 Outputs this instance.
 </summary>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.RenderCustomerCenterMenu(Dynamicweb.Rendering.Template)">
 <summary>
 Renders a customer center menu.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.RenderSorting(Dynamicweb.Rendering.Template,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Renders sorting tags.
 </summary>
 <param name="template">The Template.</param>
 <param name="sortTagNames">The names for sorting tags.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.RenderPaging(Dynamicweb.Rendering.Template,System.Int32)">
 <summary>
 Renders paging for given number of items.
 </summary>
 <param name="template">The Template.</param>
 <param name="itemsCount">The number of items.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.RenderErrorMessage(Dynamicweb.Rendering.Template)">
 <summary>
 Renders error from customer center handlers.
 </summary>
 <param name="template">The Template.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.RenderEvenClass(Dynamicweb.Rendering.Template)">
 <summary>
 Renders indication of wheter this is an even or uneven line (usable for styling).
 </summary>
 <param name="template">The Template.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.GetItemsForPage``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Returns items for current page.
 </summary>
 <param name="items">All items.</param>
 <returns>A collection of items for current page.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.BaseCustomerCenterRenderer.GetItemsRange(System.Int32@,System.Int32@)">
 <summary>
 Returns the range specifying how many results needs to be selected.
 </summary>
 <param name="startIndex">The start index of range.</param>
 <param name="pageSize">The ammount of items.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.EmailSpecificationRenderer">
 <summary>
 EMailSpecification class.
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.EmailSpecificationRenderer.Tags">
 <summary>
 Tags class.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.EmailSpecificationRenderer.Tags.CustomerCenterMenu">
 <summary>
 The customer center menu
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.EmailSpecificationRenderer.Tags.EMailIndex">
 <summary>
 The e mail index
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.EmailSpecificationRenderer.Tags.EMail">
 <summary>
 The e mail
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.EmailSpecificationRenderer.Tags.LoopMails">
 <summary>
 The loop mails
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.EmailSpecificationRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings@,Dynamicweb.Frontend.PageView@,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.EmailSpecificationRenderer"/> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.EmailSpecificationRenderer.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.EmailSpecificationRenderer.Output">
 <summary>
 Outputs this instance.
 </summary>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.FrequentlyBoughtItemsRenderer">
 <summary>
 Frequently bought items renderer class
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.FrequentlyBoughtItemsRenderer.Tags">
 <summary>
 Tags class.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.FrequentlyBoughtItemsRenderer.Tags.CustomerCenterMenu">
 <summary>
 The customer center menu
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.FrequentlyBoughtItemsRenderer.Tags.FrequentlyBoughtItemsQta">
 <summary>
 The frequently bought items qta
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.FrequentlyBoughtItemsRenderer.Tags.LoopFrequentlyBoughtItems">
 <summary>
 The loop frequently bought items
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.FrequentlyBoughtItemsRenderer.Tags.NoFrequentlyBoughtItems">
 <summary>
 The no frequently bought items
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.FrequentlyBoughtItemsRenderer.Tags.ProductDetails">
 <summary>
 The product details
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.FrequentlyBoughtItemsRenderer._output">
 <summary>
 The _output
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.FrequentlyBoughtItemsRenderer.GetFrequentlyBoughtItems">
 <summary>
 Gets the frequently bought items.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.FrequentlyBoughtItemsRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings@,Dynamicweb.Frontend.PageView@,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.FrequentlyBoughtItemsRenderer" /> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.FrequentlyBoughtItemsRenderer.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.FrequentlyBoughtItemsRenderer.Output">
 <summary>
 Outputs this instance.
 </summary>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer">
 <summary>
 LedgerEntriesRenderer class.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.Tags">
 <summary>
 Tags class.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.Tags.CustomerCenterMenu">
 <summary>
 The customer center menu
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.Tags.BelongsToCurrentUser">
 <summary>
 The belongs to current user
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.Tags.LoopLedgerEntries">
 <summary>
 The loop LedgerEntries
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.Tags.BaseUrl">
 <summary>
 The base URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.Tags.EmptyLedgerEntryList">
 <summary>
 The empty LedgerEntry list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.Tags.LedgerEntryCount">
 <summary>
 The LedgerEntry count
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.Tags.Resend">
 <summary>
 The resend
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.Tags.HasBeenResent">
 <summary>
 The has been resent
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.Tags.HasBeenResentMsg">
 <summary>
 The has been resent MSG
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.Tags.Print">
 <summary>
 The print
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.Tags.AddToCart">
 <summary>
 The add to cart link
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.Tags.LedgerEntryDetails">
 <summary>
 The LedgerEntry details
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.Tags.Search">
 <summary>
 The search
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.Tags.ExcelExport">
 <summary>
 The excel export
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings@,Dynamicweb.Frontend.PageView@,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer"/> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.RenderSavedCards(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Rendering.Template)">
 <summary>
 Renders the available saved cards.
 </summary>
 <param name="LedgerEntry">The LedgerEntry.</param>
 <param name="template">The template.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntriesRenderer.Output">
 <summary>
 Outputs this instance.
 </summary>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntryRenderer">
 <summary>
 LedgerEntryRenderer class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntryRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings@,Dynamicweb.Frontend.PageView@,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntryRenderer"/> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntryRenderer.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LedgerEntryRenderer.Output">
 <summary>
 Outputs this instance.
 </summary>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LoyaltyPointsRenderer">
 <summary>
 LoyaltyPointsRenderer class.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LoyaltyPointsRenderer.Tags.LoopTransactionList">
 <summary>
 The loop transaction list
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LoyaltyPointsRenderer.Tags.EmptTransactionsList">
 <summary>
 The empty transaction list
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LoyaltyPointsRenderer.Tags.BaseUrl">
 <summary>
 The base URL
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LoyaltyPointsRenderer.Tags.DetailsUrl">
 <summary>
 The details URL
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LoyaltyPointsRenderer.Tags.LoyaltyPointsCount">
 <summary>
 The transactions count
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LoyaltyPointsRenderer.Tags.LoyaltyPointsTotal">
 <summary>
 The total sum of loyalty points
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LoyaltyPointsRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings,Dynamicweb.Frontend.PageView,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LoyaltyPointsRenderer"/> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph identifier.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.LoyaltyPointsRenderer.Output">
 <summary>
 Outputs this instance.
 </summary>
 <returns>System.String.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MenuRenderer">
 <summary>
 MenuRenderer class.
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MenuRenderer.Tags">
 <summary>
 Tags class.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MenuRenderer.Tags.MyOrders">
 <summary>
 My orders
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MenuRenderer.Tags.MyQuotes">
 <summary>
 My quotes
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MenuRenderer.Tags.FrequentlyItems">
 <summary>
 The frequently items
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MenuRenderer.Tags.MyLists">
 <summary>
 My lists
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MenuRenderer.Tags.MyFavorites">
 <summary>
 My favorites
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MenuRenderer.Tags.Search">
 <summary>
 The search
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MenuRenderer.Tags.Rma">
 <summary>
 The rma
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MenuRenderer.Tags.SavedCards">
 <summary>
 The saved cards
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MenuRenderer.Tags.RecurringOrders">
 <summary>
 The recurring orders
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MenuRenderer.Tags.LoyaltyPoints">
 <summary>
 The loyalty points
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MenuRenderer.Tags.LedgerEntries">
 <summary>
 The ledger entries
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MenuRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings@,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MenuRenderer"/> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="paragraphId">The paragraph identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MenuRenderer.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MenuRenderer.Output">
 <summary>
 Outputs this instance.
 </summary>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer">
 <summary>
 MyListsRenderer class.
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags">
 <summary>
 Tags class.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultListAccessUserId">
 <summary>
 The default list access user identifier
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultListName">
 <summary>
 The default list name
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultListDescription">
 <summary>
 The default list description
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultListIsPublished">
 <summary>
 The default list is published
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultListType">
 <summary>
 The default list type
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultListIsDefault">
 <summary>
 The default list is default
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultListPublishToDate">
 <summary>
 The default list publish to date
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultListPublishedId">
 <summary>
 The default list published identifier
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultListProductsCount">
 <summary>
 The default list products count
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultListTotalProductsQuantity">
 <summary>
 The default list total products quantity
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultSendListPage">
 <summary>
 The default send list page
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultSendListUrl">
 <summary>
 The default send list URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultUnpublishList">
 <summary>
 The default unpublish list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultPublishList">
 <summary>
 The default publish list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultListLinkClean">
 <summary>
 The default list link clean
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultListAddUrl">
 <summary>
 The default list add URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultListEditUrl">
 <summary>
 The default list edit URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultListRemoveUrl">
 <summary>
 The default list remove URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.DefaultListCreate">
 <summary>
 The default list create
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListName">
 <summary>
 The list name
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListDescription">
 <summary>
 The list description
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListIsPublished">
 <summary>
 The list is published
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListType">
 <summary>
 The list type
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListIsDefault">
 <summary>
 The list is default
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListPublishToDate">
 <summary>
 The list publish to date
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListPublishedId">
 <summary>
 The list published identifier
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListAccessUserId">
 <summary>
 The list access user identifier
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListProductsCount">
 <summary>
 The list products count
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListTotalProductsQuantity">
 <summary>
 The list total products quantity
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListsCount">
 <summary>
 The lists count
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListLinkClean">
 <summary>
 The list link clean
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListNameInput">
 <summary>
 The list name input
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListDescriptionInput">
 <summary>
 The list description input
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListIsPublishedInput">
 <summary>
 The list is published input
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListTypeInput">
 <summary>
 The list type input
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListIsDefaultInput">
 <summary>
 The list is default input
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListPublishToDateDays">
 <summary>
 The list publish to date days
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListPublishToDateMonthNames">
 <summary>
 The list publish to date month names
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListPublishToDateYears">
 <summary>
 The list publish to date years
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListSelect">
 <summary>
 The list select
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListSelectId">
 <summary>
 The list select identifier
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListSelectNameInput">
 <summary>
 The list select name input
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.LoopCustomerCenterList">
 <summary>
 The loop customer center list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.LoopDefaultProductList">
 <summary>
 The loop default product list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.LoopProductList">
 <summary>
 The loop product list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.LoopLists">
 <summary>
 The loop lists
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.LoopInnerListTypeLists">
 <summary>
 The loop inner list type lists
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.LoopCustomerCenterListType">
 <summary>
 The loop customer center list type
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.LoopProductLists">
 <summary>
 The loop product lists
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.LoopListTypeCustom">
 <summary>
 The loop list type custom
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListTypeListName">
 <summary>
 The list type list name
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListTypeListId">
 <summary>
 The list type list identifier
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.AddToList">
 <summary>
 The add to list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.RemoveFromList">
 <summary>
 The remove from list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.RemoveProductFromList">
 <summary>
 The remove product from list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.IsProductInDefaultList">
 <summary>
 The name of tag determines whether product is in default list
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ListNoProducts">
 <summary>
 The list no products
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.AddUrlList">
 <summary>
 The add URL list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.EditUrlList">
 <summary>
 The edit URL list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.RemoveList">
 <summary>
 The remove list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.CreateList">
 <summary>
 The create list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.EditList">
 <summary>
 The edit list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ProductListMode">
 <summary>
 The product list mode
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.SendListPage">
 <summary>
 The send list page
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.SendListUrl">
 <summary>
 The send list URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.UnpublishList">
 <summary>
 The unpublish list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.PublishList">
 <summary>
 The publish list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.AddToNewList">
 <summary>
 The add to new list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.AddToThisList">
 <summary>
 The add to this list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.RemoveFromThisList">
 <summary>
 The remove from this list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ProductListName">
 <summary>
 The product list name
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ProductListType">
 <summary>
 The product list type
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ProductListId">
 <summary>
 The product list identifier
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.IsProductInThisList">
 <summary>
 The is product in this list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ProductListQuantity">
 <summary>
 The product list quantity
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ProductListQuantityInc">
 <summary>
 The product list quantity inc
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ProductListQuantityDec">
 <summary>
 The product list quantity decimal
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.HasSendPage">
 <summary>
 The has send page
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.SendPageSendToInput">
 <summary>
 The send page send to input
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.SendPageSubjectInput">
 <summary>
 The send page subject input
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.SendPageSenderNameInput">
 <summary>
 The send page sender name input
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.SendPageSenderEmailInput">
 <summary>
 The send page sender email input
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.EmailPagePublicListUrl">
 <summary>
 The email page public list URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ProductFavoriteListQuantity">
 <summary>
 The product favorite list quantity
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ProductFavoriteListQuantityInc">
 <summary>
 The product favorite list quantity inc
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.ProductFavoriteListQuantityDec">
 <summary>
 The product favorite list quantity decimal
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.LoopFavoriteList">
 <summary>
 The loop favorite list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.AddToFavorites">
 <summary>
 The add to favorites
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.RemoveFromFavorites">
 <summary>
 The remove from favorites
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.NoFavorites">
 <summary>
 The no favorites
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Tags"/> class.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings,Dynamicweb.Frontend.PageView,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer"/> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph identifier.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings,Dynamicweb.Frontend.PageView,System.Int32,Dynamicweb.Rendering.Template,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer"/> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph identifier.</param>
 <param name="template">The template to override setting template.</param>
 <param name="isForEmailBody">if set to <c>true</c> [is for email body].</param>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.Output">
 <summary>
 Outputs this instance.
 </summary>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.RenderMyLists(Dynamicweb.Rendering.Template@,Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings@,Dynamicweb.Frontend.PageView@,System.Int32)">
 <summary>
 Renders my lists.
 </summary>
 <param name="template">The template.</param>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph identifier.</param>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.RenderMyLists(Dynamicweb.Rendering.Template@,Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings@,Dynamicweb.Frontend.PageView@,System.Int32,System.Boolean)">
 <summary>
 Renders my lists.
 </summary>
 <param name="template">The template.</param>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph identifier.</param>
 <param name="isForEmailBody">if set to <c>true</c> [is for email body].</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyListsRenderer.RenderProduct(Dynamicweb.Rendering.Template@,Dynamicweb.Ecommerce.Products.Product@,System.Boolean,System.Boolean)">
 <summary>
 Renders the product.
 </summary>
 <param name="template">The template.</param>
 <param name="product">The product.</param>
 <param name="isPublicList">if set to <c>true</c> [is public list].</param>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrderRenderer">
 <summary>
 MyOrderRenderer class.
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrderRenderer.Tags">
 <summary>
 Tags class.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrderRenderer.Tags.CustomerCenterMenu">
 <summary>
 The customer center menu
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrderRenderer.Tags.RecurringOrderDetails">
 <summary>
 The recurring order details
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrderRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings@,Dynamicweb.Frontend.PageView@,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrderRenderer"/> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrderRenderer.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrderRenderer.Output">
 <summary>
 Outputs this instance.
 </summary>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer">
 <summary>
 MyOrdersRenderer class.
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.Tags">
 <summary>
 Tags class.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.Tags.CustomerCenterMenu">
 <summary>
 The customer center menu
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.Tags.PagingOn">
 <summary>
 The paging on
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.Tags.LoopOrders">
 <summary>
 The loop orders
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.Tags.EmptyOrderList">
 <summary>
 The empty order list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.Tags.OrderCount">
 <summary>
 The order count
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.Tags.Reorder">
 <summary>
 The reorder
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.Tags.BelongsToCurrentUser">
 <summary>
 The belongs to current user
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.Tags.Resend">
 <summary>
 The resend
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.Tags.HasBeenResent">
 <summary>
 The has been resent
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.Tags.HasBeenResentMsg">
 <summary>
 The has been resent MSG
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.Tags.Print">
 <summary>
 The print
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.Tags.EvenRow">
 <summary>
 The even row
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.Tags.OrderDetails">
 <summary>
 The order details
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.Tags.Search">
 <summary>
 The search
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.Tags.ExcelExport">
 <summary>
 The excel export
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.Tags.RecurringOrderDetails">
 <summary>
 The recurring order details
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings@,Dynamicweb.Frontend.PageView@,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer"/> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyOrdersRenderer.Output">
 <summary>
 Outputs this instance.
 </summary>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuoteRenderer">
 <summary>
 MyQuoteRenderer class.
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuoteRenderer.Tags">
 <summary>
 Tags class.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuoteRenderer.Tags.CustomerCenterMenu">
 <summary>
 The customer center menu
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuoteRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings@,Dynamicweb.Frontend.PageView@,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuoteRenderer"/> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuoteRenderer.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuoteRenderer.Output">
 <summary>
 Outputs this instance.
 </summary>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer">
 <summary>
 MyQuotesRenderer class.
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.Tags">
 <summary>
 Tags class.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.Tags.CustomerCenterMenu">
 <summary>
 The customer center menu
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.Tags.PagingOn">
 <summary>
 The paging on
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.Tags.BelongsToCurrentUser">
 <summary>
 The belongs to current user
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.Tags.LoopQuotes">
 <summary>
 The loop quotes
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.Tags.BaseUrl">
 <summary>
 The base URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.Tags.EmptyQuoteList">
 <summary>
 The empty quote list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.Tags.QuoteCount">
 <summary>
 The quote count
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.Tags.Resend">
 <summary>
 The resend
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.Tags.HasBeenResent">
 <summary>
 The has been resent
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.Tags.HasBeenResentMsg">
 <summary>
 The has been resent MSG
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.Tags.Print">
 <summary>
 The print
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.Tags.EvenRow">
 <summary>
 The even row
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.Tags.QuoteDetails">
 <summary>
 The quote details
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.Tags.Search">
 <summary>
 The search
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.Tags.ExcelExport">
 <summary>
 The excel export
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings@,Dynamicweb.Frontend.PageView@,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer"/> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.RenderAvailableQuoteStates(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Rendering.Template)">
 <summary>
 Renders the available quote states.
 </summary>
 <param name="quote">The quote.</param>
 <param name="template">The template.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.MyQuotesRenderer.Output">
 <summary>
 Outputs this instance.
 </summary>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.PublicProductListRenderer">
 <summary>
 PublicProductList class.
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.PublicProductListRenderer.Tags">
 <summary>
 Tags class.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.PublicProductListRenderer.Tags.LoopProductList">
 <summary>
 The loop product list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.PublicProductListRenderer.Tags.ProductListId">
 <summary>
 The product list identifier
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.PublicProductListRenderer.Tags.ProductListName">
 <summary>
 The product list name
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.PublicProductListRenderer.Tags.ProductListType">
 <summary>
 The product list type
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.PublicProductListRenderer.Tags.ProductListIsPublished">
 <summary>
 The product list is published
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.PublicProductListRenderer.Tags.ProductListNoProducts">
 <summary>
 The product list no products
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.PublicProductListRenderer.Tags.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.PublicProductListRenderer.Tags"/> class.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.PublicProductListRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.ShowList.ShowListSettings@,Dynamicweb.Frontend.PageView@,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.PublicProductListRenderer"/> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.PublicProductListRenderer.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.PublicProductListRenderer.Output">
 <summary>
 Outputs this instance.
 </summary>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.PublicProductListRenderer.RenderPublicList(Dynamicweb.Rendering.Template@,Dynamicweb.Frontend.PageView@)">
 <summary>
 Renders the public list.
 </summary>
 <param name="template">The template.</param>
 <param name="pageView">The page view.</param>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer">
 <summary>
 RecurringOrdersRenderer class.
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags">
 <summary>
 Tags class.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.CustomerCenterMenu">
 <summary>
 The customer center menu
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.PagingOn">
 <summary>
 The paging on
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.FutureDeliveriesPagingOn">
 <summary>
 The future deliveries paging on
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.PreviousRecurringOrdersPagingOn">
 <summary>
 The previous recurring orders paging on
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.BelongsToCurrentUser">
 <summary>
 The belongs to current user
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.LoopRecurringOrders">
 <summary>
 The loop recurring orders
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.LoopFutureRecurringOrders">
 <summary>
 The loop future recurring orders
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.LoopPreviousRecurringOrders">
 <summary>
 The loop previous recurring orders
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.BaseUrl">
 <summary>
 The base URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.DeleteUrl">
 <summary>
 The delete URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.DetailsUrl">
 <summary>
 The details URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.ToggleFutureDelivery">
 <summary>
 The toggle future delivery
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.EmptyRecurringOrderList">
 <summary>
 The empty recurring order list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.EmptyFutureRecurringOrderList">
 <summary>
 The empty future recurring order list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.EmptyPreviousRecurringOrderList">
 <summary>
 The empty previous recurring order list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.RecurringOrdersCount">
 <summary>
 The recurring orders count
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.FutureRecurringOrdersCount">
 <summary>
 The future recurring orders count
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.PreviousRecurringOrdersCount">
 <summary>
 The previous recurring orders count
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.RecurringOrderDetailsCurrentView">
 <summary>
 The recurring order details current view
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.FutureDeliveriesUrl">
 <summary>
 The future deliveries URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.PreviousRecurringOrdersUrl">
 <summary>
 The previous recurring orders URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.PreviousRecurringOrderDetails">
 <summary>
 The previous recurring order details
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.OrderFrequency">
 <summary>
 The order frequency
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.OrderStartDate">
 <summary>
 The order start date
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.OrderEndDate">
 <summary>
 The order end date
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Tags.EvenRow">
 <summary>
 The even row
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings,Dynamicweb.Frontend.PageView,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer"/> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RecurringOrdersRenderer.Output">
 <summary>
 Outputs this instance.
 </summary>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.ExcelRenderer">
 <summary>
 The class ExcelRenderer allows to render customer orders into Excel file(MyOrders.xls)
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.ExcelRenderer.RenderExcel(System.String)">
 <summary>
 Renders the excel.
 </summary>
 <param name="shopId">The shop identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.ExcelRenderer.RenderExcel(System.String,System.String)">
 <summary>
 Renders the excel.
 </summary>
 <param name="shopId">The shop identifier.</param>
 <param name="orderContextId">The order context identifier.</param>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer">
 <summary>
 RMA renderer class
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags">
 <summary>
 Tags class.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags.CustomerCenterMenu">
 <summary>
 The customer center menu
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags.PagingOn">
 <summary>
 The paging on
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags.LoopRmas">
 <summary>
 The loop rmas
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags.LoopRmaTypes">
 <summary>
 The loop rma types
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags.LoopOrders">
 <summary>
 The loop orders
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags.EmptyRmaList">
 <summary>
 The empty rma list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags.OrderCount">
 <summary>
 The orders count
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags.RecurringOrdersCount">
 <summary>
 The recurring orders count
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags.RmaCount">
 <summary>
 The rma count
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags.EvenRow">
 <summary>
 The even row
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags.RmaCreate">
 <summary>
 The rma create
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags.RmaAddComment">
 <summary>
 The rma add comment
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags.RmaDetails">
 <summary>
 The rma details
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags.RmaCancel">
 <summary>
 The rma cancel
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags.RmaHasCancel">
 <summary>
 The rma has cancel
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags.RmaHasAddComment">
 <summary>
 The rma has add comment
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags.BelongsToCurrentUser">
 <summary>
 The belongs to current user
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Tags.RMABelongsToCurrentUser">
 <summary>
 The belongs to current user
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer._output">
 <summary>
 The _output
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings@,Dynamicweb.Frontend.PageView@,System.Int32,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer" /> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph ID.</param>
 <param name="rmaId">The rma ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings@,Dynamicweb.Frontend.PageView@,System.Int32,System.String,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer" /> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph ID.</param>
 <param name="rmaId">The rma ID.</param>
 <param name="hasEmailTemplate">if set to <c>true</c> [has email template].</param>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.RenderLinks(System.String,System.String,Dynamicweb.Rendering.Template@)">
 <summary>
 Renders the links.
 </summary>
 <param name="rmaId">The rma ID.</param>
 <param name="rmaDirectUrl">The rma direct URL.</param>
 <param name="template">The template.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.RmaRenderer.Output">
 <summary>
 Outputs this instance.
 </summary>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SavedCardsRenderer">
 <summary>
 SavedCardsRenderer class.
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SavedCardsRenderer.Tags">
 <summary>
 Tags class.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SavedCardsRenderer.Tags.CustomerCenterMenu">
 <summary>
 The customer center menu
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SavedCardsRenderer.Tags.PagingOn">
 <summary>
 The paging on
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SavedCardsRenderer.Tags.LoopSavedCards">
 <summary>
 The loop saved cards
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SavedCardsRenderer.Tags.BaseUrl">
 <summary>
 The base URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SavedCardsRenderer.Tags.MessageUrl">
 <summary>
 The message URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SavedCardsRenderer.Tags.DeleteUrl">
 <summary>
 The delete URL
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SavedCardsRenderer.Tags.EmptySavedCardList">
 <summary>
 The empty saved card list
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SavedCardsRenderer.Tags.SavedCardCount">
 <summary>
 The saved card count
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SavedCardsRenderer.Tags.LoopSavedCardLog">
 <summary>
 The loop saved card log
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SavedCardsRenderer.Tags.LogCount">
 <summary>
 The log count
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SavedCardsRenderer.Tags.EvenRow">
 <summary>
 The even row
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SavedCardsRenderer.Tags.ToggleDefaultUrl">
 <summary>
 The toggle default URL
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SavedCardsRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings,Dynamicweb.Frontend.PageView,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SavedCardsRenderer"/> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SavedCardsRenderer.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SavedCardsRenderer.Output">
 <summary>
 Outputs this instance.
 </summary>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer">
 <summary>
 SearchRenderer class.
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer.Tags">
 <summary>
 Tags class.
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer.Tags.CustomerCenterMenu">
 <summary>
 The customer center menu
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer.Tags.FormBegin">
 <summary>
 The form begin
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer.Tags.FormEnd">
 <summary>
 The form end
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer.Tags.Javascript">
 <summary>
 The javascript
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer.Tags.FreeText">
 <summary>
 The free text
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer.Tags.AmountFrom">
 <summary>
 The amount from
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer.Tags.AmountTo">
 <summary>
 The amount to
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer.Tags.ParagraphId">
 <summary>
 The paragraph identifier
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer.Tags.MonthNamesFrom">
 <summary>
 The month names from
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer.Tags.MonthNamesTo">
 <summary>
 The month names to
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer.Tags.YearsFrom">
 <summary>
 The years from
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer.Tags.YearsTo">
 <summary>
 The years to
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer.Tags.Products">
 <summary>
 The products
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings@,Dynamicweb.Frontend.PageView@,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer"/> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="paragraphId">The paragraph identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer.#ctor(Dynamicweb.Ecommerce.CustomerCenter.CustomerCenterSettings@,Dynamicweb.Frontend.PageView@,Dynamicweb.Ecommerce.Orders.CustomerOrderCollection@,System.Boolean,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer"/> class.
 </summary>
 <param name="settings">The settings.</param>
 <param name="pageView">The page view.</param>
 <param name="orders">The orders.</param>
 <param name="parentRendersMenu">if set to <c>true</c> [parent renders menu].</param>
 <param name="paragraphId">The paragraph identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Renderers.SearchRenderer.Output">
 <summary>
 Outputs this instance.
 </summary>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.UserExtensions">
 <summary>
 The class UserExtensions represents shared member providing user extensions.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.UserExtensions.GetProductLists(Dynamicweb.Security.UserManagement.User)">
 <summary>
 Gets a <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList" />s belonging to the given <see cref="T:Dynamicweb.Security.UserManagement.User" />
 </summary>
 <remarks></remarks>
 <return>User's product lists. The collection is read-only.</return>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.UserExtensions.GetProductLists(Dynamicweb.Security.UserManagement.User,System.Boolean)">
 <summary>
 Gets a <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductList" />s belonging to the given <see cref="T:Dynamicweb.Security.UserManagement.User" />
 </summary>
 <remarks></remarks>
 <return>User's product lists. The collection is read-only.</return>
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct">
 <summary>
 CustomerProductListProduct class.
 </summary>
 <seealso cref="T:Dynamicweb.Data.DbObject" />
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.ListId">
 <summary>
 Gets or sets the list identifier.
 </summary>
 <value>The list identifier.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.ProductId">
 <summary>
 Gets or sets the product identifier.
 </summary>
 <value>The product identifier.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.ProductVariantId">
 <summary>
 Gets or sets the product variant identifier.
 </summary>
 <value>The product variant identifier.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.ProductLanguageId">
 <summary>
 Gets or sets the product language identifier.
 </summary>
 <value>The product language identifier.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.Note">
 <summary>
 Gets or sets the note.
 </summary>
 <value>The note.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.ProductReferenceUrl">
 <summary>
 Gets or sets the product reference URL.
 </summary>
 <value>The product reference URL.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.Quantity">
 <summary>
 Gets or sets the quantity.
 </summary>
 <value>The quantity.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.SortOrder">
 <summary>
 Gets or sets the sort order.
 </summary>
 <value>The sort order.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct" /> class.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.Fill(System.Data.IDataReader)">
 <summary>
 Fills the specified reader.
 </summary>
 <param name="reader">The reader.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.FillRow(System.Data.DataRow)">
 <summary>
 Fills the row.
 </summary>
 <param name="row">The row.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.Save">
 <summary>
 Saves current data to the database.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.Delete(System.Int32)">
 <summary>
 Deletes the object with specified Id.
 </summary>
 <param name="id">Specified Id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.ClearCache(System.Int32,System.String,System.String,System.String)">
 <summary>
 Clears the cache.
 </summary>
 <param name="favoriteListId">The favorite list identifier.</param>
 <param name="productId">The product identifier.</param>
 <param name="variantId">The product variant identifier.</param>
 <param name="languageId">The language identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.UpdateQuantity(System.String,System.String,System.String,System.Int32,System.Int32)">
 <summary>
 Updates the quantity.
 </summary>
 <param name="productId">The product identifier.</param>
 <param name="variantId">The product variant identifier.</param>
 <param name="languageId">The language identifier.</param>
 <param name="favoriteListId">The favorite list identifier.</param>
 <param name="quantity">The quantity.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.UpdateSortOrder(System.String@,System.Int32,System.Int32)">
 <summary>
 Updates the sort order.
 </summary>
 <param name="productId">The product identifier.</param>
 <param name="favoriteListId">The favorite list identifier.</param>
 <param name="sortOrder">The sort order.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.GetProductsByListId(System.Int32)">
 <summary>
 Gets products by favorites list id.
 </summary>
 <param name="id">The id of favorites list.</param>
 <returns>The products in favorites list</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.GetPagedProductsByListId(System.Int32,System.Int32,System.Int32)">
 <summary>
 Gets range of products by favorites list id.
 </summary>
 <param name="id">The id of favorites list.</param>
 <param name="startIndex">The start index of range.</param>
 <param name="pageSize">The ammount of items.</param>
 <returns>The range of products in favorites list</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.GetProductsByListPublishedId(System.String)">
 <summary>
 Gets products by favorites list published id.
 </summary>
 <param name="publishedId">The published id of favorites list.</param>
 <returns>The products in favorites list</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.GetProductById(System.String,System.String,System.String)">
 <summary>
 Gets product by id.
 </summary>
 <param name="productId">The id of the product.</param>
 <param name="productLanguageId">The language id of the product.</param>
 <param name="productVariantId">The variant id of the product.</param>
 <returns>The stock location</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.GetProductsByUserId(System.Int32)">
 <summary>
 Gets favorites products by user id.
 </summary>
 <param name="userId">The id of user.</param>
 <returns>The products in favorites list</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.GetProductsByUserId(System.Int32,System.Boolean)">
 <summary>
 Gets favorites products by user id.
 </summary>
 <param name="UserId">The id of user.</param>
 <param name="useCustomerNumberToRetrieveListsProducts">If True returns products for all all users with with current user customer number</param>
 <returns>The products in favorites list</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.IsProductInFavorites(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Gets value which indicate whether product is in any favorite list.
 </summary>
 <param name="product">The product.</param>
 <returns><c>true</c> if product is in the  has any favorite list; otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.IsProductInFavorites(Dynamicweb.Ecommerce.Products.Product,System.Int32)">
 <summary>
 Gets value which indicate whether product is in any favorite list.
 </summary>
 <param name="product">The product.</param>
 <param name="listId">The list identifier.</param>
 <returns><c>true</c> if product is in the  has any favorite list; otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.GetProductByIdAndList(System.Int32,System.String,System.String,System.String)">
 <summary>
 Gets product by id and favorite list Id.
 </summary>
 <param name="listId">The favorite list Id.</param>
 <param name="productId">The id of the product.</param>
 <param name="productLanguageId">The language id of the product.</param>
 <param name="productVariantId">The variant id of the product.</param>
 <returns>The favorite product</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.CustomerProductListProduct.GetProductsBySql(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Gets the favorites list product collection by SQL.
 </summary>
 <param name="builder">The commadn builder containing the query.</param>
 <returns>The collection of favorites list product collection.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.Frontend">
 <summary>
 Frontend class.
 </summary>
 <seealso cref="T:Dynamicweb.Modules.ContentModule" />
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.Frontend.GetContent">
 <summary>
 Override this method and return the HTML output for the module.
 </summary>
 <returns>Must return the markup that renders the module.</returns>
 <example>
   <code description="How to inherit ContentModule and override GetContent" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\ContentModuleSample.cs" lang="CS"></code>
 </example>
 <remarks>The markup returned is what is inserted into the template tag <c>ParagraphModule</c> in the paragraph template.</remarks>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.OrderManager">
 <summary>
 OrderManager class.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.OrderManager.GetOrderForCurrentUser(System.String)">
 <summary>
 Gets the order for current user.
 </summary>
 <param name="orderId">The order identifier.</param>
 <returns>Orders.Order.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.RmaManager">
 <summary>
 The return merchandise authorization manager class
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.RmaManager.AddRmaRequest(System.Int32,Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationType,System.String,Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationOrderlineCollection,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Create and add the new return material authorizations
 </summary>
 <param name="userId">User Id</param>
 <param name="rmaType">Request type</param>
 <param name="orderId">Order Id</param>
 <param name="rmaComments">User comments</param>
 <returns>Returns array of the ReturnMerchandiseAuthorization instances if successful, otherwise return empty array</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.RmaManager.AddRmaRequest(System.Int32,Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationType,System.String,Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationOrderlineCollection,System.String)">
 <summary>
 Create and add the new return material authorization
 </summary>
 <param name="userId">User Id</param>
 <param name="rmaType">Request type</param>
 <param name="orderId">Order Id</param>
 <param name="rmaComment">User comment</param>
 <returns>Returns the instance of ReturnMerchandiseAuthorization if successful, otherwise returns Nothing</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.RmaManager.CancelRmaRequest(System.String,System.Int32)">
 <summary>
 Cancel the return material authorization
 </summary>
 <param name="rmaId">Request Id</param>
 <param name="userId">User Id</param>
 <returns>Returns the True if successful, otherwise returns the False</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.RmaManager.AddCommentToRma(System.String,System.Int32,System.String)">
 <summary>
 Add the user comment to the return material authorization
 </summary>
 <param name="rmaId">Request Id</param>
 <param name="userId">User Id</param>
 <param name="rmaComment">User comment</param>
 <returns>Returns the True if successful, otherwise returns the False</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.RmaManager.GetRequestTypes">
 <summary>
 Get return merchandise authorization types
 </summary>
 <returns>Returns the list of request types and names</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.RmaManager.GetRequestTypeName(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationType)">
 <summary>
 Get return merchandise authorization type name by request type
 </summary>
 <param name="type">Return merchandise authorization type</param>
 <returns>Returns the request type name</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.RmaManager.GetRequestSecretId(System.String)">
 <summary>
 Get return merchandise authorization secret Id
 </summary>
 <param name="rmaId">Request Id</param>
 <returns>Returns the return merchandise authorization secret Id</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.RmaManager.ValidateRequestSecretId(System.String,System.String)">
 <summary>
 Validate the return merchandise authorization secret Id
 </summary>
 <param name="rmaId">Request Id</param>
 <param name="secretId">Request secret Id</param>
 <returns>Returns the True if successful, otherwise returns the False</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.ShowList.Frontend">
 <summary>
 The class Frontend represents accessor to Ecom ShowList module content.
 </summary>
 <seealso cref="T:Dynamicweb.Modules.ContentModule" />
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.ShowList.Frontend.GetContent">
 <summary>
 Override this method and return the HTML output for the module.
 </summary>
 <returns>Must return the markup that renders the module.</returns>
 <example>
   <code description="How to inherit ContentModule and override GetContent" source="..\Dynamicweb\06 - Dynamicweb Host\Dynamicweb\Head\Dynamicweb.Examples\ContentModuleSample.cs" lang="CS"></code>
 </example>
 <remarks>The markup returned is what is inserted into the template tag <c>ParagraphModule</c> in the paragraph template.</remarks>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.CustomerCenter.ShowList.ShowListSettings">
 <summary>
 The class ShowListSettings represents basic setting for Ecom ShowList module.
 </summary>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.CustomerCenter.ShowList.ShowListSettings.ShowPublicListTemplate">
 <summary>
 Gets the show public list template.
 </summary>
 <value>The show public list template.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.CustomerCenter.ShowList.ShowListSettings.#ctor(Dynamicweb.Modules.Properties)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.CustomerCenter.ShowList.ShowListSettings"/> class.
 </summary>
 <param name="Properties">The properties.</param>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Discounts.CalculationType">
 <summary>
 Type of discount calculation.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Discounts.CalculationType.Percent">
 <summary>
 Percent
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Discounts.CalculationType.Amount">
 <summary>
 Amount
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Discounts.Discount">
 <summary>
 The class Discount represents information about discount.
 </summary>
 <seealso cref="T:Dynamicweb.Ecommerce.Prices.IWithPrice" />
</member>
<member name="P:Dynamicweb.Ecommerce.Discounts.Discount.ID">
 <summary>
 Gets the ID.
 </summary>
 <value>The discount ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Discounts.Discount.Product">
 <summary>
 Gets the product.
 </summary>
 <value>The product.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Discounts.Discount.Name">
 <summary>
 Gets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Discounts.Discount.Description">
 <summary>
 Gets the description.
 </summary>
 <value>The description.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Discounts.Discount.CampaignName">
 <summary>
 Gets the campaign name.
 </summary>
 <value>The campaign name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Discounts.Discount.CampaignImage">
 <summary>
 Gets the campaign image.
 </summary>
 <value>The campaign image.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Discounts.Discount.CampaignColor">
 <summary>
 Gets the campaign color.
 </summary>
 <value>The campaign color.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Discounts.Discount.Type">
 <summary>
 Gets the type.
 </summary>
 <value>The discount type.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Discounts.Discount.Price">
 <summary>
 Gets the price.
 </summary>
 <value>The price.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Discounts.Discount.GetPrice">
 <summary>
 Gets the price.
 </summary>
 <returns>
 The price.
 </returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Discounts.Discount.GetDiscountAmount">
 <summary>
 Gets the discount amount.
 </summary>
 <returns>
 The discount amount.
 </returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Discounts.Discount.#ctor(Dynamicweb.Ecommerce.Products.Product@,Dynamicweb.Ecommerce.Orders.SalesDiscounts.IProductDiscount@,Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount@)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Discounts.Discount" /> class.
 </summary>
 <param name="product">The product.</param>
 <param name="productDiscount">The product discount.</param>
 <param name="salesDiscount">The sales discount.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Discounts.Discount.#ctor(Dynamicweb.Ecommerce.Products.Product@,Dynamicweb.Ecommerce.Orders.SalesDiscounts.IProductDiscount@,System.String@)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Discounts.Discount" /> class.
 </summary>
 <param name="product">The product.</param>
 <param name="productDiscount">The product discount.</param>
 <param name="salesDiscountName">Name of the sales discount.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Discounts.Discount.#ctor(Dynamicweb.Ecommerce.Products.Product@,Dynamicweb.Ecommerce.Orders.SalesDiscounts.IProductDiscount@,System.String@,System.String@)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Discounts.Discount" /> class.
 </summary>
 <param name="product">The product.</param>
 <param name="productDiscount">The product discount.</param>
 <param name="salesDiscountName">Name of the sales discount.</param>
 <param name="salesDiscountDescription">Sales discount description.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Discounts.Discount.GetValue(System.Boolean,Dynamicweb.Ecommerce.Discounts.CalculationType,System.Boolean)">
 <summary>
 Gets the value.
 </summary>
 <param name="includeVat">if set to <c>true</c> [include vat].</param>
 <param name="calculationType">Type of the calculation.</param>
 <param name="doRounding">if set to <c>true</c> [do rounding].</param>
 <returns>System.Double.</returns>
 <exception cref="T:System.InvalidOperationException">Thrown when Discount value cannot be determined</exception>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Discounts.Discount.RenderDiscount(Dynamicweb.Ecommerce.Discounts.Discount@,Dynamicweb.Rendering.Template@)">
 <summary>
 Renders the discount.
 </summary>
 <param name="Discount">The discount.</param>
 <param name="template">The template.</param>
 <example>
 <code description="Discounts rendering sample" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Discounts\DiscountsRendererSample.cs" lang="CS"></code>
 </example>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Discounts.DiscountCollection">
 <summary>
 Represents a collection of discounts.
 </summary>
 <seealso cref="T:System.Collections.ObjectModel.Collection`1" />
 <seealso cref="T:Dynamicweb.Ecommerce.Prices.IWithPrice" />
 <example>
 <code description="Discounts rendering sample" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Discounts\DiscountsRendererSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Discounts.DiscountCollection.PriceWithDifference">
 <summary>
 Gets the price with difference.
 </summary>
 <value>The price with difference.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Discounts.DiscountCollection.Difference">
 <summary>
 Gets the difference.
 </summary>
 <value>The difference.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Discounts.DiscountCollection.Price">
 <summary>
 Returns the price for the product when discounts are subtracted.
 </summary>
 <value>The price.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Discounts.DiscountCollection.GetPrice">
 <summary>
 Returns the price for the product when discounts are subtracted.
 </summary>
 <returns>
 The price.
 </returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Discounts.DiscountCollection.TotalDiscount">
 <summary>
 Gets the total discount.
 </summary>
 <value>The total discount.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Discounts.DiscountCollection.GetTotalDiscount">
 <summary>
 Gets the total discount.
 </summary>
 <returns>
 The total discount.
 </returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Discounts.DiscountCollection.GetTotal(System.Boolean,Dynamicweb.Ecommerce.Discounts.CalculationType,System.Boolean)">
 <summary>
 Returns the total discount in a number of different ways.
 </summary>
 <param name="includeVat">Should VAT be included in the returned discount</param>
 <param name="calculateAs">Indicates wheter the result should be returned as an amount or as a percentage of the original product price</param>
 <param name="doRounding">Should the result be rounded. If the propertys return result is percentage and rounding is in effect, the result will be with two decimals</param>
 <returns>System.Double.</returns>
 <exception cref="T:System.InvalidOperationException">Thrown when Unable to parse calculated percent from discount total/product price</exception>
 <exception cref="T:System.ArgumentException">Thrown when <paramref name="calculateAs"/> is not known as discount calculation type</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.Discounts.DiscountCollection.HasDiscounts">
 <summary>
 Gets a value indicating whether this instance has discounts.
 </summary>
 <value><c>true</c> if this instance has discounts; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Discounts.DiscountCollection.ClearCache">
 <summary>
 Clears the cache.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Discounts.DiscountCollection.#ctor(Dynamicweb.Ecommerce.Products.Product@)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Discounts.DiscountCollection" /> class.
 </summary>
 <param name="product">The product.</param>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Discounts.DiscountType">
 <summary>
 Type of discount.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Discounts.DiscountType.Percent">
 <summary>
 Percent
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Discounts.DiscountType.Amount">
 <summary>
 Amount
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Controls.DiscountType">
 <summary>
 Enum DiscountType
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Extensibility.Controls.DiscountType.Unknown">
 <summary>
 The unknown
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Extensibility.Controls.DiscountType.FixedAmount">
 <summary>
 The fixed amount
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Extensibility.Controls.DiscountType.Percent">
 <summary>
 The percent
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Extensibility.Controls.DiscountType.Products">
 <summary>
 The products
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Controls.DiscountValueHandler">
 <summary>
 DiscountValueHandler class.
 </summary>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.DiscountValueHandler.Type">
 <summary>
 Gets or sets the type.
 </summary>
 <value>The type.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.DiscountValueHandler.AmountByCurrencies">
 <summary>
 Gets or sets the amount by currencies.
 </summary>
 <value>The amount by currencies.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.DiscountValueHandler.Amount">
 <summary>
 Gets or sets the amount.
 </summary>
 <value>The amount.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.DiscountValueHandler.ProductCollection">
 <summary>
 Gets or sets the product collection.
 </summary>
 <value>The product collection.</value>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Controls.HandlerConfigurationType">
 <summary>
 Enum HandlerConfigurationType
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Extensibility.Controls.HandlerConfigurationType.All">
 <summary>
 All
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Extensibility.Controls.HandlerConfigurationType.Some">
 <summary>
 Some
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Extensibility.Controls.HandlerConfigurationType.Undefined">
 <summary>
 The undefined
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Extensibility.Controls.HandlerConfigurationType.SubItems">
 <summary>
 The sub items
 </summary>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Controls.ItemInfo">
 <summary>
 ItemInfo class.
 </summary>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ItemInfo.Id">
 <summary>
 Gets or sets the identifier.
 </summary>
 <value>The identifier.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ItemInfo.ItemId">
 <summary>
 Gets or sets the item identifier.
 </summary>
 <value>The item identifier.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ItemInfo.Type">
 <summary>
 Gets or sets the type.
 </summary>
 <value>The type.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ItemInfo.Text">
 <summary>
 Gets or sets the text.
 </summary>
 <value>The text.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ItemInfo.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Extensibility.Controls.ItemInfo"/> class.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ItemInfo.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Extensibility.Controls.ItemInfo"/> class.
 </summary>
 <param name="type">The type.</param>
 <param name="itemId">The item identifier.</param>
 <param name="text">The text.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ItemInfo.MakeId(System.String,System.String)">
 <summary>
 Makes the identifier.
 </summary>
 <param name="type">The type.</param>
 <param name="itemId">The item identifier.</param>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Controls.ParseResult">
 <summary>
 ParseResult class.
 </summary>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ParseResult.Type">
 <summary>
 Gets or sets the type.
 </summary>
 <value>The type.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ParseResult.Values">
 <summary>
 Gets or sets the values.
 </summary>
 <value>The values.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ParseResult.Items">
 <summary>
 Gets or sets the items.
 </summary>
 <value>The items.</value>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Controls.ProductInfo">
 <summary>
 Struct ProductInfo
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Extensibility.Controls.ProductInfo.Id">
 <summary>
 The identifier
 </summary>
 <autogeneratedoc />
</member>
<member name="F:Dynamicweb.Ecommerce.Extensibility.Controls.ProductInfo.VariantId">
 <summary>
 The variant identifier
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductInfo.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Extensibility.Controls.ProductInfo"/> struct.
 </summary>
 <param name="id">The identifier.</param>
 <param name="variantId">The variant identifier.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductInfo.ToInfoId">
 <summary>
 To the information identifier.
 </summary>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler">
 <summary>
 ProductsAndGroupsHandler class.
 </summary>
 <seealso cref="T:System.Collections.Generic.IComparer`1" />
 <seealso cref="T:System.Collections.Generic.IComparer`1" />
 <autogeneratedoc />
 <remarks>
 The data will be on one of these forms:
 [order]
 [product][all]
 [product][some](productsAndGroupsList)
 Where
 (productsAndGroupsList) is ((product)|(group))*
 (product) is [p:(productID),(variantID)]
 (group) is [g:(groupID)]
 </remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler"/> class.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.#ctor(Dynamicweb.Ecommerce.Extensibility.Controls.HandlerConfigurationType)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler"/> class.
 </summary>
 <param name="type">The type.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler"/> class.
 </summary>
 <param name="data">The data.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.#ctor(System.String,Dynamicweb.Ecommerce.Extensibility.Controls.HandlerConfigurationType)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler"/> class.
 </summary>
 <param name="data">The data.</param>
 <param name="defaultDataType">Default type of the data.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.LoadData(System.String)">
 <summary>
 Loads the given <paramref name="data" />, and returns a new <see cref="T:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler" /> instance.
 <see cref="T:Dynamicweb.Ecommerce.Products.Product" />s and <see cref="T:Dynamicweb.Ecommerce.Products.Group" />s are not loaded from database,
 so the returned instance should only be used to determine whether a specific product or group exists by using <see cref="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.IsProductIncluded(Dynamicweb.Ecommerce.Products.Product)" />.
 </summary>
 <param name="data">The config data to load.</param>
 <returns>ProductsAndGroupsHandler.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.LoadData(System.String,Dynamicweb.Ecommerce.Extensibility.Controls.HandlerConfigurationType)">
 <summary>
 Loads the given <paramref name="data" />, and returns a new <see cref="T:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler" /> instance.
 <see cref="T:Dynamicweb.Ecommerce.Products.Product" />s and <see cref="T:Dynamicweb.Ecommerce.Products.Group" />s are not loaded from database,
 so the returned instance should only be used to determine whether a specific product or group exists by using <see cref="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.IsProductIncluded(Dynamicweb.Ecommerce.Products.Product)" />.
 </summary>
 <param name="data">The config data to load.</param>
 <param name="defaultDataType">The default <see cref="T:Dynamicweb.Ecommerce.Extensibility.Controls.HandlerConfigurationType">type</see> for the data. If data specifies a different type, the type from data is used.</param>
 <returns>ProductsAndGroupsHandler.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.ParseData(System.String)">
 <summary>
 Parses the data.
 </summary>
 <param name="data">The data.</param>
 <returns>ParseResult.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.ParseData(System.String,Dynamicweb.Ecommerce.Extensibility.Controls.HandlerConfigurationType)">
 <summary>
 Parses the data.
 </summary>
 <param name="data">The data.</param>
 <param name="defaultDataType">Default type of the data.</param>
 <returns>ParseResult.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.ParseData(System.String,System.Boolean)">
 <summary>
 Parses the data.
 </summary>
 <param name="data">The data.</param>
 <param name="loadDataFromDatabase">if set to <c>true</c> [load data from database].</param>
 <returns>ParseResult.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.ParseData(System.String,System.Boolean,Dynamicweb.Ecommerce.Extensibility.Controls.HandlerConfigurationType)">
 <summary>
 Parses the data.
 </summary>
 <param name="data">The data.</param>
 <param name="loadDataFromDatabase">if set to <c>true</c> [load data from database].</param>
 <param name="defaultDataType">Default type of the data.</param>
 <returns>ParseResult.</returns>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.Type">
 <summary>
 Gets or sets the type.
 </summary>
 <value>The type.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.ProductsSelected">
 <summary>
 Gets or sets the products selected.
 </summary>
 <value>The products selected.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.QueriesSelected">
 <summary>
 Gets or sets the queries selected.
 </summary>
 <value>The queries selected.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.GroupsSelected">
 <summary>
 Gets or sets the groups selected.
 </summary>
 <value>The groups selected.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.GroupsWithIncludedChildGroups">
 <summary>
 Gets the groups with included child groups.
 </summary>
 <value>The groups with included child groups.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.GetGroupsWithIncludedChildGroups">
 <summary>
 Gets the groups with included child groups.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.GetGroupsAndChildGroups(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.Group})">
 <summary>
 Gets a list of the given <see cref="T:Dynamicweb.Ecommerce.Products.Group" />s including all their child groups.
 </summary>
 <param name="groups">The groups to expand with child groups.</param>
 <returns>A list of groups and their child groups.</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.IncludeChildGroups">
 <summary>
 Gets or sets a value indicating whether [include child groups].
 </summary>
 <value><c>true</c> if [include child groups]; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.SearchesSelected">
 <summary>
 Gets or sets the searches selected.
 </summary>
 <value>The searches selected.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.ShopSelected">
 <summary>
 Gets or sets the shop selected.
 </summary>
 <value>The shop selected.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.IsProductIncluded(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Determines whether [is product included] [the specified product].
 </summary>
 <param name="product">The product.</param>
 <returns><c>true</c> if [is product included] [the specified product]; otherwise, <c>false</c>.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.ToStringOnlyElements">
 <summary>
 To the string only elements.
 </summary>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.ClearCache">
 <summary>
 Clears the cache.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.Compare(Dynamicweb.Ecommerce.Products.Group,Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Compares the specified x.
 </summary>
 <param name="x">The x.</param>
 <param name="y">The y.</param>
 <returns>System.Int32.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.Compare1(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Compare1s the specified x.
 </summary>
 <param name="x">The x.</param>
 <param name="y">The y.</param>
 <returns>System.Int32.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.ConvertFromCvsGroups(System.String)">
 <summary>
 Converts from CVS groups.
 </summary>
 <param name="groupsCvs">The groups CVS.</param>
 <returns>System.String.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsHandler.IsEmpty">
 <summary>
 Determines whether this instance is empty.
 </summary>
 <returns><c>true</c> if this instance is empty; otherwise, <c>false</c>.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector">
 <summary>
 ProductsAndGroupsSelector class.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.ObjectSelector" />
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector.Value">
 <summary>
 Gets or sets the value.
 </summary>
 <value>The value.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector.OnlyGroups">
 <summary>
 Gets or sets a value indicating whether [only groups].
 </summary>
 <value><c>true</c> if [only groups]; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector.ShowIncludeSubGroups">
 <summary>
 Gets or sets a value indicating whether [show include sub groups].
 </summary>
 <value><c>true</c> if [show include sub groups]; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector.ShowSearches">
 <summary>
 Gets or sets a value indicating whether [show searches].
 </summary>
 <value><c>true</c> if [show searches]; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector.ShowQueries">
 <summary>
 Gets or sets a value indicating whether [show repository queries].
 </summary>
 <value><c>true</c> if [show queries]; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector.CallerForm">
 <summary>
 Gets or sets the caller form.
 </summary>
 <value>The caller form.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector.LanguageID">
 <summary>
 Gets or sets the language identifier.
 </summary>
 <value>The language identifier.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector.AllRadioText">
 <summary>
 Gets or sets all radio text.
 </summary>
 <value>All radio text.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector.ShowAllRadio">
 <summary>
 Gets or sets a value indicating whether [show all radio].
 </summary>
 <value><c>true</c> if [show all radio]; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector.NoneRadioText">
 <summary>
 Gets or sets the none radio text.
 </summary>
 <value>The none radio text.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector.ShowNoneRadio">
 <summary>
 Gets or sets a value indicating whether [show none radio].
 </summary>
 <value><c>true</c> if [show none radio]; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector.EnableSubItems">
 <summary>
 Gets or sets value indicating whether to enable the "Sub-items" functionality.
 </summary>
 <value><c>true</c> if [enable sub items]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector.RadioButtonsSelectorLabel">
 <summary>
 Gets or sets radio buttons selector label
 </summary>        
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector.ShopSelectorLabel">
 <summary>
 Gets or sets Shop Selector label
 </summary>        
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector.GroupSelectorLabel">
 <summary>
 Gets or sets Grop Selector label
 </summary>        
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector.ShowLabelsOnTheLeft">
 <summary>
 Gets or sets value indicating wheatehr to show shop and groups selector labels on the left
 </summary>        
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector.Render(System.Web.UI.HtmlTextWriter)">
 <summary>
 Renders the specified output.
 </summary>
 <param name="output">The output.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsAndGroupsSelector.RenderSubItemsRadio(System.Web.UI.HtmlTextWriter)">
 <summary>
 Renders the "Current sub-items" radio-button.
 </summary>
 <param name="output">An instance of HtmlTextWriter that writes output to the client.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsHandler">
 <summary>
 Handles products in discounts
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsHandler.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsHandler" /> class.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsHandler.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsHandler" /> class.
 </summary>
 <param name="value">The value.</param>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsHandler.Value">
 <summary>
 Gets or sets the value.
 </summary>
 <value>The value.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsHandler.ProductInfos">
 <summary>
 Gets or sets the product infos.
 </summary>
 <value>
 The product infos.
 </value>
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsHandler.SetValue(System.String)">
 <summary>
 Sets the value.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsHandler.SetProductInfos(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Extensibility.Controls.ProductInfo})">
 <summary>
 Sets the product infos.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsHandler.GetProductCollectionFromDB">
 <summary>
 Gets the product collection from DB.
 </summary>
 <returns>ProductCollection.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsSelector">
 <summary>
 ProductsSelector class.
 </summary>
 <seealso cref="T:System.Web.UI.WebControls.WebControl" />
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsSelector.ProductsHandler">
 <summary>
 Gets or sets the products handler.
 </summary>
 <value>The products handler.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ProductsSelector.Render(System.Web.UI.HtmlTextWriter)">
 <summary>
 Renders the specified writer.
 </summary>
 <param name="writer">The writer.</param>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Controls.SalesDiscountAddInRichSelector">
 <summary>
 The class SalesDiscountAddInRichSelector represents extensibility rich selector control for sales discounts.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.AddInSelector" />
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.SalesDiscountAddInRichSelector.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Extensibility.Controls.SalesDiscountAddInRichSelector"/> class.
 </summary>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.SalesDiscountAddInRichSelector.LoadParameters">
 <summary>
 Gets the load parameters.
 </summary>
 <value>The load parameters.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.SalesDiscountAddInRichSelector.HiddenControlToUpdate">
 <summary>
 Gets or sets the hidden control to update.
 </summary>
 <value>The hidden control to update.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.SalesDiscountAddInRichSelector.SortSalesAddIns(System.Collections.ArrayList@)">
 <summary>
 Sorts the sales add ins.
 </summary>
 <param name="addIns">The add ins.</param>
 <returns>IEnumerable{Type}.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.SalesDiscountAddInRichSelector.Render(System.Web.UI.HtmlTextWriter)">
 <summary>
 Renders the specified output.
 </summary>
 <param name="output">The output.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.SalesDiscountAddInRichSelector.BuildHtmlForDiscountRichSelectItem(System.String,System.String,System.String)">
 <summary>
 Builds the HTML for discount rich select item.
 </summary>
 <param name="name">The name.</param>
 <param name="description">The description.</param>
 <param name="image">The image.</param>
 <returns>Discount selector html mark-up</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Controls.SalesDiscountAddInSelector">
 <summary>
 The class SalesDiscountAddInSelector represents extensibility selector control for sales discounts.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.AddInSelector" />
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.SalesDiscountAddInSelector.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Extensibility.Controls.SalesDiscountAddInSelector"/> class.
 </summary>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.SalesDiscountAddInSelector.LoadParameters">
 <summary>
 Gets the load parameters.
 </summary>
 <value>The load parameters.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.SalesDiscountAddInSelector.HiddenControlToUpdate">
 <summary>
 Gets or sets the hidden control to update.
 </summary>
 <value>The hidden control to update.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.SalesDiscountAddInSelector.SortSalesAddIns(System.Collections.ArrayList@)">
 <summary>
 Sorts the sales add ins.
 </summary>
 <param name="addIns">The add ins.</param>
 <returns>IEnumerable{Type}.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.SalesDiscountAddInSelector.Render(System.Web.UI.HtmlTextWriter)">
 <summary>
 Renders the specified output.
 </summary>
 <param name="output">The output.</param>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Controls.ShopDropDown">
 <summary>
 The class ShopDropDown represents extensibility selector control for shops.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.ObjectSelector" />
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ShopDropDown.ShopID">
 <summary>
 Gets or sets the shop identifier.
 </summary>
 <value>The shop identifier.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ShopDropDown.Render(System.Web.UI.HtmlTextWriter)">
 <summary>
 Renders the specified output.
 </summary>
 <param name="output">The output.</param>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Controls.ValidationConfigurator">
 <summary>
 ValidationConfigurator class.
 </summary>
 <seealso cref="T:System.Web.UI.WebControls.WebControl" />
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ValidationConfigurator.AllowEdit">
 <summary>
 Gets or sets a value indicating whether [allow edit].
 </summary>
 <value><c>true</c> if [allow edit]; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Controls.ValidationConfigurator.Group">
 <summary>
 Gets or sets the group.
 </summary>
 <value>The group.</value>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ValidationConfigurator.UpdateGroup">
 <summary>
 Updates the group.
 </summary>
 <returns>ValidationGroup.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ValidationConfigurator.GetDeletedValidations">
 <summary>
 Gets the deleted validations.
 </summary>
 <returns>ValidationCollection.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ValidationConfigurator.GetDeletedRules">
 <summary>
 Gets the deleted rules.
 </summary>
 <returns>RuleCollection.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ValidationConfigurator.Render(System.Web.UI.HtmlTextWriter)">
 <summary>
 Renders the specified writer.
 </summary>
 <param name="writer">The writer.</param>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Controls.ValidationFieldSorter">
 <summary>
 ValidationFieldSorter class.
 </summary>
 <seealso cref="T:System.Collections.Generic.IComparer`1" />
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Controls.ValidationFieldSorter.Compare(Dynamicweb.Ecommerce.Orders.Validation.ValidationField,Dynamicweb.Ecommerce.Orders.Validation.ValidationField)">
 <summary>
 Compares the specified x.
 </summary>
 <param name="x">The x.</param>
 <param name="y">The y.</param>
 <returns>System.Int32.</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Editors.ProductGroupParameterEditor">
 <summary>
 The class ProductGroupParameterEditor represents extensibility editor for product groups.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Editors.ParameterEditor" />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Editors.ProductGroupParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable)">
 <summary>
 Renders the specified add in.
 </summary>
 <param name="addIn">The add in.</param>
 <param name="name">The name.</param>
 <param name="valueObj">The value object.</param>
 <param name="options">The options.</param>
 <returns>Html mark-up for specified addIn</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Editors.ProductGroupParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the specified add in.
 </summary>
 <param name="addIn">The add in.</param>
 <param name="name">The name.</param>
 <param name="valueObj">The value object.</param>
 <param name="options">The options.</param>
 <param name="label">The label.</param>
 <returns>Html mark-up for specified addIn</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Editors.ProductsAndGroupsEditor">
 <summary>
 The class ProductsAndGroupsEditor represents extensibility editor for products and groups.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Editors.ParameterEditor" />
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Editors.ProductsAndGroupsEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable)">
 <summary>
 Renders the specified add in.
 </summary>
 <param name="addIn">The add in.</param>
 <param name="name">The name.</param>
 <param name="value">The value.</param>
 <param name="options">The options.</param>
 <returns>Html mark-up for specified addIn</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Editors.ProductsAndGroupsEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the specified add in.
 </summary>
 <param name="addIn">The add in.</param>
 <param name="name">The name.</param>
 <param name="value">The value.</param>
 <param name="options">The options.</param>
 <param name="label">The label.</param>
 <returns>Html mark-up for specified addIn</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Editors.ProductSelectorParameterEditor">
 <summary>
 The class ProductSelectorParameterEditor represents extensibility editor for products.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Editors.ParameterEditor" />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Editors.ProductSelectorParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable)">
 <summary>
 Renders the specified add in.
 </summary>
 <param name="addIn">The add in.</param>
 <param name="name">The name.</param>
 <param name="value">The value.</param>
 <param name="options">The options.</param>
 <returns>Html mark-up for specified addIn</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Editors.ProductSelectorParameterEditor.Render(Dynamicweb.Extensibility.AddIns.ConfigurableAddIn,System.String,System.Object,System.Collections.Hashtable,System.String)">
 <summary>
 Renders the specified add in.
 </summary>
 <param name="addIn">The add in.</param>
 <param name="name">The name.</param>
 <param name="value">The value.</param>
 <param name="options">The options.</param>
 <param name="label">The label.</param>
 <returns>Html mark-up for specified addIn</returns>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Provider.ProductBrowserProvider">
 <summary>
 Allow product selector control to select product from external sources. 
 Inherit from this base class to implenent specific provider.
 </summary>
 <example>
 <code title="C#" description="" lang="CS">
 [AddInName("MyProductBrowser")]
 public class MyProductBrowser: ProductBrowserProvider

 public override bool AllowToShow(BrowserContext context)
 {
     Context = context;
     ' Show buttons in order discount form
     return "formOrderDiscount_edit".Equals(_form, StringComparison.OrdinalIgnoreCase);
 }
 
 public override string GetUrl() 
 {
     return $"/CustomModules/ProductDatabase/ProductDatabase_popup.aspx?caller={Context.ControlId}";
 }
 }
 </code>
 <code description="Product browser provider example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Extensibility\Provider\ProductBrowserForOrderDiscount.cs" lang="CS"></code>
 <code description="Product browser provider example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Extensibility\Provider\ProductBrowserForSalesDiscount.cs" lang="CS"></code>
 </example> 
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Provider.ProductBrowserProvider.Context">
 <summary>
 The control context.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Provider.ProductBrowserProvider.Icon">
 <summary>
 Gets or sets the icon.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Provider.ProductBrowserProvider.IconColor">
 <summary>
 Gets or sets the icon color.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Provider.ProductBrowserProvider.AllowToShow(Dynamicweb.Ecommerce.Extensibility.Provider.ProductBrowserProvider.BrowserContext)">
 <summary>
 Detect show or not button to execute products from external source.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Provider.ProductBrowserProvider.GetUrl">
 <summary>
 Absolute url to browser
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListAttribute">
 <summary>
 RelatedProductListAttribute class. This class cannot be inherited.
 </summary>
 <seealso cref="T:System.Attribute" />
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListAttribute.LoopName">
 <summary>
 Gets the render loopname.
 </summary>
 <value>The name of the loop.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListAttribute.LoopNameCount">
 <summary>
 Gets the render loopname count.
 </summary>
 <value>The loop name count.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListAttribute.#ctor(System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="loopName">Renderer loopname.</param>
 <exception cref="T:System.ArgumentException">No Loopname found. Loopname must be specified.;loopname</exception>
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListManager">
 <summary>
 The class RelatedProductListManager represents service used for rendering related products.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListManager.GetLoopNames">
 <summary>
 Gets the loop names.
 </summary>
 <returns>List(Of System.String).</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListManager.GetCollection(Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListProviderEventArgs,System.String)">
 <summary>
 Gets the collection.
 </summary>
 <param name="eventArgs">The <see cref="T:Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListProviderEventArgs"/> instance containing the event data.</param>
 <param name="loopName">Name of the loop.</param>
 <returns>ProductCollection.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListManager.ReorderAccordingToProfile(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Reorders products by moving the marked products on top for the current visitor profile.
 </summary>
 <param name="products">Products to process.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListProvider">
 <summary>
 Represents a base class that needs to be implemented to renders custom product lists, either related to the current product, list, group or search ect.
 </summary>
 <example>
   <code description="Write a custom product list - Loop tag." lang="CS">
 using Dynamicweb.eCommerce.Products;
 namespace MyNameSpace
 {
 public class MyProductListProvider : RelatedProductListProvider
 {
 public ProductCollection GetCollection()
 {
 return null;
 }
 }
 }
 </code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListProvider.GetCollection(Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListProviderEventArgs)">
 <summary>
 This method is called for each RelatedProductListProvider and the loop is handled in the frontend renderer.
 </summary>
 <param name="eventArgs">The <see cref="T:Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListProviderEventArgs" /> instance containing the event data. Current product, Products in the list, The actual group, Collection of groups</param>
 <returns>A collection of products</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListProviderEventArgs">
 <summary>
 The class RelatedProductListProviderEventArgs holds information about : The current product, Products in the list, The actual group, Collection of groups
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListProviderEventArgs.Product">
 <summary>
 Gets or sets the current product.
 </summary>
 <value>The product.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListProviderEventArgs.Products">
 <summary>
 Gets or sets the productcollection used in the rendered list
 </summary>
 <value>The products.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListProviderEventArgs.Groups">
 <summary>
 Gets or sets the groupcollection used in the rendered list
 </summary>
 <value>The groups.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListProviderEventArgs.SmartSearches">
 <summary>
 Gets or sets the groupcollection used in the rendered list
 </summary>
 <value>The smart searches.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Extensibility.Provider.RelatedProductListProviderEventArgs.Group">
 <summary>
 Gets or sets the actual group which is rendered
 </summary>
 <value>The group.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Feeds.Feed">
 <summary>
 The class <c>Feed</c> represents product feed.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Feeds.Feed.Id">
 <summary>
 Gets or sets the Id of the feed
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Feeds.Feed.Name">
 <summary>
 Gets or sets the name of the feed.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Feeds.Feed.Source">
 <summary>
 Gets or sets the feed source.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Feeds.Feed.ChannelId">
 <summary>
 Gets or sets the channel Id used when source is channel.
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Feeds.Feed.IndexQueryId">
 <summary>
 Gets or sets the id of index query used when source is index
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Feeds.Feed.LanguageId">
 <summary>
 Gets or sets the feed language id.
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Feeds.Feed.CurrencyCode">
 <summary>
 Gets or sets the feed currency code
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Feeds.Feed.FormatId">
 <summary>
 Gets or sets the feed <seealso cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)"/> id
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Feeds.Feed.SelectedFieldIds">
 <summary>
 Gets or sets the feed fields
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Feeds.Feed.Relations">
 <summary>
 Gets or sets type of feed <seealso cref="T:Dynamicweb.Ecommerce.Feeds.FeedRelationType">relations</seealso>
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Feeds.Feed.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Feeds.Feed.Clone">
 <summary>
 Clones the feed.
 </summary>
 <returns>A new instance of the <see cref="T:Dynamicweb.Ecommerce.Feeds.Feed"/>.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Feeds.FeedRelationType">
 <summary>
 The feed relation types enumeration
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Feeds.FeedService">
 <summary>
 Fallback for dw9.4
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Feeds.FeedService.GetFeeds">
 <summary>
 Fallback method
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Feeds.Feed"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Feeds.FeedService.GetFeed(System.Int32)">
 <summary>
 Fallback method
 </summary>
 <param name="feedId">The feed ID.</param>
 <returns>The instance of the <see cref="T:Dynamicweb.Ecommerce.Feeds.Feed"/>, or <c>null</c> if the feed was not found.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Feeds.FeedSourceType">
 <summary>
 The feed source types enumeration
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.AdvancedPagingSettings">
 <summary>
 Provides settings for rendering of advanced paging tags.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.AdvancedPagingSettings.Template">
 <summary>
 Gets or sets the target template.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.AdvancedPagingSettings.TagPrefix">
 <summary>
 Gets or sets the tag prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.AdvancedPagingSettings.CurrentPage">
 <summary>
 Gets or sets the 1-based value representing the current page number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.AdvancedPagingSettings.TotalPages">
 <summary>
 Gets or sets the 1-based value representing the total number of pages.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.AdvancedPagingSettings.LinkGenerator">
 <summary>
 Gets or sets the function that generates the URL to the given page.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.AdvancedPagingSettings.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.Cart.CartCatch">
 <summary>
 Class CartCatch. This class cannot be inherited.
 </summary>
 <remarks>
 This is NOT a class that should be declared, it is a holder for functionality
 concerning the cart.
 Be aware that the subs and functions in this class are all public shared.
 </remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.CartCatch.#ctor">
 <summary>
 Prevents a default instance of the <see cref="T:Dynamicweb.Ecommerce.Frontend.Cart.CartCatch" /> class from being created.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.CartCatch.CatchCart(System.Int32,Dynamicweb.Frontend.PageView)">
 <summary>
 Catches the cart.
 </summary>
 <param name="pageId">The page identifier.</param>
 <param name="pageView">The page view.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.CartCatch.ClearAnonymousCart(Dynamicweb.Security.UserManagement.User)">
 <summary>
 Removes user cart by means of clearing cart cookies
 </summary>
 <param name="user">The user which cart should be removed</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.CartCatch.ClearCart">
 <summary>
 Clears the cart.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.CartCatch.OrderLineHandler(Dynamicweb.Ecommerce.Frontend.Cart.OrderLineCommand,System.String)">
 <summary>
 Order line handler.
 </summary>
 <param name="orderLineCommand">The cart command.</param>
 <param name="orderLineId">The order line identifier.</param>
 <returns><c>true</c> if the command was successfully executed, <c>false</c> otherwise.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.CartCatch.OrderLineHandler(System.Double,System.String,Dynamicweb.Ecommerce.Frontend.Cart.OrderLineQuantityMethod)">
 <summary>
 Orders the line handler.
 </summary>
 <param name="quantity">The quantity.</param>
 <param name="orderLineId">The order line identifier.</param>
 <param name="method">The method.</param>
 <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.CartCatch.SaveCart">
 <summary>
 Saves the cart id to a cookie.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.CartCatch.LoadCart">
 <summary>
 Loads the cart into session. Checks for cart on AccessUser and cookie.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.CartCatch.CartIsPresent">
 <summary>
 Checks wether the cart exists or not. In session or in cookie.
 </summary>
 <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.CartCatch.GetReferer(System.Int32,Dynamicweb.Frontend.PageView)">
 <summary>
 Gets the referer.
 </summary>
 <param name="pageId">The page identifier.</param>
 <param name="pageView">The pageView.</param>
 <returns>System.String.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.CartCatch.NotifyCartDeleted(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Notifies the cart deleted.
 </summary>
 <param name="cart">The cart.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.CartCatch.NotifyCartLineAdded(Dynamicweb.Ecommerce.Orders.OrderLine,Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Frontend.PageView)">
 <summary>
 Notifies the cart line added.
 </summary>
 <param name="orderLine">The order line.</param>
 <param name="cart">The cart.</param>
 <param name="pageView">The page view.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.CartCatch.NotifyCartLineRemoved(Dynamicweb.Ecommerce.Orders.OrderLine,Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Notifies the cart line removed.
 </summary>
 <param name="orderLine">The order line.</param>
 <param name="cart">The cart.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.CartCatch.NotifyCartLineIncreased(Dynamicweb.Ecommerce.Orders.OrderLine,System.Double,Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Notifies the cart line increased.
 </summary>
 <param name="orderLine">The order line.</param>
 <param name="amount">The amount.</param>
 <param name="cart">The cart.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.CartCatch.NotifyCartLineDecreased(Dynamicweb.Ecommerce.Orders.OrderLine,System.Double,Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Notifies the cart line decreased.
 </summary>
 <param name="orderLine">The order line.</param>
 <param name="amount">The amount.</param>
 <param name="cart">The cart.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.CartCatch.NotifySavedForLaterProductRemoved(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Notifies the saved for later product removed.
 </summary>
 <param name="removedProduct">The removed product.</param>
 <param name="cart">The cart.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.Cart.CartPageTemplateExtender">
 <summary>
 Represents the extender for the CartPage template.
 </summary>
 <seealso cref="T:Dynamicweb.Frontend.PageTemplateExtender" />
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.CartPageTemplateExtender.ExtendTemplate(Dynamicweb.Rendering.Template)">
 <summary>
 Extends the template.
 </summary>
 <param name="template">The template.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.Cart.ProductKey">
 <summary>
 Struct ProductKey
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.Cart.ProductKey.ProductId">
 <summary>
 The product identifier.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.Cart.ProductKey.VariantId">
 <summary>
 The variant identifier.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.Cart.ProductKey.LanguageId">
 <summary>
 The language identifier.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.ProductKey.Equals(System.Object)">
 <summary>
 Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
 </summary>
 <param name="item">The <see cref="T:System.Object" /> to compare with this instance.</param>
 <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.ProductKey.GetHashCode">
 <summary>
 Returns a hash code for this instance.
 </summary>
 <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.Cart.OrderLineCommand">
 <summary>
 Defines the order line commands.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Frontend.Cart.OrderLineCommand.IncrementOrderLine">
 <summary>
 The increment order line.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Frontend.Cart.OrderLineCommand.DecrementOrderLine">
 <summary>
 The decrement order line.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Frontend.Cart.OrderLineCommand.DeleteOrderLine">
 <summary>
 The delete order line.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.Cart.OrderLineQuantityMethod">
 <summary>
 Defines the order line quantity methods.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Frontend.Cart.OrderLineQuantityMethod.Add">
 <summary>
 The add.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Frontend.Cart.OrderLineQuantityMethod.Update">
 <summary>
 The update.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.Cart.ProductReserve">
 <summary>
 It concerns for the reservation of products when they added to the basket.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.Cart.ProductReserve.Mode">
 <summary>
 Gets the mode.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.Cart.ProductReserve.Enabled">
 <summary>
 Gets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Frontend.Cart.ProductReserve" /> is enabled.
 </summary>
 <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.ProductReserve.GetReservedAmount(System.String,System.String)">
 <summary>
 Gets the reserved amount.
 </summary>
 <param name="productId">The product identifier.</param>
 <param name="variantId">The variant identifier.</param>
 <returns>System.Double.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.ProductReserve.IncreaseReserve(Dynamicweb.Ecommerce.Orders.Order,System.String,System.String,System.String,System.Double)">
 <summary>
 Increases the reserve.
 </summary>
 <param name="order">The order.</param>
 <param name="productId">The product identifier.</param>
 <param name="variantId">The variant identifier.</param>
 <param name="languageId">The language identifier.</param>
 <param name="amount">The amount.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.ProductReserve.DecreaseReserve(Dynamicweb.Ecommerce.Orders.Order,System.String,System.String,System.String,System.Double)">
 <summary>
 Decreases the reserve.
 </summary>
 <param name="order">The order.</param>
 <param name="productId">The product identifier.</param>
 <param name="variantId">The variant identifier.</param>
 <param name="languageId">The language identifier.</param>
 <param name="amount">The amount.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.ProductReserve.EnsureOrderIsReserved(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Ensures the order is reserved.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.ProductReserve.PutOrderInReserve(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Puts the order in reserve.
 </summary>
 <param name="order">The order.</param>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.ProductReserve.ConvertCartToOrder(System.String,System.String)">
 <summary>
 Converts the cart to order.
 </summary>
 <param name="cartId">The cart identifier.</param>
 <param name="orderId">The order identifier.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.ProductReserve.RemoveUserStock(System.String)">
 <summary>
 Removes the user stock.
 </summary>
 <param name="orderId">The order identifier.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.ProductReserve.ResetValues">
 <summary>
 Resets the values.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.Cart.ProductReserveMode">
 <summary>
 Defines the product reserve modes.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Frontend.Cart.ProductReserveMode.Checkout">
 <summary>
 The checkout.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Frontend.Cart.ProductReserveMode.AddToCart">
 <summary>
 The add to cart.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.Cart.SavedForLaterCartDeletedObserver">
 <summary>
 Saves product which were in the card before deletion into the database
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationSubscriber" />
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.SavedForLaterCartDeletedObserver.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Called when notification is broadcast.
 </summary>
 <param name="notification">The notification.</param>
 <param name="args">The arguments.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.Cart.SavedForLaterCartLineAddedObserver">
 <summary>
 Removes the product from the SavedForLater's list of products from Database when it's added to the cart
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationSubscriber" />
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.SavedForLaterCartLineAddedObserver.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Called when notification is broadcast.
 </summary>
 <param name="notification">The notification.</param>
 <param name="args">The arguments.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.Cart.SavedForLaterCartLineRemovedObserver">
 <summary>
 Adds the product to the SavedForLater table whe the product is removed
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationSubscriber" />
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.SavedForLaterCartLineRemovedObserver.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Called when notification is broadcast.
 </summary>
 <param name="notification">The notification.</param>
 <param name="args">The arguments.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.Cart.SavedForLaterProductRemovedObserver">
 <summary>
 Removes the product from the SavedForLater's list of products from Database.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationSubscriber" />
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Cart.SavedForLaterProductRemovedObserver.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Called when notification is broadcast.
 </summary>
 <param name="notification">The notification.</param>
 <param name="args">The arguments.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Frontend.CatalogPublishing.CatalogPublishing._paragraphSettings">
 <summary>
 setting for product catalog module where print publishing
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Frontend.CatalogPublishing.CatalogPublishing._pdfFilePath">
 <summary>
 path where to save newely created pdf
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.CatalogPublishing.CatalogPublishing.PDFFilePath">
 <summary>
 path where to save newely created pdf
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.CatalogPublishing.CatalogPublishing.Settings">
 <summary>
 setting for product catalog module where print publishing
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.CatalogPublishing.CatalogPublishing.GetParagrapfSettings">
 <summary>
 Get setting for paragraph with print publishing enabled in product catalog
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.CatalogPublishing.CatalogPublishing.GenerateHtmlPreview(System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Collections.Generic.Dictionary{System.String,System.Double},System.Boolean)">
 <summary>
 Generate HTML preview for product catalog
 </summary>
 <param name="productsToPrint">Products and their quantities</param>
 <param name="proposedPrices">Products and their prices</param>
 <param name="isPreview">show inputs or h3 text</param>
 <returns>generated HTML</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.CatalogPublishing.CatalogPublishing.GenerateHtmlForPdfRendering(System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Collections.Generic.Dictionary{System.String,System.Double})">
 <summary>
 Generate HTML for printing which will be without inputs
 </summary>
 <param name="productsToPrint">Products and their quantities</param>
 <param name="proposedPrices">Products and their prices</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.CatalogPublishing.CatalogPublishing.GetProductImagePath(System.String,Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Gets the product image path.
 </summary>
 <param name="image">The image.</param>
 <param name="product">The product.</param>
 <returns>The product image path.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.CatalogPublishing.CatalogPublishing.ImagePathReplacer(System.String,System.String@)">
 <summary>
 Image path replacer.
 </summary>
 <param name="path">The temporary path.</param>
 <param name="htmlOutput">The HTML output.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.CatalogPublishing.CatalogPublishing.ImagePathReplacer(System.String@,System.String@,System.String@)">
 <summary>
 
 </summary>
 <param name="fullImagePath"></param>
 <param name="path"></param>
 <param name="htmlOutput"></param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.CatalogPublishing.CatalogPublishing.CatalogPublishing(System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Collections.Generic.Dictionary{System.String,System.Double})">
 <summary>
 Printing product catalog for products selected by user/salesman in productsToPrint
 with prices from proposedPrices
 </summary>
 <param name="productsToPrint"></param>
 <param name="proposedPrices"></param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.CatalogPublishing.CatchCatalogPublishing.CatchCatalog(System.Int32,Dynamicweb.Frontend.PageView)">
 <summary>
 Intercepting catalog comands
 </summary>
 <param name="pageId">Page wrom which command was sent</param>
 <param name="pageView">Pageview parameter for page</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.CatalogPublishing.CatchCatalogPublishing.GetReferer(System.Int32,Dynamicweb.Frontend.PageView)">
 <summary>
 Getting url for redirect
 </summary>
 <param name="pageId"></param>
 <param name="pageView"></param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.ContextRenderers.ContextOrderRenderer">
 <summary>
 Represents the context order renderer.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.ContextRenderers.ContextOrderRenderer.GetContent">
 <summary>
 Gets the content.
 </summary>
 <returns>The content.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.ContextRenderers.ContextOrderRenderer.GetOrderId">
 <summary>
 Gets the empty order id.
 </summary>
 <returns>The empty order id.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.ContextRenderers.ContextOrderRenderer.GetTestOrderId">
 <summary>
 Gets the test order id.
 </summary>
 <returns>The test order id.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.ContextRenderers.ContextOrderRenderer.RenderOrder(System.String)">
 <summary>
 Renders the order.
 </summary>
 <param name="orderId">The order id.</param>
 <returns>The HTML.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.ContextRenderers.ContextVoucherRenderer">
 <summary>
 Represents the context voucher renderer.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.ContextRenderers.ContextVoucherRenderer.GetContent">
 <summary>
 Gets the content.
 </summary>
 <returns>The content.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.ContextRenderers.ContextVoucherRenderer.RenderVoucher(Dynamicweb.Frontend.PageViewContext)">
 <summary>
 Renders the voucher.
 </summary>
 <param name="settings">The settings.</param>
 <returns>The HTML.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.ContextRenderers.ContextVoucherRenderer.RenderVoucher(System.String)">
 <summary>
 Renders the voucher.
 </summary>
 <param name="voucherListId">The voucher list id.</param>
 <returns>The HTML.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.EcomAuthenticateRequestNotificationSubscriber">
 <summary>
 Represents the notification subscriber for page load.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.EcomAuthenticateRequestNotificationSubscriber.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Called when notification is broadcast.
 </summary>
 <param name="notification">The notification.</param>
 <param name="args">The arguments.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.EcomPageLoadNotificationSubscriber">
 <summary>
 Represents the notification subscriber for page load.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.EcomPageLoadNotificationSubscriber.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Called when notification is broadcast.
 </summary>
 <param name="notification">The notification.</param>
 <param name="args">The arguments.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.EcomPageOnOutputSubscriber">
 <summary>
 Represents the notification subscriber for page on output.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.EcomPageOnOutputSubscriber.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Called when notification is broadcast.
 </summary>
 <param name="notification">The notification.</param>
 <param name="args">The arguments.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.EcomPageOnOutputSubscriber.CreateInstance(Dynamicweb.Ecommerce.Orders.Order,System.Nullable{System.Int32})">
 <summary>
 Creates an instance of <see cref="T:Dynamicweb.Frontend.CartViewModel"/> .
 </summary>
 <param name="cart">The cart.</param>
 <returns>CartViewModel.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.EcomPageOnOutputSubscriber.CreatePriceViewModel(Dynamicweb.Ecommerce.Prices.PriceInfo,Dynamicweb.Ecommerce.International.Currency)">
 <summary>
 Creates an instance of <see cref="T:Dynamicweb.Frontend.PriceViewModel"/> .
 </summary>
 <param name="currencyInfo"></param>
 <param name="priceInfo"></param>
 <returns>PriceViewModel.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.EcomPageTemplateExtender">
 <summary>
 Represents the extender for the page template.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.EcomPageTemplateExtender.ExtendTemplate(Dynamicweb.Rendering.Template)">
 <summary>
 Extends the template.
 </summary>
 <param name="template">The template.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.Frontend">
 <summary>
 Represents the frontend functions.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.Frontend.ParagraphSettings">
 <summary>
 Gets the module paragraph settings.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.Frontend.IsPreviewFromPim">
 <summary>
 Gets the module paragraph settings.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.InitializeModule(Dynamicweb.Content.Paragraph,Dynamicweb.Frontend.PageView)">
 <summary>
 Initializes the instance. 
 </summary>
 <param name="renderingParagraph">The paragraph creating the instance of this module</param>
 <param name="pageviewContext">An instance of the current pageview being showed</param>
 <remarks>Used internally. Dynamicweb handles the initialization and this method should normally not be called</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.GetContent">
 <summary>
 Gets the content.
 </summary>
 <returns>The content.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.EcomRender">
 <summary>
 Renders the catalog.
 </summary>
 <returns>The content.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.Contains(System.Array,System.Object)">
 <summary>
 Determines whether [contains] [the specified inputArray].
 </summary>
 <param name="input">The inputArray.</param>
 <param name="item">The obj.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.CanExecutePagedQuery">
 <summary>
 Indicates whether paged product list queries are allowed.
 </summary>
 <returns>Value indicating whether paged product list queries are allowed.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.CanApplyFilters">
 <summary>
 Determines whether filters can be applied to the current context.
 </summary>
 <returns>Value indicating whether filters can be applied to the current context.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.RenderProduct(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Renders the product.
 </summary>
 <param name="product">The product.</param>
 <returns>The HTML.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.RenderGroup(System.String)">
 <summary>
 Renders the group.
 </summary>
 <param name="groupId">The group id.</param>
 <returns>The HTML.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.List(System.String)">
 <summary>
 Renders the groups.
 </summary>
 <param name="groups">The groups.</param>
 <returns>The HTML.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.DeleteGroupDisplayCache">
 <summary>
 Deletes group display cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.ListProducts(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Renders the products.
 </summary>
 <param name="products">The products.</param>
 <returns>The HTML.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.ListProducts(Dynamicweb.Ecommerce.Products.ProductCollection,System.String)">
 <summary>
 Renders the products.
 </summary>
 <param name="products">The products.</param>
 <param name="groupsIdent">The groups ident.</param>
 <returns>The HTML.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.GetTemplateFromRequest(System.String,System.String)">
 <summary>
 Returns a view template file that was associated with the given request key within the current HTTP context.
 </summary>
 <param name="key">Request key.</param>
 <param name="originalTemplate">Original template file.</param>
 <returns>The template file specified via the current HTTP request or an empty string if no file is specified.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.ReorderAccordingToProfile(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Reorders products by moving the marked products on top for the current visitor profile.
 </summary>
 <param name="products">Products to process.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.GetIndexSortByField(System.String)">
 <summary>
 Retrieves the name of the field to sort the index entries by.
 </summary>
 <param name="sortByField">The type of the sort field.</param>
 <returns>The name of the "Sort by" field.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.DoTheSearch(System.String)">
 <summary>
 Searches the products.
 </summary>
 <param name="searchQuery">The search auery.</param>
 <returns>The found products.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.DoTheSearch(System.String,System.Collections.Hashtable@)">
 <summary>
 Searches the products.
 </summary>
 <param name="searchQuery">The search auery.</param>
 <param name="searchCustomFields">The found custom fields.</param>
 <returns>The found products.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.DoTheSearch(System.String,System.Collections.Hashtable@,System.Collections.Hashtable@)">
 <summary>
 Searches the products.
 </summary>
 <param name="searchQuery">The search auery.</param>
 <param name="searchCustomFields">The found custom fields.</param>
 <param name="criteriaList">The search criteria.</param>
 <returns>The found products.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.DoTheSearch(System.String,System.Collections.Hashtable@,System.Collections.Hashtable@,System.Collections.Hashtable@)">
 <summary>
 Searches the products.
 </summary>
 <param name="searchQuery">The search auery.</param>
 <param name="searchCustomFields">The found custom fields.</param>
 <param name="criteriaList">The search criteria.</param>
 <param name="searchGroupFields">The searched group fields.</param>
 <returns>The found products.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.HandleUnderscoresInIndexExpression(Dynamicweb.Indexing.Querying.Expressions.Expression)">
 <summary>
 Look through each expression in the Query, and if the Expression contains an underscore in the field id, it will be changed to |
 </summary>
 <param name="expression"></param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Frontend.ReplaceUnderscoreInCategoryField(System.String)">
 <summary>
 Replaces underscores in productCategoryField ids with pipe. If the field isn't a ProductCategoryField or it doesn't contain underscore, it will not do anything
 </summary>
 <param name="fieldName"></param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.ImagePattern">
 <summary>
 Represents the image pattern.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ImagePattern.Type">
 <summary>
 Gets or sets the type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ImagePattern.Name">
 <summary>
 Gets or sets the name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ImagePattern.Width">
 <summary>
 Gets or sets the width.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ImagePattern.Height">
 <summary>
 Gets or sets the height.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ImagePattern.Value">
 <summary>
 Gets or sets the pattern.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ImagePattern.TemplateTag">
 <summary>
 Gets the template tag.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.ImagePattern.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.ImagePattern.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="type">The type.</param>
 <param name="name">The name.</param>
 <param name="value">The value.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.ImagePattern.#ctor(System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="type">The type.</param>
 <param name="name">The name.</param>
 <param name="value">The value.</param>
 <param name="width">The width.</param>
 <param name="height">The height.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.NavigationProviders.AssortmentNavigationProvider">
 <summary>
 Represents custom Assortments navigation provider that adds groups from assortments to the navigation tree.
 </summary>
 <remarks>For an example take a look at <see cref="T:Dynamicweb.Frontend.NavigationProviders.NavigationProvider">NavigationProvider</see> example.</remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.NavigationProviders.AssortmentNavigationProvider.EcomNavigationSettings">
 <summary>
 Represents eCommerce page navigation settings.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.AssortmentNavigationProvider.EcomNavigationSettings.TopLevelGroups">
 <summary>
 Gets or sets the collection of top-level groups.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.AssortmentNavigationProvider.EcomNavigationSettings.MaxLevel">
 <summary>
 Gets or sets the maximum level of nesting.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.AssortmentNavigationProvider.EcomNavigationSettings.DetailsPageId">
 <summary>
 Gets or sets the ID of the details page.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.AssortmentNavigationProvider.EcomNavigationSettings.IncludeProducts">
 <summary>
 Gets or sets include products or not
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.AssortmentNavigationProvider.EcomNavigationSettings.MaxNumberOfProducts">
 <summary>
 Gets or sets max number of products included in each group
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.AssortmentNavigationProvider.EcomNavigationSettings.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.NavigationProviders.AssortmentNavigationProvider.NavigationCache">
 <summary>
 Represents a navigation cache. This class cannot be inherited.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.AssortmentNavigationProvider.NavigationCache.Current">
 <summary>
 Gets the current group navigation cache.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.AssortmentNavigationProvider.NavigationCache.NavigationSettings">
 <summary>
 Gets the eCommerce page navigation settings mapped to the corresponding page.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.AssortmentNavigationProvider.NavigationCache.Navigation">
 <summary>
 Gets the cached navigation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.AssortmentNavigationProvider.NavigationCache.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.AssortmentNavigationProvider.NavigationCache.Clear">
 <summary>
 Clears the cache.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.AssortmentNavigationProvider.ClearCache">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.AssortmentNavigationProvider.ProcessTree(Dynamicweb.Frontend.NavigationProviders.RootNavigationItem,Dynamicweb.Frontend.XmlNavigation.NavigationType)">
 <summary>
 Processes the tree. Overwritten.
 </summary>
 <param name="rootNode">The root node.</param>
 <param name="navigationType">Type of the navigation.</param>
 <remarks>For an example take a look at <seealso cref="T:Dynamicweb.Frontend.NavigationProviders.NavigationProvider">NavigationProvider</seealso> example.</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.AssortmentNavigationProvider.SetPath(Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationItem)">
 <summary>
 Tries to set the path to the given navigation item.
 </summary>
 <param name="item">Navigation item.</param>
 <returns>Value indicating whether path to the given item has been set.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationItem">
 <summary>
 Group navigation item used by <see cref="T:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider">GroupNavigationProvider</see>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationItem.#ctor(Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationItem" /> class.
 </summary>
 <param name="group">The group.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationItem.SmallImage">
 <summary>
 Gets the small image.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationItem.LargeImage">
 <summary>
 Gets the large image.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationItem.Icon">
 <summary>
 Gets the icon.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationItem.GroupNumber">
 <summary>
 Gets the group number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationItem.ProductCount">
 <summary>
 Gets or sets the number of products.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationItem.Group">
 <summary>
 Gets the group.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider">
 <summary>
 Adds groups from eCommerce to navigation tree.
 </summary>
 <remarks>For an example take a look at <see cref="T:Dynamicweb.Frontend.NavigationProviders.NavigationProvider">NavigationProvider</see> example.</remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider.EcomNavigationSettings">
 <summary>
 Represents eCommerce page navigation settings.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider.EcomNavigationSettings.TopLevelGroups">
 <summary>
 Gets or sets the collection of top-level groups.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider.EcomNavigationSettings.MaxLevel">
 <summary>
 Gets or sets the maximum level of nesting.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider.EcomNavigationSettings.DetailsPageId">
 <summary>
 Gets or sets the ID of the details page.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider.EcomNavigationSettings.IncludeProducts">
 <summary>
 Gets or sets include products or not
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider.EcomNavigationSettings.MaxNumberOfProducts">
 <summary>
 Gets or sets max number of products included in each group
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider.EcomNavigationSettings.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider.NavigationCache">
 <summary>
 Represents a navigation cache. This class cannot be inherited.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider.NavigationCache.NestedNavigationCache">
 <summary>
 Provides a support for full lazy instantiation of the NavigationCache singleton.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider.NavigationCache.NestedNavigationCache.Cache">
 <summary>
 Gets the current instance of the navigation cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider.NavigationCache.NestedNavigationCache.#cctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider.NavigationCache.Current">
 <summary>
 Gets the current group navigation cache.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider.NavigationCache.NavigationSettings">
 <summary>
 Gets the eCommerce page navigation settings mapped to the corresponding page.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider.NavigationCache.Navigation">
 <summary>
 Gets the cached navigation.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider.NavigationCache.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider.NavigationCache.Clear">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider.ProcessTree(Dynamicweb.Frontend.NavigationProviders.RootNavigationItem,Dynamicweb.Frontend.XmlNavigation.NavigationType)">
 <summary>
 Processes the tree. Overwritten.
 </summary>
 <param name="rootNode">The root node.</param>
 <param name="navigationType">Type of the navigation.</param>
 <remarks>For an example take a look at <seealso cref="T:Dynamicweb.Frontend.NavigationProviders.NavigationProvider">NavigationProvider</seealso> example.</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider.SetPath(Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationItem)">
 <summary>
 Tries to set the path to the given navigation item.
 </summary>
 <param name="item">Navigation item.</param>
 <returns>Value indicating whether path to the given item has been set.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.NavigationProviders.ProductNavigationItem">
 <summary>
 Product navigation item used by <see cref="T:Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationProvider">GroupNavigationProvider</see>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.ProductNavigationItem.#ctor(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Frontend.NavigationProviders.ProductNavigationItem" /> class.
 </summary>
 <param name="product">The product.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.ProductNavigationItem.Product">
 <summary>
 Gets the product.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.NavigationProviders.SimpleAssortmentNavigationProvider">
 <summary>
 Adds groups from assortments to the navigation tree.
 </summary>
 <remarks>For an example take a look at <see cref="T:Dynamicweb.Frontend.NavigationProviders.NavigationProvider">NavigationProvider</see> example.</remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.NavigationProviders.SimpleAssortmentNavigationProvider.EcomNavigationSettings">
 <summary>
 Represents eCommerce page navigation settings.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.SimpleAssortmentNavigationProvider.EcomNavigationSettings.TopLevelGroups">
 <summary>
 Gets or sets the collection of top-level groups.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.SimpleAssortmentNavigationProvider.EcomNavigationSettings.MaxLevel">
 <summary>
 Gets or sets the maximum level of nesting.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.SimpleAssortmentNavigationProvider.EcomNavigationSettings.DetailsPageId">
 <summary>
 Gets or sets the ID of the details page.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.SimpleAssortmentNavigationProvider.EcomNavigationSettings.IncludeProducts">
 <summary>
 Gets or sets include products or not
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.SimpleAssortmentNavigationProvider.EcomNavigationSettings.MaxNumberOfProducts">
 <summary>
 Gets or sets max number of products included in each group
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.SimpleAssortmentNavigationProvider.EcomNavigationSettings.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.NavigationProviders.SimpleAssortmentNavigationProvider.NavigationCache">
 <summary>
 Represents a navigation cache. This class cannot be inherited.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.SimpleAssortmentNavigationProvider.NavigationCache.Current">
 <summary>
 Gets the current group navigation cache.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.NavigationProviders.SimpleAssortmentNavigationProvider.NavigationCache.NavigationSettings">
 <summary>
 Gets the eCommerce page navigation settings mapped to the corresponding page.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.SimpleAssortmentNavigationProvider.NavigationCache.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.SimpleAssortmentNavigationProvider.NavigationCache.Clear">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.SimpleAssortmentNavigationProvider.ClearCache">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.SimpleAssortmentNavigationProvider.ProcessTree(Dynamicweb.Frontend.NavigationProviders.RootNavigationItem,Dynamicweb.Frontend.XmlNavigation.NavigationType)">
 <summary>
 Processes the tree.
 </summary>
 <param name="rootNode">The root node.</param>
 <param name="navigationType">The navigation type.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.NavigationProviders.SimpleAssortmentNavigationProvider.SetPath(Dynamicweb.Ecommerce.Frontend.NavigationProviders.GroupNavigationItem)">
 <summary>
 Tries to set the path to the given navigation item.
 </summary>
 <param name="item">Navigation item.</param>
 <returns>Value indicating whether path to the given item has been set.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.PageViewGlobalTagsSubscriber">
 <summary>
 Represents the notification subscriber for PageView global tags.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.PageViewGlobalTagsSubscriber.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Called when notification is broadcast.
 </summary>
 <param name="notification">The notification.</param>
 <param name="args">The arguments.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings">
 <summary>
 Represents the settings of the product catalog.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.DisableProductDetail">
 <summary>
 Gets the value indicating whether the product details are disabled.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.IgnoreUrlParameters">
 <summary>
 Gets the value indicating whether the URL parameters are ignored.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.UseOptimizedEcomFrontend">
 <summary>
 Gets the value indicating whether the optimized frontend is used.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.UseFrontendCaching">
 <summary>
 Gets the value indicating whether the frontend caching is using.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.FrontendCachingExpiration">
 <summary>
 Gets the frontend cache expiration.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.UsePrintPublisher">
 <summary>
 Gets or sets the value indicating whether the publisher print is using.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.FirstPageTemplate">
 <summary>
 Gets or sets the template for the first page.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.LastPageTemplate">
 <summary>
 Gets or sets the template for the last page.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.RegularPageTemplate">
 <summary>
 Gets or sets the template for the regular page.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.HeaderTemplate">
 <summary>
 Gets or sets the header template.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.EmailTemplate">
 <summary>
 Gets or sets the email template.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.EmailFormTemplate">
 <summary>
 Gets or sets the email form template.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.FooterTemplate">
 <summary>
 Gets or sets the footer template.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ProductPublishTemplate">
 <summary>
 Gets or sets the product publish template.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ShortDescriptionLength">
 <summary>
 Gets or sets the length of the short description.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ProductTemplate">
 <summary>
 Gets or sets the product template.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ProductFeedTemplate">
 <summary>
 Gets or sets the product list feed template.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.NolistTemplate">
 <summary>
 Gets or sets the template for nolist views.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ProductId">
 <summary>
 Gets or sets the product id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.VariantId">
 <summary>
 Gets or sets the variant id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.SearchTemplate">
 <summary>
 Gets or sets the search template.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.NoProductTemplate">
 <summary>
 Gets or sets the "No products found" template.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ProductListTemplate">
 <summary>
 Gets or sets the product list template.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ProductListFeedTemplate">
 <summary>
 Gets or sets the product list feed template.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.CompareTemplate">
 <summary>
 Gets or sets the compare template.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.GroupListTemplate">
 <summary>
 Gets or sets the group list template.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.Groups">
 <summary>
 Gets the groups.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.IncludeSubgroups">
 <summary>
 Gets the value indicating whether the subgroups are included.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ProductAndGroupsSelector">
 <summary>
 Gets the groups converted from CVS.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ProductsAndGroups">
 <summary>
 Gets the products and the groups.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ImageFolder">
 <summary>
 Gets or sets the image folder.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ImageSearchInSubfolders">
 <summary>
 Gets or sets the image folder.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ImagePatternS">
 <summary>
 Gets or sets the pattern for the names of the small images.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ImagePatternM">
 <summary>
 Gets or sets the pattern for the names of the medium images.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ImagePatternL">
 <summary>
 Gets or sets the pattern for the names of the large images.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.MetaFirstPageAsCanonical">
 <summary>
 Gets or sets the value indicating whether the  meta of the first page used as canonical.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.Show">
 <summary>
 Gets or sets the show type for the product catalog.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.PageSize">
 <summary>
 Gets or sets the the number of items per page.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.PageSizeForward">
 <summary>
 Gets or sets the number of forward pages.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.PageSizeBack">
 <summary>
 Gets or sets the number of backward pages.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.PageSizeForwardPicture">
 <summary>
 Gets or sets the "Next page" picture.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.PageSizeForwardText">
 <summary>
 Gets or sets the "Next page" text.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.PageSizeBackPicture">
 <summary>
 Gets or sets the "Previous page" image.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.PageSizeBackText">
 <summary>
 Gets or sets the "Previous page" text.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.SortBy">
 <summary>
 Gets or sets the sort by.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.SortOrder">
 <summary>
 Gets or sets the sort order.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.AlternativePictureBox">
 <summary>
 Gets or sets the alternative picture box.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.TemplateSearchBox">
 <summary>
 Gets or sets the template search box.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ShowGroups">
 <summary>
 Gets or sets the value indicating whether the groups are shown.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.TotalProductCount">
 <summary>
 Gets or sets the total product count.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.IsPagedProductList">
 <summary>
 Gets or sets value indicating whether the current product list was paged in DAL.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.RemoveDuplicates">
 <summary>
 Gets the value indicating whether the duplicate products are removed.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.SearchVariants">
 <summary>
 Gets the variants search mode.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.SearchShop">
 <summary>
 If a shop is selected, limit the search results to that shop.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.SearchSubGroups">
 <summary>
 Gets value indicating whether to include products from child groups when in the context of a group (contains "GroupID" query-string parameter).
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.WildcardSearchOnly">
 <summary>
 Gets value indicating whether to always perform wildcard searches when using instant search and suggested queries.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.RelevanceSorting">
 <summary>
 Gets value indicating whether search result should be sorted by relevance.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.EnablePagedQueries">
 <summary>
 Gets value indicating whether paged product list queries are enabled.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ForcePagedQueries">
 <summary>
 Gets value indicating whether to force paged queries even if there's custom code that can rely on the entire product collection.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.MaxQuerySuggestions">
 <summary>
 Gets the maximum number of query suggestions to display when using "Suggested queries" functionality.
 </summary>
 <remarks>The default value is "5". The maximum allowed value is "20" (any number greater than 20 will be silently discarded).</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.DefaultSearchField">
 <summary>
 Gets the default search field for free-text search functionality.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.HideEmptyOptions">
 <summary>
 Gets value indicating whether to exclude filter options without products from the render pipeline.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ShowOnParagraphId">
 <summary>
 Gets the paragraph id where the catalog will be shown.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ShowOnParagraphPageId">
 <summary>
 Gets the paragraph's page id where the catalog will be shown.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ShowOnParagraph">
 <summary>
 Gets the value indicating whether the catalog will be shown on the paragraph.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ShowOnParagraphCatalogUrl">
 <summary>
 Gets the paragraph catalog URL.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ShowOnParagraphSystemUrl">
 <summary>
 Gets the paragraph catalog system URL.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.IncludeExtendedVariants">
 <summary>
 Is the Ecom search should find extended variants.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.IndexQuery">
 <summary>
 Gets the facet.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ShowFacetOptionsWithNoResults">
 <summary>
 Show facet options with no result.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.#ctor(Dynamicweb.Modules.Properties)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="properties">The properties.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.#ctor(System.Int32)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="paragraphId">The paragraph id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.SetGroups(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.Group})">
 <summary>
 Allows caller to override the group collection being being returned by the <see cref="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.Groups" /> property.
 Setting the group collection here circumvents groups selected in <see cref="P:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings.ProductAndGroupsSelector" />.
 </summary>
 <param name="groups">The group collection to set.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.ProductCatalogShowType">
 <summary>
 Defines the show types for product catalog.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.ProductViewModel">
 <summary>
 Class ProductViewModel.
 </summary>
 <seealso cref="T:Dynamicweb.Rendering.ViewModelBase" />
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.ProductViewModel.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Frontend.ProductViewModel"/> class.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductViewModel.Id">
 <summary>
 Gets or sets the identifier.
 </summary>
 <value>The identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductViewModel.VariantId">
 <summary>
 Gets or sets the variant identifier.
 </summary>
 <value>The variant identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductViewModel.LanguageId">
 <summary>
 Gets or sets the language identifier.
 </summary>
 <value>The language identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductViewModel.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ProductViewModel.Number">
 <summary>
 Gets or sets the number.
 </summary>
 <value>The number.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.ProductViewModel.CreateInstance(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Creates an instance of this view model.
 </summary>
 <param name="product">The product.</param>
 <returns>ProductViewModel.</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.Renderer.ContentModule">
 <summary>
 Gets or sets the content module.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.Renderer.PageView">
 <summary>
 Gets or sets the <see cref="T:Dynamicweb.Frontend.PageView"/>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.Renderer.IsOrderRendering">
 <summary>
 Gets or sets the value indicating whether need to render the order.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.Renderer.ParagraphSettings">
 <summary>
 Gets or sets the <see cref="T:Dynamicweb.Ecommerce.Frontend.ProductCatalogSettings"/>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.Renderer.ParagraphId">
 <summary>
 Gets or sets the paragraph id.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.#ctor(Dynamicweb.Frontend.PageView)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="pageView">The <see cref="T:Dynamicweb.Frontend.PageView"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.#ctor(Dynamicweb.Frontend.PageView,System.Int32)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="pageView">The <see cref="T:Dynamicweb.Frontend.PageView"/>.</param>
 <param name="paragraphId">The paragraph id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.ForcePageId(System.Int32)">
 <summary>
 Forces the page id.
 </summary>
 <param name="pageId">The page id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.Pid">
 <summary>
 Gets the "PID=" URL segment.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProducts(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Renders the products.
 </summary>
 <param name="products">A collection of the products.</param>
 <returns>The HTML.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProducts(Dynamicweb.Ecommerce.Products.ProductCollection,Dynamicweb.Rendering.Template)">
 <summary>
 Renders the products.
 </summary>
 <param name="products">A collection of the products.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProducts(Dynamicweb.Ecommerce.Products.ProductCollection,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the products.
 </summary>
 <param name="products">A collection of the products.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The loop name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProducts(Dynamicweb.Ecommerce.Products.ProductCollection,Dynamicweb.Rendering.Template,System.String,System.Int32)">
 <summary>
 Renders the products.
 </summary>
 <param name="products">A collection of the products.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The loop name.</param>
 <param name="loopCounter">The loop counter.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderAdvancedPaging(Dynamicweb.Ecommerce.Frontend.AdvancedPagingSettings)">
 <summary>
 Renders advanced paging tags.
 </summary>
 <param name="settings">Paging settings.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderAdvancedPagingLoop(Dynamicweb.Rendering.Template,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Func{System.Int32,System.String})">
 <summary>

 </summary>
 <param name="template">Loop.</param>
 <param name="startPage">Start page.</param>
 <param name="endPage">End page.</param>
 <param name="currentPage">Current page.</param>
 <param name="totalPages">Total pages.</param>
 <param name="tagPrefix">Tag prefix.</param>
 <param name="linkGenerator">Page URL generator.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.CollectQueryString(System.String[])">
 <summary>
 Returns the part of the current query-string.
 </summary>
 <param name="commitParameters">An array of parameter names to ommit.</param>
 <returns>The part of the current query-string.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProductGroups(Dynamicweb.Rendering.Template)">
 <summary>
 Renders the product groups.
 </summary>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProductsSimpleWithQuantity(System.Collections.Generic.Dictionary{Dynamicweb.Ecommerce.Products.Product,System.Int32},Dynamicweb.Rendering.Template,System.Int32)">
 <summary>
 Renders the products with the quantity.
 </summary>
 <param name="productDictionary">A dictionary of the products and quantity.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="wishListId">The wishlist id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProduct(Dynamicweb.Ecommerce.Products.Product,System.Boolean)">
 <summary>
 Renders the product.
 </summary>
 <param name="product">The product.</param>
 <param name="extendedProperties">If set to <c>true</c>, renders with the extended properties.</param>
 <returns>The HTML.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProduct(Dynamicweb.Ecommerce.Products.Product,System.Boolean,Dynamicweb.Rendering.Template)">
 <summary>
 Renders the product.
 </summary>
 <param name="product">The product.</param>
 <param name="extendedProperties">If set to <c>true</c>, renders with the extended properties.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProduct(Dynamicweb.Ecommerce.Products.Product,System.Boolean,Dynamicweb.Rendering.Template,System.Int32)">
 <summary>
 Renders the product.
 </summary>
 <param name="product">The product.</param>
 <param name="extendedProperties">If set to <c>true</c>, renders with the extended properties.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopCounter">The loop counter.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProduct(Dynamicweb.Ecommerce.Products.Product,System.Boolean,Dynamicweb.Rendering.Template,System.Int32,System.Boolean,System.Int32)">
 <summary>
 Renders the product.
 </summary>
 <param name="product">The product.</param>
 <param name="extendedProperties">If set to <c>true</c>, renders with the extended properties.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopCounter">The loop counter.</param>
 <param name="renderRelated">Is set to <c>true</c>, renders related products.</param>
 <param name="orderLineOfProductCount">The order line.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProduct(Dynamicweb.Ecommerce.Products.Product,System.Boolean,Dynamicweb.Rendering.Template,System.Int32,System.Boolean,System.String)">
 <summary>
 Renders the product.
 </summary>
 <param name="product">The product.</param>
 <param name="extendedProperties">If set to <c>true</c>, renders with the extended properties.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopCounter">The loop counter.</param>
 <param name="renderRelated">Is set to <c>true</c>, renders related products.</param>
 <param name="productUrl">The product URL.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProduct(Dynamicweb.Ecommerce.Products.Product,System.Boolean,Dynamicweb.Rendering.Template,System.Int32,System.Boolean,System.String,System.Int32,System.Int32)">
 <summary>
 Renders the product.
 </summary>
 <param name="product">The product.</param>
 <param name="extendedProperties">If set to <c>true</c>, renders with the extended properties.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopCounter">The loop counter.</param>
 <param name="renderRelated">Is set to <c>true</c>, renders related products.</param>
 <param name="productUrl">The product URL.</param>
 <param name="quantity">The quantity.</param>
 <param name="wishListId">The wishlist id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProduct(Dynamicweb.Ecommerce.Products.Product,System.Boolean,Dynamicweb.Rendering.Template,System.Int32,System.Boolean,System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
 <summary>
 Renders the product.
 </summary>
 <param name="product">The product.</param>
 <param name="extendedProperties">If set to <c>true</c>, renders with the extended properties.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopCounter">The loop counter.</param>
 <param name="renderRelated">Is set to <c>true</c>, renders related products.</param>
 <param name="productUrl">The product URL.</param>
 <param name="quantity">The quantity.</param>
 <param name="wishListId">The wishlist id.</param>
 <param name="renderPublicList">If set to <c>true</c> it is public list.</param> 
 <param name="orderLineOfProductCount">The order line.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderLastAddedProduct(Dynamicweb.Rendering.Template)">
 <summary>
 Render information about last product has been added to the cart.
 </summary>
 <param name="template">The template</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProductListTemplateExtenders(Dynamicweb.Ecommerce.Products.ProductCollection,Dynamicweb.Rendering.Template)">
 <summary>
 Extends a ProductList template with TemplateExtenders.
 </summary>
 <param name="products">The currently rendered product.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProductTemplateExtenders(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Rendering.Template)">
 <summary>
 Extends a product template with TemplateExtenders.
 </summary>
 <param name="product">The product.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProductTemplateExtenders(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Rendering.Template,System.Boolean)">
 <summary>
 Extends a Product template with TemplateExtenders.
 </summary>
 <param name="product">The currently rendered product</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="extendedProperties">If set to <c>true</c>, renders with the extended properties.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderGroupTemplateExtenders(Dynamicweb.Ecommerce.Products.Group,Dynamicweb.Rendering.Template)">
 <summary>
 Extends a Group template with TemplateExtenders
 </summary>
 <param name="Group">The currently rendered group</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.GetProductImage(System.String,System.String)">
 <summary>
 Gets the product image.
 </summary>
 <param name="imagePath">The image path.</param>
 <param name="imageSize">the image size.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.FileExists(System.String)">
 <summary>
 Checks the existence of the file.
 </summary>
 <param name="imagePath">The image path.</param>
 <returns><c>true</c> if file exists.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProductRelatedGroups(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the related products groups.
 </summary>
 <param name="product">The product.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The loop name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderStockStatus(Dynamicweb.Ecommerce.Stocks.StockStatus,Dynamicweb.Rendering.Template)">
 <summary>
 Renders stock status.
 </summary>
 <param name="stockStatus">The stock status.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderVariantCombinations(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the variant combinations.
 </summary>
 <param name="product">The product.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The loop name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderVariantGroups(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the variant groups.
 </summary>
 <param name="product">The product.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The loop name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderVariantGroup(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Variants.VariantGroup,Dynamicweb.Rendering.Template)">
 <summary>
 Renders the variant groups.
 </summary>
 <param name="product">The product.</param>
 <param name="variantGroup">The variant group.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderVariantOptions(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Variants.VariantOption},Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the variant options.
 </summary>
 <param name="variantOptions">The variant options.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The loop name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderVariantAvailableOptions(Dynamicweb.Ecommerce.Products.Product,System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Variants.VariantOption},Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the available variant options.
 </summary>
 <param name="product">The product.</param>
 <param name="groupVariantOptions">The variant options.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The loop name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderVariantAvailableOptions(Dynamicweb.Ecommerce.Products.Product,System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Variants.VariantOption},Dynamicweb.Rendering.Template,System.String,System.Boolean)">
 <summary>
 Renders the available variant options.
 </summary>
 <param name="product">The product.</param>
 <param name="groupVariantOptions">The variant options.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The loop name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderVariantOption(Dynamicweb.Ecommerce.Variants.VariantOption,Dynamicweb.Rendering.Template)">
 <summary>
 Renders the variant option.
 </summary>
 <param name="variantOption">The variant option.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderVariantOption(Dynamicweb.Ecommerce.Variants.VariantOption,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the variant option.
 </summary>
 <param name="variantOption">The variant option.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="renderingVariantId">The rendering variant id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderUnits(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Rendering.Template)">
 <summary>
 Renders units.
 </summary>
 <param name="product">The product.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderStockUnits(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Rendering.Template,Dynamicweb.Ecommerce.Stocks.StockLocation,System.Boolean)">
 <summary>
 Renders stock units.
 </summary>
 <param name="product">The product.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="currentStockLocation">The stock location.</param>
 <param name="isRenderInternalLoop">If set to <c>true</c> renders the internal loop.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderStockLocations(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Rendering.Template,System.String,System.Boolean)">
 <summary>
 Renders the stock locations.
 </summary>
 <param name="product">The product.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="currentUnitId">The unit id.</param>
 <param name="isRenderInternalLoop">If set to <c>true</c> renders the internal loop.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderStockStateTotals(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Rendering.Template)">
 <summary>
 Renders the totals for stock state.
 </summary>
 <param name="product">The product.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderPriceInfo(Dynamicweb.Ecommerce.Prices.IPriceInfo,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the price information.
 </summary>
 <param name="price">The price.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="tagName">The template tag name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderCurrencies(Dynamicweb.Rendering.Template)">
 <summary>
 Renders all currencies on the site.
 </summary>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderCurrency(Dynamicweb.Ecommerce.International.Currency,Dynamicweb.Rendering.Template,System.String,System.Boolean)">
 <summary>
 Renders the currency.
 </summary>
 <param name="currency">The currency.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="tagName">Name of the prefix of the tag, i.e. 'Currency' in the tag Currency.Code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderCurrency(Dynamicweb.Ecommerce.International.Currency,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the currency.
 </summary>
 <param name="currency">The currency.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="tagName">Name of the prefix of the tag, i.e. 'Currency' in the tag Currency.Code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderOrderContexts(Dynamicweb.Rendering.Template)">
 <summary>
 Renders all order contexts on the site.
 </summary>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderOrderContext(Dynamicweb.Ecommerce.Orders.OrderContext,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the orderContext.
 </summary>
 <param name="orderContext">The orderContext.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="tagName">Name of the prefix of the tag, i.e. 'OrderContext' in the tag OrderContext.Name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderDetails(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.Detail},Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the details.
 </summary>
 <param name="details">The details.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The loop name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderDetail(Dynamicweb.Ecommerce.Products.Detail,Dynamicweb.Rendering.Template)">
 <summary>
 Render the detail.
 </summary>
 <param name="detail">The detail.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderGroups(Dynamicweb.Ecommerce.Products.GroupCollection)">
 <summary>
 Renders the groups.
 </summary>
 <param name="groups">The groups.</param>
 <returns>The HTML.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderGroups(Dynamicweb.Ecommerce.Products.GroupCollection,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the groups.
 </summary>
 <param name="groups">The groups.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The loop name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderGroup(Dynamicweb.Ecommerce.Products.Group,Dynamicweb.Rendering.Template)">
 <summary>
 Renders single group.
 </summary>
 <param name="group">Group to render.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderSmartSearches(Dynamicweb.SmartSearch.SmartSearchCollection,Dynamicweb.Rendering.Template)">
 <summary>
 Renders single group.
 </summary>
 <param name="smartSearches">Smart search to render.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderGroup(Dynamicweb.Ecommerce.Products.Group,Dynamicweb.Rendering.Template,System.Boolean)">
 <summary>
 Renders single group.
 </summary>
 <param name="group">Group to render.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="renderSubGroups">Indicates whether to render sub-groups (if the corresponding loop is defined in a template).</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProductGroupCustomFields(Dynamicweb.Ecommerce.Products.ProductGroupFieldValueCollection,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the custom fields.
 </summary>
 <param name="productGroupFieldValues">The custom fields.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The loop name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProductGroupCustomFields(System.String,Dynamicweb.Ecommerce.Products.ProductGroupFieldValueCollection,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the custom fields.
 </summary>
 <param name="languageId">The language id.</param>
 <param name="productGroupFieldValues">The custom fields.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The loop name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProductCustomFields(Dynamicweb.Ecommerce.Products.ProductFieldValueCollection,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the custom fields.
 </summary>
 <param name="productFieldValues">The custom fields.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The loop name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProductCustomFieldValues(Dynamicweb.Ecommerce.Products.ProductFieldValueCollection,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the custom fields.
 </summary>
 <param name="productFieldValues">The custom fields.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The loop name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderCustomFields(Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the custom fields.
 </summary>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The loop name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderCustomGroupField(Dynamicweb.Ecommerce.Products.ProductFieldValueCollection,Dynamicweb.Rendering.Template)">
 <summary>
 Renders the custom fields.
 </summary>
 <param name="productFieldValues">The custom fields.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderCustomProductField(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Rendering.Template)">
 <summary>
 Renders the custom field.
 </summary>
 <param name="product">The product.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderListCustomProductField(Dynamicweb.Ecommerce.Products.ProductFieldValue,Dynamicweb.Rendering.Template,System.Boolean,System.String@)">
 <summary>
 Renders product field of type "List".
 </summary>
 <param name="value">Product field value to render.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderOrderFieldValues(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Rendering.Template@)">
 <summary>
 Renders the order fields.
 </summary>
 <param name="order">The order.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderOrder(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Rendering.Template)">
 <summary>
 Renders the order.
 </summary>
 <param name="order">The order.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderOrder(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Rendering.Template,System.Boolean,System.Int32)">
 <summary>
 Renders the order.
 </summary>
 <param name="order">The order.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="extendedProperties">If set to <c>true</c>, renders with the extended properties.</param>
 <param name="stepNumber">The step number.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.InitializeImagePatternSettings(System.String)">
 <summary>
 Initialize settings to render product's alternative images
 </summary>
 <param name="imagePatternProductCatalog">The URL of product catalog with image patterns</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderOrderDetails(Dynamicweb.Rendering.Template,Dynamicweb.Ecommerce.Orders.Order,System.Boolean)">
 <summary>
 Renders the order detail.
 </summary>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="order">The order.</param>
 <param name="extendedProperties">If set to <c>true</c>, renders with the extended properties.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderOrderDetails(Dynamicweb.Rendering.Template,Dynamicweb.Ecommerce.Orders.Order,System.Boolean,Dynamicweb.Ecommerce.Orders.OrderTemplateExtenderContext)">
 <summary>
 Renders the order details.
 </summary>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="order">The order.</param>
 <param name="extendedProperties">If set to <c>true</c>, renders with the extended properties.</param>
 <param name="orderContext">The order context.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderOrderLine(Dynamicweb.Ecommerce.Orders.OrderLine,Dynamicweb.Rendering.Template)">
 <summary>
 Renders the order line.
 </summary>
 <param name="orderLine">The order line.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderOrderLines(Dynamicweb.Ecommerce.Orders.OrderLineCollection,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the order lines.
 </summary>
 <param name="orderLines">The order lines.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The loop name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProductTaxes(Dynamicweb.Ecommerce.Orders.OrderLineCollection,Dynamicweb.Ecommerce.Orders.OrderLine,Dynamicweb.Rendering.Template)">
 <summary>
 Render taxes for product.
 </summary>
 <param name="orderLines">The order lines.</param>
 <param name="orderLine">The order line.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderOrderTaxes(Dynamicweb.Ecommerce.Orders.OrderLineCollection,Dynamicweb.Rendering.Template)">
 <summary>
 Render order taxes.
 </summary>
 <param name="orderLines">The order lines.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderShippingTaxes(Dynamicweb.Ecommerce.Orders.OrderLineCollection,Dynamicweb.Rendering.Template)">
 <summary>
 Render taxes for shipping
 </summary>
 <param name="orderLines">The order lines.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderUsedGiftCards(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Rendering.Template)">
 <summary>
 Render used gift cards
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderGiftCards(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.GiftCards.GiftCard},Dynamicweb.Rendering.Template)">
 <summary>
 Render bought gift cards products.
 </summary>
 <param name="giftCards">The gift cards.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderOrderTemplateExtenders(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Rendering.Template,Dynamicweb.Ecommerce.Frontend.TemplateExtenderRenderingState)">
 <summary>
 Extends a Order template with TemplateExtenders.
 </summary>
 <param name="order">The currently rendered Order.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderOrderTemplateExtenders(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Rendering.Template,Dynamicweb.Ecommerce.Frontend.TemplateExtenderRenderingState,System.Int32)">
 <summary>
 Extends an Order with TemplateExtenders.
 </summary>
 <param name="order">The order.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="renderingState">The rendering state.</param>
 <param name="paragraphId">The paragraph id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderOrderLineTemplateExtenders(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Ecommerce.Orders.OrderLine,Dynamicweb.Rendering.Template,Dynamicweb.Ecommerce.Frontend.TemplateExtenderRenderingState)">
 <summary>
 Extends a Cart template with TemplateExtenders
 </summary>
 <param name="order">The currently rendered Order</param>
 <param name="orderLine">The currently rendered OrderLine</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderBoughtFromDateTags(Dynamicweb.Rendering.Template,System.DateTime)">
 <summary>
 Renders the orders from specified date.
 </summary>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="boughtFromGivenDate">The date.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderRmaHasContent(Dynamicweb.Rendering.Template,System.Boolean,System.Boolean)">
 <summary>
 Renders the RMA tags HasAddContent and HasCancelContent.
 </summary>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="hasAddContent">if set to <c>true</c> render the HasAddContent tag.</param>
 <param name="hasCancelContent">if set to <c>true</c> render the HasCancelContent tag.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderRma(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization,Dynamicweb.Rendering.Template,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Renders the RMA.
 </summary>
 <param name="rma">The rma.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="orderId">The order ID.</param>
 <param name="hasAddProductComment">if set to <c>true</c> render the  has add product comment.</param>
 <param name="hasAddContent">if set to <c>true</c> has add content.</param>
 <param name="hasCancelContent">if set to <c>true</c> has cancel content.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderRmaDetails(Dynamicweb.Rendering.Template,Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Renders the RMA details.
 </summary>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="rma">The rma.</param>
 <param name="orderId">The order ID.</param>
 <param name="hasAddProductComment">if set to <c>true</c> has add product comment.</param>
 <param name="hasAddContent">if set to <c>true</c> has add content.</param>
 <param name="hasCancelContent">if set to <c>true</c> has cancel content.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderRmaComments(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCommentCollection,Dynamicweb.Rendering.Template,System.String,System.Boolean,System.Boolean)">
 <summary>
 Renders the RMA comments.
 </summary>
 <param name="comments">The comments.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">Name of the loop.</param>
 <param name="hasAddContent">if set to <c>true</c> has add content.</param>
 <param name="hasCancelContent">if set to <c>true</c> has cancel content.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderRmaComment(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment,Dynamicweb.Rendering.Template,System.Boolean,System.Boolean)">
 <summary>
 Renders the RMA comment.
 </summary>
 <param name="comment">The comment.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="hasAddContent">if set to <c>true</c> has add content.</param>
 <param name="hasCancelContent">if set to <c>true</c> has cancel content.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderRmaTypes(System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationType,System.String}},Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the RMA types.
 </summary>
 <param name="selectedTypeId">The selected type ID.</param>
 <param name="types">The types.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">Name of the loop.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderRmaOrderLines(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationOrderlineCollection,Dynamicweb.Rendering.Template,System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Renders the RMA order lines.
 </summary>
 <param name="rmaOrderLines">The rma order lines.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">Name of the loop.</param>
 <param name="hasAddProductComment">if set to <c>true</c> has add product comment.</param>
 <param name="hasAddContent">if set to <c>true</c> has add content.</param>
 <param name="hasCancelContent">if set to <c>true</c> has cancel content.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderRmaOrderLine(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationOrderLine,System.Int32,Dynamicweb.Rendering.Template,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Renders the RMA order line.
 </summary>
 <param name="rmaOrderLine">The rma order line.</param>
 <param name="prefixId">The preffix id.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="hasAddProductComment">if set to <c>true</c> has add product comment.</param>
 <param name="hasAddContent">if set to <c>true</c> has add content.</param>
 <param name="hasCancelContent">if set to <c>true</c> has cancel content.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderCountries(Dynamicweb.Ecommerce.International.CountryCollection,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders the countries.
 </summary>
 <param name="countryCollection">The countries.</param>
 <param name="parentTemplate">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The loop name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderCountry(Dynamicweb.Ecommerce.International.Country,Dynamicweb.Rendering.Template)">
 <summary>
 Renders the country.
 </summary>
 <param name="country">The country.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProductManufacturer(Dynamicweb.Ecommerce.Products.Manufacturer,Dynamicweb.Rendering.Template)">
 <summary>
 Renders the product manufacturer.
 </summary>
 <param name="manufacturer">The product manufacturer.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderSearchTemplate">
 <summary>
 Renders the search template.
 </summary>
 <returns>The HTML.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderGroupCategory(Dynamicweb.Ecommerce.Products.Group,Dynamicweb.Rendering.Template)">
 <summary>
 Renders group categories.
 </summary>
 <param name="group">Group whose category shold be rendered.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProductCategories(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders product categories.
 </summary>
 <param name="product">Product whose categories shold be rendered.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The name of the template loop.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProductCategoryFields(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Products.Categories.Category,Dynamicweb.Rendering.Template,System.String)">
 <summary>
 Renders product category field values from the specified category.
 </summary>
 <param name="product">Product whose category field values needs to be rendered.</param>
 <param name="category">Product category.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The name of the loop within the template.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderProductCategoryFields(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Products.Categories.Category,Dynamicweb.Rendering.Template,System.String,System.Lazy{System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Dynamicweb.Ecommerce.Products.Categories.FieldSortingInfo}}})">
 <summary>
 Renders product category field values from the specified category.
 </summary>
 <param name="product">Product whose category field values needs to be rendered.</param>
 <param name="category">Product category.</param>
 <param name="template">The <see cref="T:Dynamicweb.Rendering.Template"/>.</param>
 <param name="loopName">The name of the loop within the template.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderCategoryFieldValue(Dynamicweb.Rendering.Template,System.String,System.Object)">
 <summary>
 Render single category field value.
 </summary>
 <param name="template">Template used to render value.</param>
 <param name="tagName">Tag name.</param>
 <param name="value">Category field value.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.GetProductCategoryFieldValue(Dynamicweb.Ecommerce.Products.Product,System.String,Dynamicweb.Ecommerce.Products.Categories.Field)">
 <summary>
 Retrieves a value of the specified category field.
 </summary>
 <param name="product">Product whose category fields value to retrieve.</param>
 <param name="categoryId">Category ID.</param>
 <param name="field">Category field.</param>
 <returns>Category field value.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderAddressValidator(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Rendering.Template)">
 <summary>
 Render result of address validation.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.Renderer.RenderUserAddresses(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Rendering.Template)">
 <summary>
 Render multiple user addresses.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.ShowOnParagraphInfo">
 <summary>
 Represents the ShowOnParagraphInfo
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ShowOnParagraphInfo.PageId">
 <summary>
 Gets the page id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ShowOnParagraphInfo.ParagraphId">
 <summary>
 Gets the paragraph id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ShowOnParagraphInfo.Url">
 <summary>
 Gets the URL.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.ShowOnParagraphInfo.LinkManagerUrl">
 <summary>
 Gets the link manager URL.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.ShowOnParagraphInfo.#ctor(System.String)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="url">The URL.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.TemplateExtenderRenderingState">
 <summary>
 Defines the rendering state for some template extenders.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Frontend.TemplateExtenderRenderingState.Before">
 <summary>
 Before the render is made.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Frontend.TemplateExtenderRenderingState.After">
 <summary>
 After the render is made.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.UrlProviders.GroupDashPathProvider">
 <summary>
 Represents the eCommerce groups dash path provider.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.UrlProviders.GroupDashPathProvider.GetMappings">
 <summary>
 Gets the mappings.
 </summary>
 <returns>The mappings.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.UrlProviders.GroupPathProvider">
 <summary>
 Represents the eCommerce groups path provider.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.UrlProviders.GroupPathProvider.GetMappings">
 <summary>
 Gets the mappings.
 </summary>
 <returns>The mappings.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.UrlProviders.GroupProvider">
 <summary>
 Represents the eCommerce groups provider.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.UrlProviders.GroupProvider.GetMappings">
 <summary>
 Gets the mappings.
 </summary>
 <returns>The mappings.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.UrlProviders.ProductAndVariantProvider">
 <summary>
 Represents the eCommerce products and variants provider.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.UrlProviders.ProductAndVariantProvider.GetMappings">
 <summary>
 Gets the mappings.
 </summary>
 <returns>The mappings.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.UrlProviders.ProductProvider">
 <summary>
 Represents the eCommerce products provider.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.UrlProviders.ProductProvider.GetMappings">
 <summary>
 Gets the mappings.
 </summary>
 <returns>The mappings.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.UrlProviders.ManufacturerProvider">
 <summary>
 Represents the manufacturer provider.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.UrlProviders.ManufacturerProvider.GetMappings">
 <summary>
 Gets the mappings of Manufacturer ids and their URL names.
 </summary>
 <returns>The mappings.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.VariantsSearchMode">
 <summary>
 Defines the search modes for the variants.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Frontend.VariantsSearchMode.Include">
 <summary>
 Include variants in search results. This is the default mode.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Frontend.VariantsSearchMode.Exclude">
 <summary>
 Exclude variants from search results.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Frontend.VariantsSearchMode.GroupByMaster">
 <summary>
 Include variants but show only corresponding master products.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.XmlGroups">
 <summary>
 Represents the XML groups.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.XmlGroups.XmlDocument">
 <summary>
 Gets or sets the XML document.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.XmlGroups.XPathDocument">
 <summary>
 Gets or sets the XPath document.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.XmlGroups.GroupsNode">
 <summary>
 Gets or sets the XML element.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.XmlGroups.LanguageId">
 <summary>
 Gets or sets the language id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.XmlGroups.ShopId">
 <summary>
 Gets or sets the shop id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.XmlGroups.GroupId">
 <summary>
 Gets or sets the group id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.XmlGroups.PageId">
 <summary>
 Gets or sets the page id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.XmlGroups.ExpandType">
 <summary>
 Gets or sets the expand type for the XML group.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.XmlGroups.MaxLevel">
 <summary>
 Gets or sets the maximum level.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.XmlGroups.LevelCounter">
 <summary>
 Gets or sets the level number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.XmlGroups.AllowClick">
 <summary>
 Gets or sets the value indicating whether the click is allowed.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Frontend.XmlGroups.ProductPageId">
 <summary>
 Gets or sets the product page id.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.XmlGroups.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.XmlGroups.GenerateXml">
 <summary>
 Generates XML / XmlDocument for XSL use.
 </summary>
 <remarks>
 Dim XMLGrp As New Ecom.XMLGroups
 XMLGrp.GroupID = ""
 XMLGrp.LanguageID = ""
 XMLGrp.ShopID = ""
 XMLGrp.AllowClick = True
 XMLGrp.PageID = 0
 XMLGrp.GenerateXML()        
 </remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.XmlGroups.GenerateXml(System.String,System.String,System.String)">
 <summary>
 Generates XML / XmlDocument for XSL use.
 </summary>
 <param name="groupId">The group id.</param>
 <param name="languageId">The language id.</param>
 <param name="shopId">The shop id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.XmlGroups.GenerateXml(System.String,System.String,System.String,System.Int32)">
 <summary>
 Generates XML / XmlDocument for XSL use.
 </summary>
 <param name="groupId">The group id.</param>
 <param name="languageId">The language id.</param>
 <param name="shopId">The shop id.</param>
 <param name="maxLevel">The maximum level.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.XmlGroups.GetParsedXls(System.String)">
 <summary>
 Generates HTML from XSL ul/li.
 </summary>
 <param name="xslFile">The XSL file.</param>
 <returns>The HTML.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Frontend.XmlGroups.GetParsedXls(System.String,System.Xml.XmlDocument)">
 <summary>
 Generates HTML from XSL ul/li.
 </summary>
 <param name="xslFile">The XSL file.</param>
 <param name="document">The document.</param>
 <returns>The HTML.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.XmlGroupsExpandType">
 <summary>
 Defines the expand types for the XML groups.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Frontend.OnExtranetLoginSubscriber">
 <summary>
 Subscribes after user is logged in and updates current context country with the user billing/shipping country
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.GiftCards.GiftCard">
 <summary>
 Represents information about an <see cref="T:Dynamicweb.Ecommerce.GiftCards.GiftCard">GiftCard</see>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.GiftCards.GiftCard.GiftCardId">
 <summary>
 Gets or sets the GiftCard ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.GiftCards.GiftCard.Name">
 <summary>
 Gets or sets or sets the GiftCard name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.GiftCards.GiftCard.Code">
 <summary>
 Gets the GiftCard Code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.GiftCards.GiftCard.ExpiryDate">
 <summary>
 Gets the GiftCard expiry date.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.GiftCards.GiftCard.CreationDate">
 <summary>
 Gets or sets the GiftCard expiry date.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.GiftCards.GiftCard.CurrencyCode">
 <summary>
 Gets or sets the <see cref="T:Dynamicweb.Ecommerce.International.Currency">currency</see> code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.GiftCards.GiftCard.InitialAmount">
 <summary>
 Gets or sets the GiftCard initial Amount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.GiftCards.GiftCard.Balance">
 <summary>
 Gets the GiftCard Balance.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.GiftCards.GiftCard.ExpiryTime">
 <summary>
 Gets the GiftCard expiry time.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCard.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.GiftCards.GiftCard">GiftCard</see> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCard.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.GiftCards.GiftCard">GiftCard</see> class from datareader.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCard.FillRow(System.Data.DataRow)">
 <summary>
 Fills the given <see cref="T:System.Data.DataRow">System.Data.DataRow</see> object with property values of the current object.
 </summary>
 <param name="row">An instance of the <see cref="T:System.Data.DataRow">System.Data.DataRow</see> object to write data to.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCard.GetGiftCardsByQuery(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Gets GiftCards from database for given query as <see cref="T:Dynamicweb.Data.CommandBuilder">commandbuilder</see>
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCard.GenerateCode">
 <summary>
 Generates unique GiftCard code
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCard.EncryptCode(System.String)">
 <summary>
 Returns encrypted input string
 </summary>
 <param name="input">String value</param>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCard.DecryptCode(System.String)">
 <summary>
 Returns decrypted input string
 </summary>
 <param name="input">String value</param>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCard.MakeCardExpired">
 <summary>
 Makes the gift card just expired.
 </summary>        
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCard.Save">
 <summary>
 Saves the gift card.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCard.Fill(System.Data.IDataReader)">
 <summary>
 Fills the GiftCard properties from the specified data reader.
 </summary>
 <param name="reader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCard.CreateGiftCards(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Creates GiftCards for an order
 </summary>
 <param name="order">The Order</param>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCard.UseGiftCards(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Make transactions for each orderline based on GiftCard code discount
 </summary>
 <param name="order">The Order</param>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCard.GetGiftCardsForOrder(System.String)">
 <summary>
 Retrieve GiftCards for the order
 </summary>
 <param name="orderId">The Order id</param>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCard.GetGiftCardsForOrderLine(System.String)">
 <summary>
 Retrieve GiftCards for the order line
 </summary>
 <param name="orderLineId">The OrderLine id</param>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCard.GetGiftCardByCode(System.String,System.Boolean)">
 <summary>
 Retrieve GiftCard by code
 </summary>
 <param name="giftCardCode">GiftCard code</param>
 <param name="encoded">Boolean value indicates if code is already encoded</param>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCard.GetAllGiftCards">
 <summary>
 Retrieve all GiftCards
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.GiftCards.GiftCardTransaction">
 <summary>
 Represents information about an <see cref="T:Dynamicweb.Ecommerce.GiftCards.GiftCardTransaction">GiftCardTransaction</see>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.GiftCards.GiftCardTransaction.ID">
 <summary>
 Gets the GiftCardTransaction ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.GiftCards.GiftCardTransaction.Amount">
 <summary>
 Gets or sets the GiftCardTransaction amount.
 </summary>
 <value>GiftCardTransaction amount</value>
</member>
<member name="P:Dynamicweb.Ecommerce.GiftCards.GiftCardTransaction.OrderID">
 <summary>
 Gets or sets the GiftCardTransaction related order id.
 </summary>
 <value>The order id</value>
</member>
<member name="P:Dynamicweb.Ecommerce.GiftCards.GiftCardTransaction.OrderLineID">
 <summary>
 Gets or sets the GiftCardTransaction related order id.
 </summary>
 <value>The order id</value>
</member>
<member name="P:Dynamicweb.Ecommerce.GiftCards.GiftCardTransaction.GiftCardID">
 <summary>
 Gets or sets the GiftCardTransaction related giftCard id.
 </summary>
 <value>The giftCard id.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.GiftCards.GiftCardTransaction.TransactionDate">
 <summary>
 Gets the GiftCardTransaction creation date.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCardTransaction.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.GiftCards.GiftCardTransaction">GiftCardTransaction</see> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCardTransaction.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.GiftCards.GiftCard">GiftCardTransaction</see> class from datareader.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCardTransaction.FillRow(System.Data.DataRow)">
 <summary>
 Fills the given <see cref="T:System.Data.DataRow">System.Data.DataRow</see> object with property values of the current object.
 </summary>
 <param name="row">An instance of the <see cref="T:System.Data.DataRow">System.Data.DataRow</see> object to write data to.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCardTransaction.Fill(System.Data.IDataReader)">
 <summary>
 Fills the GiftCardTransaction properties from the specified data reader.
 </summary>
 <param name="reader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCardTransaction.GetBalanceByGiftCardId(System.String)">
 <summary>
 Gets remaining balance for given GiftCard ID
 </summary>
 <param name="giftCardId">GiftCard id</param>
</member>
<member name="M:Dynamicweb.Ecommerce.GiftCards.GiftCardTransaction.GetTransactionsForGiftCard(System.String)">
 <summary>
 Gets all transactions for given GiftCard ID
 </summary>
 <param name="giftCardId">GiftCard id</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Indexing.ProductIndexBuilderService">
 <summary>
 The class ProductIndexBuilderService represents service allows to build different indexes in async mode
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Indexing.ProductIndexBuilderService.IndexBuilds">
 <summary>
 Gets or sets the dictionary with index build task names and product ids to build as values
 </summary>
 <returns>The dictionary of index build task names and product ids as values</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Indexing.ProductIndexBuilderService.Add(Dynamicweb.Ecommerce.Shops.Shop,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Adds products to be updated on next build of the index from the Shop.
 </summary>
 <param name="shop">The shop, with index set to be built</param>
 <param name="productIds">The product ids to be updated in the index.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Indexing.ProductIndexBuilderService.AddProductsToBuildQueue(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
 <summary>
 Adds products to build queue
 </summary>
 <param name="repositoryName">The repository name.</param>
 <param name="indexName">The index name.</param>
 <param name="productIds">The product ids to update in the index.</param>
 <returns>Returns the dictionary key to be used as index build action task name</returns>
 <remarks>Adds or updates item in <seealso cref="P:Dynamicweb.Ecommerce.Indexing.ProductIndexBuilderService.IndexBuilds"/> with specified repository index and product ids.</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Indexing.ProductIndexBuilderService.Build(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
 <summary>
 Builds specified repository inxed updating specified product ids.
 </summary>
 <param name="repositoryName">The repository name.</param>
 <param name="indexName">The index name.</param>
 <param name="productIds">The product ids to update.</param>
 <param name="buildSynchronous">The value indecates whether to build syncronous or not</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Indexing.ProductIndexBuilderService.BuildAllQueued">
 <summary>
 Build the all the index added to build queue
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Indexing.ProductIndexBuilderService.StartBuild(System.String)">
 <summary>
 Starts the build as separate task
 </summary>
 <param name="builderTaskId">The index build task name</param>
 <remarks>If index build queue item contains not product ids specified then index will be builded with "Full" action,
 otherwise - the "UpdateWithIds" build action will be completed.</remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Indexing.ProductIndexBuilder">
 <summary>
 The class ProductIndexBuilder represents index builder for products
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Indexing.ProductIndexBuilder.SupportedActions">
 <summary>
 Gets the supported actions
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Indexing.ProductIndexBuilder.DefaultSettings">
<summary>
 Gets default settings collection
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Indexing.ProductIndexBuilder.Resume">
 <summary>
 Gets or sets a value indicating the index opened in insert mode
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Indexing.ProductIndexBuilder.ProductIDs">
 <summary>
 Gets or sets a list of product ids, which will be updated in the index
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Indexing.ProductIndexBuilder.Build(Dynamicweb.Indexing.IIndexWriter,Dynamicweb.Diagnostics.Tracking.Tracker)">
 <summary>
 Build the index
 </summary>
 <param name="writer">An <see cref="T:Dynamicweb.Indexing.IIndexWriter"></see> instance</param>
 <param name="tracker">A <see cref="T:Dynamicweb.Diagnostics.Tracking.Tracker"/> instance</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Indexing.ProductIndexSchemaExtender">
 <summary>
 This is the <see cref="T:Dynamicweb.Indexing.IIndexSchemaExtender" /> implementation that matches the <see cref="T:Dynamicweb.Ecommerce.Indexing.ProductIndexBuilder" />
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Indexing.ProductIndexSchemaExtender.GetFields">
 <summary>
 Gets the field definitions
 </summary>
 <returns>The field definitions</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Indexing.UserProductsMacro">
 <summary>
 Represents user macro
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Macros.Macro" />
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Indexing.UserProductsMacro.Evaluate(System.String)">
 <summary>
 Evaluates the specified action.
 </summary>
 <param name="action">The action.</param>
 <returns>The value of the action that was evaluated; <c>null</c> if the action did not evaluate to a specific value.</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Indexing.UserProductsMacro.Name">
 <summary>
 Gets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Indexing.UserProductsMacro.SupportedActions">
 <summary>
 Gets the supported actions.
 </summary>
 <value>The supported actions.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Integration.BaseLiveIntegrationAddIn">
 <summary>
 The class BaseLiveIntegrationAddIn represents base class for Live Integration Add-ins.
 </summary>
 <remarks>  
 Inherit from this class for managing settings in DW backend
 </remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.BaseLiveIntegrationAddIn.LoadSettings">
 <summary>
 Load add-in configuration settings
 </summary>
 <returns>Add-in settings in the Xml format</returns>
 <remarks>The Xml format must be suitable for use in Dynamicweb.Extensibility.AddInSelector</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Integration.BaseLiveIntegrationAddIn.WebServiceURI">
 <summary>
 The web service Uri
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Integration.BaseLiveIntegrationAddIn.SecurityKey">
 <summary>
 The security key.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.BaseLiveIntegrationAddIn.SaveSettings">
 <summary>
 Save Add-in configuration settings
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.BaseLiveIntegrationAddIn.IsWebServiceConnectionAvailable">
 <summary>
 Check if the web service is available for the live integration
 </summary>        
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.BaseLiveIntegrationAddIn.GetSupportedCustomerCenterIntegrationCalls">
 <summary>
 Returns a list of strings that the integration supports for the Integration Customer Center module
 </summary>        
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.BaseLiveIntegrationAddIn.RetrieveItemDetailsFromRemoteSystem(Dynamicweb.Rendering.Template,System.String,Dynamicweb.Security.UserManagement.User,System.String)">
 <summary>
 Adds the relevant details data for the specified item id to the template, after it has been retrieved from the remote system
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.BaseLiveIntegrationAddIn.RetrieveItemsListFromRemoteSystem(Dynamicweb.Rendering.Template,System.String,Dynamicweb.Security.UserManagement.User,System.Int32,System.Int32,System.Int32@)">
 <summary>
 Adds the relevant list of data to the template, after it has been retrieved from the remote system
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.BaseLiveIntegrationAddIn.CreateParameterNode(System.Type,System.String,System.String)">
 <summary>
 Create the add-in parameter node with the name and value.
 </summary>
 <param name="parameterType">Type</param>
 <param name="name">Parameter Name</param>
 <param name="value">Parameter Value</param>
 <returns>Xml Node suitable for use in Dynamicweb.Extensibility.AddInSelector</returns>        
</member>
<member name="T:Dynamicweb.Ecommerce.Integration.C5.Setting">
 <summary>
 The class Setting represents C5 integration settings
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Integration.C5.Setting.ID">
 <summary>
 Gets or sets the identifier.
 </summary>
 <value>The identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Integration.C5.Setting.MailTo">
 <summary>
 Gets or sets the email to address.
 </summary>
 <value>The email address.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Integration.C5.Setting.MailFrom">
 <summary>
 Gets or sets the email from address.
 </summary>
 <value>The email address.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Integration.C5.Setting.MailFromName">
 <summary>
 Gets or sets the name of the mail sender.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Integration.C5.Setting.MailSubject">
 <summary>
 Gets or sets the mail subject.
 </summary>
 <value>The subject.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.C5.Setting.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Integration.C5.Setting"/> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.C5.Setting.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Integration.C5.Setting"/> class and fills it with specified datareader.
 </summary>
 <param name="dataReader">The reader <see cref="T:System.Data.IDataReader"/></param>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.C5.Setting.Fill(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Integration.C5.Setting"/> class and fills it with specified datareader.
 </summary>
 <param name="dataReader">The reader <see cref="T:System.Data.IDataReader"/></param>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.C5.Setting.Save">
 <summary>
 Saves current instance into database
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.C5.Setting.Delete">
 <summary>
 Saves current instance from database
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Integration.CacheLevel">
 <summary>
 Level of chache
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Integration.CustomerCenter.Consts">
 <summary>
 The class Consts represents Customer Center integration constants
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.CustomerCenter.Consts.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Integration.CustomerCenter.Consts"/> class.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Integration.CustomerCenter.Consts.ModuleSystemName">
 <summary>
 Stores module system name.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Integration.CustomerCenter.Consts.MainPageName">
 <summary>
 Stores main page name.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Integration.CustomerCenter.Frontend">
<summary>
 The class Frontend represents accessor to Customer Center integration module content.
 </summary>
 <seealso cref="T:Dynamicweb.Modules.ContentModule"/>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.CustomerCenter.Frontend.GetContent">
 <summary>
 Gets the content.
 </summary>
 <returns>The markup that renders the module.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterPageSettings">
<summary>
 The class IntegrationCustomerCenterPageSettings represents settings for customer center integration page.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterPageSettings.Name">
 <summary>
 The name of intergation page.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterPageSettings.MenuName">
 <summary>
 The name used in customer center menu.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterPageSettings.TagName">
 <summary>
 The Integration tag name.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterPageSettings.Type">
 <summary>
 The type
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterPageSettings.ListTemplate">
 <summary>
 The template used for list view.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterPageSettings.ItemTemplate">
 <summary>
 The template used for list item details view.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterPageSettings.Number">
 <summary>
 The number used to indentifying integration page within customer center.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterPageSettings.ItemIdParameterName">
 <summary>
 ItemId query string parameter name
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterPageSettings.#ctor(System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterPageSettings"/> class.
 </summary>
 <param name="number">The number.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterSettings">
<summary>
 The class IntegrationCustomerCenterSettings represents settings for customer center integrations.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterSettings.Pages">
<summary>
 Gets integration pages.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterSettings.NavigationTemplate">
<summary>
 Gets navigation template.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterSettings.ItemsPerPage">
<summary>
 Gets items countper page.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterSettings.PagerNextButtonTypePicture">
<summary>
 Gets picture name used for paging next button.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterSettings.PagerNextImage">
<summary>
 Gets the path for image used for paging next button.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterSettings.PagerNextType">
<summary>
 Gets the next button type alias.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterSettings.PagerNextText">
<summary>
 Gets the next button display text.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterSettings.PagerPreviousType">
<summary>
 Gets the previous button type alias.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterSettings.PagerPreviousText">
<summary>
 Gets the previous button display text.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterSettings.PagerPrevButtonTypePicture">
<summary>
 Gets picture name used for paging previous button.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterSettings.PagerPreviousImage">
<summary>
 Gets the path for image used for paging previous button.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterSettings.MainPage">
<summary>
 Gets the integration main page.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterSettings.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterSettings"/> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterSettings.#ctor(Dynamicweb.Modules.Properties)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterSettings"/> class with specified properties.
 </summary>
 <param name="properties">The module properties.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Integration.CustomerCenter.Renderer">
 <summary>
 The class Renderer represents integration content renderer.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.CustomerCenter.Renderer.#ctor(Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterSettings@,Dynamicweb.Ecommerce.Integration.CustomerCenter.IntegrationCustomerCenterPageSettings@,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Integration.CustomerCenter.Renderer"/> class.
 </summary>
 <param name="settings">The integration settings.</param>
 <param name="pageSettings">The integration page settings.</param>
 <param name="paragraphId">The paragraph identifier.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.CustomerCenter.Renderer.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> containing the instance output.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.CustomerCenter.Renderer.Output">
 <summary>
 Gets the integration content.
 </summary>
 <returns>The content.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Integration.ErpResponseCache">
 <summary>
 The class ErpResponseCache represents cache service for ERP responce.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.ErpResponseCache.GetProductInfos(Dynamicweb.Ecommerce.Integration.CacheLevel)">
 <summary>
 Gets chached product infos.
 </summary>
 <param name="cacheModel">The model of cache.</param>
 <returns>The product infos.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.ErpResponseCache.GetWebOrdersConnectorResponses(Dynamicweb.Ecommerce.Integration.CacheLevel)">
 <summary>
 Gets chached web orders.
 </summary>
 <param name="cacheModel">The model of cache.</param>
 <returns>The web orders.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.ErpResponseCache.GetConnectorResponses``1(Dynamicweb.Ecommerce.Integration.CacheLevel,System.String)">
 <summary>
 Gets chached web orders.
 </summary>
 <param name="cacheModel">The model of cache.</param>
 <returns>The web orders.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.ErpResponseCache.ClearAllCaches">
 <summary>
 Clears all the cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Integration.ErpResponseCache.IsProductInCache(Dynamicweb.Ecommerce.Integration.CacheLevel,System.String)">
 <summary>
 Check if product is cached.
 </summary>
 <returns><c>True</c> if product is cached, otherwise <c>false</c>.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Integration.ProductInfo">
 <summary>
 The class ProductInfo represents dictionary of objects holding product information.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.International.CountryRepository">
 <summary>
 Country repository provides persistence operations for the country model
 </summary>
 
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRepository.GetCountries">
 <summary>
 Gets all countries
 </summary>
 <returns>A list of all countries</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRepository.GetRegions">
 <summary>
 Gets all regions
 </summary>
 <returns>A list of all regions</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRepository.Save(Dynamicweb.Ecommerce.International.Country)">
 <summary>
 Saves the country.
 </summary>
 <param name="country">The country</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRepository.Delete(System.String)">
 <summary>
 Deletes a country with the specified parameters.
 </summary>
 <param name="countryCode">The two-character code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRepository.DeleteRegion(System.String,System.String)">
 <summary>
 Deletes a country with the specified parameters.
 </summary>
 <param name="countryCode">The two-character code.</param>
 <param name="regionCode">The region code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRepository.UpdateCountryCode(System.String,System.String)">
 <summary>
 Update country and its relations with a new Code.
 </summary>
 <param name="oldCode2">The old two-character code.</param>
 <param name="newCode2">The new two-character code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRepository.AddNoneExistingCountries">
 <summary>
 Add none existing countries
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRepository.LocalizeCountries(Dynamicweb.Ecommerce.International.Language)">
 <summary>
 Localize countries
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRepository.GetCountryTexts">
 <summary>
 Gets all country translations 
 </summary>
 <returns>A list of all countries</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRepository.GetRegionTexts">
 <summary>
 Gets all region translations
 </summary>
 <returns>A list of all countries</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRepository.SaveCountryText(Dynamicweb.Ecommerce.International.Country)">
 <summary>
 Saves the country text.
 </summary>
 <param name="country">The country</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRepository.DeleteCountryTexts(System.String)">
 <summary>
 Deletes all texts for country and its regions.
 </summary>
 <param name="countryCode">The county two-character code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRepository.DeleteCountryTexts(System.String,System.String)">
 <summary>
 Deletes all texts for country and its regions.
 </summary>
 <param name="countryCode">The county two-character code.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRepository.DeleteRegionTexts(System.String,System.String)">
 <summary>
 Deletes text for region
 </summary>
 <param name="countryCode">The county two-character code.</param>
 <param name="regionCode">The region code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryService.ClearCache">
 <summary>
 Clears cached countries.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryService.GetCountries">
 <summary>
 Gets the countries.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.Country"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryService.GetRegions(System.String)">
 <summary>
 Gets the regions.
 </summary>
 <param name="countryCode">The country code.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.Country"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryService.GetCountry(System.String)">
 <summary>
 Gets the country.
 </summary>
 <param name="countryCode"></param>
 <returns>A country <see cref="T:Dynamicweb.Ecommerce.International.Country"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryService.GetRegion(System.String,System.String)">
 <summary>
 Gets the country.
 </summary>
 <param name="countryCode"></param>
 <param name="regionCode">The region code.</param> 
 <returns>A country <see cref="T:Dynamicweb.Ecommerce.International.Country"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryService.Save(Dynamicweb.Ecommerce.International.Country)">
 <summary>
 Saves an instance with the specified parameters.
 </summary>
 <param name="country">The country</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryService.Delete(System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="countryCode">The two-character country code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryService.DeleteRegion(System.String,System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="countryCode">The two-character country code.</param>
 <param name="regionCode">The region code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryService.UpdateCountryCode(System.String,System.String)">
 <summary>
 Update country and its relations with a new Code.
 </summary>
 <param name="oldCode2">The old two-character code.</param>
 <param name="newCode2">The new two-character code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryService.AddNoneExistingCountries">
 <summary>
 Add none existing countries
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryService.LocalizeCountries(Dynamicweb.Ecommerce.International.Language)">
 <summary>
 Localize countries
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryService.DeleteCountryText(System.String,System.String)">
 <summary>
 Deletes all texts for country and its regions.
 </summary>
 <param name="countryCode">The county two-character code.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.International.CurrencyRepository">
 <summary>
 Currency repository provides persistence operations for the currency model
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyRepository.GetCurrencies">
 <summary>
 Gets all currencies
 </summary>
 <returns>A list of all currencies</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyRepository.Save(Dynamicweb.Ecommerce.International.Currency)">
 <summary>
 Saves a currency instance
 </summary>
 <param name="currency">The currency.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyRepository.Delete(System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="code">The currency code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyRepository.Delete(System.String,System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="code">The currency code.</param>
 <param name="languagId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyRepository.CleanDefault">
 <summary>
 Remove default property from currencies.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyRepository.UpdateCurrencyCode(System.String,System.String)">
 <summary>
 Update currency and its relations with a new Code.
 </summary>
 <param name="oldCode">The old code.</param>
 <param name="newCode">The new code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyRepository.UpdateForAllLanguages(Dynamicweb.Ecommerce.International.Currency)">
 <summary>
 Updates currency for all languages.
 </summary>
 <param name="currency">The currency.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.International.CurrencyService">
 <summary>
 Currency service provides operations for working with the currency model
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.ClearCache">
 <summary>
 Clears cached countries.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.GetCurrencies">
 <summary>
 Gets all currencies.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.Currency"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.GetCurrency(System.String)">
 <summary>
 Gets the currency with context language. 
 </summary>
 <param name="currencyCode">The currency code.</param>
 <returns>A currency <see cref="T:Dynamicweb.Ecommerce.International.Currency"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.GetCurrency(System.String,System.String)">
 <summary>
 Gets the currency.
 </summary>
 <param name="currencyCode">The currency code.</param>
 <param name="languageId">The language id.</param>
 <returns>A currency <see cref="T:Dynamicweb.Ecommerce.International.Currency"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.GetDefaultCurrency">
 <summary>
 Gets the default currency.
 </summary>
 <returns>A currency <see cref="T:Dynamicweb.Ecommerce.International.Currency"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.GetCurrenciesForLanguage(System.String)">
 <summary>
 Gets all currencies by the specified parameters.
 </summary>
 <param name="languageId">The language id.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.Currency"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.GetCurrenciesForCode(System.String)">
 <summary>
 Gets all currencies by the specified parameters. 
 </summary>
 <param name="currencyCode">The currency code.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.Currency"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.GetCurrencyForCode(System.String)">
 <summary>
 Gets the currency ignoring language. 
 </summary>
 <param name="currencyCode">The currency code.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.Currency"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.Save(Dynamicweb.Ecommerce.International.Currency)">
 <summary>
 Saves a currency instance
 </summary>
 <param name="currency">The currency.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.Delete(System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="currencyCode">The currency code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.Delete(System.String,System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="currencyCode">The currency code.</param>
 <param name="languagId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.CleanDefault">
 <summary>
 Remove default property from currencies.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.UpdateCurrencyCode(System.String,System.String)">
 <summary>
 Update currency and its relations with a new Code.
 </summary>
 <param name="oldCode">The old code.</param>
 <param name="newCode">The new code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.UpdateForAllLanguages(Dynamicweb.Ecommerce.International.Currency)">
 <summary>
 Updates currency for all languages.
 </summary>
 <param name="currency">The currency.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.CreateMissingCurrencies">
 <summary>
 Creates missing currency for all languages.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.Round(Dynamicweb.Ecommerce.International.Currency,System.Double)">
 <summary>
 Rounds the value.
 </summary>
 <param name="value">The value.</param>
 <returns>The rounded value.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.Format(Dynamicweb.Ecommerce.International.Currency,System.Double)">
 <summary>
 Formats the specified value according to the currency settings.
 </summary>
 <param name="value">The value - the price to format to a string.</param>
 <returns>The formatted value.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.Format(Dynamicweb.Ecommerce.International.Currency,System.Double,System.Boolean)">
 <summary>
 Formats the specified value according to the currency settings.
 </summary>
 <param name="value">The value - the price to format to a string.</param>
 <param name="showSymbol">if set to <c>true</c> includes the currency symbol.</param>
 <returns>The formatted value.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyService.FormatCurrency(Dynamicweb.Ecommerce.International.Currency,System.Double,System.Boolean)">
 <summary>
 Formats the currency.
 </summary>
 <param name="value">The value.</param>
 <param name="showSymbol">if set to <c>true</c> [show symbol].</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.International.LanguageRepository">
 <summary>
 The LanguageRepository providing persistence operations for the Language Aggregate.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.LanguageRepository.Delete(System.String)">
 <summary>
 Deletes the language and its relations.
 </summary>
 <param name="languageId">The language ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.LanguageRepository.Save(Dynamicweb.Ecommerce.International.Language)">
 <summary>
 Saves the language.
 </summary>
 <param name="language">The language.</param>
 <returns>The language after save.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.LanguageRepository.CleanDefault">
 <summary>
 Sets <see cref="P:Dynamicweb.Ecommerce.International.Language.IsDefault"/> to <c>False</c> for all languages in solution.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.LanguageRepository.GetLanguages">
 <summary>
 Gets all languages in solution.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.International.Language"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.LanguageRepository.IsNewLanguage(Dynamicweb.Ecommerce.International.Language)">
 <summary>
 Determines whether the language is new.
 </summary>
 <param name="language">The language.</param>
 <returns><c>True</c>, if language is new, otherwise <c>False</c>.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.International.LanguageService">
 <summary>
 The LanguageService class providing methods for querying and saving the Language Aggregate to and from persistence.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.LanguageService.Delete(System.String)">
 <summary>
 Deletes the language and its relations.
 </summary>
 <param name="languageId">The language ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.LanguageService.Save(Dynamicweb.Ecommerce.International.Language)">
 <summary>
 Saves the language.
 </summary>
 <param name="language">The language.</param>
 <returns>The language after save.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.LanguageService.CleanDefault">
 <summary>
 Sets <see cref="P:Dynamicweb.Ecommerce.International.Language.IsDefault"/> to <c>False</c> for all languages in solution.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.LanguageService.GetLanguages">
 <summary>
 Gets all languages in solution.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.International.Language"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.LanguageService.GetLanguage(System.String)">
 <summary>
 Gets the language.
 </summary>
 <param name="languageId">The language ID.</param>
 <returns>The instance of the <see cref="T:Dynamicweb.Ecommerce.International.Language"/>, or <c>null</c> if the language was not found.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.International.Country">
 <summary>
 Represents a country.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Country.Code2">
 <summary>
 Gets or sets the two-character code.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws this exception when the current instance is in the read only mode.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Country.Code3">
 <summary>
 Gets or sets the three-character code.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws this exception when the current instance is in the read only mode.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Country.RegionCode">
 <summary>
 Gets or sets the region code.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws this exception when the current instance is in the read only mode.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Country.CurrencyCode">
 <summary>
 Gets or sets the currency code.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws this exception when the current instance is in the read only mode.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Country.Number">
 <summary>
 Gets or sets the number.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws this exception when the current instance is in the read only mode.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Country.CultureInfo">
 <summary>
 Gets or sets the culture information.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws this exception when the current instance is in the read only mode.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Country.Vat">
 <summary>
 Gets or sets the VAT
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws this exception when the current instance is in the read only mode.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Country.Name">
 <summary>
 Gets or sets the country name
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws this exception when the current instance is in the read only mode.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Country.LanguageId">
 <summary>
 Gets or sets the language id.
 </summary>
 <remarks>
 If language Id is not set then <see cref="P:Dynamicweb.Ecommerce.Common.Context.LanguageID"/> is returned if country has this translation.
 In other case if setting "Show untranslated countries" is enabled then <see cref="P:Dynamicweb.Ecommerce.Common.Application.DefaultLanguage"/> is returned.
 </remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Country.Regions">
 <summary>
 Gets or sets the regions.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws this exception when the current instance is in the read only mode.</exception>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.Lock">
 <summary>
 Makes this instance to read only.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.GetLocalizedName(System.String)">
 <summary>
 Get translation for specified language
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.SetLocalizedName(System.String,System.String)">
 <summary>
 Set translation for specified language
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.GetAvailableLanguageIds">
 <summary>
 Makes this instance to read only.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.DeleteLocalizedName(System.String)">
 <summary>
 Remove translation for specified language
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.Clone">
 <summary>
 Creates a new instance of a class with the same value as an existing instance.
 </summary>
 <remarks>
 Method performs a deep copy of all properties except the IsReadOnly and LanguageId properties.
 IsReadOnly property always is set to False.
 LanguageId property always is set to Nothing.
 </remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Country.CountryText">
 <summary>
 Gets or sets the country text.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws this exception when the current instance is in the read only mode.</exception>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.GetRegions">
 <summary>
 Returns countries in the ISO format
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.SetProperties(Dynamicweb.Ecommerce.International.Country)">
 <summary>
 Sets the class properties.
 </summary>
 <param name="country">The country.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.Save(System.String)">
 <summary>
 Saves an instance with the specified parameters.
 </summary>
 <param name="code2">The two-digit code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.GetCountryTextByDefaultLanguage">
 <summary>
 Gets the country text.
 </summary>
 <returns>The country text.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.Delete(System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="code2">The two-character code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.DeleteRegion(System.String,System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="code2">The two-character code.</param>
 <param name="regionCode">The region code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.UpdateId(System.String,System.String)">
 <summary>
 Updates two-character code.
 </summary>
 <param name="oldCode2">The old two-character code.</param>
 <param name="newCode2">The new two-character code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.UpdateRelationTables(System.String,System.String)">
 <summary>
 Updates relations.
 </summary>
 <param name="oldCode2">The old two-character code.</param>
 <param name="newCode2">The new two-character code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.GetRegions(System.String)">
 <summary>
 Gets the regions.
 </summary>
 <param name="countryCode">The country code.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.Country"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.GetCountries(System.String)">
 <summary>
 Gets the countries.
 </summary>
 <param name="countryCode"></param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.Country"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.GetCountries">
 <summary>
 Gets the countries.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.Country"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.Create(System.String)">
 <summary>
 Creates country.
 </summary>
 <param name="countryCode">The base country.</param>
 <returns>A new country.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Country.ClearCache">
 <summary>
 Clears cached countries.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.International.CountryCollection">
 <summary>
 Represents a collection of the <see cref="T:Dynamicweb.Ecommerce.International.Country"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryCollection.Load(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Loads the data.
 </summary>
 <param name="commandBuilder">The command builder.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryCollection.AddRange(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.International.Country})">
 <summary>
 Adds range of countries to the collection.
 </summary>
 <param name="countries">A collection of the <see cref="T:Dynamicweb.Ecommerce.International.Country"/>.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.International.CountryException">
 <summary>
 Represents the country exception.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryException.#ctor(System.String)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="message">The exception message.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.International.CountryRelation">
 <summary>
 Represents the country relation.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.CountryRelation.Code2">
 <summary>
 Gets or sets the two-character code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.CountryRelation.RegionCode">
 <summary>
 Gets or sets the region id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.CountryRelation.MethodId">
 <summary>
 Gets or sets the method id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.CountryRelation.MethodType">
 <summary>
 Gets or sets the method type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.CountryRelation.CountryId">
 <summary>
 Gets or sets the country id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.CountryRelation.LanguageId">
 <summary>
 Gets or sets the language id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.CountryRelation.IsDefault">
 <summary>
 Gets or sets the value determines whether it is default.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRelation.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="methodType">The method type.</param>
 <param name="methodId">The method id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRelation.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="methodType">The method type.</param>
 <param name="methodId">The method id.</param>
 <param name="countryId">The country id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRelation.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRelation.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRelation.Save(System.String,System.String,System.String,System.String)">
 <summary>
 Saves an instance with the specified parameters.
 </summary>
 <param name="methodType">The method type.</param>
 <param name="methodId">The method id.</param>
 <param name="code2">The two-chacracter code.</param>
 <param name="countryId">The country id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRelation.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRelation.Delete(System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="code2">The two-character code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRelation.Delete(System.String,System.String,System.String,System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="code2">The two-character code.</param>
 <param name="methodId">The method id.</param>
 <param name="methodType">The method type.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRelation.Clone">
 <summary>
 Clones this instance.
 </summary>
 <returns>New inctance of the <see cref="T:Dynamicweb.Ecommerce.International.CountryRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRelation.GetCoutryRelations(System.String,System.String,System.String)">
 <summary>
 Gets the country relations.
 </summary>
 <param name="countryId">The country id.</param>
 <param name="methodId">The method id.</param>
 <param name="methodType">The method type.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.CountryRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRelation.GetCoutryRelations(System.String,System.String,System.String,System.String)">
 <summary>
 Gets the country relations.
 </summary>
 <param name="countryId">The country id.</param>
 <param name="regionCode">The region code.</param>
 <param name="methodId">The method id.</param>
 <param name="methodType">The method type.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.CountryRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRelation.GetCoutryRelations(System.String,System.String)">
 <summary>
 Gets the country relations.
 </summary>
 <param name="methodId">The method id.</param>
 <param name="methodType">The method type.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.CountryRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRelation.GetDefaultCountryRelations(System.String,System.String,System.String)">
 <summary>
 Gets default country rtelations.
 </summary>
 <param name="methodId">The method id.</param>
 <param name="methodType">The method type.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.International.CountryRelationCollection">
 <summary>
 Represents a collection of the <see cref="T:Dynamicweb.Ecommerce.International.CountryRelation"/>
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryRelationCollection.Load(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Loads the data.
 </summary>
 <param name="sqlBuilder">The command builder.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.International.CountryText">
 <summary>
 Represents the translations for the countries.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.CountryText.Code2">
 <summary>
 Gets or sets the two-character country code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.CountryText.RegionCode">
 <summary>
 Gets or sets the region code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.CountryText.LanguageId">
 <summary>
 Gets or sets the language id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.CountryText.Name">
 <summary>
 Gets or sets the name.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CountryText.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.International.Currency">
 <summary>
 Represents the currency.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Currency.Code">
 <summary>
 Gets or sets the currency code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Currency.LanguageId">
 <summary>
 Gets or sets the language id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Currency.Symbol">
 <summary>
 Gets or sets the symbol.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Currency.Name">
 <summary>
 Gets or sets the name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Currency.Rate">
 <summary>
 Gets or sets the rate.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Currency.IsDefault">
 <summary>
 Gets or sets the value indicating whether the currency is default.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Currency.CultureInfo">
 <summary>
 Gets or sets the culture information.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Currency.PayGatewayCode">
 <summary>
 Gets or sets the code of pay gateway.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Currency.RoundingId">
 <summary>
 Gets or sets the rounding id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Currency.SymbolPlace">
 <summary>
 Gets or sets the symbol place.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Currency.Rounding">
 <summary>
 Gets or sets the <see cref="T:Dynamicweb.Ecommerce.Prices.Rounding"/>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Currency.PositivePattern">
 <summary>
 Gets or sets the positive pattern for this <see cref="T:Dynamicweb.Ecommerce.International.Currency" />. Only used if <see cref="P:Dynamicweb.Ecommerce.International.Currency.CultureInfo" /> is used.
 http://msdn.microsoft.com/en-us/library/system.globalization.numberformatinfo.currencypositivepattern(v=vs.110).aspx
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Currency.NegativePattern">
 <summary>
 Gets or sets the negative pattern for this <see cref="T:Dynamicweb.Ecommerce.International.Currency" />. Only used if <see cref="P:Dynamicweb.Ecommerce.International.Currency.CultureInfo" /> is used.
 http://msdn.microsoft.com/en-us/library/system.globalization.numberformatinfo.currencynegativepattern(v=vs.110).aspx
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Currency.Clone">
 <summary>
 Creates a new instance of a class with the same value as an existing instance.
 </summary>
 <remarks>
 Method performs a deep copy of all properties except the IsReadOnly property.
 IsReadOnly property always is set to False.
 </remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Currency.GetCultureInfo">
 <summary>
 Gets the CultureInfo related to the regional settings set on the currency. 
 </summary>
 <returns>The <code>CultureInfo</code> related to the regional settings set on the currency. If none is specified, it will use the culture of the current context</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Currency.Lock">
 <summary>
 Makes this inctance to read only.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Currency.GetAllCurrencies">
 <summary>
 Gets all currencies.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.Currency"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Currency.GetCurrenciesForLanguage(System.String)">
 <summary>
 Gets all currencies by the specified parameters.
 </summary>
 <param name="languageId">The language id.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.Currency"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Currency.GetCurrenciesForCode(System.String)">
 <summary>
 Gets all currencies by the specified parameters. 
 </summary>
 <param name="code">The currency code.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.Currency"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Currency.DefaultCount">
 <summary>
 Gets the count of the default currencies.
 </summary>
 <returns>The count of the default currencies.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Currency.Save(System.String)">
 <summary>
 Saves an instance with the specified parameters.
 </summary>
 <param name="code">The currency code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Currency.Save(System.String,System.String)">
 <summary>
 Saves an instance with the specified parameters.
 </summary>
 <param name="code">The currency code.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Currency.UpdateForAllLanguages(Dynamicweb.Ecommerce.International.Currency,System.String)">
 <summary>
 Updates currency for all languages.
 </summary>
 <param name="currency">The currency.</param>
 <param name="code">The currency id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Currency.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Currency.Delete(System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="code">The currency code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Currency.Delete(System.String,System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="code">The currency code.</param>
 <param name="languagId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Currency.UpdateDefault(System.Boolean)">
 <summary>
 Changes the value of "CurrencyIsDefault" property.
 </summary>
 <param name="setDefaultTo">New value for "CurrencyIsDefault" property.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Currency.UpdateDefault(System.Boolean,System.String)">
 <summary>
 Changes the value of "CurrencyIsDefault" property.
 </summary>
 <param name="setDefaultTo">New value for "CurrencyIsDefault" property.</param>
 <param name="code">The currency code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Currency.Round(System.Double)">
 <summary>
 Rounds the value.
 </summary>
 <param name="value">The value.</param>
 <returns>The rounded value.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Currency.Format(System.Double)">
 <summary>
 Formats the specified value according to the currency settings.
 </summary>
 <param name="value">The value - the price to format to a string.</param>
 <returns>The formatted value.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Currency.Format(System.Double,System.Boolean)">
 <summary>
 Formats the specified value according to the currency settings.
 </summary>
 <param name="value">The value - the price to format to a string.</param>
 <param name="showSymbol">if set to <c>true</c> includes the currency symbol.</param>
 <returns>The formatted value.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.International.CurrencyCollection">
 <summary>
 Represents a collection of the <see cref="T:Dynamicweb.Ecommerce.International.Currency"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyCollection.Load(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Loads the data.
 </summary>
 <param name="commandBuilder">The command builder.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyCollection.Sort(Dynamicweb.Ecommerce.International.CurrencyCollectionSortBy,Dynamicweb.Ecommerce.International.SortDirection)">
 <summary>
 Sorts the elements by the specified direction and the column.
 </summary>
 <param name="sortBy">The sort column.</param>
 <param name="sortDirection">The sort direction.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.International.CurrencyCollectionSortBy">
 <summary>
 Specifies the sort columns.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.International.CurrencyPattern">
 <summary>
 Represents the currency patterns.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyPattern.GetPositivePatterns">
 <summary>
 Gets the positive patterns.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.PositivePattern"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyPattern.GetPositivePattern(System.Int32)">
 <summary>
 Gets the positive pattern.
 </summary>
 <param name="value">The value.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.International.PositivePattern"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyPattern.GetNegativePatterns">
 <summary>
 Gets the negative patterns.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.NegativePattern"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.CurrencyPattern.GetNegativePattern(System.Int32)">
 <summary>
 Gets the negative pattern.
 </summary>
 <param name="value">The value.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.International.NegativePattern"/>.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.International.GlobalISO">
 <summary>
 Represents the global ISO.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.GlobalISO.Id">
 <summary>
 Gets or sets the id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.GlobalISO.Code2">
 <summary>
 Gets or sets the two-character ISO code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.GlobalISO.Code3">
 <summary>
 Gets or sets the three-character ISO code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.GlobalISO.CountryDK">
 <summary>
 Gets or sets the DK country.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.GlobalISO.CountryUK">
 <summary>
 Gets or sets the UK country.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.GlobalISO.CurrencySymbol">
 <summary>
 Gets or sets the currency symbol.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.GlobalISO.CurrencyCode">
 <summary>
 Gets or sets the currency code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.GlobalISO.CultureInfo">
 <summary>
 Gets or sets the culture information.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.GlobalISO.Disabled">
 <summary>
 Gets or sets the value specified whether ISO is disabled.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.GlobalISO.Vat">
 <summary>
 Gets or sets the VAT.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.GlobalISO.#ctor(System.String)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="id">The ISO id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.GlobalISO.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.GlobalISO.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.GlobalISO.GetGlobalISOs">
 <summary>
 Gets all active ISO.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.GlobalISO"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.GlobalISO.GetGlobalISOs(System.String)">
 <summary>
 Gets all active ISO by specified parameters.
 </summary>
 <param name="id">The ISO id.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.GlobalISO"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.GlobalISO.GetGlobalISOs(System.Boolean)">
 <summary>
 Gets all active ISO by specified parameters.
 </summary>
 <param name="existsInCountry">The ISO exists.</param>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.GlobalISO"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.GlobalISO.GetGlobalISOByISOCode2(System.String)">
 <summary>
 Gets ISO by the tw-character ISO code.
 </summary>
 <param name="code">Two-character ISO code.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.International.GlobalISO"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.GlobalISO.GetRegions">
 <summary>
 Returns countries in the ISO format
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.International.GlobalISOCollection">
 <summary>
 Represents a collection of the <see cref="T:Dynamicweb.Ecommerce.International.GlobalISO"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.GlobalISOCollection.Load(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Loads the data.
 </summary>
 <param name="sqlBuilder"></param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.GlobalISOCollection.Sort">
 <summary>
 Sorts the elements ascending by id.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.GlobalISOCollection.Sort(Dynamicweb.Ecommerce.International.GlobalISOCollectionSortBy)">
 <summary>
 Sorts the elements ascending by the specified column.
 </summary>
 <param name="sortBy">The sort column.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.GlobalISOCollection.Sort(Dynamicweb.Ecommerce.International.GlobalISOCollectionSortBy,Dynamicweb.Ecommerce.International.SortDirection)">
 <summary>
 Sorts the elements by the specified direction and the column.
 </summary>
 <param name="sortBy">The sort column.</param>
 <param name="sortDirection">The sort direction.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.International.GlobalISOCollectionSortBy">
 <summary>
 Specifies the sort columns.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.International.SortDirection">
 <summary>
 Specifies the sort directions.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.International.Language">
 <summary>
 Represents the language.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Language.LanguageId">
 <summary>
 Gets or sets the language ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Language.Code2">
 <summary>
 Gets or sets the language code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Language.Name">
 <summary>
 Gets or sets the language name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Language.NativeName">
 <summary>
 Gets or sets the native name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.Language.IsDefault">
 <summary>
 Gets or sets value indicating whether the language is default.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Language.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Language.GetCultureInfo">
 <summary>
 Gets the culture information.
 </summary>
 <returns>The culture information.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Language.Lock">
 <summary>
 Makes this inctance to read only.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Language.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Language.GetDefaultLanguage">
 <summary>
 Loads the default language properties and sets them as the class properties.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Language.Save(System.String)">
 <summary>
 Saves an instance with the specified parameters.
 </summary>
 <param name="id">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Language.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Language.Delete(System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="id">The language ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Language.DeleteAll">
 <summary>
 Deletes all languages and translations.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Language.UpdateDefault(System.Boolean,System.String)">
 <summary>
 Changes the value of "LanguageIsDefault" property for specified language.
 </summary>
 <param name="setDefaultTo">New value for "LanguageIsDefault" property.</param>
 <param name="id">The language ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Language.GetLanguages">
 <summary>
 Gets all languages.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.Language"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Language.GetLanguage(System.String)">
 <summary>
 Gets language with the specified ID.
 </summary>
 <param name="languageId">The language ID.</param>
 <returns>The language.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Language.CreateEmpty(System.String)">
 <summary>
 Creates a new language.
 </summary>
 <param name="id">The language ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Language.Exists(System.String)">
 <summary>
 Determines whether specified language exists.
 </summary>
 <param name="languageId">An ID of the language.</param>
 <returns>Value indicating whether specified language exists.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Language.ClearCachedLanguages">
 <summary>
 Clears cached languages.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.Language.ClearLanguageCache">
 <summary>
 Clears cached in-memory languages.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.International.LanguageCollection">
 <summary>
 Represents a collection of the <see cref="T:Dynamicweb.Ecommerce.International.Language"/>
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.LanguageCollection.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.LanguageCollection.#ctor(System.Collections.Generic.IList{Dynamicweb.Ecommerce.International.Language})">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="list">The list of the languages.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.LanguageCollection.Load(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Loads the data.
 </summary>
 <param name="commandBuilder">The command builder.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.International.NegativePattern">
 <summary>
 Represents a negative currency pattern´.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.NegativePattern.Value">
 <summary>
 Gets the value.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.NegativePattern.Pattern">
 <summary>
 Gets the pattern.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.NegativePattern.#ctor(System.Int32,System.String)">
 <summary>
 Initializes a new instance of the structure.
 </summary>
 <param name="value">The value.</param>
 <param name="pattern">The pattern.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.International.PositivePattern">
 <summary>
 Represents a positive currency pattern
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.PositivePattern.Value">
 <summary>
 Gets the value.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.PositivePattern.Pattern">
 <summary>
 Gets the pattern.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.PositivePattern.#ctor(System.Int32,System.String)">
 <summary>
 Initializes a new instance of the structure.
 </summary>
 <param name="value">The value.</param>
 <param name="pattern">The pattern.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.International.VatGroup">
 <summary>
 Represents the VAT group.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.VatGroup.Id">
 <summary>
 Gets or sets the id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.VatGroup.GroupName">
 <summary>
 Gets or sets the group name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.VatGroup.LanguageId">
 <summary>
 Gets or sets the language id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.VatGroup.ValueName">
 <summary>
 Gets or sets the value name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.VatGroup.ConfigurableVatProvider">
 <summary>
 Gets the configurable VAT provider.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.VatGroup.VatGroupCountryRelation(System.String)">
 <summary>
 Gets or sets a relation between the country and the VAT group.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroup.Clone">
 <summary>
 Clones this instance.
 </summary>
 <returns>New inctance of the <see cref="T:Dynamicweb.Ecommerce.International.VatGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroup.Lock">
 <summary>
 Makes this inctance to read only.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroup.Copy">
 <summary>
 Copies this instance.
 </summary>
 <returns>New inctance of the <see cref="T:Dynamicweb.Ecommerce.International.VatGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroup.Create(System.String)">
 <summary>
 Gets the VAT group by group id.
 </summary>
 <param name="vatGroupId">The group id.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.International.VatGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroup.Create(System.String,System.String)">
 <summary>
 Gets the VAT group by group id and language id.
 </summary>
 <param name="vatGroupId">The group id.</param>
 <param name="languageId">The language id.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.International.VatGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroup.GetVatGroups">
 <summary>
 Gets all VAT groups for the current language.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.International.VatGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroup.GetAllVatGroups">
 <summary>
 Gets all VAT groups.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.International.VatGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroup.GetVatGroupsByLanguage">
 <summary>
 Gets all VAT groups for the default language.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.International.VatGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroup.Save">
 <summary>
 Saves this instance to the database.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroup.Save(System.String,System.String)">
 <summary>
 Saves an instance with the specified parameters.
 </summary>
 <param name="id">The VAT group id.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroup.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroup.Delete(System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="id">The VAT group id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroup.Delete(System.String,System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="id">The VAT group id.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.International.VatGroupCollection">
 <summary>
 Represents a collection of the <see cref="T:Dynamicweb.Ecommerce.International.VatGroup"/>
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.International.VatGroupCountryRelation">
 <summary>
 Represents a relation between the country and the VAT group.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.VatGroupCountryRelation.GroupId">
 <summary>
 Gets or sets the id for the <see cref="T:Dynamicweb.Ecommerce.International.VatGroup" /> to which this is related.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.VatGroupCountryRelation.CountryId">
 <summary>
 Gets or sets the id of the <see cref="T:Dynamicweb.Ecommerce.International.Country" /> to which this is related.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.VatGroupCountryRelation.LanguageId">
 <summary>
 Gets or sets the ID of the <see cref="T:Dynamicweb.Ecommerce.International.Language" /> in which this is related.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.VatGroupCountryRelation.VatValue">
 <summary>
 Gets or sets the VAT percentage.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.International.VatGroupCountryRelation.ReverseChargeForVat">
 <summary>
 Gets or sets a value indicating whether this relation is subject to reverse charge.
 </summary>
 <remarks><c>true</c> if subject to reverse charge; otherwise, <c>false</c>.</remarks>>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupCountryRelation.Clone">
 <summary>
 Creates a new instance of a class with the same value as an existing instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupRepository.GetVatGroups">
 <summary>
 Gets all VatGroups
 </summary>
 <returns>A list of all VatGroups</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupRepository.Save(Dynamicweb.Ecommerce.International.VatGroup)">
 <summary>
 Saves the vatGroup with the specified parameters.
 </summary>
 <param name="vatGroup">The vatGroup.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupRepository.Delete(System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="vatGroupId">The VAT group id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupRepository.Delete(System.String,System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="vatGroupId">The VAT group id.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupRepository.GetVatGroupCountryRelations">
 <summary>
 Gets all VatGroup countryRelations
 </summary>
 <returns>A list of all VatGroup CountryRelations</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupRepository.Save(Dynamicweb.Ecommerce.International.VatGroupCountryRelation)">
 <summary>
 Saves an instance with the specified parameters.
 </summary>
 <param name="vatGroupCountryRelation">The vat group country relation.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupRepository.DeleteCountryRelation(System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="vatGroupId">The vat group id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupRepository.DeleteCountryRelation(System.String,System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="vatGroupId">The vat group id.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupRepository.DeleteCountryRelation(System.String,System.String,System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="vatGroupId">The vat group id.</param>
 <param name="languageId">The language id.</param>
 <param name="countryId">The country id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupService.ClearCache">
 <summary>
 Clears cached countries.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupService.GetVatGroups">
 <summary>
 Gets all VatGroups.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Ecommerce.International.VatGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupService.GetVatGroupsForLanguage(System.String)">
 <summary>
 Gets all VAT groups for the specified language.
 </summary>
 <param name="languageId">The language id.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.International.VatGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupService.GetVatGroupsForContextLanguage">
 <summary>
 Gets all VAT groups for the context language.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.International.VatGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupService.GetVatGroupInvariantLanguage(System.String)">
 <summary>
 Gets the vatGroup. 
 </summary>
 <param name="vatGroupId">The vatGroup Id.</param>
 <returns>A vatGroup <see cref="T:Dynamicweb.Ecommerce.International.VatGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupService.GetVatGroup(System.String,System.String)">
 <summary>
 Gets the vatGroup. 
 </summary>
 <param name="vatGroupId">The vatGroup Id.</param>
 <param name="languageId">The language id.</param>
 <returns>A vatGroup <see cref="T:Dynamicweb.Ecommerce.International.VatGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupService.Save(Dynamicweb.Ecommerce.International.VatGroup)">
 <summary>
 Saves a vatGroup instance
 </summary>
 <param name="vatGroup">The vatGroup.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupService.Delete(System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="vatGroupId">The VAT group id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupService.Delete(System.String,System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="vatGroupId">The VAT group id.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupService.GetVatGroupCountryRelation(System.String,System.String)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.International.VatGroupCountryRelation" /> by group id and country id.
 </summary>
 <param name="groupId">The group id.</param>
 <param name="countryId">The country id.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.International.VatGroupCountryRelation" />.</returns>
 <remarks><see cref="P:Dynamicweb.Ecommerce.Common.Context.LanguageID"/> is used.</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupService.GetVatGroupCountryRelation(System.String,System.String,System.String)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.International.VatGroupCountryRelation" /> by group id, country id and language id.
 </summary>
 <param name="vatGroupId">The group id.</param>
 <param name="countryId">The country id.</param>
 <param name="languageId">The language id.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.International.VatGroupCountryRelation" />.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupService.Save(Dynamicweb.Ecommerce.International.VatGroupCountryRelation)">
 <summary>
 Saves an instance with the specified parameters.
 </summary>
 <param name="vatGroupCountryRelation">The vat group country relation.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupService.DeleteCountryRelation(System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="vatGroupId">The vat group id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupService.DeleteCountryRelation(System.String,System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="vatGroupId">The vat group id.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.International.VatGroupService.DeleteCountryRelation(System.String,System.String,System.String)">
 <summary>
 Deletes an instance with the specified parameters.
 </summary>
 <param name="vatGroupId">The vat group id.</param>
 <param name="languageId">The language id.</param>
 <param name="countryId">The country id.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Loyalty.RewardCollection">
 <summary>
 Represents a collection of the rewards.
 </summary>    
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.RewardCollection.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>    
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.RewardCollection.LoadRules">
 <summary>
 Loads the rules.
 </summary>    
</member>
<member name="T:Dynamicweb.Ecommerce.Loyalty.RewardCollectionSortBy">
 <summary>
 The SortBy enumeration defines on which field reward will be sorted.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Loyalty.RewardCollectionSortDirection">
 <summary>
 The SortDirection enumeration defines in which direction discount will be sorted.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Loyalty.RewardCollectionSortDirection.Ascending">
 <summary>
 Sort column ascending.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Loyalty.RewardCollectionSortDirection.Descending">
 <summary>
 Sort column descending.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Loyalty.RewardRuleCollection">
 <summary>
 Represents a collection of the reward rules.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Loyalty.UserTransactionCollection">
 <summary>
 Represents a collection of the user transactions.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.UserTransactionCollection.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.UserTransactionCollection.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="dataReader">Datareader contains the result of query to the table EcomLoyaltyUserTransaction</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.UserTransactionCollection.LoadRewards">
 <summary>
 Load the rewards
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Loyalty.DefaultPointProvider">
 <summary>
 Represents a default points provider.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.DefaultPointProvider.FindPoints(Dynamicweb.Ecommerce.Orders.OrderLine)">
 <summary>
 Finds the points.
 </summary>
 <param name="orderLine">The order line.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Loyalty.IPointInfo"/>.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Loyalty.IPointInfo">
 <summary>
 IPointInfo interface.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Loyalty.IPointProvider">
 <summary>
 IPointProvider interface.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Loyalty.PointInfo">
 <summary>
 Represents information about points.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.PointInfo.Points">
 <summary>
 Gets or sets the number of points.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.PointInfo.Reward">
 <summary>
 Gets or sets the <see cref="T:Dynamicweb.Ecommerce.Loyalty.Reward" />.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.PointInfo.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.PointInfo.#ctor(System.Double,Dynamicweb.Ecommerce.Loyalty.Reward)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="points">Count of points.</param>
 <param name="reward">The <see cref="T:Dynamicweb.Ecommerce.Loyalty.Reward" />.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Loyalty.PointManager">
 <summary>
 Represents a point manager. Provides prepares and finds points.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.PointManager.FindPoints(Dynamicweb.Ecommerce.Orders.OrderLine)">
 <summary>
 Finds the points.
 </summary>
 <param name="orderLine">The order line.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Loyalty.IPointInfo"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.PointManager.TryUpdateRewards(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Tries to update rewards.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Loyalty.PointTransactionManager">
 <summary>
 Represents a point transaction manager.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.PointTransactionManager.AllowEarnPointsFromPurchasedPoints">
 <summary>
 Gets the value indicating wheither the buying items with points should earn more points.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.PointTransactionManager.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.PointTransactionManager.RewardPoints(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Reward points from order lines on an order.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.PointTransactionManager.RewardPoints(System.Double,System.String,System.Int32)">
 <summary>
 Reward points.
 </summary>
 <param name="points">The number of points.</param>
 <param name="comment">The comment for transaction.</param>
 <param name="userId">The user id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.PointTransactionManager.RedeemPoints(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Redeem points from <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine"/> on an <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>.
 </summary>
 <param name="order">The <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.PointTransactionManager.RedeemPoints(System.Double,System.String,System.Int32)">
 <summary>
 Redeem points.
 </summary>
 <param name="points">The number of points.</param>
 <param name="comment">The comment for transaction.</param>
 <param name="userId">The user id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.PointTransactionManager.RedeemPoints(System.Double,System.String,System.Int32,System.DateTime)">
 <summary>
 Redeem points.
 </summary>
 <param name="points">The number of points.</param>
 <param name="comment">The comment for transaction.</param>
 <param name="userId">The user id.</param>
 <param name="transactionDate">The transaction date.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.PointTransactionManager.GetUserTransactions(System.Int32)">
 <summary>
 Gets the collection of the user transactions by user id.
 </summary>
 <param name="userId">The user id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.PointTransactionManager.GetUserTransactions">
 <summary>
 Gets the collection of all user transactions.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.PointTransactionManager.GetPointsBalance(System.Int32)">
 <summary>
 Gets the transaction balance by user id.
 </summary>
 <param name="userId">The user id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.PointTransactionManager.GetPointsBalance(Dynamicweb.Security.UserManagement.User)">
 <summary>
 Gets the transaction balance for user.
 </summary>
 <param name="user">The <see cref="T:Dynamicweb.Security.UserManagement.User">user</see></param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.PointTransactionManager.ClearCache(System.Int32)">
 <summary>
 Removes cached item by id.
 </summary>
 <param name="id">The user transaction id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.PointTransactionManager.ClearCache">
 <summary>
 Clears user transactions cache.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Loyalty.Reward">
 <summary>
 Represents information about an reward.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Loyalty.Reward.cacheKey">
 <summary>
 Rewards cache
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.Reward.Id">
 <summary>
 Gets or sets the reward ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.Reward.Type">
 <summary>
 Gets or sets the type of the reward.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.Reward.Name">
 <summary>
 Gets or sets the reward name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.Reward.Language">
 <summary>
 Gets the language for this reward.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.Reward.IsLocalized">
 <summary>
 Gets the value indicating whether reward is localized.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.Reward.Active">
 <summary>
 Gets or sets the value indicating whether the state of reward is active.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.Reward.IsArchived">
 <summary>
 Gets or sets the value indicating when the reward is archived.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.Reward.Points">
 <summary>
 Gets or sets the number of pounts for reward.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.Reward.CurrencyCode">
 <summary>
 Gets or sets the <see cref="T:Dynamicweb.Ecommerce.International.Currency"/> code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.Reward.RoundingId">
 <summary>
 Gets or sets id of rounding object.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.Reward.Percentage">
 <summary>
 Gets or sets percentage.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.Reward.Rules">
 <summary>
 Gets or sets collection of the rules for reward.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.Reward.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.Reward.#ctor(Dynamicweb.Ecommerce.Loyalty.RewardType)">
 <summary>
 Initializes a new instance of the class and sets the <see cref="P:Dynamicweb.Ecommerce.Loyalty.Reward.Type"/>.
 </summary>
 <param name="newReward">The <see cref="T:Dynamicweb.Ecommerce.Loyalty.RewardType"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.Reward.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the class from the data reader.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.Reward.GetTotalPoints(System.Double,System.Double,System.Double)">
 <summary>
 Gets the total points.
 </summary>
 <param name="productsPrice">The products price.</param>
 <param name="productsCount">The products count.</param>
 <param name="divisor">The divisor.</param>
 <returns>The total points.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.Reward.Fill(System.Data.IDataReader)">
 <summary>
 Fills the reward properties from the specified data reader.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.Reward.Save">
 <summary>
 Saves current reward to the database.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.Reward.SetNewCurrency(Dynamicweb.Ecommerce.International.Currency)">
 <summary>
 Sets new currency code and recalculates points count.
 </summary>
 <param name="currency">New currency.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.Reward.Delete">
 <summary>
 Deletes the current reward.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.Reward.RewardUsageCount">
 <summary>
 Gets the count of the reward usage.
 </summary>
 <returns>Number of the reward usage.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.Reward.GetRewardById(System.Int32)">
 <summary>
 Gets reward by ID.
 </summary>
 <param name="rewardId">The reward id.</param>
 <returns>The reward.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.Reward.LoadRewardsFromUserTransaction(Dynamicweb.Ecommerce.Loyalty.UserTransactionCollection)">
 <summary>
 Loads the rewards from the user transaction collection.
 </summary>
 <param name="userTransactions">The collection of user transactions.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.Reward.GetRewardById(System.Int32,System.String)">
 <summary>
 Gets the reward by reward id and language Id.
 </summary>
 <param name="rewardId">The reward id.</param>
 <param name="languageId">The language id.</param>
 <returns>The reward.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.Reward.GetRewards(System.Boolean)">
 <summary>
 Return all rewards.
 </summary>
 <param name="force">Force cahce update.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.Reward.GetRewards(System.Boolean,System.String,System.Nullable{System.Boolean},Dynamicweb.Ecommerce.Loyalty.RewardCollectionSortDirection,Dynamicweb.Ecommerce.Loyalty.RewardCollectionSortBy)">
 <summary>
 Return all rewards.
 </summary>
 <param name="force">Force cahce update.</param>
 <param name="languageId">The language id.</param>
 <param name="archiveMode">The archive mode. Nothing - all, true - archived only, false - unarchived only.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Loyalty.RewardCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.Reward.ClearCache">
 <summary>
 Remove all rewards from cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.Reward.FillRow(System.Data.DataRow)">
 <summary>
 Fills the given <see cref="T:System.Data.DataRow">System.Data.DataRow</see> object with property values of the current object.
 </summary>
 <param name="row">An instance of the <see cref="T:System.Data.DataRow">System.Data.DataRow</see> object to write data to.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Loyalty.RewardRule">
 <summary>
 Represents information about an reward rule.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Loyalty.RewardRule.cacheKey">
 <summary>
 Reward rules cache.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.RewardId">
 <summary>
 Gets or sets the id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.Name">
 <summary>
 Gets or sets the name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.Active">
 <summary>
 Gets or sets the value indicating whether the rule is active.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.ValidFrom">
 <summary>
 Gets or sets start publication date.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.ValidTo">
 <summary>
 Gets or sets end publication date.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.UserGroupId">
 <summary>
 Gets or sets the Id of the user group.
 </summary>
 <remarks>The rule is valid for <c>null</c> is all user groups.</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.UserId">
 <summary>
 Gets or sets the Id of the user.
 </summary>
 <remarks>The rule is valid for <c>null</c> is all users.</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.UserCustomerNumber">
 <summary>
 Gets or sets the customer number.
 </summary>
 <remarks>The rule is valid for <c>null</c> is all customer numbers.</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.ShopId">
 <summary>
 Gets or sets the Id of the shop.
 </summary>
 <remarks>The reward rule is valid for <c>null</c> is all shops.</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.LanguageId">
 <summary>
 Gets or sets the Id of the language.
 </summary>
 <remarks>The reward rule is valid for <c>null</c> is all languages.</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.ProductsAndGroupsIds">
 <summary>
 Gets or sets the ids for products and the groups.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.CountryCode2">
 <summary>
 Gets or sets the country code of the country.
 </summary>
 <remarks>The rule is valid for <c>null</c> is all countries.</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.ShippingId">
 <summary>
 Gets or set the Id of the shipping.
 </summary>
 <remarks>The rule is valid for <c>null</c> is all shipping.</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.PaymentId">
 <summary>
Gets or sets the Id of the payment.
 </summary>
 <remarks>The rule is valid for <c>null</c> is all payments.</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.ProductQuantification">
 <summary>
 Gets or sets the product quantification.
 </summary>
 <remarks>The rule uses when validating product quantities.</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.ProductQuantity">
 <summary>
 Gets or sets the product quantity required for the rule to be valid.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.OrderTotalPriceCondition">
 <summary>
 Gets or sets the conditional operator for comparing the order total price.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.OrderTotalPrice">
 <summary>
 Gets or sets the order total price condition.
 </summary>
 <remarks>Default value is 0.00</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.Reward">
 <summary>
 Gets or sets the current reward.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.User">
 <summary>
 Gets or sets the user of the rule.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.UserGroup">
 <summary>
 Gets or sets the user group of the rule.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.Shop">
 <summary>
 Gets or sets the shop of the rule.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.Language">
 <summary>
 Gets or sets the language of the rule.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.Country">
 <summary>
 Gets or sets the country of the rule.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.Shipping">
 <summary>
 Gets or sets the shipping of the rule.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.Payment">
 <summary>
 Gets or sets the payment of the rule.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.OrderLineFieldName">
 <summary>
Gets or sets the name of order field of the rule.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.OrderFieldName">
 <summary>
Gets or sets the name of order field of the rule.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.OrderFieldValue">
 <summary>
 Gets or sets the required value of the order field specified in the <see cref="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.OrderFieldName"/> property.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.VoucherListId">
 <summary>
 Gets or sets the voucher list id.
 </summary> 
 <exception cref="T:System.Exception">If <see cref="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.OrderFieldName"/> property is not set to "OrderVoucherCode" and value is not set to <c>null</c> an exception will be thrown.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.VoucherList">
 <summary>
 Gets or sets the voucher list.
 </summary>
 <exception cref="T:System.Exception">If not the <see cref="P:Dynamicweb.Ecommerce.Loyalty.RewardRule.OrderFieldName"/> property is set to "OrderVoucherCode" and the value is not set to null an exception will be thrown.</exception>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.RewardRule.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.RewardRule.#ctor(Dynamicweb.Ecommerce.Loyalty.Reward)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="sourceReward">The reward.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.RewardRule.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.RewardRule.Fill(System.Data.IDataReader)">
 <summary>
 Fills the reward rules properties.
 </summary>
 <param name="reader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.RewardRule.Save">
 <summary>
 Saves current instance to the data base.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.RewardRule.Delete">
 <summary>
 Deletes the current instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.RewardRule.LoadRulesForRewards(Dynamicweb.Ecommerce.Loyalty.RewardCollection)">
 <summary>
 Loads rules for specified rewards.
 </summary>
 <param name="rewards">The <see cref="T:Dynamicweb.Ecommerce.Loyalty.RewardCollection"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.RewardRule.GetRewardRuleById(System.Int32)">
 <summary>
 Gets the reward rule by id.
 </summary>
 <param name="id">The reward id.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Loyalty.RewardRule"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.RewardRule.GetRulesForReward(System.Int32)">
 <summary>
 Gets rules for the reward id.
 </summary>
 <param name="rewardId">The reward id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.RewardRule.FillRow(System.Data.DataRow)">
 <summary>
 Fills the given <see cref="T:System.Data.DataRow">System.Data.DataRow</see> object with property values of the current object.
 </summary>
 <param name="row">An instance of the <see cref="T:System.Data.DataRow">System.Data.DataRow</see> object to write data to.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Loyalty.RewardType">
 <summary>
 Enumeration with reward types.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Loyalty.TransactionObjectType">
 <summary>
 Enumeration with transaction object types.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Loyalty.UserTransaction">
 <summary>
 Represents information about an user transaction.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.UserTransaction.Id">
 <summary>
 Gets or sets the user transaction ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.UserTransaction.UserId">
 <summary>
 Gets or sets the user ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.UserTransaction.RewardId">
 <summary>
 Gets or sets the reward ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.UserTransaction.TransactionDate">
 <summary>
 Gets or sets the transaction date.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.UserTransaction.Points">
 <summary>
 Gets or sets the number of points.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.UserTransaction.Comment">
 <summary>
 Gets or sets the comment for transaction.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.UserTransaction.ExpirationDate">
 <summary>
 Gets expitarion date for points.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.UserTransaction.User">
 <summary>
 Gets or sets transaction <see cref="T:Dynamicweb.Security.UserManagement.User"></see>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.UserTransaction.Reward">
 <summary>
 Gets or sets transaction <see cref="T:Dynamicweb.Ecommerce.Loyalty.Reward"></see>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.UserTransaction.Order">
 <summary>
 Gets transaction <see cref="T:Dynamicweb.Ecommerce.Orders.Order"></see>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.UserTransaction.AuthorizingUser">
 <summary>
 Gets authorizing <see cref="T:Dynamicweb.Security.UserManagement.User"></see>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Loyalty.UserTransaction.ObjectType">
 <summary>
 Gets the <see cref="P:Dynamicweb.Ecommerce.Loyalty.UserTransaction.ObjectType"></see>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.UserTransaction.SetObjectType(Dynamicweb.Ecommerce.Orders.OrderLine)">
 <summary>
 Sets the <see cref="P:Dynamicweb.Ecommerce.Loyalty.UserTransaction.ObjectType"></see>.
 </summary>
 <param name="orderLine">The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine"></see>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.UserTransaction.SetObjectType(Dynamicweb.Security.UserManagement.User)">
 <summary>
 Sets the <see cref="P:Dynamicweb.Ecommerce.Loyalty.UserTransaction.ObjectType"></see>.
 </summary>
 <param name="user">The <see cref="T:Dynamicweb.Security.UserManagement.User"></see>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.UserTransaction.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.UserTransaction.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Loyalty.UserTransaction.Fill(System.Data.IDataReader)">
 <summary>
 Fills the reward properties.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressField">
 <summary>
 The structure AddressField represents info about address field for the validation.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressField.FieldType">
 <summary>
 The type of field.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressField.OldValue">
 <summary>
 The current value of the field.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressField.NewValue">
 <summary>
 The value that will be provided as suggestion for the field if not valid.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressFieldType">
 <summary>
 Defines the address field types.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressType">
 <summary>
 Defines the address types.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidator">
 <summary>
 The class AddressValidator represents validator for addresses.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidator.Id">
 <summary>
 Gets the validator id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidator.Name">
 <summary>
 Gets or sets the validator name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidator.AddressValidatorProvider">
 <summary>
 Gets or sets the validator provider.
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidator.IsNew">
 <summary>
 Gets or sets value indication whether validator is newly created.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidator.Active">
 <summary>
 Gets or sets value indication whether validator is active.
 </summary>
 <remarks>Validator is inactive by default</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidator.UserGroupIdsToSkipValidation">
 <summary>
 Gets or sets the groups to skip address validation.
 </summary>
 <value>The user group ids.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidator.Save">
 <summary>
 Saves current instance to data base.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidator.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidator.GetAddressValidatorById(System.Int32)">
 <summary>
 Gets the AddressValidator by ID.
 </summary>
 <param name="settingsId">The ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidator.GetActiveAddressValidators">
 <summary>
 Gets all active AddressValidators. Limited by the relations to the current <see cref="T:Dynamicweb.Ecommerce.International.Country" />.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidator.GetActiveAddressValidators(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Gets active AddressValidators for an order.
 </summary>
 <param name="order">The order.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidator.GetAllAddressValidators">
 <summary>
 Gets all AddressValidators.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidator.ClearCache">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidator.Validate(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Validate the addresses.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidatorProvider">
 <summary>
 The class AddressValidatorProvider provides address validation functionality.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidatorProvider.ValidatorId">
 <summary>
 Gets or sets the validator id.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidatorProvider.Validate(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Validates addresses for an order.
 </summary>
 <param name="order">The order to validate addresses</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidatorResult">
 <summary>
 Represents information from address validators.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidatorResult.ValidatorId">
 <summary>
 Gets or sets the validator id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidatorResult.IsError">
 <summary>
 Gets or sets value indicating whether there are any validation errors.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidatorResult.ErrorMessage">
 <summary>
 Gets or sets validation error message.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidatorResult.AddressFields">
 <summary>
 Gets or sets the address fields.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidatorResult.AddressType">
 <summary>
 Gets or sets type of the address.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidatorResult.#ctor(System.Int32,Dynamicweb.Ecommerce.Orders.AddressValidation.AddressType)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidatorResult" /> class.
 </summary>
 <param name="validatorId">The id of validator.</param>
 <param name="addressType">The type of address.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.AddressValidation.AddressValidatorResult.CheckAddressField(Dynamicweb.Ecommerce.Orders.AddressValidation.AddressFieldType,System.String,System.String)">
 <summary>
 Checks the address field.
 </summary>
 <param name="fieldType">The type of field.</param>
 <param name="oldValue">The current value of the field.</param>
 <param name="newValue">The value that will be provided as suggestion for the field if not valid.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Affiliate.CodeType">
 <summary>
 Defines how the code amount should be calculated.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate">
 <summary>
 The class Affiliate represents information for affiliate.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.Id">
 <summary>
 Gets or sets the affiliate id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.Firm">
 <summary>
 Gets or sets the affiliate firm name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.Att">
 <summary>
 Gets or sets the affiliate "For attention of" person.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.Name">
 <summary>
 Gets the affiliate name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.Address">
 <summary>
 Gets or sets the affiliate address line.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.Address2">
 <summary>
 Gets or sets the affiliate second address line.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.ZipCode">
 <summary>
 Gets or sets the affiliate zip code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.City">
 <summary>
 Gets or sets the affiliate city.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.Country">
 <summary>
 Gets or sets the affiliate country.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.Phone">
 <summary>
 Gets or sets the affiliate phone number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.Mobile">
 <summary>
 Gets or sets the affiliate mobile phone number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.Fax">
 <summary>
 Gets or sets the affiliate fax number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.Email">
 <summary>
 Gets or sets the affiliate e-mail address.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.Web">
 <summary>
 Gets or sets the affiliate web info.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.Approved">
 <summary>
 Gets or sets value indicating whether the affiliate is approved.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.#ctor(System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate" /> class.
 </summary>
 <param name="id">The id of the affiliate.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate" /> class.
 </summary>
 <param name="dataReader">The <see cref="T:System.Data.IDataReader"/> instance.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.Save(System.Int32)">
 <summary>
 Saves the affiliate with the given id.
 </summary>
 <param name="affiliateId">The affiliate id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.Delete">
 <summary>
 Deletes the affiliate instance from the data base.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.Delete(System.Int32)">
 <summary>
 Deletes the affiliate by given id from the data base.
 </summary>
 <param name="affiliateId">The affiliate id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.Copy">
 <summary>
 Copies the current affiliate instance.
 </summary>
 <returns>The copy.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.Clone">
 <summary>
 Clones the current affiliate instance.
 </summary>
 <returns>The clone.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.Affiliate.GetAffiliates">
 <summary>
 Gets all the affiliates.
 </summary>
 <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of affiliates.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode">
 <summary>
 The class AffiliateCode represents information about affiliate code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode.Id">
 <summary>
 Gets or sets the code id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode.AffiliateId">
 <summary>
 Gets or sets the code affiliate id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode.Code">
 <summary>
 Gets or sets the code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode.Type">
 <summary>
 Gets or sets the code type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode.Amount">
 <summary>
 Gets or sets the code amount.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode.#ctor(System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode" /> class.
 </summary>
 <param name="id">The id of the affiliate code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode" /> class.
 </summary>
 <param name="dataReader">The <see cref="T:System.Data.IDataReader"/> instance.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode.Save(System.Int32)">
 <summary>
 Saves the affiliate code with the given id.
 </summary>
 <param name="codeId">The affiliate code id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode.Delete">
 <summary>
 Deletes the affiliate code instance from the data base.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode.Delete(System.Int32)">
 <summary>
 Deletes the affiliate code by given id from the data base.
 </summary>
 <param name="codeId">The affiliate code id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode.Copy">
 <summary>
 Copies the current affiliate code instance.
 </summary>
 <returns>The copy.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode.Clone">
 <summary>
 Clones the current affiliate code instance.
 </summary>
 <returns>The clone.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode.GetAffiliateCodes">
 <summary>
 Gets all the affiliate codes.
 </summary>
 <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of affiliate codes.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateCode.GetAffiliateCodes(System.Int32)">
 <summary>
 Gets affiliate codes for affiliate with given id.
 </summary>
 <param name="affiliateId">The id of the affiliate.</param>
 <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of affiliate codes.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale">
 <summary>
 The class AffiliateCode represents information about affiliate sale.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale.Id">
 <summary>
 Gets or sets the sale id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale.AffiliateId">
 <summary>
 Gets or sets the sale affiliate id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale.AffiliateCodeId">
 <summary>
 Gets or sets the sale affiliate code id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale.AffiliateCode">
 <summary>
 Gets or sets the sale affiliate code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale.OrderId">
 <summary>
 Gets or sets the sale order id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale.CurrencyCode">
 <summary>
 Gets or sets the sale currency code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale.Amount">
 <summary>
 Gets or sets the sale amount.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale.#ctor(System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale" /> class.
 </summary>
 <param name="id">The id of the affiliate sale.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale" /> class.
 </summary>
 <param name="dataReader">The <see cref="T:System.Data.IDataReader"/> instance.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale.Save(System.Int32)">
 <summary>
 Saves the affiliate sale with the given id.
 </summary>
 <param name="saleId">The affiliate sale id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale.Delete">
 <summary>
 Deletes the affiliate sale instance from the data base.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale.Delete(System.Int32)">
 <summary>
 Deletes the affiliate sale by given id from the data base.
 </summary>
 <param name="saleId">The affiliate sale id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale.Copy">
 <summary>
 Copies the current affiliate sale instance.
 </summary>
 <returns>The copy.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale.Clone">
 <summary>
 Clones the current affiliate sale instance.
 </summary>
 <returns>The clone.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale.GetAffiliateSales">
 <summary>
 Gets all the affiliate sales.
 </summary>
 <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of affiliate sales.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Affiliate.AffiliateSale.GetAffiliateSales(System.Int32)">
 <summary>
 Gets affiliate sales for affiliate with given id.
 </summary>
 <param name="affiliateId">The id of the affiliate.</param>
 <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of affiliate sales.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.CountrySelectionForMethod">
 <summary>
 Defines a country.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.CountrySelectionForMethod.DeliveryCountry">
 <summary>
 Delivery country
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.CountrySelectionForMethod.CustomerCountry">
 <summary>
 Customer country
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.CountrySelectionForMethod.DeliveryCountryThenCustomerCountry">
 <summary>
 Delivery country and then customer country
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.DebuggingInfoType">
 <summary>
 The enum DebuggingInfoType represents order debugging information types enumeration.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountApplyToProduct">
 <summary>
 The DiscountApplyToProduct enumeration defines the product to which discount should be applied
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.DiscountApplyToProduct.AllProducts">
 <summary>
 Discount applies to all products (default selection).
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.DiscountApplyToProduct.CheapestProduct">
 <summary>
 Discount should be calculated on only for cheapest product.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.DiscountApplyToProduct.MostExpensiveProduct">
 <summary>
 Discount should be calculated on only for most expensive product.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountApplyTypeHelper.GetNiceName(Dynamicweb.Ecommerce.Orders.Discounts.DiscountApplyType)">
 <summary>
 Get understandable name for discount type.
 </summary>
 <param name="applyType">The type of discount which should be applied.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountRepository">
 <summary>
 The DiscountRepository providing persistence operations for the Discount Aggregate.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountRepository.Delete(System.Int32)">
 <summary>
 Deletes the discount and its translations.
 </summary>
 <param name="discountId">The discount ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountRepository.Save(Dynamicweb.Ecommerce.Orders.Discounts.Discount)">
 <summary>
 Saves the discount and its translations.
 </summary>
 <param name="discount">The discount.</param>
 <returns>The discount after saving.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountRepository.SaveDiscountTranslation(System.Int32,Dynamicweb.Ecommerce.Orders.Discounts.DiscountTranslation)">
 <summary>
 Saves the discount translation.
 </summary>
 <param name="discountId">The discount ID.</param>
 <param name="translation">The translation.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountRepository.GetDiscounts">
 <summary>
 Gets all discounts.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.Discount"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountRepository.GetDiscountTranslations">
 <summary>
 Gets all discount translations groupped by discount ID.
 </summary>
 <returns>The dictionary with the discount ID as key and a collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountTranslation"/> as value.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountService">
 <summary>
 The DiscountService class providing methods for querying and saving The Discount aggregate to and from persistence.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountService.Delete(System.Int32)">
 <summary>
 Deletes the discount and its translations.
 </summary>
 <param name="discountId">The discount ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountService.Save(Dynamicweb.Ecommerce.Orders.Discounts.Discount)">
 <summary>
 Saves the discount and its translations.
 </summary>
 <param name="discount">The discount.</param>
 <returns>The discount after saving.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountService.SaveDiscountTranslation(System.Int32,Dynamicweb.Ecommerce.Orders.Discounts.DiscountTranslation)">
 <summary>
 Saves the discount translation.
 </summary>
 <param name="discountId">The discount ID.</param>
 <param name="translation">The translation.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountService.GetDiscount(System.Int32)">
 <summary>
 Gets the discount.
 </summary>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.Discount"/>, or <c>null</c> if discount was not found.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountService.GetDiscounts">
 <summary>
 Gets all discounts.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.Discount"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountService.GetDiscounts(System.Int32,System.Int32,Dynamicweb.Ecommerce.Orders.Discounts.SortBy,Dynamicweb.Ecommerce.Orders.Discounts.SortDirection,System.Int32@)">
 <summary>
 Gets the discounts sorted by the specified comparer in the specified zero-indexed range.
 </summary>
 <param name="rangeStart">The start index.</param>
 <param name="rangeEnd">The end index.</param>
 <param name="sortBy">The sort by.</param>
 <param name="sortDirection">The sort direction.</param>
 <param name="totalCount">Returns the total count of discounts.</param>
 <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountService.GetDiscounts(System.Int32,System.Int32,Dynamicweb.Ecommerce.Orders.Discounts.SortBy,Dynamicweb.Ecommerce.Orders.Discounts.SortDirection)">
 <summary>
 Gets the discounts sorted by the specified comparer in the specified zero-indexed range.
 </summary>
 <param name="rangeStart">The start index.</param>
 <param name="rangeEnd">The end index.</param>
 <param name="sortBy">The sort by.</param>
 <param name="sortDirection">The sort direction.</param>
 <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountService.GetDiscounts(System.Int32,System.Int32,Dynamicweb.Ecommerce.Orders.Discounts.SortBy,Dynamicweb.Ecommerce.Orders.Discounts.SortDirection,System.Boolean,System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Shops.Shop},System.Int32@)">
 <summary>
 Gets the discounts sorted by the specified comparer in the specified zero-indexed range.
 </summary>
 <param name="rangeStart">The start index.</param>
 <param name="rangeEnd">The end index.</param>
 <param name="sortBy">The sort by.</param>
 <param name="sortDirection">The sort direction.</param>
 <param name="assignableFromProducts">The aasignable from products.</param>
 <param name="shops">The shops.</param>
 <param name="totalCount">Returns the total count of discounts.</param>
 <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountService.GetDiscounts(System.Int32,System.Int32,Dynamicweb.Ecommerce.Orders.Discounts.SortBy,Dynamicweb.Ecommerce.Orders.Discounts.SortDirection,System.Boolean,System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Shops.Shop})">
 <summary>
 Gets the discounts sorted by the specified comparer in the specified zero-indexed range.
 </summary>
 <param name="rangeStart">The start index.</param>
 <param name="rangeEnd">The end index.</param>
 <param name="sortBy">The sort by.</param>
 <param name="sortDirection">The sort direction.</param>
 <param name="assignableFromProducts">The aasignable from products.</param>
 <param name="shops">The shops.</param>
 <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountService.GetDiscounts(Dynamicweb.Ecommerce.Orders.Discounts.DiscountApplyType)">
 <summary>
 Gets the discounts with specified <see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountApplyType"/>.
 </summary>
 <param name="orderDiscountType">The <see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountApplyType"/>.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.Discount"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountService.GetDiscountTranslations(System.Int32)">
 <summary>
 Gets all translations for the discount.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountTranslation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountService.ClearCache">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountTypes">
 <summary>
 The DiscountType enumeration defines how the discount amount is calculated.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.DiscountTypes.Amount">
 <summary>
 The discount is a fixed amount in a specified currency
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.DiscountTypes.Percentage">
 <summary>
 The discount amount is a percentage of the order total price when used with an order discount and the price of an order line, when used with an order line discount.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.DiscountTypes.Product">
 <summary>
 The discount as a product.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.DiscountTypes.Shipping">
 <summary>
 The discount affects the shipping fee
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.DiscountTypes.AmountFromField">
 <summary>
 The discount amount is taken from the product field value
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Discounts.SortBy">
 <summary>
 The SortBy enumeration defines on which field discount will be sorted.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.Id">
 <summary>
 The ID of discount
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.Name">
 <summary>
 The Name of discount
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.DiscountType">
 <summary>
 The discount type
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.ProductId">
 <summary>
 The ID of product
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.GroupId">
 <summary>
 The ID of product group
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.Amount">
 <summary>
 The amount of money
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.CurrencyCode">
 <summary>
 The currency code
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.Percentage">
 <summary>
 The percentage of discount
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.UserId">
 <summary>
 The ID of user
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.UserGroupId">
 <summary>
 The ID of user group
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.UserCustomerNumber">
 <summary>
 The user customer number
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.ProductVariantId">
 <summary>
 The ID of product variant
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.OrderFieldName">
 <summary>
 The order field name
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.OrderFieldValue">
 <summary>
 The order field value
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.VoucherListId">
 <summary>
 The ID of voucher list
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.OrderTotalPrice">
 <summary>
 The order total price
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.ShopId">
 <summary>
 The ID of shop
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.Active">
 <summary>
 The discount active field
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.ValidFrom">
 <summary>
 The date from which discount is valid
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.ValidTo">
 <summary>
 The date till which discount is valid
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.ProductQuantity">
 <summary>
 The quantity of product
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.LanguageId">
 <summary>
 The ID of language
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.CountryCode2">
 <summary>
 The country code2
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.ShippingId">
 <summary>
 The Shipping Id
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.PaymentId">
 <summary>
 The Payment Id
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortBy.AssignableFromProducts">
 <summary>
 The discount assignable from products field
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Discounts.SortDirection">
 <summary>
 The SortDirection enumeration defines in which direction discount will be sorted.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortDirection.Ascending">
 <summary>
 The ascending sorting direction
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.SortDirection.Descending">
 <summary>
 The descending sorting direction
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Discounts.Discount">
 <summary>
 Represents information about a discount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Active">
 <summary>
 Gets or sets the value indicating whether instance is active.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Actual">
 <summary>
 Gets a value indicating whether this order time lays within "valid from - valid to" interval.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.AssignableFromProducts">
 <summary>
 Gets or sets the value indicating whether instance is assignable from products and groups.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Amount">
 <summary>
 Gets or sets the fixed discount amount of the instance.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.ShippingAmount">
 <summary>
 Gets or sets the amount if the discount is a shipping discount.
 </summary>
 <value>The shipping amount.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.ShippingCurrency">
 <summary>
 Gets or sets the currency code of the shpping amount if the discount is a shipping discount.
 </summary>
 <value>The shipping currency.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.CountryCode2">
 <summary>
 Gets or sets the country code of the country the discount is valid for Null is all countries.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.CurrencyCode">
 <summary>
 Gets or sets the currency code of the currency the fixed discount amount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.DiscountType">
 <summary>
 Gets or sets the DiscountType of the instance.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.LanguageId">
 <summary>
 Gets or sets the ID of the language the discount is valid for Null is all languages.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Name">
 <summary>
 Gets or sets the name of the instance.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Description">
 <summary>
 Gets or sets the description of the instance.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.DiscountApplyType">
 <summary>
 Gets or sets the <see cref="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.DiscountApplyType"/> of the instance.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.AmountProductFieldName">
 <summary>
Gets or sets the name of amount product field of the discount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.DiscountApplyToProduct">
 <summary>
 Gets or sets the DiscountApplyToProduct of the instance.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.OrderFieldName">
 <summary>
Gets or sets the name of order field of the discount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.OrderFieldValue">
 <summary>
 Gets or sets the required value of the order field specified in the OrderFieldName property.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.OrderTotalPrice">
 <summary>
 Gets or sets the order total price condition. Default value is 0.00
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.OrderTotalPriceCondition">
 <summary>
 Gets or sets the conditional operator for comparing the order total price.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.PaymentId">
 <summary>
Gets or sets the Id of the payment the discount is valid for Null is all payments.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.ProductIdByDiscount">
 <summary>
 Gets or sets the ID of the product that acts as a discount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.ProductAsDiscount">
 <summary>
 Gets or sets the product and/or product variant that acts as a discount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Percentage">
 <summary>
 Gets or sets the discount percentage of the instance.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.ProductQuantification">
 <summary>
 Gets or sets the product quantification the discount uses when validating product quantities.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.ProductQuantity">
 <summary>
 Gets or sets the product quantity required for the discount to be valid.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.ProductVariantIdByDiscount">
 <summary>
Gets or sets the ID of the product variant of the product that acts as a discount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.ShippingId">
 <summary>
 Gets or set the ID of the shipping the discount is valid for Null is all shipping.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.ShopId">
 <summary>
Gets or sets the ID of the shop the discount is valid for Null is all shops.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.UserCustomerNumber">
 <summary>
 Gets or sets the customer number the discount is valid for Null is all customer numbers.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.UserGroupId">
 <summary>
 Gets or sets the Id of the user group the discount is valid for Null is all user groups.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.UserId">
 <summary>
 Gets or sets the ID of the user the discount is valid for Null is all users.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.ValidFrom">
 <summary>
 Gets or sets the date and time from when the instance is valid.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.ValidTo">
 <summary>
 Gets or sets the data and time to which the instance is valid.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.VoucherListId">
 <summary>
 Gets or sets the ID of the voucher list to use when OrderFieldName is “OrderVoucherCode”.
 </summary>
 <exception cref="T:System.Exception">Trown when <see cref="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.OrderFieldName"/> property is not set to “OrderVoucherCode” and value is not set to null.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Country">
 <summary>
 Gets or sets the country of the discount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Currency">
 <summary>
 Gets or sets the currency of the discount.
 </summary>
 <exception cref="T:System.Exception">Thrown when DiscountType property is DiscountTypes.Percentage and the value is not set to null.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Language">
 <summary>
 Gets or sets the language of the discount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Payment">
 <summary>
 Gets or sets the payment of the discount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Shipping">
 <summary>
 Gets or sets the shipping of the discount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Shop">
 <summary>
 Gets or sets the shop of the discount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.User">
 <summary>
 Gets or sets the user of the discount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.UserGroup">
 <summary>
 Gets or sets the user group of the discount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.OrderContextId">
 <summary>
 Gets or sets the order context id of the discount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.VoucherList">
 <summary>
 Gets or set the voucher list of the discount.
 </summary>
 <exception cref="T:System.Exception">Thrown when the OrderFieldName property is not set to “OrderVoucherCode” and the value of this property is not set to null.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Translations">
 <summary>
 Gets the translations.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.Discount.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.Discount" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.Discount.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.Discount" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Fill(System.Data.IDataReader)">
 <summary>
 Fills the specified data reader.
 </summary>
 <param name="reader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.Discount.FillRow(System.Data.DataRow)">
 <summary>
 Fills the data row.
 </summary>
 <param name="row">The data row.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Save">
 <summary>
 Saves current data to the database.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Delete">
 <summary>
 Deletes the object.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Save(Dynamicweb.Ecommerce.Orders.Discounts.Discount)">
 <summary>
 Saves the instance of an OrderDiscount.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Save(Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection)">
 <summary>
  Saves the instances of OrderDiscounts in the OrderDiscountCollection to the database.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Delete(Dynamicweb.Ecommerce.Orders.Discounts.Discount)">
 <summary>
  Deletes the instance of an OrderDiscount on the database.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Delete(Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection)">
 <summary>
  Deletes the instances of OrderDiscounts in the OrderDiscountCollection on the database.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.Discount.Delete(System.String)">
 <summary>
  Deletes the instances of OrderDiscounts in the OrderDiscountCollection on the database.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.Discount.ClearCache">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.Discount.GetDiscountById(System.Int64)">
 <summary>
 Gets the discount from the cache with the specified Id.
 </summary>
 <returns>Returns an <see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.Discount"/> instance.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.Discount.GetDiscounts">
 <summary>
 Gets all discounts from the cache.
 </summary>
 <returns>Returns an <see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.Discount.GetDiscounts(System.Int32,System.Int32,Dynamicweb.Ecommerce.Orders.Discounts.SortBy,Dynamicweb.Ecommerce.Orders.Discounts.SortDirection)">
 <summary>
 Gets the discounts from the cache sorted by the specified comparer in the specified zero-indexed range.
 </summary>
 <returns>Returns a <see cref="T:System.Tuple`2"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.Discount.GetDiscounts(Dynamicweb.Ecommerce.Orders.Discounts.DiscountApplyType)">
 <summary>
 Gets the discounts with specified OrderDiscount.OrderDiscountType from the cache.
 </summary>
 <returns>Returns an <see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.Discount.GetOrderDiscounts">
 <summary>
 Get the discounts with the OrderDiscount.OrderDiscountType.OrderDiscount.
 </summary>
 <returns>Returns an <see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.Discount.GetOrderLineDiscounts">
 <summary>
 Get the discounts with the OrderDiscount.OrderDiscountType.OrderLineDiscount.
 </summary>
 <returns>Returns an <see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection"/>.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountApplyType">
 <summary>
 The OrderDiscountType enumeration defines the two different types of OrderDiscount instances the OrderDiscount class can represent.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.DiscountApplyType.OrderDiscount">
 <summary>
 An OrderDiscount is a discount, which applies to the entire order.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.DiscountApplyType.OrderLineDiscount">
 <summary>
 An OrderLineDiscount is a discount, which is applies to one order line on the order.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Discounts.DiscountApplyType.OrderDiscountWithOtherDiscounts">
 <summary>
 An OrderDiscount that is calculated based on the total order price including previously added discounts.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection">
 <summary>
 Represents information about a discount collection.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection.#ctor">
 <summary>
 constructor
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Orders.Discounts.Discount})">
 <summary>
 Initializes a new instance of an OrderDiscountCollection with the provided discounts
 </summary>
 <param name="discounts">OrderDiscount to be added to the list</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of an OrderDiscountCollection from DataReader
 </summary>
 <param name="dataReader">IDataReader </param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection.Comparer">
 <summary>
 Represents a collection element comparer.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection.Comparer.Comparison">
 <summary>
 Gets or sets the comparison.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection.Comparer.#ctor(System.Comparison{Dynamicweb.Ecommerce.Orders.Discounts.Discount})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="comparison">Comparison.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="comparison">comparison</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection.Comparer.Compare(Dynamicweb.Ecommerce.Orders.Discounts.Discount,Dynamicweb.Ecommerce.Orders.Discounts.Discount)">
 <summary>
 Compares two objects and returns the comparison result.
 </summary>
 <param name="x">First object.</param>
 <param name="y">Second object.</param>
 <returns>Comparison result.</returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection.Data">
 <summary>
 Gets the underlying data storage.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection.Sort(Dynamicweb.Ecommerce.Orders.Discounts.SortBy)">
 <summary>
 Sorts elements according to the given field.
 </summary>
 <param name="sortByEnum">Field for sorting.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection.Sort(Dynamicweb.Ecommerce.Orders.Discounts.SortBy,Dynamicweb.Ecommerce.Orders.Discounts.SortDirection)">
 <summary>
 Sorts elements according to the given field and direction.
 </summary>
 <param name="sortByEnum">Field for sorting.</param>
 <param name="sortDirection">Direction of sorting, ACS or DESC.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection.Sort(System.Comparison{Dynamicweb.Ecommerce.Orders.Discounts.Discount})">
 <summary>
 Sorts elements according to the given comparison.
 </summary>
 <param name="comparison">Comparison.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection.Sort(System.Collections.Generic.IComparer{Dynamicweb.Ecommerce.Orders.Discounts.Discount})">
 <summary>
 Sorts elements according to the given comparer.
 </summary>
 <param name="comparer">Comparer.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountCollection.GetRange(System.Int32,System.Int32)">
 <summary>
 Creates a shallow copy of a range of elements in the source OrderDiscountCollection.
 </summary>
 <param name="index">index at which the range starts.</param>
 <param name="count">The number of elements in the range.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountInfo">
 <summary>
 Represents information about a discount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.DiscountInfo.Discount">
 <summary>
 Gets the discount.
 </summary>
 <value>
 The discount.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.DiscountInfo.Product">
 <summary>
 Gets the product.
 </summary>
 <value>
 The product.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.DiscountInfo.Price">
 <summary>
 Gets the price.
 </summary>
 <value>
 The price.
 </value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountInfo.GetPrice(Dynamicweb.Ecommerce.International.Currency,Dynamicweb.Ecommerce.International.Country)">
 <summary>
 Gets the price.
 </summary>
 <param name="currency">Currency</param>
 <param name="country">Country</param>
 <return>price</return>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountInfo.#ctor(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Orders.Discounts.Discount)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountInfo" /> class.
 </summary>
 <param name="product">The product.</param>
 <param name="discount">The discount.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountInfoCollection">
 <summary>
 Represents information about a discount information collection.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.DiscountInfoCollection.TotalPrice">
 <summary>
 Gets the total price of the discounts.
 </summary>
 <value>
 The total price.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.DiscountInfoCollection.Price">
 <summary>
 Gets the price of the product with the discount subtracted.
 </summary>
 <value>
 The price.
 </value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountInfoCollection.#ctor(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountInfoCollection" /> class.
 </summary>
 <param name="product">The product.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountProvider">
 <summary>
 Class DiscountProvider.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.DiscountProvider.SelectionBehavior">
 <summary>
 Get discount selection behavior (acc/high/low)
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.DiscountProvider.ApplyDiscountBeforeTaxes">
 <summary>
 Apply discount before taxes
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountProvider.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountProvider" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountProvider.ProcessExclusiveDiscounts(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Finds the exclusive discounts. An exclusive discount is calculated based on the original order or order line price.
 </summary>
 <param name="order">The order.</param>
 <returns><c>true</c> if the order has had discounts added; <c>false</c> otherwise.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountProvider.ProcessInclusiveDiscounts(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Finds the inclusive discounts. An inclusive discount is calculated based on the total order price including any previously applied exclusive discounts.
 </summary>
 <param name="order">The order.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountProvider.IsDiscountValidForProduct(Dynamicweb.Ecommerce.Orders.Discounts.Discount,Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Determines if discount is valid for given product.
 </summary>
 <param name="discount">The discount.</param>
 <param name="product">The product.</param>
 <returns><c>true</c> if discount valid for given product; otherwise, <c>false</c>.</returns>
 <remarks>Order based discounts, e.g. order field discounts, considered as valid. To avoid this, use overload of <see cref="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountProvider.IsDiscountValidForProduct(Dynamicweb.Ecommerce.Orders.Discounts.Discount,Dynamicweb.Ecommerce.Products.Product)">IsDiscountValidForProduct(Discount, Product, Boolean)</see> method with false.</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountProvider.IsDiscountValidForProduct(Dynamicweb.Ecommerce.Orders.Discounts.Discount,Dynamicweb.Ecommerce.Products.Product,System.Boolean)">
 <summary>
 Determines if discount is valid for given product.
 </summary>
 <param name="discount">The discount.</param>
 <param name="product">The product.</param>
 <param name="ignoreOrderConditions">without any additional conditions e.g. discount that require vouchercode will be valid if <c>true</c></param>
 <returns><c>true</c> if discount valid for given product; otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountProvider.CalculateDiscountPrice(Dynamicweb.Ecommerce.Orders.Discounts.Discount,Dynamicweb.Ecommerce.Prices.PriceInfo)">
 <summary>
 Calculates the discount price. The resulting price is negative.
 </summary>
 <param name="discount">The discount.</param>
 <param name="price">The price.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountProvider.CalculateDiscountPrice(Dynamicweb.Ecommerce.Orders.Discounts.Discount,Dynamicweb.Ecommerce.Prices.PriceInfo,System.Int32)">
 <summary>
 Calculates the discount price. The resulting price is negative.
 </summary>
 <param name="discount">The discount.</param>
 <param name="price">The price.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountTranslation">
 <summary>
 The class DiscountTranslation represents translation for discounts.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.DiscountTranslation.LanguageId">
 <summary>
 Gets or sets the language identifier.
 </summary>
 <value>
 The language identifier.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Discounts.DiscountTranslation.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>
 The name.
 </value>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountTranslationCollection">
 <summary>
 The class DiscountTranslationCollection represents collection of discount translations 
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountTranslationCollection.Contains(System.String)">
 <summary>
 Determinate if contains the translation for given language id.
 </summary>
 <param name="languageId">The language id.</param>
 <returns><c>true</c> if contains translation for given language; otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Discounts.DiscountTranslationCollection.GetTranslationByLanguageId(System.String)">
 <summary>
 Gets the translation by language id.
 </summary>
 <param name="languageId">The language id.</param>
 <returns><see cref="T:Dynamicweb.Ecommerce.Orders.Discounts.DiscountTranslation" /> if one with the given language id exists; <c>null</c> otherwise.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.FeeType">
 <summary>
 Defines how a the amount of a fee on a orderline is calculated.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.FeeType.Fixed">
 <summary>
 The fee is a fixed amount. eg. $100 or kr. 34
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.FeeType.Percent">
 <summary>
 The fee is a percentage of the total price of the order.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.AuthorizationStatus">
 <summary>
 The AuthorizationStatus enumeration defines types of authorization used with the gateway.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.IAmountRefund">
 <summary>
 Implement this interface in your CheckOutHandler to support refunds
 </summary>
 <seealso cref="T:Dynamicweb.Ecommerce.Orders.Gateways.ICheckoutHandlerAction" />
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.ICancelOrder">
 <summary>
 Implement this interface in your CheckOutHandler to support canceling of orders
 </summary>
 <seealso cref="T:Dynamicweb.Ecommerce.Orders.Gateways.ICheckoutHandlerAction" />
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.IChangeOrder">
 <summary>
 Implement this interface in your CheckOutHandler to support changing orders
 </summary>
 <seealso cref="T:Dynamicweb.Ecommerce.Orders.Gateways.ICheckoutHandlerAction" />
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.ICheckAuthorizationStatus">
 <summary>
 Implement this interface in your CheckOutHandler to support different <seealso cref="T:Dynamicweb.Ecommerce.Orders.Gateways.AuthorizationStatus">authorization statuses</seealso>.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.ICheckOrderStatus">
 <summary>
 Implement this interface in your CheckOutHandler to support checking they payment status of the order
 </summary>
 <seealso cref="T:Dynamicweb.Ecommerce.Orders.Gateways.ICheckoutHandlerAction" />
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.IFullReturn">
 <summary>
 Implement this interface in your CheckOutHandler to support full returns
 </summary>
 <seealso cref="T:Dynamicweb.Ecommerce.Orders.Gateways.ICheckoutHandlerAction" />
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.IPartialReturn">
 <summary>
  Implement this interface in your CheckOutHandler to support partial returns
 </summary>
 <seealso cref="T:Dynamicweb.Ecommerce.Orders.Gateways.ICheckoutHandlerAction" />
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.IRecurring">
 <summary>
 Implement this interface in your CheckOutHandler to support recurring orders
 </summary>
 <seealso cref="T:Dynamicweb.Ecommerce.Orders.Gateways.ICheckoutHandlerAction" />
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.IRemotePartialCapture">
 <summary>
 Implement this interface in your CheckOutHandler to support remote partial capture
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.IRemotePartialCapture.Capture(Dynamicweb.Ecommerce.Orders.Order,System.Int64,System.Boolean)">
 <summary>
 Allow to make partial capture of order
 </summary>
 <param name="order">The order to capture.</param>
 <param name="amount">The amount that is multiplied by 100.</param>
 <param name="final">The capture is final.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.IRemotePartialCapture.CaptureSupported(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Gets is the order can be captured 
 </summary>
 <param name="order">The order to capture.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.IRemotePartialCapture.SplitCaptureSupported(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Gets is partial capture of the order supported
 </summary>
 <param name="order">The order to capture.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.IRemotePartialFinalOnlyCapture">
 <summary>
 Implement this interface in your CheckOutHandler to support remote partial capture but with possibility to capture only one with amount less then authorized
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.ISavedCard">
 <summary>
 Implement this interface in your CheckOutHandler to support saving cards to the user
 </summary>
 <seealso cref="T:Dynamicweb.Ecommerce.Orders.Gateways.ICheckoutHandlerAction" />
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.OrderOperations">
 <summary>
 The OrderOperations enumeration defines types operations that can be supported by gateway.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.GatewayProvider">
 <summary>
 Base class for creating a setting page for the payment gateway. 
 </summary>
 <example>
 <code description="" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\Gateways\GatewaySample.cs" lang="CS"></code>
 <code title="Example" description="" lang="VB">
 Public Class MyGateway Inherits GatewayProvider
     Public Overrides Sub Render(ByVal template As Rendering.Template, ByVal TagPreFix As String)
         MyBase.Render(template, TagPreFix)
         template.SetTag(TagPreFix + ".Email", Email)
         template.SetTag(TagPreFix + ".Price", Order.Price.Price.ToString("0.00", CultureInfo.InvariantCulture))
     End Sub
 
     Private _Email As String
     Public Property Email() As String
         Get
             Return _Email
         End Get
         Set(ByVal Value As String)
             _Email = Value
         End Set
     End Property
  End Class
 </code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Gateways.GatewayProvider.Merchant">
 <summary>
 Gets or sets the merchant.
 </summary>
 <value>The merchant.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Gateways.GatewayProvider.Template">
 <summary>
 Gets or sets the HTML template for gateway payment page.
 </summary>
 <value>The template.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Gateways.GatewayProvider.Order">
 <summary>
 Gets or sets the order object.
 </summary>
 <value>The order.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Gateways.GatewayProvider.PageView">
 <summary>
 Gets or sets the page view object.
 </summary>
 <value>The page view.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.GatewayProvider.Render(Dynamicweb.Rendering.Template,System.String)">
 <example>
 <code title="Example" description="" lang="CS">
 public override void Render(Rendering.Template template, String TagPreFix)
 {
     base.Render(template, TagPreFix);
     template.SetTag(TagPreFix + ".Email", Email);
     template.SetTag(TagPreFix + ".Price", order.Price.Price.ToString("0.00", CultureInfo.InvariantCulture));
 }
 </code>
 </example>
 <summary>
 Renders the specified template. 
 </summary>
 <param name="template">The template.</param>
 <param name="tagPreFix">The tag prefix.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.GatewayProvider.GetReturnValuesFromUrl(Dynamicweb.Ecommerce.Orders.Order)">
 <example>
 <code title="Example" description="" lang="CS">
 public override void GetReturnValuesFromUrl(Order order)
	{
		String txn_id = Dynamicweb.Context.Current.Request("txn_id");
		String paymentStatus = Dynamicweb.Context.Current.Request("payment_status");

		order.GatewayResult = String.Format("&lt;{0}&gt;{1}&lt;/{0}&gt;", "result", paymentStatus );
     order.TransactionNumber = transnum;
     order.UpdateGatewayResult(true);
	}
 </code>
 </example>
 <summary>
 Gets the return values from URL. Executed when we get result from gateway 
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.GatewayProvider.GetAvailableGatewayPaymentStates">
 <example>
 <code title="Example" description="" lang="CS">
 public override List&lt;String&gt; GetAvailableGatewayPaymentStates()
	{
		List&lt;String&gt; list = new List&lt;String &gt;();
	    list.Add(GatewayPaymentStatus.ChargedBack)
	    list.Add(GatewayPaymentStatus.ClosedSuccess)
	    list.Add(GatewayPaymentStatus.ClosedCanceled)
	    list.Add(GatewayPaymentStatus.Paid)
	    list.Add(GatewayPaymentStatus.Started)
	    return list
	}
 </code>
 </example>
 <summary>
 Gets the list of available gateway payment states.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.GatewayProvider.GetGatewayPaymentStatusXslt">
 <summary>
 Gets the gateway payment status XSLT.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.GatewayProvider.OnBeforeRenderStep5">
 <example>
 <code title="Example" description="Set a unique ID on the order" lang="CS">
 public overrides void OnBeforeRenderStep5()
 {
    order.GatewayUniqueID = Dynamicweb.eCommerce.Common.NumberGenerator.GetNumber("ORDERGATEWAYUNIQUEID");
    order.Save();
	}
 </code>
 </example>
 <summary>
 Called before rendering of step5 (before redirect to gateway site).
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.GatewayProvider.GetGatewayFromPaymentId(System.String)">
 <summary>
 Gets the gateway from payment ID.
 </summary>
 <param name="paymentId">The payment ID.</param>
 <returns></returns>
 <remarks>See also GetGatewayFromPayment function</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.GatewayProvider.GetGatewayFromPayment(Dynamicweb.Ecommerce.Orders.Payment)">
 <example>
 <code title="Example" description="" lang="CS">
  Dynamicweb.eCommerce.Orders.Order order = New Dynamicweb.eCommerce.Orders.Order(Dynamicweb.Context.Current.Request("orderID"))
  Dynamicweb.eCommerce.Orders.Gateways.GatewayProvider gateway = Dynamicweb.eCommerce.Orders.Gateways.GatewayProvider.GetGatewayFromPayment(New Dynamicweb.eCommerce.Orders.Payment(order.PaymentMethodID))
 </code>
 </example>
 <summary>
 Gets the gateway from payment.
 </summary>
 <param name="payment">The payment.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.GatewayProvider.SetOrderComplete(Dynamicweb.Ecommerce.Orders.Order,System.String,System.String)">
 <summary>
 Mark the order as complete.
 </summary>
 <param name="order">The order.</param>
 <param name="transactionId">The transaction ID.</param>
 <param name="gatewayResult">The gateway result.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.GatewayProvider.TrackOrderComplete(Dynamicweb.Ecommerce.Orders.Order@)">
 <summary>
 Track order complete
 </summary>
 <param name="order"></param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.IActionController">
 <summary>
 Implement this interface in your GatewayProvider to handle actions
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.ICheckoutHandlerAction">
 <summary>
 Base interface for Checkout handler actions. Should not be implemented directly
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.IGatewayCallBack">
 <example>
 <code title="Example" description="Implementation of interface to check callback result and mark order as complete" lang="CS">
	public void ProcessGatewayCallBack() 
{
    //Get orderID
    String orderID  = HttpContext.Current.Request("_OID_");
    if( String.IsNullOrEmpty(orderID) ) {
        LogError("OrderID (_OID_) is null or empty");
        return;
    }

    //Get order
    Order order = order.Create(orderID);
    if( String.IsNullOrEmpty(order.Id) ) {
        LogError(String.Format("OrderID returned from gateway is '{0}', but no order by that ID exists", orderID));
        return;
    }

    //Get transaction number
    String transactionNumber = HttpContext.Current.Request("transact");
    if( String.IsNullOrEmpty(transactionNumber) ) {
        LogError("gateway returned no transaction number");
        return;
    }

    //Log event
    LogEvent("gateway callback. OrderID: '{0}', transaction number: '{1}'", orderID, transactionNumber);

    //Set complete
    SetOrderComplete(order, transactionNumber, "");
}
 </code>
 </example>
 <summary>
 Implement this interface in your GatewayProvider to fully control the callback
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.IRemoteCapture">
 <example>
 <code title="Example" description="Implementation of interface to get status of payment from gateway" lang="CS">
 public OrderCaptureInfo Capture(Order order) 
	{
     OrderCaptureInfo captureInfo = new OrderCaptureInfo(OrderCaptureInfo.OrderCaptureState.Failed, "");

     //Create HTTP POST request to gateway API.
     WebRequest request = WebRequest.Create("https://secure.gateway.com/api");

     //Create byte array with POST data
     String httpContent = 
         "protocol=" + Protocol +
         "&amp;msgtype=" + MsgTypes.capture.ToString() +
         "&amp;merchant=" + Merchant +
         "&amp;amount=" + Amount(order) +
         "&amp;transaction=" + Converter.ToString(order.TransactionNumber) +
         "&amp;md5check=" + MD5SumForCapture(order);
     Byte[] values = Text.Encoding.UTF8.GetBytes(httpContent);

     //Set headers
     request.Method = "POST";
     request.ContentType = "application/x-www-form-urlencoded";
     request.ContentLength = values.Length;

     //Get output stream and write content values
     using( System.IO.Stream stream = request.GetRequestStream())
	    {
         stream.Write(values, 0, values.Length);
     }

     //Get response from gateway
     WebResponse response = request.GetResponse();
     LogEvent("Remote capture for '{0}': HttpStatusCode = {1}, HttpStatusDescription = {2}", order.Id, CType(response, HttpWebResponse).StatusCode, CType(response, HttpWebResponse).StatusDescription);
 }
 </code>
 </example>
 <summary>
 Implement this interface in your CheckOutHandler to support remote capture
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Gateways.OrderManager">
 <summary>
 The class OrderManager represents manager for gateways.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.OrderManager.#ctor(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Gateways.OrderManager" /> class.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.OrderManager.CheckOrderStatus">
 <summary>
 Checks order status.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.OrderManager.CancelOrder">
 <summary>
 Cancels order.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.OrderManager.ChangeOrder">
 <summary>
 Changes order.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.OrderManager.Capture">
 <summary>
 Captures order.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.OrderManager.PartialCapture(System.Int64,System.Boolean)">
 <summary>
 Partially captures order.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.OrderManager.AmountRefund(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Refunds amount for order.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.OrderManager.PartialReturn(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Partially returns order.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.OrderManager.PartialReturn(System.Double)">
 <summary>
 Partially returns order.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.OrderManager.FullReturn">
 <summary>
 Full returns order.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.OrderManager.Recurring">
 <summary>
 Creates recurring order delivery.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.OrderManager.SavedCard">
 <summary>
 Saves card for order.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.OrderManager.CheckAuthorizationStatus">
 <summary>
 Checks the order authorization status.
 </summary>
 <return>The <seealso cref="T:Dynamicweb.Ecommerce.Orders.Gateways.AuthorizationStatus">status</seealso>.</return>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.OrderManager.IsOperationSupported(Dynamicweb.Ecommerce.Orders.Gateways.OrderOperations)">
 <summary>
 Checks if operation supported by order gateway.
 </summary>
 <param name="operation"></param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Gateways.OrderManager.GetFor(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Gets order manager instance for an order.
 </summary>
 <param name="order">The order.</param>
 <returns>The order manager instance.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineRepository.Delete(System.String)">
 <summary>
 Deletes the Order line.
 </summary>
 <param name="lineId">The Order line ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineRepository.GetOrderLines(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Gets the order lines for the specified order.
 </summary>
 <param name="order">The Order.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineRepository.GetOrderLine(System.String)">
 <summary>
 Gets the order line by ID.
 </summary>
 <param name="orderLineId">The Order line ID.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineService.SetUnitPrice(Dynamicweb.Ecommerce.Orders.OrderLine,System.Double)">
 <summary>
 Sets the unit price.
 </summary>
 <param name="orderLine">The Order line.</param>
 <param name="theUnitPrice">The unit price.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineService.SetUnitPrice(Dynamicweb.Ecommerce.Orders.OrderLine,System.Double,System.Boolean)">
 <summary>
 Sets the unit price.
 </summary>
 <param name="orderLine">The Order line.</param>
 <param name="theUnitPrice">The unit price.</param>
 <param name="applyToCurrentProductSettings">Determines whether price should be applied to the order line product.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineService.SetUnitPrice(Dynamicweb.Ecommerce.Orders.OrderLine,Dynamicweb.Ecommerce.Prices.PriceInfo)">
 <summary>
 Sets the unit price.
 </summary>
 <param name="orderLine">The Order line.</param>
 <param name="priceInfo">The unit price.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineService.SetUnitPrice(Dynamicweb.Ecommerce.Orders.OrderLine,Dynamicweb.Ecommerce.Prices.PriceInfo,System.Boolean)">
 <summary>
 Sets the unit price.
 </summary>
 <param name="orderLine">The Order line.</param>
 <param name="priceInfo">The unit price.</param>
 <param name="forcePriceRecalculation">Determines whether the order line price should be recalculated.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineService.ClearCachedPrices(Dynamicweb.Ecommerce.Orders.OrderLine)">
 <summary>
 Clears the cached price.
 </summary>
 <param name="orderLine">The Order line.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineService.SetProductInformation(Dynamicweb.Ecommerce.Orders.OrderLine,Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Sets the product information.
 Usually used for BOM products.
 </summary>
 <param name="orderLine">The Order line.</param>
 <param name="product">The product.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineService.Delete(System.String)">
 <summary>
 Deletes the Order line.
 </summary>
 <param name="orderLineId">The Order line ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineService.CanBeMerged(Dynamicweb.Ecommerce.Orders.OrderLine,Dynamicweb.Ecommerce.Orders.OrderLine)">
 <summary>
 Determines whether the <paramref name="orderLine"/> can be merged with the <paramref name="another"/> order line.
 </summary>
 <param name="orderLine"></param>
 <param name="another">The other order line.</param>
 <returns><c>true</c> if the <paramref name="orderLine"/> can be merged with <paramref name="another"/> order line; otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineService.GetOrderLineType(System.Int32)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineType" /> of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" />.
 </summary>
 <param name="orderLineType">The integer equivalent of <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineType" />.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineType"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineService.GetOrderLineType(System.String)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineType" /> of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" />.
 </summary>
 <param name="orderLineType">The string equivalent of <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineType" />.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineType"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineService.GetProductImage(Dynamicweb.Ecommerce.Orders.OrderLine,System.Nullable{System.Int32})">
 <summary>
 Returns the path to the product image.
 </summary>
 <param name="areaId">The ID of the area.</param>
 <returns>The path to the product image.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineService.GetOrderLines(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Gets the lines of the specified order.
 </summary>
 <param name="order">The Order.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineService.GetOrderLine(System.String)">
 <summary>
 Gets the order line by ID.
 </summary>
 <param name="orderLineId">The Order line ID.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineService.Save(Dynamicweb.Ecommerce.Orders.OrderLine)">
 <summary>
 Saves the order line.
 </summary>
 <param name="orderLine">The Order line.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineService.Save(System.String,System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Orders.OrderLine})">
 <summary>
 Saves the order lines.
 </summary>
 <param name="orderId">The Order ID of the order lines.</param>
 <param name="orderLines">The Order lines.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderRepository">
 <summary>
 The OrderRepository providing persistence operations for the Order aggregate.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.UpdateCartToQuote(Dynamicweb.Ecommerce.Orders.Order,System.String)">
 <summary>
 Updates the cart to quote.
 </summary>
 <param name="order">The Order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.DowngradeToCart(Dynamicweb.Ecommerce.Orders.Order,System.String)">
 <summary>
 Converts the order back to cart.
 </summary>
 <param name="order">The Order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.UpdateVat(System.String,System.Double)">
 <summary>
 Updates the order VAT.
 </summary>
 <param name="orderId">The Order ID.</param>
 <param name="newVat">The new VAT value.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.UpdateVat(System.String,System.Double,System.Double)">
 <summary>
 Updates the order VAT.
 </summary>
 <param name="orderId">The Order ID.</param>
 <param name="newVat">The new VAT value.</param>
 <param name="newVatPercent">The new VAT percent value.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.UpdateCartToOrder(Dynamicweb.Ecommerce.Orders.Order,System.String)">
 <summary>
 Updates the cart to order.
 </summary>
 <param name="order">The Order.</param>
 <param name="newOrderId">The new Order ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.UpdateGatewayResult(Dynamicweb.Ecommerce.Orders.Order,System.Boolean)">
 <summary>
 Updates the gateway result.
 </summary>
 <param name="order">The Order.</param>
 <param name="setComplete">If set to <c>true</c>, the Order complete state will be also set to <c>true</c>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.SetOrderComplete(System.String)">
 <summary>
 Sets the order complete state to true.
 </summary>
 <param name="orderId">The Order ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.SaveGatewayResult(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Saves the gateway result.
 </summary>
 <param name="order">The Order.</param>
 <returns>The affected rows number.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.UpdateStepInfo(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Updates the order step information.
 </summary>
 <param name="order">The Order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.GetOrderDataReader(System.String)">
 <summary>
 Gets the DataReader with order.
 </summary>
 <param name="orderId">The Order ID.</param>
 <returns>The <see cref="T:System.Data.IDataReader"/> object.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.ValidatePricesInDatabase(Dynamicweb.Ecommerce.Orders.Order,System.Double@,System.Double@,System.Double@)">
 <summary>
 Validates the prices in database.
 </summary>
 <param name="order">The Order.</param>
 <param name="orderPrice">Sets the order price if prices are invalid.</param>
 <param name="orderlinePrice">Sets the order lines price if prices are invalid.</param>
 <param name="priceDifference">Sets the price difference if prices are invalid.</param>
 <returns><c>true</c> if prices are valid, otherwise <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.Delete(System.String)">
 <summary>
 Deletes the order.
 </summary>
 <param name="orderId">The Order ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.GetOrderDataSet(System.String)">
 <summary>
 Gets the DataSet object for the EcomOrders table.
 </summary>
 <param name="orderId">The Order ID.</param>
 <returns>The <see cref="T:System.Data.DataSet"/> object.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.GetOrder(System.String)">
 <summary>
 Gets the order by ID.
 </summary>
 <param name="orderId">The Order ID.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>, or <c>null</c>, if nothing found.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.GetOrder(System.Int32)">
 <summary>
 Gets the order by auto ID.
 </summary>
 <param name="orderAutoId">The Auto ID.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>, or <c>null</c>, if nothing found.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.GetOrders">
 <summary>
 Gets all orders in solution.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.GetTopOrders(System.Int32)">
 <summary>
 Gets the specified number of the top Orders.
 </summary>
 <param name="count">The count of Orders.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>, ordered by creation date (descending), then by order ID (descending).</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.GetCompletedOrders(System.Int32,System.String,System.String)">
 <summary>
 Gets the compleated orders.
 </summary>
 <param name="customerId">The customer ID. Set to 0 to skip this argument.</param>
 <param name="customerNumber">The customer number. Set to "" to skip this argument.</param>
 <param name="shopIds">The shop IDs. Set to "" to skip this argument.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.FindOrders(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
 <summary>
 Finds the orders by parameters.
 </summary>
 <param name="keyword">The search keyword.</param>
 <param name="stateId">The state ID.</param>
 <param name="startdate">The search interval start date. Field used for search is OrderDate.</param>
 <param name="enddate">The search interval end date. Field used for search is OrderDate.</param>
 <param name="showCart">The value indicating whether the carts should be included in results or not.</param>
 <param name="shopId">The shop ID.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.GetTotalPurchasesByCustomerId(System.Int32,System.DateTime,Dynamicweb.Ecommerce.International.Currency)">
 <summary>
 Gets the total purchase price by customer ID.
 </summary>
 <param name="customerId">The User ID.</param>
 <param name="fromDate">The search interval start date. Field used for search is OrderDate.</param>
 <param name="priceCurrency">The Currency.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceInfo"/> object.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.UpdateOrderState(Dynamicweb.Ecommerce.Orders.Order,System.String)">
 <summary>
 Updates the order state.
 </summary>
 <param name="order">The Order ID.</param>
 <param name="newStateId">The new Order state.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.UpdateOrderId(System.String,System.String)">
 <summary>
 Updates the Order ID.
 </summary>
 <param name="oldOrderId">The old Order ID.</param>
 <param name="newOrderId">The new Order ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.IsOrderComplete(System.String)">
 <summary>
 Gets the value determines whether the order is completed or not.
 </summary>
 <param name="orderId">The Order ID.</param>
 <returns><c>true</c>, if the <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/> is completed, otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.Save(Dynamicweb.Ecommerce.Orders.Order,System.Int32)">
 <summary>
 Saves the order.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.GetPreviousOrderIds(System.Int32)">
 <summary>
 Gets the previous recurring orders IDs.
 </summary>
 <param name="recurringOrderId">The recurring order ID.</param>
 <returns>The collection of the order IDs.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.GetCustomerUnclosedOrders(System.Int32)">
 <summary>
 Gets unclosed orders of customer.
 </summary>
 <param name="customerId">The user ID.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.GetCustomerOrdersByType(System.Int32,System.String,Dynamicweb.Ecommerce.Orders.OrderType,System.Int32,System.String,System.String,System.DateTime)">
 <summary>
 Gets customer's orders of specified type.
 </summary>
 <param name="customerId">The user ID.</param>
 <param name="shopIds">The shop IDs.</param>
 <param name="orderType">The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderType"/>.</param>
 <param name="recurringOrderId">The ID of the recurring order.</param>
 <param name="customerNumber">The user customer number.</param>
 <param name="orderContextIds">The order context IDs.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.GetCompletedOrdersPriceAndAmount(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Gets number and sum of the completed orders from the specified IDs.
 </summary>
 <param name="orderIds">The order IDs.</param>
 <returns>The <see cref="T:System.Tuple`2"/> object contains the orders sum and number.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.HasOrdersWithStateId(System.String)">
 <summary>
 Gets the orders with the specified order ID.
 </summary>
 <param name="stateId">The state ID.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderRepository.HasLedgers">
 <summary>
 Gets the value indicating whether the Solution have ledgers.
 </summary>
 <returns><c>true</c> if ledger number is more than 0, otherwise <c>false</c>.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderReturnInfo">
 <summary>
 Represents return information about order. 
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderReturnInfo.State">
 <summary>
 Gets or sets the state.
 </summary>
 <value>The state.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderReturnInfo.Amount">
 <summary>
 Gets or sets the return amount.
 </summary>
 <value>The return amount.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderReturnInfo.Message">
 <summary>
 Gets or sets the message.
 </summary>
 <value>The message.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderReturnInfo.ReturnTime">
 <summary>
 Gets or sets the return time.
 </summary>
 <value>The return time.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderReturnInfo.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderReturnInfo" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderReturnInfo.#ctor(Dynamicweb.Ecommerce.Orders.OrderReturnOperationState,System.String,System.Double)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderReturnInfo" /> class.
 </summary>
 <param name="state">The return state.</param>
 <param name="message">The message.</param>
 <param name="amount">The amount to return.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderReturnInfo.SaveReturnOperation(Dynamicweb.Ecommerce.Orders.OrderReturnOperationState,System.String,System.Double,Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Adds new operation to order and saves the order instance
 </summary>
 <param name="state">The return state.</param>
 <param name="message">The message.</param>
 <param name="amount">The amount to return.</param>
 <param name="order">The order to return.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderReturnInfo.SerializeToString(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Orders.OrderReturnInfo})">
 <summary>
 Creates a XML string with the values.
 </summary>
 <returns>The XML.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderReturnInfo.Parse(System.String)">
 <summary>
 Parses the specified XML settings.
 </summary>
 <param name="xmlSettings">The XML.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderReturnOperationState">
 <summary>
 Return state.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderReturnOperationState.FullyReturned">
 <summary>
 Full returned
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderReturnOperationState.PartiallyReturned">
 <summary>
 Partial returned
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderReturnOperationState.Failed">
 <summary>
 Failed
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderService">
 <summary>
 The OrderService class providing methods for querying and saving The Order aggregate to and from persistence.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.Capture(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Performs capture on the order and stores the resulting OrderCaptureInfo on the order.
 </summary>
 <param name="order">The Order.</param>
 <returns>The generated <see cref="T:Dynamicweb.Ecommerce.Orders.OrderCaptureInfo"/> object, or null if capture is not supported.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.Capture(Dynamicweb.Ecommerce.Orders.Order,System.Int64,System.Boolean)">
 <summary>
 Performs capture on the order and stores the resulting OrderCaptureInfo on the order.
 </summary>
 <param name="order">The Order.</param>
 <param name="amount">The amount that is multiplied by 100.</param>
 <param name="final">The capture is final.</param>
 <returns>The generated <see cref="T:Dynamicweb.Ecommerce.Orders.OrderCaptureInfo"/> object, or null if capture is not supported.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.UpdateCartToQuote(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Updates the cart to quote.
 </summary>
 <param name="order">The Order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.DowngradeToCart(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Converts the order back to cart.
 </summary>
 <param name="order">The Order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.UpdateVat(Dynamicweb.Ecommerce.Orders.Order,System.Double)">
 <summary>
 Updates the order VAT.
 </summary>
 <param name="order">The Order.</param>
 <param name="newVat">The new VAT value.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.UpdateVat(Dynamicweb.Ecommerce.Orders.Order,System.Double,System.Double)">
 <summary>
 Updates the order VAT.
 </summary>
 <param name="order">The Order.</param>
 <param name="newVat">The new VAT value.</param>
 <param name="newVatPercent">The new VAT percent value.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.UpdateCartToOrder(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Updates the cart to order.
 </summary>
 <param name="order">The Order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.UpdateGatewayResult(Dynamicweb.Ecommerce.Orders.Order,System.Boolean)">
 <summary>
 Updates the gateway result.
 </summary>
 <param name="order">The Order.</param>
 <param name="setComplete">If set to <c>true</c>, the Order complete state will be also set to <c>true</c>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.SetOrderComplete(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Sets the order complete state to true.
 </summary>
 <param name="order">The Order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.SaveGatewayResult(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Saves the gateway result.
 </summary>
 <param name="order">The Order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.UpdateStepInfo(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Updates the order step information.
 </summary>
 <param name="order">The Order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.ValidatePricesInDatabase(Dynamicweb.Ecommerce.Orders.Order,System.Double@,System.Double@,System.Double@)">
 <summary>
 Validates the prices in database.
 </summary>
 <param name="order">The Order.</param>
 <param name="orderPrice">Sets the order price if prices are invalid.</param>
 <param name="orderlinePrice">Sets the order lines price if prices are invalid.</param>
 <param name="priceDifference">Sets the price difference if prices are invalid.</param>
 <returns><c>true</c> if prices are valid, otherwise <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.Delete(System.String)">
 <summary>
 Deletes the order.
 </summary>
 <param name="orderId">The Order ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.GetAllOrderVersions(System.String)">
 <summary>
 Gets all versions for the order.
 </summary>
 <param name="orderId">The Order ID.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.GetOrder(System.String)">
 <summary>
 Gets the order by ID.
 </summary>
 <param name="orderId">The Order ID.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>, or <c>null</c>, if nothing found.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.GetOrder(System.Int32)">
 <summary>
 Gets the order by auto ID.
 </summary>
 <param name="orderAutoId">The Auto ID.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>, or <c>null</c>, if nothing found.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.GetOrders">
 <summary>
 Gets all orders in solution.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.GetTopOrders(System.Int32)">
 <summary>
 Gets the specified number of the top Orders, ordered by creation date (descending), then by order ID (descending).
 </summary>
 <param name="count">The count of Orders.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.GetCompletedOrders(System.Int32,System.String,System.String)">
 <summary>
 Gets the compleated orders.
 </summary>
 <param name="customerId">The customer ID. Set to 0 to skip this argument.</param>
 <param name="customerNumber">The customer number. Set to "" to skip this argument.</param>
 <param name="shopIds">The shop IDs. Set to "" to skip this argument.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.FindOrders(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
 <summary>
 Finds the orders by parameters.
 </summary>
 <param name="keyword">The search keyword.</param>
 <param name="stateId">The state ID.</param>
 <param name="startdate">The search interval start date. Field used for search is OrderDate.</param>
 <param name="enddate">The search interval end date. Field used for search is OrderDate.</param>
 <param name="showCart">The value indicating whether the carts should be included in results or not.</param>
 <param name="shopId">The shop ID.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.GetTotalPurchasesByCustomerId(System.Int32,System.DateTime,Dynamicweb.Ecommerce.International.Currency)">
 <summary>
 Gets the total purchase price by customer ID.
 </summary>
 <param name="customerId">The User ID.</param>
 <param name="fromDate">The search interval start date. Field used for search is OrderDate.</param>
 <param name="priceCurrency">The Currency.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceInfo"/> object.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.UpdateQuoteState(Dynamicweb.Ecommerce.Orders.Order,System.String)">
 <summary>
 Updates the quote state.
 </summary>
 <param name="order">The Order ID.</param>
 <param name="stateId">The new Order state.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.UpdateOrderId(Dynamicweb.Ecommerce.Orders.Order,System.String)">
 <summary>
 Updates the Order ID.
 </summary>
 <param name="order">The Order.</param>
 <param name="newOrderId">The new Order ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.IsOrderComplete(System.String)">
 <summary>
 Gets the value determines whether the order is completed or not.
 </summary>
 <param name="orderId">The Order ID.</param>
 <returns><c>true</c>, if the <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/> is completed, otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.Save(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Saves the order.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.Save(Dynamicweb.Ecommerce.Orders.Order,System.Boolean)">
 <summary>
 Saves the order.
 </summary>
 <param name="order">The order.</param>
 <param name="saveOldVersion">Determines whether the Order should be saved to history.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.GetPreviousOrderIds(System.Int32)">
 <summary>
 Gets the previous recurring orders IDs.
 </summary>
 <param name="recurringOrderId">The recurring order ID.</param>
 <returns>The collection of the order IDs.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.SendEmail(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Frontend.PageView@,System.String,System.String,System.String,System.String,Dynamicweb.Rendering.Template@)">
 <summary>
 Sends the mail to the specified address.
 </summary>
 <param name="order">The Order.</param>
 <param name="pageView">The page view.</param>
 <param name="subject">The subject.</param>
 <param name="toMailAddress">The recipient email address.</param>
 <param name="fromMailAddress">The sender email address.</param>
 <param name="fromMailName">The sender name.</param>
 <param name="mailTemplate">The templpate.</param>
 <returns><c>true</c> if mail was successfully sent, otherwise <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.SendEmail(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Frontend.PageView@,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,Dynamicweb.Rendering.Template@)">
 <summary>
 Sends the mail to the specified addresses.
 </summary>
 <param name="order">The Order.</param>
 <param name="pageView">The page view.</param>
 <param name="subject">The subject.</param>
 <param name="toMailAddresses">The recipients email addresses.</param>
 <param name="fromMailAddress">The sender email address.</param>
 <param name="fromMailName">The sender name.</param>
 <param name="mailTemplate">The templpate.</param>
 <returns><c>true</c> if mail was successfully sent, otherwise <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.GetCartFormName(System.String)">
 <summary>
 Gets the name of the cart form.
 </summary>
 <param name="orderId">The Cart ID.</param>
 <returns>"CartForm_[ID]"</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.CreateOrderLine(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Ecommerce.Products.Product,System.Double,Dynamicweb.Ecommerce.Stocks.StockUnit,Dynamicweb.Ecommerce.Prices.PriceInfo)">
 <summary>
 Adds a new <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> to the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineCollection" /> of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> based on the given <see cref="T:Dynamicweb.Ecommerce.Products.Product" />.
 </summary>
 <param name="order">The Order.</param>
 <param name="product">The Product.</param>
 <param name="quantity">The quantity.</param>
 <param name="unit">The stock uint.</param>
 <param name="unitPrice">The unit price.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> that was added to the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" />.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.CreateOrderLine(Dynamicweb.Ecommerce.Orders.Order,System.String,System.Double,Dynamicweb.Ecommerce.Prices.PriceInfo,Dynamicweb.Ecommerce.Orders.OrderLineType,System.String,System.String)">
 <summary>
 Adds a new <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> to the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineCollection" /> of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> with the given <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineType" /> and the given text.
 </summary>
 <param name="order">The Order.</param>
 <param name="text">The line text.</param>
 <param name="quantity">The quantity.</param>
 <param name="unitPrice">The unit price.</param>
 <param name="type">The order line price.</param>
 <param name="parentOrderLineId">The parent order line ID.</param>
 <param name="discountId">The discount ID.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> that was added to the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" />.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.ClearCachedPrices(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Clears the cached prices.
 </summary>
 <param name="order">The Order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.ForcePriceRecalculation(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Forces the recalculation of the Price.
 </summary>
 <param name="order">The Order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.GetPropertyValue(Dynamicweb.Ecommerce.Orders.Order,System.String)">
 <summary>
 Gets the property value.
 </summary>
 <param name="order">The Order.</param>
 <param name="propertyName">The name of the property.</param>
 <returns>The property value.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.GetPropertyType(Dynamicweb.Ecommerce.Orders.Order,System.String)">
 <summary>
 Gets the property type.
 </summary>
 <param name="order">The Order.</param>
 <param name="propertyName">The name of the property.</param>
 <returns>The property type.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.RemoveNoneActiveProducts(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Removes all orderlines that is of type Product and that no longer exist in the database. Also removes products according to the control panel settings: Active, on stock, price is zero.
 </summary>
 <param name="order">The Order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.OrderLineBuilder(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig)">
 <summary>
 Builds an <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine"/> based on the given <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig"/>.
 </summary>
 <param name="builderConfiguration">The builder configuration.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.CalculateDiscounts(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Calculates the discounts for this <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>.
 If <see cref="P:Dynamicweb.Ecommerce.Orders.Order.RecalculateDiscountsNeeded"/> is <c>false</c> or if <see cref="P:Dynamicweb.Ecommerce.Orders.Order.Calculate"/> is <c>false</c>, discounts will not be calculated.
 </summary>
 <param name="order">The Order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.GetCustomerUnclosedOrders(System.Int32)">
 <summary>
 Gets unclosed orders of customer.
 </summary>
 <param name="customerId">The User ID.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.GetCustomerOrdersByType(System.Int32,System.String,Dynamicweb.Ecommerce.Orders.OrderType,System.Int32,System.Boolean,System.String,System.DateTime)">
 <summary>
 Gets customer's orders of specified type.
 </summary>
 <param name="customerId">The User ID.</param>
 <param name="shopIds">The Shops IDs.</param>
 <param name="orderType">The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderType"/>.</param>
 <param name="recurringOrderId">The ID of the recerring order.</param>
 <param name="useCustomerNumber">If set to <c>true</c>, search by customer number, otherwise search by customer ID.</param>
 <param name="orderContextIds">The order context IDs.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.GetLastFailedRecurringOrderId(System.Int32)">
 <summary>
 Gets the last failed recurring order ID.
 </summary>
 <param name="recurringOrderId">The recurring order ID.</param>
 <returns>The Order ID.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.RemoveOrderCache(System.String)">
 <summary>
 Removes order and its order lines from cache.
 </summary>
 <param name="orderId">The Order ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.GetOrderDataReader(System.String)">
 <summary>
 Gets the DataReader with order.
 </summary>
 <param name="orderId">The Order ID.</param>
 <returns>The <see cref="T:System.Data.IDataReader"/> object.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.GetOrderDataSet(System.String)">
 <summary>
 Gets the DataSet object for the EcomOrders table.
 </summary>
 <param name="orderId">The Order ID.</param>
 <returns>The <see cref="T:System.Data.DataSet"/> object.</returns>
 <remarks>
 If the <paramref name="orderId"/> parameter is not set, returns empty DataSet.
 </remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.GetOrderFromHistory(System.String,System.Int32)">
 <summary>
 Gets the order from history.
 </summary>
 <param name="orderId">The Order ID.</param>
 <param name="versionId">The Version ID.</param>
 <returns>The <see cref="T:System.Tuple`2"/> object contains the <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/> and the modification date.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.GetCompletedOrdersPriceAndAmount(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Gets number and sum of the completed orders from the specified IDs.
 </summary>
 <param name="orderIds">The order IDs.</param>
 <returns>The <see cref="T:System.Tuple`2"/> object contains the orders sum and number.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.UpdateCartToOrder(Dynamicweb.Ecommerce.Orders.Order,System.String)">
 <summary>
 Updates the cart to order.
 </summary>
 <param name="order">The Order.</param>
 <param name="newOrderId">The new Order ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.OrderProfitInformation.#ctor(System.String,System.String,System.DateTime,System.DateTime)">
 <summary>
 Creates a new instance of the class and initialize all properties.
 </summary>
 <param name="dateFrom">The date from.</param>
 <param name="dateTo">The date to.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.HasOrdersWithStateId(System.String)">
 <summary>
 Gets the orders with the specified order ID.
 </summary>
 <param name="stateId">The state ID.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderService.HasLedgers">
 <summary>
 Gets the value indicating whether the Solution have ledgers.
 </summary>
 <returns><c>true</c> if ledger number is more than 0, otherwise <c>false</c>.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.RecurringIntervalUnitType">
 <summary>
 The enum IntervalUnitType represents recurring interval types enumeration.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderLineType">
 <summary>
 Type of order line.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderLineType.Product">
 <summary>
 Product
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderLineType.Discount">
 <summary>
 Discount
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderLineType.Fixed">
 <summary>
 Fixed line
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderLineType.ProductDiscount">
 <summary>
 Product discount
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderLineType.Tax">
 <summary>
 Product tax
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderLineType.PointProduct">
 <summary>
 Product tax
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderLineType.GiftCard">
 <summary>
 Gift card
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.PaymentAddInTypes">
 <summary>
 Add in types.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.PaymentAddInTypes.None">
 <summary>
 None
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.PaymentAddInTypes.Gateway">
 <summary>
 Gateway
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.PaymentAddInTypes.Checkout">
 <summary>
 Check out
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationTypeHelper">
 <summary>
 The class ReturnMerchandiseAuthorizationTypeHelper represents helper for <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationType"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationTypeHelper.GetNameOfType(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationType)">
 <summary>
 Gets friendly name of given <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationType"/>.
 </summary>
 <param name="rmaType">The rma type.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization">
 <summary>
 The class ReturnMerchandiseAuthorization represent returning a product in order to receive a refund, replacement, or repair.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.Id">
 <summary>
 Gets the id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.Type">
 <summary>
 Gets or sets the type. The type can either be ProductReturn or ProductDefect.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.IsNew">
 <summary>
 Gets a value indicating whether this instance is new.
 </summary>
 <value>
   <c>true</c> if this instance is new; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.OrderLines">
 <summary>
 Gets rma order lines.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.ReplacementOrder">
 <summary>
 Gets the replacement order. If no replacement order exists then null is returned.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.History">
 <summary>
 Gets the history of this <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.Deleted">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> is deleted.
 </summary>
 <value>
   <c>true</c> if deleted; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.Closed">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> is closed.
 </summary>
 <value>
   <c>true</c> if closed; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.StateId">
 <summary>
 Gets or sets the ID of the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState" /> that this <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> is currently in.
 Can be used to change <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState" />.
 </summary>
 <value>
 The ID of the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState" />.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.State">
 <summary>
 Gets the current <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState" /> for this <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.
 </summary>
 
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.CustomerNumber">
 <summary>
 Gets or sets rma customer number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.CustomerCompany">
 <summary>
 Gets or sets rma customer company name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.CustomerName">
 <summary>
 Gets or sets rma customer name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.CustomerAddress">
 <summary>
 Gets or sets rma customer address.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.CustomerAddress2">
 <summary>
 Gets or sets rma customer address(2nd line).
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.CustomerZip">
 <summary>
 Gets or sets rma customer zip code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.CustomerCity">
 <summary>
 Gets or sets rma customer city.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.CustomerCountry">
 <summary>
 Gets or sets rma customer country.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.CustomerCountryCode">
 <summary>
 Gets or sets rma customer country code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.CustomerRegion">
 <summary>
 Gets or sets rma customer region.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.CustomerPhone">
 <summary>
 Gets or sets rma customer phone number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.CustomerFax">
 <summary>
 Gets or sets rma customer fax number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.CustomerRefId">
 <summary>
 Gets or sets rma customer referral id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.CustomerEmail">
 <summary>
 Gets or sets rma customer e-mail.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.CustomerCell">
 <summary>
 Gets or sets rma customer mobile phone number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.CustomerEan">
 <summary>
 Gets or sets rma customer EAN number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.CustomerVatRegNumber">
 <summary>
 Gets or sets rma customer VAT registration number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.DeliveryCompany">
 <summary>
 Gets or sets rma delivery company name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.DeliveryName">
 <summary>
 Gets or sets rma delivery name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.DeliveryAddress">
 <summary>
 Gets or sets rma delivery address.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.DeliveryAddress2">
 <summary>
 Gets or sets rma delivery address(2nd line).
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.DeliveryZip">
 <summary>
 Gets or sets rma delivery zip code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.DeliveryCity">
 <summary>
 Gets or sets rma delivery city.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.DeliveryCountry">
 <summary>
 Gets or sets rma delivery country.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.DeliveryCountryCode">
 <summary>
 Gets or sets rma delivery country code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.DeliveryRegion">
 <summary>
 Gets or sets rma delivery region.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.DeliveryPhone">
 <summary>
 Gets or sets rma delivery phone number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.DeliveryFax">
 <summary>
 Gets or sets rma delivery fax number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.DeliveryEmail">
 <summary>
 Gets or sets rma delivery e-mail.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.DeliveryCell">
 <summary>
 Gets or sets rma delivery mobile phone number.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetCustomerId">
 <summary>
 Get rma customer user Id
 </summary>
 <returns>Returns User Id if successfully, otherwise 0</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetOrder">
 <summary>
 Get rma order from order lines
 </summary>
 <returns>Returns Order if successfully, otherwise Nothing</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.Clone">
 <summary>
 Clones this rma instance.
 </summary>
 <returns>The cloned instance.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.Save">
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.AddOrderLine(Dynamicweb.Ecommerce.Orders.OrderLine,System.String)">
 <summary>
 Adds the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> to this <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.
 </summary>
 <param name="orderLine">The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" />.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.AddComment(System.String)">
 <summary>
 Adds the comment to the History for this <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.
 </summary>
 <param name="comment">The comment.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.AddComment(System.String,Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCommentImageCollection)">
 <summary>
 Adds the comment with a <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCommentImageCollection" /> to the History for this <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.
 </summary>
 <param name="comment">The comment.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetRmaById(System.String)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> by id.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetRmasByCustomerId(System.Int64,System.String,System.String)">
 <summary>
 Get MerchandiseAuthorizationCollection By Customer Id
 </summary>
 <param name="customerId">The customer id.</param>
 <param name="sortColumn">The column used for sorting.</param>
 <param name="sortOrder">The sorting order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetRmasByCustomerId(System.Int64,System.String,System.String,System.String)">
 <summary>
 Get MerchandiseAuthorizationCollection By Customer and shop Id
 </summary>
 <param name="customerId">The customer id.</param>
 <param name="sortColumn">The column used for sorting.</param>
 <param name="sortOrder">The sorting order.</param>
 <param name="shopIDs">The shops IDs.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetRmasByCustomerId(System.Int64,System.String,System.String,System.String,System.String)">
 <summary>
 Get MerchandiseAuthorizationCollection By Customer and shop Id
 </summary>
 <param name="customerId">The customer id.</param>
 <param name="sortColumn">The column used for sorting.</param>
 <param name="sortOrder">The sorting order.</param>
 <param name="shopIDs">The shops IDs.</param>
 <param name="orderContextIDs">The order contexts ids</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetRmasByCustomerNumber(System.String,System.String,System.String,System.String)">
 <summary>
 Get MerchandiseAuthorizationCollection By Customer number
 </summary>
 <param name="customerNumber">Customer number</param>
 <param name="sortColumn">The column used for sorting.</param>
 <param name="sortOrder">The sorting order.</param>
 <param name="shopIDs">The shops IDs.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetRmasByCustomerNumber(System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Get MerchandiseAuthorizationCollection By Customer number
 </summary>
 <param name="customerNumber">Customer number</param>
 <param name="sortColumn">The column used for sorting.</param>
 <param name="sortOrder">The sorting order.</param>
 <param name="shopIDs">The shops IDs.</param>
 <param name="orderContextIDs">The order contexts ids</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetRmas(System.Int64,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Get MerchandiseAuthorizationCollection By Customer and shop Id
 </summary>
 <param name="customerId">The customer id.</param>
 <param name="sortColumn">The column used for sorting.</param>
 <param name="sortOrder">The sorting order.</param>
 <param name="shopIDs">The shops IDs.</param>
 <param name="customerNumber">Customer number</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetAllAvailableOrdersByCustomerId(System.Int64)">
 <summary>
 Get all available orders for rma by customer id
 </summary>
 <param name="customerId">The customer id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetAllAvailableOrdersByCustomerId(System.Int64,System.String)">
 <summary>
 Get all available orders for rma by customer and shop id
 </summary>
 <param name="customerId">The customer id.</param>
 <param name="shopIDs">The shops IDs.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetAllAvailableOrdersByCustomerNumber(System.String)">
 <summary>
 Get all available orders for rma by customer number
 </summary>
 <param name="customerNumber">Customer number</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetRmasByOrderId(System.String)">
 <summary>
 Gets a <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCollection" /> containing all <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> objects associated with the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> id.
 </summary>
 <param name="orderId">The <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetRmasByOrderLineId(System.String)">
 <summary>
 Gets a <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCollection" /> containing all <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> associated with the Id of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" />.
 </summary>
 <param name="orderLineId">The Id of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" />.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetRmaByReplacementOrderId(System.String)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> associated with the replacement <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> id.
 </summary>
 <param name="orderId">The replacement <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetRmasByShopId(System.String)">
 <summary>
 Gets a <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCollection" /> containing all <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> objects associated with the <see cref="T:Dynamicweb.Ecommerce.Shops.Shop" /> id.
 </summary>
 <param name="shopId">The ID of the <see cref="T:Dynamicweb.Ecommerce.Shops.Shop" />.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetAllNotDeletedRmas">
 <summary>
 Gets all not Deleted <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.
 This <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCollection" /> contains all <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> objects that have not been marked as Deleted.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetAllRmas">
 <summary>
 Gets a <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCollection" /> containing all <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> objects.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization.GetRmasBySql(System.String)">
 <summary>
 Gets a <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCollection" /> by SQL query.
 </summary>
 <param name="query">The SQL query.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCollection">
 <summary>
 The class ReturnMerchandiseAuthorizationCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCollection.FilterByStateId(System.Int32)">
 <summary>
 Filters this rma collection by <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState"/> with given id.
 </summary>
 <param name="selectedValue">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCollection.FilterByTextString(System.String)">
 <summary>
 Filters this rma collection by text.
 </summary>
 <param name="filter">The text.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCollection.FilterByDeleted">
 <summary>
 Filters this rma collection by indicating whether rma is deleted.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCollection.FilterByType(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationType)">
 <summary>
 Filters this rma collection by <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationType"/>.
 </summary>
 <param name="returnMerchandiseAuthorizationType">The type.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCollection.FilterByClosed">
 <summary>
 Filters this rma collection by indicating whether rma is closed.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCollection.FilterByOpen">
 <summary>
 Filters this rma collection by indicating whether rma is open.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCollection.RemoveCollection(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCollection)">
 <summary>
 Removes given rma collection from this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCollection.GetRmasForPage(System.Int32,System.Int32)">
 <summary>
 Gets rma collection for page with given page settings.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCollection.AddRange(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization})">
 <summary>
 Adds a range of products to this collection.
 </summary>
 <param name="collection">The range of products to add.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCollection.Sort(System.String,System.String)">
 <summary>
 Sorts rma collection.
 </summary>
 <param name="sortColumn">The column used for sorting.</param>
 <param name="direction">The sort order.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment">
 <summary>
 The class ReturnMerchandiseAuthorizationComment represents comment for <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization"/>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment.Id">
 <summary>
 Gets or sets the comment id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment.NewRmaState">
 <summary>
 Gets the comment new rma state.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment.CommentText">
 <summary>
 Gets or sets the comment text.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment.Created">
 <summary>
 Gets or sets the comment created time.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment.ReturnMerchandiseAuthorization">
 <summary>
 Gets or sets the comment rma.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment.Images">
 <summary>
 Gets or sets the comment image collection.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment.AddImage(System.String)">
 <summary>
 Adds and image to comment with given path.
 </summary>
 <param name="imagePath"></param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment.Fill(System.Data.DataRow,Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization)">
 <summary>
 Fills the rma comment with data from given row.
 </summary>
 <param name="dataRow">The <see cref="T:System.Data.DataRow"/>.</param>
 <param name="rma">The <see cref="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment.ReturnMerchandiseAuthorization">rma</see></param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment.GetCommentDescription">
 <summary>
 Gets the rma comment description.
 </summary>
 <remarks>Description is taken from <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEvent"/>.</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment.GetComment">
 <summary>
 Gets the rma comment text.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment.GetEvent">
 <summary>
 Gets the rma comment event.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCommentCollection">
 <summary>
 The class ReturnMerchandiseAuthorizationCommentCollection represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment"/> collection.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCommentCollection.RmaId">
 <summary>
 Gets or sets the rma id.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCommentCollection.AddComment(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState@,System.String@,Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEvent@,Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization,Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCommentImageCollection)">
 <summary>
 Adds the comment.
 </summary>
 <param name="newState">The new rma state.</param>
 <param name="commentText">The text of new comment.</param>
 <param name="returnMerchandiseAuthorizationEvent">The event.</param>
 <param name="returnMerchandiseAuthorization">The rma instance.</param>
 <param name="images">The rma images.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCommentCollection.SaveComments">
 <summary>
 Saves all new Comments in this <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCommentCollection" />.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCommentCollection.GetCommentsByRma(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization)">
 <summary>
 Gets comment collection for given rma.
 </summary>
 <param name="rma">The rma instance.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCommentImage">
 <summary>
 The class ReturnMerchandiseAuthorizationCommentImage represents rma comment image.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCommentImage.Path">
 <summary>
 The path of the image.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCommentImageCollection">
 <summary>
 The class ReturnMerchandiseAuthorizationCommentImageCollection represents collection of the <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationCommentImage"/>.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEmailConfiguration">
 <summary>
 The class ReturnMerchandiseAuthorizationEmailConfiguration represents e-mail configuration for <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization"/>
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEmailConfiguration.Fill(System.Data.IDataReader)">
 <summary>
 Fills the instance from data reader
 </summary>
 <param name="reader">The reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEmailConfiguration.Save">
 <summary>
 Saves this configuration.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEmailConfiguration.SendMail(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization)">
 <summary>
 Sends mail for given rma.
 </summary>
 <param name="rma">The <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEmailConfiguration.Delete">
 <summary>
 Deletes this configureation.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEmailConfiguration.SaveForState(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState)">
 <summary>
 Saves this configuration in relation with given state.
 </summary>
 <param name="returnMerchandiseAuthorizationState">The <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEmailConfiguration.SaveForEvent(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEvent)">
 <summary>
 Saves this configuration in relation with given event.
 </summary>
 <param name="returnMerchandiseAuthorizationEvent">The <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEvent"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEmailConfiguration.SaveForReplacementOrderProvider(System.String,System.String)">
 <summary>
 Saves this configuration in relation with given replacement order provider.
 </summary>
 <param name="replacementOrderProviderClassname">The provider class name.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEmailConfigurationCollection">
 <summary>
 The class ReturnMerchandiseAuthorizationEmailConfigurationCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEmailConfiguration"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEmailConfigurationCollection.GetEmailConfigurationByEvent(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEvent,System.String)">
 <summary>
 Gets rma e-mail configuration by event.
 </summary>
 <param name="rmaEvent">The event.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEmailConfigurationCollection.GetEmailConfigurationByState(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState,System.String)">
 <summary>
 Gets rma e-mail configuration by state.
 </summary>
 <param name="rmaState">The state.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEmailConfigurationCollection.GetEmailConfigurationByReplacementOrderProviderClassName(System.String,System.String)">
 <summary>
 Gets rma e-mail configuration by provider class name.
 </summary>
 <param name="replacementOrderProviderClassname">The provider class name.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEmailRenderer">
 <summary>
 The class ReturnMerchandiseAuthorizationEmailRenderer represents renderer for rma email
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEmailRenderer.RenderEmail(Dynamicweb.Rendering.Template,Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization,System.String)">
 <summary>
 Renders rma tags into given template.
 </summary>
 <param name="template">The template.</param>
 <param name="rma">The rma.</param>
 <param name="languageId">The languageId id.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEvent">
 <summary>
 The class ReturnMerchandiseAuthorizationEvent represents event within rma process.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEvent.Type">
 <summary>
 Gets the event type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEvent.Description">
 <summary>
 Gets the event description.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEvent.LanguageId">
 <summary>
 Gets the event language id.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEvent.Delete">
 <summary>
 Deletes this Translation of this <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEvent" />.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEvent.SaveTranslatedDescription(System.String,System.String)">
 <summary>
 Saves translated description for event.
 </summary>
 <param name="languageId">The language id.</param>
 <param name="eventDescription">The description.</param>
 <remarks>If event of this <see cref="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEvent.Type"/> not exists in database new one will be created.</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEvent.SaveDefaultDescription(System.String)">
 <summary>
 Saves default description for event.
 </summary>
 <param name="eventDescription">The description.</param>
 <remarks>If event of this <see cref="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEvent.Type"/> exists in database description will not be updated.</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEvent.GetAllEventsForLanguageId(System.String)">
 <summary>
 Gets all events for given language id.
 </summary>
 <param name="languageId">The language id.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEventCollection">
 <summary>
 The class ReturnMerchandiseAuthorizationEventCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEvent"/>.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationOrderLine">
 <summary>
 The class ReturnMerchandiseAuthorizationOrderLine represents <seealso cref="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationOrderLine.OrderLine"/> related with <seealso cref="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationOrderLine.ReturnMerchandiseAuthorization"/>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationOrderLine.ReturnMerchandiseAuthorization">
 <summary>
 Gets or sets the <see cref="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationOrderLine.ReturnMerchandiseAuthorization"/>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationOrderLine.OrderLine">
 <summary>
 Gets or sets the <see cref="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationOrderLine.OrderLine"/>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationOrderLine.SerialNumber">
 <summary>
 Gets or sets the serial number.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationOrderLine.GetRmaOrderLinesByRma(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization)">
 <summary>
 Gets orderlines by given rma.
 </summary>
 <param name="rma">The rma.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationOrderLine.Save">
 <summary>
 Saves this rma orderline.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationOrderlineCollection">
 <summary>
 The class ReturnMerchandiseAuthorizationOrderlineCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationOrderLine"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationOrderlineCollection.Save">
 <summary>
 Saves all the orderlines from this collection.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationOrderlineCollection.AddOrderLine(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization,Dynamicweb.Ecommerce.Orders.OrderLine,System.String)">
 <summary>
 Adds new rma orderline to this collection.
 </summary>
 <param name="rma">The rma.</param>
 <param name="orderLine">The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine"/>.</param>
 <param name="serialNumber">The serial number.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationReplacementOrderProvider">
 <summary>
 The class ReturnMerchandiseAuthorizationReplacementOrderProvider represents replacement order provider for <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization"/>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationReplacementOrderProvider.CloseRmaAfterReplacementOrderIsCreated">
 <summary>
 Gets or sets value indication whether to close rma request after replacement order is created.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationReplacementOrderProvider.CreateRmaOrder(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization)">
 <summary>
 Creates replacement order for rma.
 </summary>
 <param name="rma">The rma.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState">
 <summary>
 The class ReturnMerchandiseAuthorizationState represent state for <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization"/>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.Id">
 <summary>
 Gets the ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.IsDefaultStateForNewRma">
 <summary>
 Gets a value indicating whether the state is a the default state for new RMAs .
 </summary>
 <value>
   <c>true</c> if the state is the default state; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.IsNew">
 <summary>
 Gets a value indicating whether this instance is new.
 </summary>
 <value>
   <c>true</c> if this instance is new; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.LanguageId">
 <summary>
 Gets or sets the language ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.Language">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.International.Language" />.
 If LanguageID is set and is an ID for a valid <see cref="T:Dynamicweb.Ecommerce.International.Language" /> then this is returned; otherwise Default Language is used.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>
 The name.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.Description">
 <summary>
 Gets or sets the description.
 </summary>
 <value>
 The description.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.Types">
 <summary>
 Gets a collection of the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationType" /> objects that this <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState" /> is associated with.
 </summary>
 
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.CreateTranslation(System.String)">
 <summary>
 Creates a new <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState" /> with all the properties of this but with the given LanguageID.
 </summary>
 <param name="languageID">The LanguageID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.UpdateDefaultValues(System.String,System.String)">
 <summary>
 Updates the default name and description, which are used when no translation is found.
 </summary>
 <param name="newName">The new default name.</param>
 <param name="newDescription">The new default description.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.Save">
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.DeleteAll">
 <summary>
 Deletes all translations of this <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState" />.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.GetStateById(System.Int32,System.String)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState" /> by ID and LanguageID.
 If no matching <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState" /> exists, the Default <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState" /> is used.
 </summary>
 <param name="stateId">The ID.</param>
 <param name="languageId">The LanguageID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.GetAllStatesById(System.Int32)">
 <summary>
 Gets all translations of the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState" /> having the given ID.
 </summary>
 <param name="stateId">The ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.GetAllStatesByLanguageId(System.String)">
 <summary>
 Gets all <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState" /> object translations for the given LanguageID.
 If a translation is missing for the given language, the Default Rma State is used.
 </summary>
 <param name="languageId">The LanguageID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.GetAllStatesByLanguageId(System.String,System.Boolean)">
 <summary>
 Gets all <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState" /> object translations for the given LanguageID.
 If a translation is missing for the given language and fallbackToDefault is set to <c>true</c>, the Default Rma State is used.
 </summary>
 <param name="languageId">The LanguageID.</param>
 <param name="fallbackToDefault">If <c>true</c> the Default <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState" /> is used if no translation was found; otherwise the state is skipped.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.GetDefaultStateForNewRmaOrderLines">
 <summary>
 Gets the default <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState" /> for new <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.GetAllStates">
 <summary>
 Gets a <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationStateCollection" /> containing all <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState" /> objects in the current Context.Language.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState.ClearCache">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationStateCollection">
 <summary>
 The class ReturnMerchandiseAuthorizationStateCollection represent collection of <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationState"/>.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationType">
 <summary>
 Represents rma type enumeration.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationTypeCollection">
 <summary>
 The class ReturnMerchandiseAuthorizationTypeCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationType"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationTypeCollection.Add(System.String)">
 <summary>
 Adds type to this collection.
 </summary>
 <param name="types">String representation of <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationType"/>.</param>
 <remarks>If the given type IsNullOrEmpty or not belongs to <seealso cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationType"/> then collection will not be populated with any values.</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationTypeCollection.ToString">
 <summary>
 Converts collection into comma separated string representation.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.DiscountValueTypes">
 <summary>
 Enum DiscountValueTypes
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.SalesDiscounts.DiscountValueTypes.Fixed">
 <summary>
 The fixed
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.SalesDiscounts.DiscountValueTypes.Percentage">
 <summary>
 The percentage
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.SalesDiscounts.DiscountValueTypes.Products">
 <summary>
 The products
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductDiscount">
 <summary>
 The class ProductDiscount represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountProvider"/> based on specified products.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductDiscount.ProductsAndGroups">
 <summary>
 Gets or sets products and groups that will trigger discount application.
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductDiscount.IsProductDiscount">
 <summary>
 Gets or sets value indicating whether discount is "product discount".
 </summary>
 <remarks>always returns true</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductDiscount.IsPercent">
 <summary>
 Gets value indicating whether discount value type is percent.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductDiscount.DiscountAmount">
 <summary>
 Gets discount amount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductDiscount.DiscountId">
 <summary>
 Gets or sets the discount ID.
 </summary>
 <value>The discount ID.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductDiscount.ProcessOrder(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Process the order to apply discount if valid.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.PromoCodeChecker">
 <summary>
 The class provide functionality that allows to check if a voucher code *might* work. 
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.PromoCodeChecker.CheckOrderPromoCode(System.String)">
 <summary>
 Check a voucher code. 
 </summary>
 <param name="voucherCode">The voucher code.</param>
 <returns>Information about voucher code</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.PromoCodeChecker.CheckOrderPromoCode(System.String,System.String)">
 <summary>
 Check a voucher code. 
 </summary>
 <param name="voucherCode">The voucher code.</param>
 <param name="customDiscountParameter">The name of parameter with voucher code.</param>
 <returns>Information about voucher code</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.PromoCodeChecker.CheckOrderPromoCode(System.String,Dynamicweb.Ecommerce.Orders.SalesDiscounts.PromoCodeInfo.PromoCodeType)">
 <summary>
 Check a voucher code. 
 </summary>
 <param name="voucherCode">The voucher code.</param>
 <param name="codeType">The type of voucher code.</param>
 <returns>Information about voucher code</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.PromoCodeChecker.CheckOrderPromoCode(System.String,Dynamicweb.Ecommerce.Orders.SalesDiscounts.PromoCodeInfo.PromoCodeType,System.String)">
 <summary>
 Check a voucher code. 
 </summary>
 <param name="voucherCode">The voucher code.</param>
 <param name="codeType">The type of voucher code.</param>
 <param name="customDiscountParameter">The name of parameter with voucher code.</param>
 <returns>Information about voucher code</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.PromoCodeInfo">
 <summary>
 The structure represents info about promo code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.PromoCodeInfo.CodeType">
 <summary>
 The type of promo code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.PromoCodeInfo.Name">
 <summary>
 The Name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.PromoCodeInfo.Valid">
 <summary>
 Is promo code valid
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.PromoCodeInfo.Expired">
 <summary>
 Is promo code expired
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.PromoCodeInfo.Inactive">
 <summary>
 Is promo code inactive
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.PromoCodeInfo.PromoCodeType">
 <summary>
 The types of promo code.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountRepository">
 <summary>
 Country repository provides persistence operations for the SalesDiscounts
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountRepository.GetDiscounts">
 <summary>
 Gets all sales discounts
 </summary>
 <returns>A list of all sales discounts</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountRepository.GetDiscountCurrencies">
 <summary>
 Gets all sales discount currencies
 </summary>
 <returns>A list of all sales discount currencies</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountRepository.GetDiscountTranslations">
 <summary>
 Gets all sales discount translations
 </summary>
 <returns>A list of all sales discount translations</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountRepository.Save(Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount)">
 <summary>
 Saves the discount.
 </summary>
 <param name="discount">The <seealso cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountRepository.SaveTranslation(Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount)">
 <summary>
 Saves the discount translation.
 </summary>
 <param name="discount">The <seealso cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountRepository.SaveTranslation(System.Data.IDbConnection,Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount)">
 <summary>
 Saves the discount translation.
 </summary>
 <param name="connection">The connection.</param>
 <param name="discount">The <seealso cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountRepository.SaveCurrencies(System.Data.IDbConnection,Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount)">
 <summary>
 Saves the discount currencies.
 </summary>
 <param name="connection">The connection.</param>
 <param name="discount">The identifier string.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountRepository.Delete(System.String)">
 <summary>
 Deletes the specified discount.
 </summary>
 <param name="discountId">The discount identifier.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountRepository.DeleteTranslation(System.String,System.String)">
 <summary>
 Deletes the discount translation.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService">
 <summary>
 SalesDiscount service provides operations for working with the SalesDiscounts
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService.ClearCache">
 <summary>
 Clears discount caches.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService.ClearProductDiscountCache">
 <summary>
 Clears the product discount cache.
 </summary>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService.GetDiscounts(Dynamicweb.Ecommerce.International.Language)">
 <summary>
 Gets the discounts.
 </summary>
 <param name="language">The language.</param>
 <returns>SalesDiscount collection.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService.GetDiscount(System.String,Dynamicweb.Ecommerce.International.Language)">
 <summary>
 Gets a sales discount.
 </summary>
 <param name="discountId">The discount identifier</param>
 <returns>The sales discount <see cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService.GetDiscountDescription(System.String,Dynamicweb.Ecommerce.International.Language)">
 <summary>
 Gets a sales discount description.
 </summary>
 <param name="discountId">The discount identifier</param>
 <returns>The sales discount <see cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService.Save(Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount)">
 <summary>
 Saves the discount.
 </summary>
 <param name="discount">The <seealso cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService.SaveTranslation(Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount)">
 <summary>
 Saves the discount translation.
 </summary>
 <param name="discount">The <seealso cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService.Delete(System.String)">
 <summary>
 Deletes the specified discount.
 </summary>
 <param name="discountId">The discount identifier.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService.DeleteTranslation(System.String,System.String)">
 <summary>
 Deletes the discount translation.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService.IsUserValid(System.String)">
 <summary>
 Determines whether [is user valid] [the specified customer and groups].
 </summary>
 <param name="customerAndGroups">The customer and groups.</param>
 <returns><c>true</c> if [is user valid] [the specified customer and groups]; otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService.ProcessOrderDiscount(Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount,Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Ecommerce.Orders.OrderLineCollection)">
 <summary>
 Process the order discounts.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService.SalesDiscountTranslation.DiscountId">
 <summary>
 Gets or sets the discount identifier.
 </summary>
 <value>The discount identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService.SalesDiscountTranslation.LanguageId">
 <summary>
 Gets or sets the language identifier.
 </summary>
 <value>The language identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService.SalesDiscountTranslation.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService.SalesDiscountTranslation.Description">
 <summary>
 Gets or sets the description.
 </summary>
 <value>The description.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService.SalesDiscountCurrency.DiscountId">
 <summary>
 Gets or sets the discount identifier.
 </summary>
 <value>The discount identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService.SalesDiscountCurrency.CurrencyCode">
 <summary>
 Gets or sets the currency code.
 </summary>
 <value>The currency code.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountService.SalesDiscountCurrency.ValueFixed">
 <summary>
 Gets or sets the value fixed.
 </summary>
 <value>The value fixed.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountTypeComparer">
 <summary>
 the class SalesDiscountTypeComparer represents comparer for <seealso cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount"/>.
 </summary>
 <seealso cref="!:System.Collections.Generic.IComparer{Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount}" />
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountTypeComparer.Compare(Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount,Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount)">
 <summary>
 Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
 </summary>
 <param name="x">The first object to compare.</param>
 <param name="y">The second object to compare.</param>
 <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.DateTimeDiscount">
 <summary>
 The class DateTimeDiscount represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountProvider"/> based on date and time conditions.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.DateTimeDiscount.DateFrom">
 <summary>
 Gets or sets date from when discount will be valid.
 </summary>
 <remarks>Default value is <c>DateTime.Now</c></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.DateTimeDiscount.DateTo">
 <summary>
 Gets or sets date to when discount will be valid.
 </summary>
 <remarks>Default value is <c>DateTime.Now.AddDays(1)</c></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.DateTimeDiscount.ProcessOrder(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Process the order to apply discount if valid.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.OrderFieldDiscountUniqueVoucher">
 <summary>
 The class OrderFieldDiscountUniqueVoucher represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountProvider"/> based on vouchers.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.OrderFieldDiscountUniqueVoucher.ListId">
 <summary>
 Gets or sets the voucher list id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.OrderFieldDiscountUniqueVoucher.ListName">
 <summary>
 Gets or sets the voucher list name.
 </summary>
 <remarks>When set voucher list name <seealso cref="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.OrderFieldDiscountUniqueVoucher.ListId"/> will be changed on id taken from database given list name.</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.OrderFieldDiscountUniqueVoucher.IsPercent">
 <summary>
 Gets value indicating whether discount value type is percent.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.OrderFieldDiscountUniqueVoucher.DiscountAmount">
 <summary>
 Gets discount amount.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.OrderFieldDiscountUniqueVoucher.ProcessOrder(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Process the order to apply discount if valid.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.OrderFieldDiscountUniqueVoucher.GetOptions(System.String)">
 <summary>
 Gets the options.
 </summary>
 <param name="name">The option name.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductOrderFieldDiscountUniqueVoucher.ListId">
 <summary>
 Gets or sets the voucher list id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductOrderFieldDiscountUniqueVoucher.ListName">
 <summary>
 Gets or sets the voucher list name.
 </summary>
 <remarks>When set voucher list name <seealso cref="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductOrderFieldDiscountUniqueVoucher.ListId"/> will be changed on id taken from database given list name.</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductOrderFieldDiscountUniqueVoucher.ProductsAndGroups">
 <summary>
 Gets or sets products and groups that will trigger discount application.
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductOrderFieldDiscountUniqueVoucher.IncludeBuyLimit">
 <summary>
 Gets or sets value indicating whether <see cref="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductOrderFieldDiscountUniqueVoucher.BuyLimit"/> is included.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductOrderFieldDiscountUniqueVoucher.MoreLess">
 <summary>
 Gets or sets <seealso cref="T:Dynamicweb.Extensibility.Editors.MoreLessParameterEditor">MoreLess</seealso> condition.
 </summary>
 <example>
 <c>"&gt;"</c>, <c>"&gt;="</c>, <c>"=="</c>, <c>"&lt;"</c>, <c>"&lt;="</c>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductOrderFieldDiscountUniqueVoucher.BuyLimit">
 <summary>
 Gets or sets buy limit.
 </summary>
 <remarks>By default limit is <c>1000.0</c></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductOrderFieldDiscountUniqueVoucher.BuyLimitCalculated">
 <summary>
 Gets or sets calculated buy limit.
 </summary>
 <value>Returns <see cref="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductOrderFieldDiscountUniqueVoucher.BuyLimit"/> passed through <see cref="M:Dynamicweb.Ecommerce.Prices.Price.GetDoublePriceInfo(System.Double,Dynamicweb.Ecommerce.International.Currency)"/> method using current context currency.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductOrderFieldDiscountUniqueVoucher.IsPercent">
 <summary>
 Gets value indicating whether discount value type is percent.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductOrderFieldDiscountUniqueVoucher.DiscountAmount">
 <summary>
 Gets discount amount.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductOrderFieldDiscountUniqueVoucher.ProcessOrder(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Process the order to apply discount if valid.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.ProductOrderFieldDiscountUniqueVoucher.GetOptions(System.String)">
 <summary>
 Gets the options.
 </summary>
 <param name="name">The option name.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount">
 <summary>
 The class SalesDiscount represents old discount model(<seealso cref="T:Dynamicweb.Ecommerce.Orders.Discounts.Discount"/>).
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.Id">
 <summary>
 Gets or sets the identifier.
 </summary>
 <value>The identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.Language">
 <summary>
 Gets or sets the language.
 </summary>
 <value>The language.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.Description">
 <summary>
 Gets or sets the description.
 </summary>
 <value>The description.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.Active">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount"/> is active.
 </summary>
 <value><c>true</c> if active; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.Shop">
 <summary>
 Gets or sets the shop.
 </summary>
 <value>The shop.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.Countries">
 <summary>
 Gets or sets the countries.
 </summary>
 <value>The countries.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.CustomersAndGroups">
 <summary>
 Gets or sets the customers and groups.
 </summary>
 <value>The customers and groups.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.DiscountType">
 <summary>
 Gets or sets the type of the discount.
 </summary>
 <value>The type of the discount.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.Parameters">
 <summary>
 Gets or sets the parameters.
 </summary>
 <value>The parameters.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.ValueType">
 <summary>
 Gets or sets the type of the value.
 </summary>
 <value>The type of the value.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.ValuePercentage">
 <summary>
 Gets or sets the value percentage.
 </summary>
 <value>The value percentage.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.ValueProducts">
 <summary>
 Gets or sets the value products.
 </summary>
 <value>The value products.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.ValueFixed">
 <summary>
 Gets or sets the value fixed.
 </summary>
 <value>The value fixed.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.ValueFixedByCurrencies">
 <summary>
 Gets or sets the value fixed by currencies.
 </summary>
 <value>The value fixed by currencies.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.ValueFixedForCurrency">
 <summary>
 Gets the value fixed for currency.
 </summary>
 <value>The value fixed for currency.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.DateFrom">
 <summary>
 Gets or sets the date from.
 </summary>
 <value>The date from.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.DateTo">
 <summary>
 Gets or sets the date to.
 </summary>
 <value>The date to.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.MinimumBasketSize">
 <summary>
 Gets or sets the minimum size of the basket.
 </summary>
 <value>The minimum size of the basket.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.Actual">
 <summary>
 Gets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount"/> is actual.
 </summary>
 <value><c>true</c> if actual; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.IsLocalized">
 <summary>
 Returns a boolean value telling if the name and description is localized to the current language.
 If not the name and description is from the default language
 </summary>
 <value><c>true</c> if this instance is localized; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.IsValid">
 <summary>
 Check If discount is valid and can be applied
 </summary>
 <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.IsValidToShow">
 <summary>
 Check If discount is valid and can be shown
 </summary>
 <value><c>true</c> if this instance is valid to show; otherwise, <c>false</c>.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.GetSalesDiscountProvider">
 <summary>
 Gets the sales discount provider.
 </summary>
 <returns>SalesDiscountProvider.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.SetLocalizedName(Dynamicweb.Ecommerce.International.Language,System.String,System.String)">
 <summary>
 Set translation for specified language
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.Clone">
 <summary>
 Creates a new instance of a class with the same value as an existing instance.
 </summary>
 <remarks>
 Method performs a deep copy of all properties.
 </remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.Converted">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount"/> is converted.
 </summary>
 <value><c>true</c> if converted; otherwise, <c>false</c>.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.Save">
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.Save(System.String)">
 <summary>
 Saves the specified identifier string.
 </summary>
 <param name="discountId">The identifier string.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.SaveLanguageSpecificDiscount">
 <summary>
 Saves the language specific discount.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.SaveLanguageSpecificDiscount(System.String)">
 <summary>
 Saves the language specific discount.
 </summary>
 <param name="discountId">The identifier string.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.DeleteLanguageSpecificdiscount">
 <summary>
 Deletes the language specific discount.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.Delete(System.String)">
 <summary>
 Deletes the specified identifier string.
 </summary>
 <param name="discountId">The identifier string.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.ProcessOrder(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Processes the order.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.IsUserValid(System.String)">
 <summary>
 Determines whether [is user valid] [the specified customer and groups].
 </summary>
 <param name="customerAndGroups">The customer and groups.</param>
 <returns><c>true</c> if [is user valid] [the specified customer and groups]; otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.GetSalesDiscounts(Dynamicweb.Ecommerce.International.Language)">
 <summary>
 Gets the sales discounts.
 </summary>
 <param name="language">The language.</param>
 <returns>SalesDiscountCollection.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.GetSalesDiscounts(System.String,Dynamicweb.Ecommerce.International.Language)">
 <summary>
 Gets the sales discounts.
 </summary>
 <param name="discountId">The sales discount identifier.</param>
 <param name="language">The language.</param>
 <returns>SalesDiscountCollection.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount.GetSalesDiscounts(Dynamicweb.Ecommerce.Products.ProductCollection,Dynamicweb.Ecommerce.International.Language)">
 <summary>
 Gets the sales discounts.
 </summary>
 <param name="products">The products.</param>
 <param name="language">The language.</param>
 <returns>SalesDiscountCollection.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountCollection">
 <summary>
 The class SalesDiscountCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscount"/>
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountCollection.Load(System.String,Dynamicweb.Ecommerce.International.Language)">
 <summary>
 Loads the collection using provided sql query.
 </summary>
 <param name="query">The query.</param>
 <param name="language">The language.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountProvider">
 <summary>
 The SalesDiscountProvider allows you to invent your own discount types from scratch and apply them to an order, 
 or to extend the built-in discount types in the Sales Discount module.
 All SalesDiscountAddIns need to override a function called ProcessOrder, which is the function that is called when
 Dynamicweb eCommerce goes through all the SalesDiscountAddIns searching for discounts. 
 This allows the whole procedure to be more flexible, allowing you to decide how your SalesDiscountAddIn should work.
 </summary>
 <example>
 This code sample shows how to make a SalesDiscountProvider that triggers  discount
 if the total sum of purchased products (“Order total amount”) exceeds the specified amount.
 <code description="Total price discount example" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\SalesDiscount\SalesDiscountSample.cs" lang="CS"></code>
 <code description="A 'Buy 3 pay for 2' or 'Buy 4, get 50% of the cheapest example' discount.e" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\SalesDiscount\ProductQuantityDiscount.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountProvider.Discounts">
 <summary>
 Gets or sets the currently added discounts applied to the order.
 </summary>
 <value>List of order lines that contains the discounts applied to the order at the time of the execution of this provider instance.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountProvider.DiscountName">
 <summary>
 Gets or sets the name of the discount.
 </summary>
 <value>The name of the discount.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountProvider.IsProductDiscount">
 <summary>
 Gets or sets a value indicating whether this instance is product discount.
 </summary>
 <value>
 <c>true</c> if this instance is product discount; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountProvider.HideDiscountValueGroupBox">
 <summary>
 Gets or sets a value indicating whether to hide discount value group box in the UI.
 </summary>
 <value>
 <c>true</c> if it is needed to hide discount value group box; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountProvider.ProductDiscountProduct">
 <summary>
 Gets or sets the discount product.
 </summary>
 <value>The product discount product.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountProvider.DiscountId">
 <summary>
 Gets or sets the discount ID.
 </summary>
 <value>The discount ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountProvider.DiscountValue">
 <summary>
 Gets or sets the discount value.
 </summary>
 <value>The discount value.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.SalesDiscountProvider.ProcessOrder(Dynamicweb.Ecommerce.Orders.Order)">
 <example>
 Look on example for <c>SalesDiscountProvider</c> class 
 </example>
 <summary>
 Processes the order.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher">
 <summary>
 The class Voucher represents base for discounts on voucher codes.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.VoucherAccessUserId">
 <summary>
 ID of the user who used the voucher
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.ListId">
 <summary>
 ID Of The list
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.Code">
 <summary>
 Voucher Code
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.DateUsed">
 <summary>
 Date when the voucher was used
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.UsedOrderId">
 <summary>
 OrderID on which the voucher was used
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.Status">
 <summary>
 Voucher Status.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.#ctor(System.String,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher" /> class.
 </summary>
 <param name="code">The voucher code.</param>
 <param name="voucherListId">The voucher list id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher" /> class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.GetDiscountForVoucher">
 <summary>
 Get discount for current voucher
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.Fill(System.Data.IDataReader)">
 <summary>
 Fills this instance with data from given reader
 </summary>
 <param name="reader">The reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.GetDiscountForVoucher(System.String)">
 <summary>
 Get the discount by voucher code
 </summary>
 <param name="voucherCode">Voucher code</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.GetAllVouchersForList(System.Int32)">
 <summary>
 Get the collection of vouchers for specific List
 </summary>
 <param name="listId">List ID</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.GetVoucherByCode(System.String)">
 <summary>
 Get Voucher by Voucher Code
 </summary>
 <param name="voucherCode"></param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.GetVoucherByCode(System.String,System.Int32)">
 <summary>
 Get Voucher by Voucher Code
 </summary>
 <param name="voucherCode"></param>
 <param name="listId"></param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.CheckVouchers(System.Collections.Generic.List{System.String})">
 <summary>
 Checks the vouchers in the database
 </summary>
 <param name="vouchers"></param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.GetAllVouchers">
 <summary>
 Get all vouchers
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.GenerateVouchers(System.Int32,System.Int32,System.Int32)">
 <summary>
 Generate Vouchers
 </summary>
 <param name="number">Number of vouchers</param>
 <param name="listId">ID of the list to generate vouchers for</param>
 <param name="numberOfSymbols">Number of symbols in voucher code</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.GenerateVoucher(System.Int32,System.Int32)">
 <summary>
 Generate Voucher
 </summary>
 <param name="listId"> ID of the list to generate voucher for.</param>
 <param name="numberOfSymbols">optional. Voucher length, in characters.</param>
 <returns>The voucher code</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.IsValid(System.String,System.Int32)">
 <summary>
 Check If voucher is valid and can be applied
 </summary>
 <param name="voucherCode">Voucher Code</param>
 <param name="listId">List ID</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.RenderVoucherMail(Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher,System.String,System.String)">
 <summary>
 Renders the mail template for the vouchers
 </summary>
 <param name="voucher">Voucher object</param>
 <param name="userName">User Name</param>
 <param name="userEmail">User email to send voucher to</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.UpdateVouchersOrderId(System.String,System.String)">
 <summary>
 Update Voucher Code with Order
 </summary>
 <param name="orderId">Order ID to change</param>
 <param name="newOrderId">New Order ID</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.MarkAsUsed(System.String,System.String)">
 <summary>
 Mark voucher as Used
 </summary>
 <param name="voucherCode">Voucher Code</param>
 <param name="orderId">Order ID</param>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.VoucherList.ListName">
 <summary>
 Gets or sets the list name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.VoucherList.ListDiscountId">
 <summary>
 Gets or sets discount id associated with the list.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.SalesDiscounts.VoucherList.ListActive">
 <summary>
 Gets or sets value indicating whether list is active.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.VoucherList.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.VoucherList" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.VoucherList.#ctor(System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.VoucherList" /> class with specified id.
 </summary>
 <param name="voucherListId">The list id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.VoucherList.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.VoucherList" /> class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.VoucherList.FillRow(System.Data.DataRow)">
 <summary>
 Fills data row from this list data.
 </summary>
 <param name="row">The data row.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.VoucherList.Fill(System.Data.IDataReader)">
 <summary>
 Fills this list data from given reader.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.VoucherList.GetListById(System.Int32)">
 <summary>
 Get Vouchers List By ID.
 </summary>
 <param name="listId">The id of related voucher list.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.VoucherList.GetAllVoucherLists">
 <summary>
 Get all voucher Lists.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.VoucherList.GetUnusedVoucherListsFor(Dynamicweb.Ecommerce.Orders.VoucherUseCategoryType,System.Collections.Generic.IEnumerable{System.Int32})">
 <summary>
 Get all unused voucher Lists except selected values
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.VoucherList.GetLoyaltyRewardForList(System.Int32)">
 <summary>
 Get the Loyalty reward item object for the list with specified ID.
 </summary>
 <param name="listId">id of related voucher list</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.VoucherList.GetMatrixDiscountForList(System.Int32)">
 <summary>
 Get the Discount object for the list with specified ID.
 </summary>
 <param name="listId">The id of related voucher list.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.VoucherList.GetDiscountForList(System.Int32)">
 <summary>
 Get the Discount object for the list with specified ID.
 </summary>
 <param name="listId">The id of related voucher list.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.VoucherList.UpdateVoucherStatus(System.Int32,System.String)">
 <summary>
 Updates Vouchers status for specified List ID.
 </summary>
 <param name="listId">The id of related voucher list.</param>
 <param name="status">The voucher status.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ShippingCalculationResultType">
 <summary>
 The enum ShippingCalculationResultType represents shipping result calculation types enumeration.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ShippingFeeRulesSources">
 <summary>
 The enum ShippingFeeRulesSources represents shipping fee rules source type.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ShippingLimitsUseLogics">
 <summary>
 The enum ShippingLimitsUseLogics represents shipping limits usage logic.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.SortOrderType">
 <summary>
 Sort order.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.SortOrderType.Asc">
 <summary>
 Ascending
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.SortOrderType.Desc">
 <summary>
 Descending
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.TrackAndTraceParameterCollection">
 <summary>
 The class TrackAndTraceParameterCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Orders.TrackAndTraceParameter"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.TrackAndTraceParameterCollection.FromXmlString(System.String)">
 <summary>
 Fills this collection from given XML string.
 </summary>
 <param name="xml"></param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.TrackAndTraceParameterCollection.ToXmlString">
 <summary>
 Gets XML string representation of this collection.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.UniqueProduct">
 <summary>
 Class to represent an unique product of customer order collection 
 </summary>
 <example>
   <code description="How to render products for customer orders" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\CustomerOrdersProductsRendererSample.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.UniqueProduct.ProductId">
 <example>
 Look at example for <c>UniqueProduct</c> class
 </example>
 <summary>
 Gets or sets the product ID.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.UniqueProduct.ProductName">
 <example>
 Look at example for <c>UniqueProduct</c> class
 </example>
 <summary>
 Gets or sets the product ID.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.UniqueProduct.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.UniqueProduct" /> class.
 </summary>
 <param name="id">The ID.</param>
 <param name="name">The name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.UniqueProduct.CompareTo(System.Object)">
 <example>
 <code title="C#" description="" lang="CS">
 class MyPage : System.Web.UI.Page
 {
 
     public ArrayList getSortedListOfProducts( ArrayList uniqueProducts )
     {
         return uniqueProducts.Sort();
     }
 
 }
 </code>
 </example>
 <summary>
 Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
 </summary>
 <param name="obj">An object to compare with this instance.</param>
 <returns>
 A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
 Value
 Meaning
 Less than zero
 This instance is less than <paramref name="obj" />.
 Zero
 This instance is equal to <paramref name="obj" />.
 Greater than zero
 This instance is greater than <paramref name="obj" />.
 </returns>
 <exception cref="T:System.ArgumentException">
 <paramref name="obj" /> is not the same type as this instance.
 </exception>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.VoucherUseCategoryType">
 <summary>
 The enum VoucherUseCategoryType represents voucher usage type flag enumeration.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.CustomerOrderCollectionFilter">
 <summary>
 The class CustomerOrderCollectionFilter represents a filter of a collection of customer orders.
 </summary>
 <example>
   <code description="How to render customer orders" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\CustomerOrdersRendererSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.CustomerOrderCollectionFilter.#ctor(Dynamicweb.Ecommerce.Orders.CustomerOrderCollection@)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.CustomerOrderCollectionFilter" /> class.
 </summary>
 <param name="orders">The orders.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.CustomerOrderCollectionFilter.#ctor(Dynamicweb.Ecommerce.Orders.CustomerOrderCollection@,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.CustomerOrderCollectionFilter" /> class.
 </summary>
 <param name="orders">The orders.</param>
 <param name="searchInCustomFields">Search in the order custom fields.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.CustomerOrderCollectionFilter.AddPriceRangeFilter(System.Double,System.Double)">
 <example>
 Look at example for <c>CustomerOrderCollectionFilter</c> class 
 </example>
 <summary>
 Adds the price range filter.
 </summary>
 <param name="fromAmount">From amount.</param>
 <param name="toAmount">To amount.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.CustomerOrderCollectionFilter.AddDateRangeFilter(System.DateTime,System.DateTime)">
 <example>
 Look at example for <c>CustomerOrderCollectionFilter</c> class
 </example>
 <summary>
 Adds the date range filter.
 </summary>
 <param name="fromDate">From date.</param>
 <param name="toDate">To date.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.CustomerOrderCollectionFilter.AddProductFilter(System.String@)">
 <example>
 Look at example for <c>CustomerOrderCollectionFilter</c> class 
 </example>
 <summary>
 Adds the product filter.
 </summary>
 <param name="productId">The product ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.CustomerOrderCollectionFilter.AddFreetextFilter(System.String)">
 <example>
 Look at example for <c>CustomerOrderCollectionFilter</c> class 
 </example>
 <summary>
 Adds the free text filter.
 </summary>
 <param name="freeText">The free text.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.CustomerOrderCollectionFilter.ApplyFromQueryString(System.Int32)">
 <example>
 Look at example for <c>CustomerOrderCollectionFilter</c> class 
 </example>
 <summary>
 Applies filter from query string.
 </summary>
 <param name="paragraphId">The paragraph ID.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.CustomerOrderCollectionFilter.SearchInCustomOrderFields">
 <summary>
 Determines whether filter should do search in the custom order fields.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.CustomerOrderCollectionFilter.Output">
 <summary>
 Gets the filtered collection of customer orders.
 </summary>
 <value>The output.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.CustomerOrderCollection">
 <summary>
 Represents a collection of customer orders
 </summary>
 <example>
   <code description="How to render customer orders" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\CustomerOrdersRendererSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.CustomerOrderCollection.LoadPendingOrders(System.Int64)">
 <example>
 Look at example for <c>CustomerOrderCollection</c> class 
 </example>
 <summary>
 Loads customer unclosed orders from the database by specified customer ID.
 </summary>
 <param name="customerId">The customer ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.CustomerOrderCollection.Load(System.Int64)">
 <example>
 Look at example for <c>CustomerOrderCollection</c> class 
 </example>
 <summary>
 Loads customer orders from the database by specified customer ID.
 </summary>
 <param name="customerId">The customer ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.CustomerOrderCollection.Load(System.Int64,System.String)">
 <example>
 Look at example for <c>CustomerOrderCollection</c> class 
 </example>
 <summary>
 Loads customer orders from the database by specified customer ID.
 </summary>
 <param name="customerId">The customer ID.</param>
 <param name="shopIds">The shops IDs.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.CustomerOrderCollection.Load(System.Int64,System.String,System.Int32)">
 <example>
 Look at example for <c>CustomerOrderCollection</c> class 
 </example>
 <summary>
 Loads customer orders from the database by specified customer ID.
 </summary>
 <param name="customerId">The customer ID.</param>
 <param name="shopIds">The shops IDs.</param>
 <param name="recurringOrderId">The shops IDs.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.CustomerOrderCollection.Load(System.Int64,System.String,System.Int32,System.Boolean)">
 <summary>
 Loads customer recurring orders
 </summary>
 <param name="CustomerID">The customer ID.</param>
 <param name="ShopIDs">The shops IDs.</param>
 <param name="RecurringOrderID">The recurring order ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.CustomerOrderCollection.Load(System.Int64,System.String,Dynamicweb.Ecommerce.Orders.OrderType,System.Boolean)">
 <summary>
 Loads customer orders of specified type 
 </summary>
 <param name="customerId">The customer ID.</param>
 <param name="shopIds">The shops IDs.</param>
 <param name="orderType">The order type.</param>
 <param name="useCustomerNumber">Select orders by user customer number.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.CustomerOrderCollection.Load(System.Int64,System.String,Dynamicweb.Ecommerce.Orders.OrderType,System.Int32,System.Boolean,System.String)">
 <summary>
 Loads customer orders of specified type 
 </summary>
 <param name="customerId">The customer ID.</param>
 <param name="shopIds">The shops IDs.</param>
 <param name="orderType">The order type.</param>
 <param name="recurringOrderId">The recurring order ID.</param>
 <param name="useCustomerNumber">Select orders by user customer number.</param>
 <param name="orderContextIds">The order context IDs.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.CustomerOrderCollection.Load(System.Int64,System.String,Dynamicweb.Ecommerce.Orders.OrderType,System.Int32,System.Boolean,System.String,System.DateTime)">
 <summary>
 Loads customer orders of specified type 
 </summary>
 <param name="customerId">The customer ID.</param>
 <param name="shopIds">The shops IDs.</param>
 <param name="orderType">The order type.</param>
 <param name="recurringOrderId">The recurring order ID.</param>
 <param name="useCustomerNumber">Select orders by user customer number.</param>
 <param name="orderContextIds">The order context IDs.</param>
 <param name="fromDate">The minimum order date.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.CustomerOrderCollection.LoadQuotes(System.Int64,System.String)">
 <example>
 Look at example for <c>CustomerOrderCollection</c> class 
 </example>
 <summary>
 Loads customer orders from the database by specified customer ID.
 </summary>
 <param name="customerId">The customer ID.</param>
 <param name="shopIds">The shops IDs.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.CustomerOrderCollection.UniqueProducts">
 <summary>
 Gets the array of unique products.
 </summary>
 <value>The unique products.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.CustomerOrderCollection.MinDate">
 <summary>
 Find the min date of order.
 </summary>
 <value>The min date.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.CustomerOrderCollection.MaxDate">
 <summary>
 Find the max date of order.
 </summary>
 <value>The max date.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Fee">
 <summary>
 Represents information about a fee.
 </summary>
 <example>
 <code description="Fee information page example" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\FeeInformationPageSample.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Fee._countryRelationExists">
 <summary>
 True if the fee has a relation to Country, otherwise false.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.Id">
 <summary>
 Gets or sets the fee ID.
 </summary>
 <value>The ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.Method">
 <summary>
 Gets or sets the fee method.
 </summary>
 <value>The method.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.MethodId">
 <summary>
 Gets or sets the fee method ID.
 </summary>
 <value>The method ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.CountryId">
 <summary>
 Gets or sets the country ID.
 </summary>
 <value>The country ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.RegionCode">
 <summary>
 Gets or sets the region code.
 </summary>
 <value>The region code.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.Zip">
 <summary>
 Gets or sets the zip code.
 </summary>
 <value>The zip code.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.ValueAmount">
 <summary>
 Gets or sets the value amount.
 </summary>
 <value>The value amount.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.ValueAmountString">
 <summary>
 Gets or sets the value amount in text form
 </summary>
 <value>The value amount string.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.Type">
 <summary>
 Gets or sets the <see cref="T:Dynamicweb.Ecommerce.Orders.FeeType" />.
 </summary>
 <value>The type.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.Weight">
 <summary>
 Gets or sets the weight.
 </summary>
 <value>The weight.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.WeightString">
 <summary>
 Gets or sets the weight in text form.
 </summary>
 <value>The weight string.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.Volume">
 <summary>
 Gets or sets the volume.
 </summary>
 <value>The volume.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.VolumeString">
 <summary>
 Gets or sets the volume in text form.
 </summary>
 <value>The volume string.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.OrderPrice">
 <summary>
 Gets or sets the order price.
 </summary>
 <value>The value amount.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.Name">
 <summary>
 Gets or sets the fee name.
 </summary>
 <value>The value amount.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.Active">
 <summary>
 Gets or sets value indicating whether fee is active.
 </summary>
 <value>The is active value.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.ValidFrom">
 <summary>
 Gets or sets the fee valid from date.
 </summary>
 <value>The valid from date.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.ValidTo">
 <summary>
 Gets or sets the fee valid to date.
 </summary>
 <value>The valid to date.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.UserGroupId">
 <summary>
 Gets or sets the fee user group id.
 </summary>
 <value>The user group id.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.UserId">
 <summary>
 Gets or sets the fee user id.
 </summary>
 <value>The user id.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.UserCustomerNumber">
 <summary>
 Gets or sets the fee user customer number.
 </summary>
 <value>The user customer number.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.ShopId">
 <summary>
 Gets or sets the fee shop id.
 </summary>
 <value>The shop id.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.ProductsAndGroupsIds">
 <summary>
 Gets or sets the fee products and groups ids.
 </summary>
 <value>The products and groups ids.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.OrderContextId">
 <summary>
 Gets or sets the order context id.
 </summary>
 <value>The order context id.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Fee.CurrencyCode">
 <summary>
 Gets or sets the order currency code.
 </summary>
 <value>The order currency code.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Fee" /> class from database by ID.
 </summary>
 <param name="feeId">The ID</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Fee" /> class from data reader.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Fee" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.Save(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
private void SaveDefaultFeeData()
{
     Fee feeSet = new Fee();

     String reqLineID = Request("DFEE_LineID");
     String reqFeeID = Converter.ToString(Request("DFEE_ID"));
     String reqFeeType = Converter.ToString(Request("DFEE_Type"));
     String reqFeeValue = Converter.ToString(Request("DFEE_Value"));

     feeSet.ID = reqFeeID;
     feeSet.Method = "PAY";
     feeSet.MethodID = Converter.ToString(payId);
     feeSet.Type = CType(reqFeeType, Integer);
     feeSet.ValueAmount = Base.DoubleFromString(reqFeeValue);
     feeSet.Weight = -1;
     feeSet.Volume = -1;

     feeSet.Save(reqFeeID);
 }
 </code>
 </example>
 <summary>
 Saves fee. If the fee with specified ID exists, it will be overwritten
 </summary>
 <param name="feeId">The fee ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.Delete">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void Page_Load(System.Object sender, System.EventArgs e) 
   {
       String CMD = HttpContext.Current.Request.QueryString("CMD");

       if(CMD == "DeleteFeeLine")
       {
           String  FeeID = Converter.ToString(HttpContext.Current.Request.QueryString("FeeID"));
           Fee f = new Fee(FeeID);
           f.Delete();
       }
   }
}
 </code>
 </example>
 <summary>
 Deletes this fee.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.Delete(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void Page_Load(System.Object sender, System.EventArgs e) 
   {
       String CMD = HttpContext.Current.Request.QueryString("CMD");

       if(CMD == "DeleteFeeLine")
       {
           String  FeeID = Converter.ToString(HttpContext.Current.Request.QueryString("FeeID"));
           Fee f = new Fee();
           f.Delete(FeeID);
       }
   }
}
 </code>
 </example>
 <summary>
 Deletes fee with the specified ID.
 </summary>
 <param name="feeId">The ID STR.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.Delete(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void Page_Load(System.Object sender, System.EventArgs e) 
   {
       String CMD = HttpContext.Current.Request.QueryString("CMD");

       if(CMD == "DeleteFeeLine")
       {
           String  FeeID = Converter.ToString(HttpContext.Current.Request.QueryString("FeeID"));
           Fee f = new Fee();
           f.Delete(FeeID);
       }
   }
}
 </code>
 </example>
 <summary>
 Deletes fee with the specified ID and method.
 </summary>
 <param name="feeId">The ID STR.</param>
 <param name="methodAlias">The method STR.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.Delete(System.String,System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void Page_Load(System.Object sender, System.EventArgs e) 
   {
       String CMD = HttpContext.Current.Request.QueryString("CMD");

       if(CMD == "DeleteFeeLine")
       {
           String  FeeID = Converter.ToString(HttpContext.Current.Request.QueryString("FeeID"));
           String  MetID = Converter.ToString(HttpContext.Current.Request.QueryString("MetID"));
           Fee f = new Fee();
           f.Delete(FeeID, MetID);
       }
   }
}
 </code>
 </example>
 <summary>
 Deletes fee with the specified ID and method.
 </summary>
 <param name="feeId">The ID STR.</param>
 <param name="methodAlias">The method STR.</param>
 <param name="feeMethodId">The method ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.Copy">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Fee fee;
   public Fee DoSave()
   {
       Fee f = new Fee();
       f = fee.Copy();
       return f;
   }
}
 </code>
 </example>
 <summary>
 Copies this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.Clone">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Fee fee;
   public void DoSave()
   {
       Fee f = new Fee();
       f = fee.Clone();
       f.ID = string.Empty;
       f.Save(f.ID);
   }
}
 </code>
 </example>
 <summary>
 Clones this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.GetFees(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetFeeData() 
{
    FeeCollection dwFees = Fee.GetFees("PAY", payId);

    return GetFeeData( dwFees );
 }
 </code>
 </example>
 <summary>
 Gets fees by method and method ID.
 </summary>
 <param name="method">The method.</param>
 <param name="feeMethodId">The method ID.</param>
 <returns>FeeCollection object</returns>
 <seealso  cref="T:Dynamicweb.Ecommerce.Orders.FeeCollection" />
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.GetFees(System.String,System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetDanishFeeData() 
{
    FeeCollection dwFees = Fee.GetFees("PAY", payId, "DK");

    return GetFeeData( dwFees );
 }
 </code>
 </example>
 <summary>
 Gets the fees.
 </summary>
 <param name="method">The method.</param>
 <param name="feeMethodId">The method ID.</param>
 <param name="countryId">The country ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.GetFees(System.String,System.String,System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetCaliforniaStateFeeData() 
{
    FeeCollection dwFees = Fee.GetFees("PAY", payId, "US", "CA");

    return GetFeeData( dwFees );
 }
 </code>
 </example>
 <summary>
 Gets the fees.
 </summary>
 <param name="method">The method.</param>
 <param name="feeMethodId">The method ID.</param>
 <param name="countryId">The country ID.</param>
 <param name="regionId">The region ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.GetFees(System.String,System.String,System.String,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetCaliforniaStateFeeData() 
{
    FeeCollection dwFees = Fee.GetFees("PAY", payId, "US", "CA");

    return GetFeeData( dwFees );
 }
 </code>
 </example>
 <summary>
 Gets the fees.
 </summary>
 <param name="method">The method.</param>
 <param name="feeMethodId">The method ID.</param>
 <param name="countryId">The country ID.</param>
 <param name="regionId">The region ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.GetFeesForPaymethod(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetFeeDataForPaymethod() 
{
    FeeCollection dwFees = Fee.GetFeesForPaymethod("PAY1");

    return GetFeeData( dwFees );
 }
 </code>
 </example>
 <summary>
 Gets the fees for pay method.
 </summary>
 <param name="feeMethodId">The method ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.GetFeesForPaymethod(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetDanishFeeDataForPaymethod() 
{
    FeeCollection dwFees = Fee.GetFeesForPaymethod("PAY1", "DK");

    return GetFeeData( dwFees );
 }
 </code>
 </example>
 <summary>
 Gets the fees for pay method.
 </summary>
 <param name="feeMethodId">The method ID.</param>
 <param name="countryId">The country ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.GetFeesForPaymethod(System.String,System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetAlabamaFeeDataForPaymethod() 
{
    FeeCollection dwFees = Fee.GetFeesForPaymethod("PAY1", "US", "AL");

    return GetFeeData( dwFees );
 }
 </code>
 </example>
 <summary>
 Gets the fees for pay method.
 </summary>
 <param name="feeMethodId">The method ID.</param>
 <param name="countryId">The country ID.</param>
 <param name="regionId">The region ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.GetFeesForShippingmethods(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetFeeDataForShippingmethods() 
{
    FeeCollection dwFees = Fee.GetFeesForShippingmethods("SHIP1");

    return GetFeeData( dwFees );
 }
 </code>
 </example>
 <summary>
 Gets the fees for shipping methods.
 </summary>
 <param name="feeMethodId">The method ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.GetFeesForShippingmethods(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetDanishFeeDataForShippingmethods() 
{
    FeeCollection dwFees = Fee.GetFeesForShippingmethods("SHIP1", "DK");

    return GetFeeData( dwFees );
 }
 </code>
 </example>
 <summary>
 Gets the fees for shipping methods.
 </summary>
 <param name="feeMethodId">The method ID.</param>
 <param name="countryId">The country ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.GetFeesForShippingmethods(System.String,System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetAlabamaFeeDataForShippingmethods() 
{
    FeeCollection dwFees = Fee.GetFeesForShippingmethods("SHIP1", "US", "AL");

    return GetFeeData( dwFees );
 }
 </code>
 </example>
 <summary>
 Gets the fees for shipping methods.
 </summary>
 <param name="feeMethodId">The method ID.</param>
 <param name="countryId">The country ID.</param>
 <param name="regionId">The region ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.GetFeesForDiscount(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetDanishFeeDataForDiscount() 
{
    FeeCollection dwFees = Fee.GetFeesForDiscount("DISC1");

    return GetFeeData( dwFees );
 }
 </code>
 </example>
 <summary>
 Gets the fees for discount.
 </summary>
 <param name="feeMethodId">The method ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Fee.ClearCache">
 <summary>
 Clear cached fees
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.FeeCollection">
 <summary>
 Represents a collection of fees
 </summary>
 <example>
 <code description="Fee information page example" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\FeeInformationPageSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.FeeCollection.Item(System.Int32)">
 <summary>
 Gets or sets the element at the specified index.
 </summary>
 <value></value>
 <returns>
 The element at the specified index.
 </returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.FeeCollection.Load(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public FeeCollection GetFeesForDiscount() 
{
 	String query = "SELECT * FROM EcomFees WHERE FeeMethod = 'SALESDISCNT' ORDER BY FeeID";

 	FeeCollection col = new FeeCollection();
 	col.Load(query);
 	return col;
}
 </code>
 </example>
 <summary>
 Loads FeeCollection using the specified query.
 </summary>
 <param name="query">The query.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.FeeCollection.AddRange(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Orders.Fee})">
 <summary>
 Adds range of fees to the collection
 </summary>
 <param name="fees"></param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.FeeManager">
 <summary>
 The class FeeManager helps to manage a <seealso cref="T:Dynamicweb.Ecommerce.Orders.Fee"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.FeeManager.FindFee(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Find the fee for the order.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.FeeProvider">
 <summary>
 The FeeProvider allows you to manipulate the shipping fee of an order 
 in eCommerce using class inherited from Dynamicweb.eCommerce.Orders.FeeProvider.
 </summary>
<example>
The following example demonstrates how to grant free shipping to customers
 who posts multiple orders within 24 hours. If the web shop can ship the items
 from the first and second order together, there is no need for the customer to be double-charged for shipping and handling.
 In cases where no previous orders have been submitted, the FeeProvider
 simply returns null which then will cause Dynamicweb eCommerce to ignore
 the FeeProvider when it sorts out the shipping fee.
 <code description="Fee information page example" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\FeeProviderSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.FeeProvider.FindFee(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Finds the fee for the order that should replace standard ones.
 </summary>
 <param name="order">The order.</param>
 <returns>Returns shipping fee for the specified order</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.IOrder">
 <summary>
 Order interface.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.IOrder.Id">
 <summary>
 Gets or sets the ID.
 </summary>
 <value>The ID.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Order">
 <summary>
 Represents information about an order.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.IsExported">
 <summary>
 Determines whether order was exported.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Id">
 <summary>
 Gets or sets the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.FixedId">
 <summary>
 Gets the fixed ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.AutoId">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> Auto ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.IdWithIcon">
 <summary>
 Gets the ID with icon.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.GatewayTransactionProblems">
 <summary>
 Gets the gateway transaction problems.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ShippingProviderErrors">
 <summary>
 Gets the shipping provider errors.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ShippingProviderWarnings">
 <summary>
 Gets the shipping provider warnings.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TaxProviderErrors">
 <summary>
 Gets the tax provider errors.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TaxTransactionNumber">
 <summary>
 Gets or sets the tax transaction number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.AddressValidatorResults">
 <summary>
 Gets the address validator results.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.GatewayUniqueId">
 <summary>
 Gets or sets the gateway unique ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Icon">
 <summary>
 Gets the icon file name of the order payment method.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ShopId">
 <summary>
 Gets or sets the shop ID where the order was sold.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.OrderContextId">
 <summary>
 Gets or sets the order context ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ShopName">
 <summary>
 Gets or sets the shop name where the order was sold.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Date">
 <summary>
 Gets or sets the order creation date.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Modified">
 <summary>
 Gets or sets the date when order was modified.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Complete">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> is completed.
 Non-completed orders are displayed in red, meaning that the ordering process was interrupted prior to finishing the final step.
 </summary>
 <value><c>true</c> if complete; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CompletedDate">
 <summary>
 Gets or sets the date when order was completed.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Deleted">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> is deleted.
 When administrator delete the order it only marked as deleted.
 </summary>
 <value><c>true</c> if deleted; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.StateId">
 <summary>
 Gets or sets the order state ID e.g. Completed, New, Important etc.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Vat">
 <summary>
 Gets or sets the VAT.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Ip">
 <summary>
 Gets or sets the customer's IP.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Referrer">
 <summary>
 Gets or sets the referrer.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CheckoutPageId">
 <summary>
 Gets or sets the PageID where was checkout step.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TransactionValue">
 <summary>
 Gets or sets the transaction value.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TransactionType">
 <summary>
 Gets or sets the transaction type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TransactionStatus">
 <summary>
 Gets or sets the payment gateway transaction status (succeeded, canceled, failed etc).
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TransactionNumber">
 <summary>
 Gets or sets the payment gateway transaction number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TransactionAmount">
 <summary>
 Gets or sets the transaction amount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TransactionPayGatewayCode">
 <summary>
 Gets or sets the transaction payment gateway code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TransactionMailSend">
 <summary>
 Gets or sets a value indicating whether the mail with transaction state was sent to customer.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TransactionCardType">
 <summary>
 Gets or sets the payment card type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TransactionCardNumber">
 <summary>
 Gets or sets the payment card number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TrackTraceNumber">
 <summary>
 Gets or sets the track trace number (obsolete).
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TrackTraceName">
 <summary>
 Gets or sets the and track trace name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TrackTraceId">
 <summary>
 Gets or sets the track trace ID. Track &amp; Trace property allows determining the current and previous locations of purchased items and other statuses of cargo in transit.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TrackTraceParameters">
 <summary>
 Gets or sets the track trace parameters. Track &amp; Trace property allows determining the current and previous locations of purchased items and other statuses of cargo in transit.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TrackTrace">
 <summary>
 Gets the track trace. Track &amp; Trace property allows determining current and previous locations of purchased items and other statuses of cargo in transit.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TrackTraceUrl">
 <summary>
 Gets or sets the track trace URL. Track &amp; Trace property allows determining the current and previous locations of purchased items and other statuses of cargo in transit.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ShippingMethod">
 <summary>
 Gets or sets the shipping method.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ShippingMethodDescription">
 <summary>
 Gets or sets the shipping method description.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ShippingMethodCountryCode">
 <summary>
 Gets or sets the shipping method country code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ShippingMethodId">
 <summary>
 Gets or sets the shipping method ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.IsPaymentSet">
 <summary>
 Gets a value indicating whether the payment method is set.
 </summary>
 <value><c>true</c> if this instance is payment set; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.PaymentMethod">
 <summary>
 Gets or sets the payment method name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.PaymentMethodId">
 <summary>
 Gets or sets the payment method ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.PaymentMethodDescription">
 <summary>
 Gets or sets the payment method description.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.SavedCardId">
 <summary>
 Gets or sets the ID of saved card.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.SavedCardDraftName">
 <summary>
 Gets or sets the name for saved card to be created.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DoSaveCardToken">
 <summary>
 Gets or sets the value indicating whether to save card.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.SalesDiscount">
 <summary>
 Gets or sets the sales discount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CurrencyName">
 <summary>
 Gets or sets the currency name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CurrencyRate">
 <summary>
 Gets or sets the currency rate on the order creation date.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CurrencyCode">
 <summary>
 Gets or sets the currency code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ReSendEmail">
 <summary>
 Gets or sets the resend email.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.IsCart">
 <summary>
 Gets or sets a value indicating whether order has "cart" status. The order will have "cart" status until customer confirms the payment.
 </summary>
 <value><c>true</c> if this instance is cart; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.IsQuote">
 <summary>
 Gets or sets a value indicating whether this is an "order" or a "quote". 
 </summary>
 <value><c>true</c> if this instance is quote; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.IsRecurringOrderTemplate">
 <summary>
 Gets or sets a value indicating whether this is an "order" or a "Recurring order template". 
 </summary>
 <returns><c>true</c> if this instance is recurring order; otherwise, <c>false</c>.</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.IsLedgerEntry">
 <summary>
 Gets or sets a value indicating whether this is a "ledger entry". 
 </summary>
 <value><c>true</c> if this instance is ledger entry; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.IsPayable">
 <summary>
 Gets or sets a value indicating whether this order can be "payed". 
 </summary>
 <value><c>true</c> if this instance is payable; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.IsCartEditable">
 <summary>
 Gets or sets a value indicating whether this order could be edited while it is in a cart.
 </summary>
 <value><c>true</c> if this instance is could be edited while it is in a cart; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.FieldsXml">
 <summary>
 Gets or sets the fields XML.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.SecondaryUserId">
 <summary>
 Gets or sets the impersonated access user ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.SecondaryUserName">
 <summary>
 Gets or sets the impersonated access user Name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerAccessUserId">
 <summary>
 Gets or sets the customer access user ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerAccessUserUserName">
 <summary>
 Gets or sets the customer access user name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerNumber">
 <summary>
 Gets or sets the customer number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerCompany">
 <summary>
 Gets or sets the customer company.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerTitle">
 <summary>
 Gets or sets the customer title.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerName">
 <summary>
 Gets or sets the customer name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerFirstName">
 <summary>
 Gets or sets the customer first name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerSurname">
 <summary>
 Gets or sets the customer surname.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerMiddleName">
 <summary>
 Gets or sets the customer middle name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerHouseNumber">
 <summary>
 Gets or sets the customer house number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerInitials">
 <summary>
 Gets or sets the customer initials.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerPrefix">
 <summary>
 Gets or sets the customer prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerAddress">
 <summary>
 Gets or sets the customer address.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerAddress2">
 <summary>
 Gets or sets the customer address2.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerZip">
 <summary>
 Gets or sets the customer zip code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerCity">
 <summary>
 Gets or sets the customer city.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerCountry">
 <summary>
 Gets or sets the customer country.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerCountryCode">
 <summary>
 Gets or sets the customer country code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerRegion">
 <summary>
 Gets or sets the customer region.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerPhone">
 <summary>
 Gets or sets the customer phone.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerFax">
 <summary>
 Gets or sets the customer fax.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerEmail">
 <summary>
 Gets or sets the customer email.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerCell">
 <summary>
 Gets or sets the customer cell.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerRefId">
 <summary>
 Gets or sets the customer reference ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerEan">
 <summary>
 Gets or sets the customer EAN.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerVatRegNumber">
 <summary>
 Gets or sets the customer VAT registration number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryCompany">
 <summary>
 Gets or sets the delivery company.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryName">
 <summary>
 Gets or sets the delivery name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryFirstName">
 <summary>
 Gets or sets the delivery first name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliverySurname">
 <summary>
 Gets or sets the delivery surname.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryMiddleName">
 <summary>
 Gets or sets the delivery middle name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryTitle">
 <summary>
 Gets or sets the delivery title.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryHouseNumber">
 <summary>
 Gets or sets the delivery house number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryInitials">
 <summary>
 Gets or sets the delivery initials.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryPrefix">
 <summary>
 Gets or sets the delivery prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryAddress">
 <summary>
 Gets or sets the delivery address.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryAddress2">
 <summary>
 Gets or sets the delivery address2.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryZip">
 <summary>
 Gets or sets the delivery ZIP.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryCity">
 <summary>
 Gets or sets the delivery city.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryCountry">
 <summary>
 Gets or sets the delivery country.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryCountryCode">
 <summary>
 Gets or sets the delivery country code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryRegion">
 <summary>
 Gets or sets the delivery region.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryPhone">
 <summary>
 Gets or sets the delivery phone.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryFax">
 <summary>
 Gets or sets the delivery fax.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryEmail">
 <summary>
 Gets or sets the delivery email.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DeliveryCell">
 <summary>
 Gets or sets the delivery cell.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Comment">
 <summary>
 Gets or sets the comment.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerComment">
 <summary>
 Gets or sets the customer comment.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.GatewayResult">
 <summary>
 Gets or sets the result from the payment gateway.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.GatewayPaymentStatus">
 <summary>
 Gets or sets the gateway payment status(Paid, Rejected etc).
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CartV2StepIndex">
 <summary>
 Gets or sets the index of the current step(CartV2).
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CustomerAccepted">
 <summary>
 Gets or sets a value indicating whether customer has accepted order terms and conditions.
 </summary>
 <value><c>true</c> if customer was accepted; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.HasSetUserDetails">
 <summary>
 Gets or sets a value indicating whether the customer data has been filled in.
 </summary>
 <value><c>true</c> if this instance has set user details; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Gateway">
 <summary>
 Gets the selected payment gateway (CartV1).
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CheckoutHandler">
 <summary>
 Gets the selected checkout handler (CartV2).
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.StepNum">
 <summary>
 Gets or sets the current step number (CartV1).
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.StepHistory">
 <summary>
 Gets or sets the order step history.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.LanguageId">
 <summary>
 Gets or sets the order language ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.OrderFieldValues">
 <summary>
 Gets or sets the custom order field values.
 It is possible to easily create custom order fields in the {Management center -> eCommerce -> Orders -> Order fields}.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Errors">
 <summary>
 Gets or sets the errors.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TotalDiscount">
 <summary>
 Gets the total discount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TotalPrice">
 <summary>
 Gets the total price including VAT.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TotalPriceFormatted">
 <summary>
 Gets the total price string in currency format.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TotalPriceWithoutVatFormatted">
 <summary>
 Gets the total price without VAT string in currency format.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TotalPriceWithoutDiscounts">
 <summary>
 Gets the total price without discounts.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TotalPriceWithoutTaxes">
 <summary>
 Gets the total price without taxes.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TotalPriceWithoutDiscountsOrTaxes">
 <summary>
 Gets the total price without discounts or taxes.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.PriceCalculationDate">
 <summary>
 Gets or sets the price calculation date on order.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.DateCount">
 <summary>
 Gets or sets the date count.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ParentOrderLineCount(Dynamicweb.Ecommerce.Orders.OrderLineCollection)">
 <summary>
 Gets the parent order line count. Does not count lines of the parent product parts.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ParentOrderLineQuantityCount(Dynamicweb.Ecommerce.Orders.OrderLineCollection)">
 <summary>
 Gets the parent order line quantity count. Does not count lines of the parent product parts.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ParentProductLineQuantityCount(Dynamicweb.Ecommerce.Orders.OrderLineCollection)">
 <summary>
 Gets the parent product line quantity counts. Does not include lines with discounts and parent product parts.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.NewsletterSubscribe">
 <summary>
 Gets or sets a value indicating whether customer was subscribed for a newsletter.
 </summary>
 <value><c>true</c> if newsletter was subscribed; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.IntegrationOrderId">
 <summary>
 Gets or sets the integration order ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Requisition">
 <summary>
 Gets or sets the requisition.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.VisitorSessionId">
 <summary>
 Gets or sets the ID of the visitor's session that corresponds to the visitor that this order is associated with.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.VisitorSessionDate">
 <summary>
 Gets the created date of this experiment.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.VoucherCode">
 <summary>
 Gets or sets the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> Voucher code used to activate voucher discount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.VoucherUseType">
 <summary>
 Gets or sets the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> value indicates where Voucher code is used.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.BoughtGiftCards">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> GiftCards if any are bought.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.GiftCardTransactionFailed">
 <summary>
 Gets or sets the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> GiftCard transactions failed status.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.RecurringOrderId">
 <summary>
 Gets or sets the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> recurring order ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.PaymentRecurringInfo">
 <summary>
 Gets or sets payment provider recurring order information(recurring identity, user profiles, any information needed for payment provider).
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ReceiptShowCount">
 <summary>
 Gets or sets the count of receipt was shown.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ShippingProviderValues">
 <summary>
 Gets the shipping provider values.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ShippingDocumentValues">
 <summary>
 Gets the shipping document values.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.HasShippingDocument">
 <summary>
 Determines whether the shipping document values is empty or not.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.IsShippingDocumentSupported">
 <summary>
 Determines whether the shipping document is supported.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.InfoDirectProviderErrors">
 <summary>
 Gets the Info Direct service errors.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ExternalPaymentFee">
 <summary>
 Get or set the external payment fee.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TransactionToken">
 <summary>
 Get or set the payment transaction token.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TransactionTokenCheckSum">
 <summary>
 Gets the token check sum.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ReturnOperations">
 <summary>
 Gets or sets the order return operations as collection of <seealso cref="T:Dynamicweb.Ecommerce.Orders.OrderReturnInfo"/>.
 </summary>
 <remarks>History of operations for payments with <seealso cref="T:Dynamicweb.Ecommerce.Orders.Gateways.IFullReturn"/>, <seealso cref="T:Dynamicweb.Ecommerce.Orders.Gateways.IPartialReturn"/> interfaces implemented.</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Weight">
 <summary>
 Gets the total weight of the ordered products.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Volume">
 <summary>
 Gets the total volume of the ordered products.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.OrderStates">
 <summary>
 Gets the order states collection with the current order state.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.OrderState">
 <summary>
 Gets the current order state, e.g. Completed, New, Important etc.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Shops">
 <summary>
 Gets the shop where the order was sold.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.OrderLines">
 <summary>
 Gets the collection of all order lines.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ProductOrderLines">
 <summary>
 Gets an <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineCollection" /> containing all <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> objects where OrderLine.Product is not null.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Products">
 <summary>
 Gets the collection of all ordered products.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.OrderFields">
 <summary>
 Gets the custom order fields. It is possible to easily create custom order fields in the {Management center -> eCommerce-> Orders -> Order fields}
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.OrderField">
 <summary>
 Gets the order field.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Currency">
 <summary>
 Gets the currency.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Secret">
 <summary>
 A secret sequence of characters to use e.g. for security. The secret is non-changeable for this order.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ShippingCountrySelection">
 <summary>
 Gets or sets the shipping country.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.PaymentCountrySelection">
 <summary>
 Gets or sets the country for shipping.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.GiftCardCode">
 <summary>
 This is infrastructural property don't use it anywhere except gift cart validation.
 Gets GiftCard csv codes applied to order.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CaptureInfo">
 <summary>
 Gets or sets the capture info.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.CaptureAmount">
 <summary>
 Gets or sets the captured amount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.IsCaptureSupported">
 <summary>
 Return "true" if the payment method of this order supports remote capture feature.
 Capturing an order allows to withdraw or cancel payment directly while order placement. In this case, user does not need to log in the gateway administration system to be able to cancel the order.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.IsPartialCaptureSupported">
 <summary>
 Return "true" if the payment method of this order supports remote capture feature.
 Capturing an order allows to withdraw or cancel payment directly while order placement. In this case, user does not need to log in the gateway administration system to be able to cancel the order.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.TotalPoints">
 <summary>
 Points for redeem.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.RewardTotalPoints">
 <summary>
 Points for reward.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.IsPriceCalculatedByProvider">
 <summary>
 Gets or sets a value indicating whether prices are calculated by a provider.
 </summary>
 <value><c>true</c> if prices are calculated by a provider; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ForceCalculate">
 <summary>
 Gets or sets a value indicating whether giftCard orderlines prices are changed.
 </summary>
 <value><c>true</c> if giftCard orderlines prices are changed; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Calculate">
 <summary>
 Gets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> is calculated (is in the cart state).
 </summary>
 <value><c>true</c> if calculated; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.PriceBeforeFees">
 <summary>
 Gets the price without payment and shipping fees.
 </summary>
 <value>The price before fees.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.Price">
 <summary>
 Gets the price, including payment and shipping fees.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.AllowOverridePrices">
 <summary>
 Indicated whether Price is overridden and not calculated. Used to set explicit PriceInfo values.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.ShippingFee">
 <summary>
 Gets the shipping fee.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.FeeCountryCode(System.String)">
 <summary>
 Gets the fee country code for specified method (SHIP or PAY).
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.FeeZip(System.String)">
 <summary>
 Gets the fee zip code for specified method (SHIP or PAY).
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.FeeRegionCode(System.String,System.String)">
 <summary>
 Gets the fee region code for specified method (SHIP or PAY).
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Order.PaymentFee">
 <summary>
 Gets the payment fee.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.Reload">
 <summary>
 Reload all properties of the current order.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> class.
 </summary>
 <param name="dataReader">The DataReader with the properties.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.Capture">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void AJAXCapture()
   {
       //Get OrderID
       string orderID = Dynamicweb.Context.Current.Request("CaptureOrderID");
       if (string.IsNullOrEmpty(orderID))
       {
           return;
       }

       //Get Order
       Order order = Order.Create(orderID);
       if (string.IsNullOrEmpty(order.Id))
       {
           return;
       }

       //Capture
       OrderCaptureInfo result = order.Capture();

       //Write json
       if (result != null)
       {
           StringBuilder json = new StringBuilder();
           json.Append("{");
           json.AppendFormat("\"orderCaptureState\" : \"{0}\",", result.State.ToString());
           json.AppendFormat("\"orderCaptureInfoDate\" : \"{0}\",", result.CaptureTime.ToString("ddd, dd MMM yyyy HH:mm", Dynamicweb.Environment.ExecutingContext.GetCulture(False)));
           json.AppendFormat("\"orderCaptureMessage\" : \"{0}\",", result.Message);
           json.AppendFormat("\"orderCaptureSupported\" : true");
           json.Append("}");

           //Write to response
           Response.Write(json.ToString());
       }
   }
}
 </code>
 </example>
 <summary>
 Performs capture on this order and stores the resulting OrderCaptureInfo on the order.
 </summary>
 <returns>Return the generated OrderCaptureInfo or null if capture is not supported.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.Capture(System.Int64,System.Boolean)">
 <summary>
 Performs capture on this order and stores the resulting OrderCaptureInfo on the order.
 </summary>
 <param name="amount">The amount that is multiplied by 100.</param>
 <param name="final">The capture is final.</param>
 <returns>Return the generated OrderCaptureInfo or null if capture is not supported.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.CreateOrderLine(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Adds a new <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> to the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineCollection" /> of this <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> based on the given <see cref="T:Dynamicweb.Ecommerce.Products.Product" />.
 A quantity of '1' is used.
 The Products DefaultUnit is used.
 </summary>
 <param name="product">The product.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> that was added to the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" />.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.CreateOrderLine(Dynamicweb.Ecommerce.Products.Product,System.Double)">
 <summary>
 Adds a new <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> to the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineCollection" /> of this <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> based on the given <see cref="T:Dynamicweb.Ecommerce.Products.Product" />.
 The Products DefaultUnit is used.
 </summary>
 <param name="product">The product.</param>
 <param name="quantity">The quantity.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> that was added to the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" />.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.CreateOrderLine(Dynamicweb.Ecommerce.Products.Product,System.Double,Dynamicweb.Ecommerce.Stocks.StockUnit)">
 <summary>
 Adds a new <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> to the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineCollection" /> of this <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> based on the given <see cref="T:Dynamicweb.Ecommerce.Products.Product" />.
 </summary>
 <param name="product">The product.</param>
 <param name="quantity">The quantity.</param>
 <param name="unit">The unit.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> that was added to the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" />.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.CreateOrderLine(Dynamicweb.Ecommerce.Products.Product,System.Double,Dynamicweb.Ecommerce.Stocks.StockUnit,Dynamicweb.Ecommerce.Prices.PriceInfo)">
 <summary>
 Adds a new <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> to the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineCollection" /> of this <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> based on the given <see cref="T:Dynamicweb.Ecommerce.Products.Product" />.
 </summary>
 <param name="product">The product.</param>
 <param name="quantity">The quantity.</param>
 <param name="unit">The unit.</param>
 <param name="unitPrice">The unit price of the product. Use this if unit price should be different from the price of the product.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> that was added to the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" />.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.CreateOrderLine(System.String,System.Double,Dynamicweb.Ecommerce.Prices.PriceInfo,Dynamicweb.Ecommerce.Orders.OrderLineType)">
 <summary>
 Adds a new <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> to the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineCollection" /> of this <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> with the given <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineType" /> and the given text.
 </summary>
 <param name="text">The text.</param>
 <param name="quantity">The quantity.</param>
 <param name="unitPrice">The unit price.</param>
 <param name="type">The type.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> that was added to the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" />.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.CreateOrderLine(System.String,System.Double,Dynamicweb.Ecommerce.Prices.PriceInfo,Dynamicweb.Ecommerce.Orders.OrderLineType,System.String)">
 <summary>
 Adds a new <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> to the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineCollection" /> of this <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> with the given <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineType" /> and the given text.
 </summary>
 <param name="text">The text.</param>
 <param name="quantity">The quantity.</param>
 <param name="unitPrice">The unit price.</param>
 <param name="type">The type.</param>
 <param name="parentOrderLineId">The parent order line identifier.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> that was added to the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" />.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.CreateOrderLine(System.String,System.Double,Dynamicweb.Ecommerce.Prices.PriceInfo,Dynamicweb.Ecommerce.Orders.OrderLineType,System.String,System.String)">
 <summary>
 Adds a new <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> to the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineCollection" /> of this <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> with the given <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineType" /> and the given text.
 </summary>
 <param name="text">The text.</param>
 <param name="quantity">The quantity.</param>
 <param name="unitPrice">The unit price.</param>
 <param name="type">The type.</param>
 <param name="parentOrderLineId">The parent order line identifier.</param>
 <param name="discountId">The discount identifier.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> that was added to the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" />.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.ClearCachedPrices">
 <summary>
 Clears the cached prices.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.ForcePriceRecalculation">
 <summary>
 Forces the recalculation of the Price.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.GetPropertyValue(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Dynamicweb.eCommerce.Orders.SortOrderType _sortOrder;
   private string _fieldName;
   public int Compare(object x, object y)
   {
       Dynamicweb.eCommerce.Orders.Order order1 = (Dynamicweb.eCommerce.Orders.Order)x;
       Dynamicweb.eCommerce.Orders.Order order2 = (Dynamicweb.eCommerce.Orders.Order)y;

       string fieldType = null;
       try
       {
           fieldType = order1.GetPropertyType(_fieldName);
       }
       catch
       {
           return 0;
       }

       try
       {
           switch (fieldType.ToLower())
           {
               case "boolean":
                   bool order1bool = false;
                   order1bool = (bool)order1.GetPropertyValue(_fieldName);

                   bool order2bool = false;
                   order2bool = (bool)order2.GetPropertyValue(_fieldName);

                   return (order1bool.CompareTo(order2bool) * (int)_sortOrder);
               case "integer":
                  int order1int = 0;
                  order1int = (int)order1.GetPropertyValue(_fieldName);

                  int order2int = 0;
                  order2int = (int)order2.GetPropertyValue(_fieldName);

                  return (order1int.CompareTo(order2int) * (int)_sortOrder);
              case "string":
                  string order1string = null;
                  order1string = (string)order1.GetPropertyValue(_fieldName);

                  string order2string = null;
                  order2string = (string)order2.GetPropertyValue(_fieldName);

                  return (order1string.CompareTo(order2string) * (int)_sortOrder);
              default:
                  return 0;
          }
      }
      catch
      {
          return 0;
      }
   }
}
 </code>
 </example>
 <summary>
 Gets the property value.
 </summary>
 <param name="propertyName">Name of the property.</param>
 <returns>The property value.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.GetPropertyType(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Dynamicweb.eCommerce.Orders.SortOrderType _sortOrder;
   private string _fieldName;
   public int Compare(object x, object y)
   {
       Dynamicweb.eCommerce.Orders.Order order1 = (Dynamicweb.eCommerce.Orders.Order)x;
       Dynamicweb.eCommerce.Orders.Order order2 = (Dynamicweb.eCommerce.Orders.Order)y;

       string fieldType = null;
       try
       {
           fieldType = order1.GetPropertyType(_fieldName);
       }
       catch
       {
           return 0;
       }

       try
       {
           switch (fieldType.ToLower())
           {
               case "boolean":
                   bool order1bool = false;
                   order1bool = (bool)order1.GetPropertyValue(_fieldName);

                   bool order2bool = false;
                   order2bool = (bool)order2.GetPropertyValue(_fieldName);

                   return (order1bool.CompareTo(order2bool) * (int)_sortOrder);
               case "integer":
                  int order1int = 0;
                  order1int = (int)order1.GetPropertyValue(_fieldName);

                  int order2int = 0;
                  order2int = (int)order2.GetPropertyValue(_fieldName);

                  return (order1int.CompareTo(order2int) * (int)_sortOrder);
              case "string":
                  string order1string = null;
                  order1string = (string)order1.GetPropertyValue(_fieldName);

                  string order2string = null;
                  order2string = (string)order2.GetPropertyValue(_fieldName);

                  return (order1string.CompareTo(order2string) * (int)_sortOrder);
              default:
                  return 0;
          }
      }
      catch
      {
          return 0;
      }
   }
}
 </code>
 </example>
 <summary>
 Gets the property type.
 </summary>
 <param name="propertyName">Name of the property.</param>
 <returns>The property type.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.RemoveNoneActiveProducts">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void SaveToSession(Dynamicweb.eCommerce.Orders.Order EcomCart)
   {
       //Process the cart and save it to session
       {
           if (EcomCart != null)
           {
               //Save the cart
               //Note: Cart must be saved in a session variable BEFORE the call to RemoveNoneActiveProducts below.
               //Otherwise an infinite loop could be made!
               Dynamicweb.eCommerce.Common.Context.SetCart(EcomCart);

               //Remove cached prices
               EcomCart._CachedPrice = null;
               EcomCart._CachedPriceBeforeFees = null;

               //Check if all the products are still available
               EcomCart.RemoveNoneActiveProducts();
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Removes all orderlines that is of type Product and that no longer exist in the database. Also removes products according to the control panel settings: Active, on stock, price is zero.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.Save">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoSave(Dynamicweb.eCommerce.Orders.Order order)
   {
       //Broadcast CheckoutDoneOrderIsNotComplete notification
       NotificationManager.Notify(Dynamicweb.eCommerce.Cart.Notifications.CheckoutDoneOrderIsNotComplete, new Dynamicweb.eCommerce.Cart.Notifications.CheckoutDoneOrderIsNotCompleteArgs { Order = order });

       //Convert back to cart and add to context
       order.DowngradeToCart();
       Dynamicweb.eCommerce.Common.Context.SetCart(order);
       order.CartV2StepIndex = 0;
       order.Save();
   }
}
 </code>
 </example>
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.Save(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoSave(Dynamicweb.eCommerce.Orders.Order order)
   {
       //Broadcast CheckoutDoneOrderIsNotComplete notification
       NotificationManager.Notify(Dynamicweb.eCommerce.Cart.Notifications.CheckoutDoneOrderIsNotComplete, new Dynamicweb.eCommerce.Cart.Notifications.CheckoutDoneOrderIsNotCompleteArgs { Order = order });

       //Convert back to cart and add to context
       order.DowngradeToCart();
       Dynamicweb.eCommerce.Common.Context.SetCart(order);
       order.CartV2StepIndex = 0;
       order.Save(order.Id);
   }
}
 </code>
 </example>
 <summary>
 Saves the instance into DB.
 </summary>
 <param name="orderId">The order ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.Save(System.String,System.Boolean)">
 <summary>
 Saves the instance into DB.
 </summary>
 <param name="orderId">The order ID.</param> 
 <param name="saveOldVersion">Sets indicator whether to save old order version.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.Delete">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DeleteOrder(string orderId)
   {
       if (orderId.Length == 0)
           return;
       Dynamicweb.eCommerce.Orders.Order order = Dynamicweb.eCommerce.Orders.Order.Create(orderId);
       if (order.Id != null)
           order.Delete();
   }
}
 </code>
 </example>
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.UpdateCartToOrder">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void ConvertToOrder()
   {
       if (Dynamicweb.eCommerce.Common.Context.Cart != null)
       {
           bool UpdateCart = true;

           if (Context.Current.Session["EcomLastConfirmedOrderID"] != null &amp;&amp; Dynamicweb.eCommerce.Common.Context.Cart.ID == Converter.ToString(Context.Current.Session["EcomLastConfirmedOrderID"]))
           {
               UpdateCart = false;
           }

           if (UpdateCart)
           {
               Dynamicweb.eCommerce.Common.Context.Cart.UpdateCartToOrder();
           }
           else
           {
               Dynamicweb.eCommerce.Common.Context.Cart.IsCart = false;
               Dynamicweb.eCommerce.Common.Context.Cart.UpdateExistOrderFromCartToOrder();
           }

           Context.Current.Session["EcomLastConfirmedOrderID"] = Dynamicweb.eCommerce.Common.Context.Cart.ID;
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the order.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.UpdateCartToQuote">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void ConvertToOrder()
   {
       if (Dynamicweb.eCommerce.Common.Context.Cart != null)
       {
           bool UpdateCart = true;

           if (Context.Current.Session["EcomLastConfirmedOrderID"] != null &amp;&amp; Dynamicweb.eCommerce.Common.Context.Cart.ID == Converter.ToString(Context.Current.Session["EcomLastConfirmedOrderID"]))
           {
               UpdateCart = false;
           }

           if (UpdateCart)
           {
               Dynamicweb.eCommerce.Common.Context.Cart.UpdateCartToOrder();
           }
           else
           {
               Dynamicweb.eCommerce.Common.Context.Cart.IsCart = false;
               Dynamicweb.eCommerce.Common.Context.Cart.UpdateExistOrderFromCartToOrder();
           }

           Context.Current.Session["EcomLastConfirmedOrderID"] = Dynamicweb.eCommerce.Common.Context.Cart.ID;
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the order.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.DowngradeToCart">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoSave(Dynamicweb.eCommerce.Orders.Order order)
   {
       //Broadcast CheckoutDoneOrderIsNotComplete notification
       NotificationManager.Notify(Dynamicweb.eCommerce.Cart.Notifications.CheckoutDoneOrderIsNotComplete, new Dynamicweb.eCommerce.Cart.Notifications.CheckoutDoneOrderIsNotCompleteArgs { Order = order });

       //Convert back to cart and add to context
       order.DowngradeToCart();
       Dynamicweb.eCommerce.Common.Context.SetCart(order);
       order.CartV2StepIndex = 0;
       order.Save(order.Id);
   }
}
 </code>
 </example>
 <summary>
 Converts the order back to cart
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.UpdateVat(System.Double)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoSave(string orderId, double vat)
   {
       if (orderId.Length == 0)
           return;
       Dynamicweb.eCommerce.Orders.Order order = Dynamicweb.eCommerce.Orders.Order.Create(orderId);
       if (order.Id != null)
       {
           order.UpdateVAT(vat);
           order.Save();
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the VAT.
 </summary>
 <param name="vat">The VAT. DB fields names are OrderVAT and OrderPriceVAT.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.UpdateVat(System.Double,System.Double)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoSave(string orderId, double vat, double vatpercent)
   {
       if (orderId.Length == 0)
           return;
       Dynamicweb.eCommerce.Orders.Order order = Dynamicweb.eCommerce.Orders.Order.Create(orderId);
       if (order.Id != null)
       {
           order.UpdateVAT(vat, vatpercent);
           order.Save();
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the VAT.
 </summary>
 <param name="vat">The VAT. DB fields names are OrderVAT and OrderPriceVAT.</param>
 <param name="vatpercent">The VAT percent. DB field name is OrderPriceVATPercent.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.UpdateExistOrderFromCartToOrder">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void ConvertToOrder()
   {
       if (Dynamicweb.eCommerce.Common.Context.Cart != null)
       {
           bool UpdateCart = true;

           if (Context.Current.Session["EcomLastConfirmedOrderID"] != null &amp;&amp; Dynamicweb.eCommerce.Common.Context.Cart.ID == Converter.ToString(Context.Current.Session["EcomLastConfirmedOrderID"]))
           {
               UpdateCart = false;
           }

           if (UpdateCart)
           {
               Dynamicweb.eCommerce.Common.Context.Cart.UpdateCartToOrder();
           }
           else
           {
               Dynamicweb.eCommerce.Common.Context.Cart.IsCart = false;
               Dynamicweb.eCommerce.Common.Context.Cart.UpdateExistOrderFromCartToOrder();
           }

           Context.Current.Session["EcomLastConfirmedOrderID"] = Dynamicweb.eCommerce.Common.Context.Cart.ID;
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the existing order from cart to order.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.UpdateGatewayResult">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void SetOrderComplete(Dynamicweb.eCommerce.Orders.Order order)
   {
       //Set complete
       order.Complete = true;

       //Remove from stock
       Dynamicweb.eCommerce.Products.Product.UpdateStock(order, Dynamicweb.eCommerce.Products.ProductOrderStockOperator.Negative);

       //Remove all earlier gateway problems from this order
       order.GatewayTransactionProblems.Clear();

       //Save all posted info
       XmlDocument formXML = new XmlDocument();
       XmlElement rootNode = formXML.CreateElement("result");
       formXML.AppendChild(rootNode);
       foreach (string formKey in Context.Current.Request.Form.Keys)
       {
           try
           {
               XmlElement node = formXML.CreateElement(XmlConvert.EncodeName(formKey));
               node.InnerText = Context.Current.Request.Form[formKey];
               rootNode.AppendChild(node);
           }
           catch (Exception ex)
           {
               //
           }
       }
       order.GatewayResult = formXML.OuterXml;

       //Save
       order.UpdateGatewayResult();
       order.Save();
   }
}
 </code>
 </example>
 <summary>
 Updates the gateway result.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.UpdateGatewayResult(System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void SetOrderComplete(Dynamicweb.eCommerce.Orders.Order order)
   {
       //Set complete
       order.Complete = true;

       //Remove from stock
       Dynamicweb.eCommerce.Products.Product.UpdateStock(order, Dynamicweb.eCommerce.Products.ProductOrderStockOperator.Negative);

       //Remove all earlier gateway problems from this order
       order.GatewayTransactionProblems.Clear();

       //Save all posted info
       XmlDocument formXML = new XmlDocument();
       XmlElement rootNode = formXML.CreateElement("result");
       formXML.AppendChild(rootNode);
       foreach (string formKey in Context.Current.Request.Form.Keys)
       {
           try
           {
               XmlElement node = formXML.CreateElement(XmlConvert.EncodeName(formKey));
               node.InnerText = Context.Current.Request.Form[formKey];
               rootNode.AppendChild(node);
           }
           catch (Exception ex)
           {
               //
           }
       }
       order.GatewayResult = formXML.OuterXml;

       //Save
       order.UpdateGatewayResult(true);
       order.Save();
   }
}
 </code>
 </example>
 <summary>
 Updates the gateway result.
 </summary>
 <param name="setComplete">if set to <c>true</c> [set complete].</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.SaveOrderComplete(System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyCheckoutHandler : CheckoutHandler
{
   private void Callback(Order order)
   {
       LogEvent(order, "Callback started");

       if (!ValidatePaymentRequest())
       {
           LogError(order, "At least one callback validation error exists - exiting callback routine.");
       }
       else
       {
           // Update gateway payment status
           order.GatewayPaymentStatus = ConvertToDwStatus(Dynamicweb.Context.Current.Request("STATUS"));
           if (order.GatewayPaymentStatus == GatewayPaymentStatus.Paid || order.GatewayPaymentStatus == GatewayPaymentStatus.ClosedSuccess)
           {
               LogEvent(order, "Payment {0} succeeded with transaction number {1}", order.Id, order.TransactionNumber);

               // Set complete
               order.Complete = true;
               order.SaveOrderComplete(true);

               // Save all posted info
               order.GatewayResult = GetPostedInfo(order);
           }
       }
       // Set transaction state
       if (order.Complete)
       {
           // Set transaction state
           order.TransactionAmount = order.Price.Price;
           order.TransactionStatus = "Succeeded";
       }
       else
       {
           order.TransactionStatus = "Failed";
       }

       //Save
       order.SaveGatewayResult();
   }
}
 </code>
 </example>
 <summary>
 Save order complete state.
 </summary>
 <param name="setComplete">if set to <c>true</c> [set complete].</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.SaveGatewayResult">
 <example>
 <code title="C#" description="" lang="CS">
class MyCheckoutHandler : CheckoutHandler
{
   private void Callback(Order order)
   {
       LogEvent(order, "Callback started");

       if (!ValidatePaymentRequest())
       {
           LogError(order, "At least one callback validation error exists - exiting callback routine.");
       }
       else
       {
           // Update gateway payment status
           order.GatewayPaymentStatus = ConvertToDwStatus(Dynamicweb.Context.Current.Request("STATUS"));
           if (order.GatewayPaymentStatus == GatewayPaymentStatus.Paid || order.GatewayPaymentStatus == GatewayPaymentStatus.ClosedSuccess)
           {
               LogEvent(order, "Payment {0} succeeded with transaction number {1}", order.Id, order.TransactionNumber);

               // Set complete
               order.Complete = true;
               order.SaveOrderComplete(true);

               // Save all posted info
               order.GatewayResult = GetPostedInfo(order);
           }
       }
       // Set transaction state
       if (order.Complete)
       {
           // Set transaction state
           order.TransactionAmount = order.Price.Price;
           order.TransactionStatus = "Succeeded";
       }
       else
       {
           order.TransactionStatus = "Failed";
       }

       //Save
       order.SaveGatewayResult();
   }
 </code>
 </example>
 <summary>
 Save the gateway result.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.UpdateStepInfo">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void StepSave(int cnt, Dynamicweb.eCommerce.Orders.Order stepOrder)
   {
           stepOrder.StepNum = cnt;
           stepOrder.StepHistory = Converter.ToString(cnt);
           stepOrder._CachedPrice = null;
           stepOrder._CachedPriceBeforeFees = null;
           stepOrder.UpdateStepInfo();
   }
}
 </code>
 </example>
 <summary>
 Updates the step information.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.SendTo(Dynamicweb.Frontend.PageView@,System.String,System.String,Dynamicweb.Rendering.Template@)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void SendMails(ref Dynamicweb.eCommerce.CustomerCenter.CustomerCenterSettings Settings, ref Dynamicweb.Frontend.PageView pageView)
   {
       string addresses = Dynamicweb.Context.Current.Request("Addresses");
       if (!string.IsNullOrEmpty(addresses))
       {
           string[] emailAddresses = addresses.Split(':');
           string oid = Dynamicweb.Context.Current.Request("OrderID");

           string SenderMail = Settings.DefaultMailAddress.Trim();
           if (string.IsNullOrEmpty(SenderMail) || StringHelper.IsValidEmailAddress(SenderMail) == false)
           {
               SenderMail = Convert.ToString(Dynamicweb.Configuration.SystemConfiguration.Instance.GetValue("/Globalsettings/Settings/CommonInformation/Email"));
               if (StringHelper.IsValidEmailAddress(SenderMail) == false)
               {
                   SenderMail = "noreply@dynamicweb-cms.com";
               }
           }
           if (!string.IsNullOrEmpty(oid))
           {
               Order tmpOrder = Dynamicweb.eCommerce.CustomerCenter.OrderManager.GetOrderForCurrentUser(oid);
               if (tmpOrder != null)
               {
                   Dynamicweb.eCommerce.Shops.Shop shop = new Dynamicweb.eCommerce.Shops.Shop(tmpOrder.ShopID);

                   for (int cnt = emailAddresses.GetLowerBound(0); cnt &lt;= emailAddresses.GetUpperBound(0); cnt++)
                   {
                       Dynamicweb.Rendering.Template t = new Dynamicweb.Rendering.Template(Settings.MyOrderDetailsTemplate);
                       tmpOrder.SendTo(ref pageView, emailAddresses[cnt], SenderMail, ref t);
                   }
               }
               else
               {
                   return;
               }
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Sends the mail to the specified address.
 </summary>
 <param name="pageView">The page view.</param>
 <param name="toMailAddress">To mail address.</param>
 <param name="fromMailAddress">From mail address.</param>
 <param name="mailTemplate">The mail template.</param>
 <returns><c>true</c> if send was succesful; otherwise <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.SendTo(Dynamicweb.Frontend.PageView@,System.String,System.String,System.String,System.String,Dynamicweb.Rendering.Template@)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void SendMails(ref Dynamicweb.eCommerce.CustomerCenter.CustomerCenterSettings Settings, ref Dynamicweb.Frontend.PageView pageView)
   {
       string addresses = Dynamicweb.Context.Current.Request("Addresses");
       if (!string.IsNullOrEmpty(addresses))
       {
           string[] emailAddresses = addresses.Split(':');
           string oid = Dynamicweb.Context.Current.Request("OrderID");

           string SenderMail = Settings.DefaultMailAddress.Trim();
           if (string.IsNullOrEmpty(SenderMail) || StringHelper.IsValidEmailAddress(SenderMail) == false)
           {
               SenderMail = Convert.ToString(Dynamicweb.Configuration.SystemConfiguration.Instance.GetValue("/Globalsettings/Settings/CommonInformation/Email"));
               if (StringHelper.IsValidEmailAddress(SenderMail) == false)
               {
                   SenderMail = "noreply@dynamicweb-cms.com";
               }
           }
           if (!string.IsNullOrEmpty(oid))
           {
               Order tmpOrder = Dynamicweb.eCommerce.CustomerCenter.OrderManager.GetOrderForCurrentUser(oid);
               if (tmpOrder != null)
               {
                   Dynamicweb.eCommerce.Shops.Shop shop = new Dynamicweb.eCommerce.Shops.Shop(tmpOrder.ShopID);

                   for (int cnt = emailAddresses.GetLowerBound(0); cnt &lt;= emailAddresses.GetUpperBound(0); cnt++)
                   {
                       Dynamicweb.Rendering.Template t = new Dynamicweb.Rendering.Template(Settings.MyOrderDetailsTemplate);
                       tmpOrder.SendTo(ref pageView, emailAddresses[cnt], SenderMail, ref t);
                   }
               }
               else
               {
                   return;
               }
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Sends the mail to the specified address.
 </summary>
 <param name="pageView">The page view.</param>
 <param name="toMailAddress">To mail address.</param>
 <param name="subject">Mail subject.</param>
 <param name="fromMailAddress">From mail address.</param>
 <param name="fromMailName">From mail sender name.</param>
 <param name="mailTemplate">The mail template.</param>
 <returns><c>true</c> if send was succesful; otherwise <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.SendTo(Dynamicweb.Frontend.PageView@,System.Collections.Generic.List{System.String},System.String,Dynamicweb.Rendering.Template@)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void SendMails(ref Dynamicweb.eCommerce.CustomerCenter.CustomerCenterSettings Settings, ref Dynamicweb.Frontend.PageView pageView)
   {
       string addresses = Dynamicweb.Context.Current.Request("Addresses");
       if (!string.IsNullOrEmpty(addresses))
       {
           string[] emailAddresses = addresses.Split(':');
           string oid = Dynamicweb.Context.Current.Request("OrderID");

           string SenderMail = Settings.DefaultMailAddress.Trim();
           if (string.IsNullOrEmpty(SenderMail) || StringHelper.IsValidEmailAddress(SenderMail) == false)
           {
               SenderMail = Convert.ToString(Dynamicweb.Configuration.SystemConfiguration.Instance.GetValue("/Globalsettings/Settings/CommonInformation/Email"));
               if (StringHelper.IsValidEmailAddress(SenderMail) == false)
               {
                   SenderMail = "noreply@dynamicweb-cms.com";
               }
           }
           if (!string.IsNullOrEmpty(oid))
           {
               Order tmpOrder = Dynamicweb.eCommerce.CustomerCenter.OrderManager.GetOrderForCurrentUser(oid);
               if (tmpOrder != null)
               {
                   Dynamicweb.eCommerce.Shops.Shop shop = new Dynamicweb.eCommerce.Shops.Shop(tmpOrder.ShopID);

                   for (int cnt = emailAddresses.GetLowerBound(0); cnt &lt;= emailAddresses.GetUpperBound(0); cnt++)
                   {
                       Dynamicweb.Rendering.Template t = new Dynamicweb.Rendering.Template(Settings.MyOrderDetailsTemplate);
                       tmpOrder.SendTo(ref pageView, emailAddresses[cnt], SenderMail, ref t);
                   }
               }
               else
               {
                   return;
               }
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Sends the mail to the specified list of addresses.
 </summary>
 <param name="pageView">The page view.</param>
 <param name="toMailAddresses">To mail addresses list.</param>
 <param name="fromMailAddress">From mail address.</param>
 <param name="mailTemplate">The mail template.</param>
 <returns><c>true</c> if send was succesful; otherwise <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.SendTo(Dynamicweb.Frontend.PageView@,System.String,System.Collections.Generic.List{System.String},System.String,System.String,Dynamicweb.Rendering.Template@)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void SendMails(ref Dynamicweb.eCommerce.CustomerCenter.CustomerCenterSettings Settings, ref Dynamicweb.Frontend.PageView pageView)
   {
       string addresses = Dynamicweb.Context.Current.Request("Addresses");
       if (!string.IsNullOrEmpty(addresses))
       {
           string[] emailAddresses = addresses.Split(':');
           string oid = Dynamicweb.Context.Current.Request("OrderID");

           string SenderMail = Settings.DefaultMailAddress.Trim();
           if (string.IsNullOrEmpty(SenderMail) || StringHelper.IsValidEmailAddress(SenderMail) == false)
           {
               SenderMail = Convert.ToString(Dynamicweb.Configuration.SystemConfiguration.Instance.GetValue("/Globalsettings/Settings/CommonInformation/Email"));
               if (StringHelper.IsValidEmailAddress(SenderMail) == false)
               {
                   SenderMail = "noreply@dynamicweb-cms.com";
               }
           }
           if (!string.IsNullOrEmpty(oid))
           {
               Order tmpOrder = Dynamicweb.eCommerce.CustomerCenter.OrderManager.GetOrderForCurrentUser(oid);
               if (tmpOrder != null)
               {
                   Dynamicweb.eCommerce.Shops.Shop shop = new Dynamicweb.eCommerce.Shops.Shop(tmpOrder.ShopID);

                   for (int cnt = emailAddresses.GetLowerBound(0); cnt &lt;= emailAddresses.GetUpperBound(0); cnt++)
                   {
                       Dynamicweb.Rendering.Template t = new Dynamicweb.Rendering.Template(Settings.MyOrderDetailsTemplate);
                       tmpOrder.SendTo(ref pageView, emailAddresses[cnt], SenderMail, ref t);
                   }
               }
               else
               {
                   return;
               }
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Sends the mail to the specified addresses.
 </summary>
 <param name="pageView">The page view.</param>
 <param name="toMailAddresses">To mail addresses list.</param>
 <param name="subject">Mail subject.</param>
 <param name="fromMailAddress">From mail address.</param>
 <param name="fromMailName">From mail sender name.</param>
 <param name="mailTemplate">The mail template.</param>
 <returns><c>true</c> if send was succesful; otherwise <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.GetOrderDataReader(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DoSomething(Order order)
   {
       IDataReader reader = order.GetOrderDataReader(order.Id);
       while (reader.Read())
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the DataReader with order.
 </summary>
 <param name="orderId">The order ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.GetCartFormName">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void RenderOrder(Order order, Template template, Dynamicweb.Frontend.PageView pageView)
   {
       // New form to replace the quantity form to also include orderline fields
       if (order.StepNum &lt; 2)
       {
          if (pageView != null)
          {
             int pageID = pageView.Page.ID;
             template.SetTag("Ecom:Order:CartForm.Start", string.Format("&lt;form action=\"/Default.aspx\" name=\"{0}\" method=\"POST\"&gt;", order.GetCartFormName()));
             template.SetTag("Ecom:Order:CartForm.End", "&lt;/form&gt;");
             template.SetTag("Ecom:Order:CartForm.Name", order.GetCartFormName());
             template.SetTag("Ecom:Order:CartForm.SubmitUpdate", string.Format("javascript:document.{0}.action = '/Default.aspx?ID={1}&amp;step=1'; document.{0}.submit();", order.GetCartFormName(), pageView.Page.ID));
             template.SetTag("Ecom:Order:CartForm.SubmitOrder", string.Format("javascript:document.{0}.action = '/Default.aspx?ID={1}&amp;step=2'; document.{0}.submit();", order.GetCartFormName(), pageView.Page.ID));
          }
      }
   }
}
 </code>
 </example>
 <summary>
 Gets the name of the cart form.
 </summary>
 <returns>"CartForm_[ID]"</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.ValidatePricesInDatabase">
 <summary>
 Validates the prices in database. If <see cref="P:Dynamicweb.Ecommerce.Orders.Order.AllowOverridePrices" /> is set to <c>true</c>, this method also returns <c>true</c>.
 </summary>
 <returns><c>true</c> if prices validate; <c>false</c> otherwise.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.ValidatePricesInDatabase(System.Double@,System.Double@,System.Double@)">
 <summary>
 Validates the prices in database. If <see cref="P:Dynamicweb.Ecommerce.Orders.Order.AllowOverridePrices" /> is set to <c>true</c>, this method also returns <c>true</c>.
 </summary>
 <param name="orderPrice">returns order price if prices invalid</param>
 <param name="orderlinePrice">returns order lines price if prices invalid</param>
 <param name="priceDifference">returns price difference if prices invalid</param>
 <returns><c>true</c> if prices validate; <c>false</c> otherwise.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.SetToken(System.String)">
 <summary>
 Sets token related to the order.
 </summary>
 <param name="token">The payment transaction token.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.OrderLineBuilder(Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig)">
 <summary>
 Builds an <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine"/> based on the given <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig"/>.
 </summary>
 <param name="builderConfiguration">The builder configuration.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.Delete(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DeleteOrder(string orderId)
   {
       if (orderId.Length == 0)
           return;
       Dynamicweb.eCommerce.Orders.Order order = Dynamicweb.eCommerce.Orders.Order.Create(orderId);
       if (order.Id != null)
           order.Delete(order.Id);
   }
}
 </code>
 </example>
 <summary>
 Deletes the order.
 </summary>
 <param name="id">The order ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.GetEmptyOrderDataSet">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private bool FieldExists(string checkName)
   {
       bool returnBool = false;

       DataSet dataSet = Dynamicweb.eCommerce.Orders.Order.GetEmptyOrderDataSet();
       foreach (DataColumn dc in dataSet.Tables[0].Columns)
       {
           if (checkName == dc.ColumnName)
           {
               returnBool = true;
           }
       }
       return returnBool;
   }
}
 </code>
 </example>
 <summary>
 Gets an empty DataSet with the schema from the database.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.GetOrderDataSetByOrderId(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private bool FieldExists(string checkName, Dynamicweb.eCommerce.Orders.Order order)
   {
       bool returnBool = false;

       DataSet dataSet = Dynamicweb.eCommerce.Orders.Order.GetOrderDataSetByOrderID(order.Id);
       foreach (DataColumn dc in dataSet.Tables[0].Columns)
       {
           if (checkName == dc.ColumnName)
           {
               returnBool = true;
           }
       }
       return returnBool;
   }
}
 </code>
 </example>
 <summary>
 Gets the DataSet object with orders.
 </summary>
 <param name="orderId">The order ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.SendTo(Dynamicweb.Frontend.PageView@,System.String,System.String,System.String,Dynamicweb.Rendering.Template@)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void SendMails(ref Dynamicweb.eCommerce.CustomerCenter.CustomerCenterSettings Settings, ref Dynamicweb.Frontend.PageView pageView)
   {
       string addresses = Dynamicweb.Context.Current.Request("Addresses");
       if (!string.IsNullOrEmpty(addresses))
       {
           string[] emailAddresses = addresses.Split(':');
           string oid = Dynamicweb.Context.Current.Request("OrderID");

           string SenderMail = Settings.DefaultMailAddress.Trim();
           if (string.IsNullOrEmpty(SenderMail) || StringHelper.IsValidEmailAddress(SenderMail) == false)
           {
               SenderMail = Convert.ToString(Dynamicweb.Configuration.SystemConfiguration.Instance.GetValue("/Globalsettings/Settings/CommonInformation/Email"));
               if (StringHelper.IsValidEmailAddress(SenderMail) == false)
               {
                   SenderMail = "noreply@dynamicweb-cms.com";
               }
           }
           if (!string.IsNullOrEmpty(oid))
           {
               Order tmpOrder = Dynamicweb.eCommerce.CustomerCenter.OrderManager.GetOrderForCurrentUser(oid);
               if (tmpOrder != null)
               {
                   Dynamicweb.eCommerce.Shops.Shop shop = new Dynamicweb.eCommerce.Shops.Shop(tmpOrder.ShopID);

                   for (int cnt = emailAddresses.GetLowerBound(0); cnt &lt;= emailAddresses.GetUpperBound(0); cnt++)
                   {
                       Dynamicweb.Rendering.Template t = new Dynamicweb.Rendering.Template(Settings.MyOrderDetailsTemplate);
                       Order.SendTo(ref pageView, oid, emailAddresses[cnt], SenderMail, ref t);
                   }
               }
               else
               {
                   return;
               }
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Sends the mail to the specified address.
 </summary>
 <param name="pageView">The page view.</param>
 <param name="orderId">The order ID.</param>
 <param name="toMailAddress">To mail address.</param>
 <param name="fromMailAddress">From mail address.</param>
 <param name="mailTemplate">The mail template.</param>
 <returns><c>true</c> if send was succesful; otherwise <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.GetOrderById(System.String)">
 <summary>
 Gets the order by ID.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.GetOrderById(System.String,System.Boolean)">
 <summary>
 Gets the order by ID.
 </summary>
 <param name="id">The id.</param>
 <param name="useItemsCache">if set to <c>true</c> use Context.Current.Items cache to store the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" />.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.GetOrderFromHistoryById(System.String,System.Int32)">
 <summary>
 Gets the order from history by Id.
 </summary>
 <param name="orderId">The id.</param>
 <param name="versionId">The order version id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.GetAllOrderVersionsById(System.String)">
 <summary>
 Gets all versions for the order.
 </summary>
 <param name="id">The order ID.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Orders.OrderCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.GetOrders(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DoDelete()
   {
       string keyword = Converter.ToString(Request["searchField"]);
       string state = Converter.ToString(Context.Current.Session["Ecom.Backend.Search.stateId"]);
       string startDate = Converter.ToString(Request["searchStartDate"]);
       string endDate = Converter.ToString(Request["searchEndDate"]);
       string shopId = Converter.ToString(Context.Current.Session["Ecom.Backend.Search.ShopID"]);

       Dynamicweb.eCommerce.Orders.OrderCollection orderCol =  Dynamicweb.eCommerce.Orders.Order.getOrders(keyword, state, startDate, endDate, false, shopId);
       foreach(Dynamicweb.eCommerce.Orders.Order order in orderCol){
          //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the orders.
 </summary>
 <param name="keyword">The keyword.</param>
 <param name="stateId">The state ID. DB field name is OrderStateID.</param>
 <param name="startdate">The start date. DB field name is OrderDate.</param>
 <param name="enddate">The end date. DB field name is OrderDate.</param>
 <param name="showCart">if set to <c>true</c> show cart. DB field name is OrderCart.</param>
 <param name="shopId">The shop ID. DB field name is OrderShopID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.GetOrders(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DoDelete()
   {
       string keyword = Converter.ToString(Request["searchField"]);
       string state = Converter.ToString(Context.Current.Session["Ecom.Backend.Search.stateId"]);
       string startDate = Converter.ToString(Request["searchStartDate"]);
       string endDate = Converter.ToString(Request["searchEndDate"]);
       string shopId = Converter.ToString(Context.Current.Session["Ecom.Backend.Search.ShopID"]);

       Dynamicweb.eCommerce.Orders.OrderCollection orderCol =  Dynamicweb.eCommerce.Orders.Order.getOrders(keyword, state, startDate, endDate, false, shopId);
       foreach(Dynamicweb.eCommerce.Orders.Order order in orderCol){
          //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the orders.
 </summary>
 <param name="query">The SQL.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.GetOrders(System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DoDelete()
   {
       StringBuilder SQL = new StringBuilder();
       SQL.Append("SELECT TOP 20 * FROM EcomOrders ");
       SQL.Append("WHERE OrderCart = " + Database.SqlBool(false) + " ");
       SQL.Append("ORDER BY OrderDate DESC, OrderID DESC");
       Dynamicweb.eCommerce.Orders.OrderCollection orderCol = Dynamicweb.eCommerce.Orders.Order.getOrders(SQL.ToString());

       foreach(Dynamicweb.eCommerce.Orders.Order order in orderCol){
            //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the orders.
 </summary>
 <param name="query">The SQL query.</param>
 <param name="preLoadOrderLines">if set to <c>true</c> get order lines from DB and attach to orders.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.GetTotalPurchasesByCustomerId(System.Int32,System.DateTime,Dynamicweb.Ecommerce.International.Currency)">
 <summary>
 Get total purchases price by customer ID.
 </summary>
 <param name="customerId">The customer ID.</param>
 <param name="fromDate">The from date.</param>
 <param name="priceCurrency">The price currency.</param>
 <returns>The instance of the <see cref="T:Dynamicweb.Ecommerce.Prices.PriceInfo"/> class.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Order.CalculateDiscounts">
 <summary>
 Calculates the discounts for this <see cref="T:Dynamicweb.Ecommerce.Orders.Order"/>.
 If <see cref="P:Dynamicweb.Ecommerce.Orders.Order.RecalculateDiscountsNeeded"/> is <c>false</c> or if <see cref="P:Dynamicweb.Ecommerce.Orders.Order.Calculate"/> is <c>false</c>, discounts will not be calculated.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderCaptureInfo">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public Dynamicweb.eCommerce.Orders.OrderCaptureInfo Capture(Dynamicweb.eCommerce.Orders.Order order)
   {
       try
       {
           if (order == null || string.IsNullOrEmpty(order.Id) || string.IsNullOrEmpty(order.TransactionNumber))
           {
               string errorText = null;
               if (string.IsNullOrEmpty(order.TransactionNumber))
               {
                   errorText = "No transaction number set on the order";
               }
               else
               {
                   errorText = "No valid Order object set";
               }
               return new Dynamicweb.eCommerce.Orders.OrderCaptureInfo(Dynamicweb.eCommerce.Orders.OrderCaptureInfo.OrderCaptureState.Failed, errorText);
           }
           string infoText = "Remote Capture succeeded";
           return new Dynamicweb.eCommerce.Orders.OrderCaptureInfo(Dynamicweb.eCommerce.Orders.OrderCaptureInfo.OrderCaptureState.Success, infoText);
       }
       catch (Exception ex)
       {
           string infoTxt = string.Format("Remote capture for order {0} failed with the message: {1}", order.Id, ex.Message);
           return new Dynamicweb.eCommerce.Orders.OrderCaptureInfo(Dynamicweb.eCommerce.Orders.OrderCaptureInfo.OrderCaptureState.Failed, infoTxt);
       }
   }
}
 </code>
 </example>
 <summary>
 Represents capture information about order. 
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderCaptureInfo.State">
 <summary>
 Gets or sets the state.
 </summary>
 <value>The state.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderCaptureInfo.Message">
 <summary>
 Gets or sets the message.
 </summary>
 <value>The message.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderCaptureInfo.CaptureTime">
 <summary>
 Gets or sets the capture time.
 </summary>
 <value>The capture time.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderCaptureInfo.#ctor(Dynamicweb.Ecommerce.Orders.OrderCaptureInfo.OrderCaptureState,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderCaptureInfo" /> class.
 </summary>
 <param name="state">The capture state.</param>
 <param name="message">The message.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderCaptureInfo.ToString">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private OrderCaptureInfo _captureInfos;
   private string GetCaptureInfos(IDataReader DataReader)
   {
      _captureInfos = OrderCaptureInfo.Parse(Converter.ToString(DataReader["OrderCaptureInfo"]));
      return _captureInfos.ToString();
   }
}
 </code>
 </example>
 <summary>
 Creates a XML string with the values.
 </summary>
 <returns>The XML.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderCaptureInfo.Parse(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private OrderCaptureInfo _captureInfos;
   private void FillCaptureInfos(IDataReader DataReader)
   {
       _captureInfos = OrderCaptureInfo.Parse(Converter.ToString(DataReader["OrderCaptureInfo"]));
   }
}
 </code>
 </example>
 <summary>
 Parses the specified XML settings.
 </summary>
 <param name="xmlSettings">The XML.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderCaptureInfo.OrderCaptureState">
 <summary>
 Capture state.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderCaptureInfo.OrderCaptureState.Success">
 <summary>
 Success
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderCaptureInfo.OrderCaptureState.Failed">
 <summary>
 Failed
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderCaptureInfo.OrderCaptureState.NotCaptured">
 <summary>
 Not captured
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderCaptureInfo.OrderCaptureState.Split">
 <summary>
 Split
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderCollection">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private int NumPages(ref Dynamicweb.eCommerce.Orders.OrderCollection Orders, ref Dynamicweb.eCommerce.CustomerCenter.CustomerCenterSettings Settings)
   {
       int pageSize = Settings.ItemsPerPage;

       int ret = 0;
       ret = Convert.ToInt32(Orders.Count / pageSize);
       if ((ret * pageSize) &lt; Orders.Count)
       {
           ret += 1;
       }
       return ret;
   }
}
 </code>
 </example>
 <summary>
 Represents a collection of the orders.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderCollection.Sorter.#ctor(System.String,Dynamicweb.Ecommerce.Orders.SortOrderType)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderCollection.Sorter" /> class.
 </summary>
 <param name="fieldName">Name of the field.</param>
 <param name="order">The sort order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderCollection.Sorter.Compare(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
 </summary>
 <param name="x">The first object to compare.</param>
 <param name="y">The second object to compare.</param>
 <returns>
 Value
 Condition
 Less than zero
 <paramref name="x" /> is less than <paramref name="y" />.
 Zero
 <paramref name="x" /> equals <paramref name="y" />.
 Greater than zero
 <paramref name="x" /> is greater than <paramref name="y" />.
 </returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderCollection.SortOrder">
 <summary>
 Gets or sets the sort order.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderCollection.SortByField">
 <summary>
 Gets or sets the sort by field.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderCollection.Sort">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void Page_Load(object sender, System.EventArgs e)
   {
       int uid = new Dynamicweb.Frontend.Extranet().UserID;
       if (uid == 0) { Response.End(); }

       CustomerOrderCollection customerOrders = new CustomerOrderCollection();
       customerOrders.Load(uid);
       customerOrders.Sort();
       foreach (Order enumOrder in customerOrders)
       {
           foreach (OrderLine orderLine in enumOrder.OrderLines)
           {
               //TODO: insert your code here
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Sorts this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderCollection.Sort(System.String,Dynamicweb.Ecommerce.Orders.SortOrderType)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void Page_Load(object sender, System.EventArgs e)
   {
       int uid = new Dynamicweb.Frontend.Extranet().UserID;
       if (uid == 0) { Response.End(); }

       CustomerOrderCollection customerOrders = new CustomerOrderCollection();
       customerOrders.Load(uid);
       customerOrders.Sort("OrderID", SortOrderType.Asc);
       foreach (Order enumOrder in customerOrders)
       {
           foreach (OrderLine orderLine in enumOrder.OrderLines)
           {
               //TODO: insert your code here
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Sorts the specified field name.
 </summary>
 <param name="fieldName">Name of the field.</param>
 <param name="order">The sort order.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderCollection.Item(System.Int32)">
 <summary>
 Gets or sets the element at the specified index.
 </summary>
 <returns>The element at the specified index.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderCollection.Load(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private OrderCollection GetOrderCollection()
   {
       string sql = "SELECT * FROM EcomOrders";
       OrderCollection col = default(OrderCollection);
       col = new OrderCollection();
       col.Load(sql);

       return col;
   }
}
 </code>
 </example>
 <summary>
 Loads the specified orders from DB.
 </summary>
 <param name="sql">The SQL query.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderContext">
 <summary>
 Represents a order context
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderContext.CacheKey">
 <summary>
 The order context cache key.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderContext.Id">
 <summary>
 Gets or sets the id.
 </summary>
 <value>The id.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderContext.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderContext.Shops">
 <summary>
 Gets or sets the shops.
 </summary>
 <value>The shops.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderContext.OrderContextRequestName">
 <summary>
 Returns the name of the request value that CartV2 should look to set correct Order Context.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderContext.PersistentOrderContextRequestName">
 <summary>
 Returns the name of the request value that CartV2 should look to set persistent Order Context.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderContext.#ctor">
 <summary>
 Constructor for <see cref="T:Dynamicweb.Ecommerce.Orders.OrderContext">OrderContext</see> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderContext.#ctor(System.Data.IDataReader)">
 <summary>
 Constructor for <see cref="T:Dynamicweb.Ecommerce.Orders.OrderContext">OrderContext</see> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderContext.Fill(System.Data.IDataReader)">
 <summary>
 Fills this instance with data from the specified data reader.
 </summary>
 <param name="reader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderContext.Delete">
 <example>
 Delete the order context
 <code title="C#" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DeleteButton_Click(System.Object sender, System.EventArgs e) 
   {
       String id = Converter.ToString(HttpContext.Current.Request.QueryString("ContextID"));
       OrderContext oc = new OrderContext();
       oc.Delete(Converter.ToInt32(id));
   }
}
 </code>
 </example>
 <summary>
 Deletes the object with specified ID.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderContext.Save">
 <example>
 <code title="C#" lang="cs">
 public void SaveDefaultOrderState()
 {
 	OrderContext oc = new OrderContext();
 	oc.Name = "My context";
     oc.Shops.Add("SHOP1")
     oc.Shops.Add("SHOP2")
 	oc.Save();
 }
 </code>
 </example>
 <summary>
 Saves the order context into DB.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderContext.GetOrderContextById(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void LoadData()
   {
       String contextId = Converter.ToString(HttpContext.Current.Request.QueryString("ContextID"));
       OrderContext oc = OrderContext.GetOrderContextById(Converter.ToInt32(contextId));
       txtName.Text = oc.Name;
       lstShops.DataSource = oc.Shops;
       lstShops.DataBind();
   }
}
 </code>
 </example>
 <summary>
 Gets order context by id (uses cache if it possible).
 </summary>
 <param name="contextId">The id of order context.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderContext.GetOrderContexts">
 <example>
 <code title="C#" description="" lang="CS">
class MyOrdrContextsPage : System.Web.UI.Page
{
   public void LoadData()
   {
      OrderContextCollection contexts = OrderContext.GetOrderContexts();
      List.DataSource = contexts;
      List.DataBind();
   }
}
 </code>
 </example>
 <summary>
 Gets all order contexts.
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderContextCollection">
 <summary>
 The class OrderContextCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Orders.OrderContext"/>
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo">
 <summary>
 Represents information about debugging.
 </summary>
 <example>
 <code description="" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\OrderLoggerSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.OrderId">
 <summary>
 Gets order id.
 </summary>
 <value>The order id.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.OrderAutoId">
 <summary>
 Gets order auto id.
 </summary>
 <value>The order auto id.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.Time">
 <summary>
 Gets time.
 </summary>
 <value>The time.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.Source">
 <summary>
 Gets the source.
 </summary>
 <value>The info source.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.Message">
 <summary>
 Gets the message.
 </summary>
 <value>The message.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.InfoType">
 <summary>
 Gets the info type.
 </summary>
 <value>The info type.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.#ctor(System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.Save">
 <summary>
 Saves the instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo" /> into DB
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.Save(Dynamicweb.Ecommerce.Orders.Order,System.String,System.String)">
 <summary>
 Saves the order debugging info into DB.
 </summary>
 <param name="order">The Order.</param>
 <param name="message">The message.</param>
 <param name="source">The message source.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.Save(Dynamicweb.Ecommerce.Orders.Order,System.DateTime,System.String,System.String,Dynamicweb.Ecommerce.Orders.DebuggingInfoType)">
 <summary>
 Saves the order debugging info into DB.
 </summary>
 <param name="order">The Order.</param>
 <param name="time">The time of.</param>
 <param name="message">The message.</param>
 <param name="source">The message source.</param>
 <param name="infoType">The debug info type.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.GetByOrderAutoId(System.Int32)">
 <summary>
 Get the order debugging info by order auto Id.
 </summary>
 <param name="orderAutoId">The Order auto Id.</param>
 <returns>The list of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo" /> objects.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.GetByOrderId(System.String)">
 <summary>
 Get the order debugging info by order Id.
 </summary>
 <param name="orderId">The Order Id.</param>
 <returns>The list of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo" /> objects.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.GetByInfoType(System.String,Dynamicweb.Ecommerce.Orders.DebuggingInfoType)">
 <summary>
 Get the order debugging info by order Id and information type.
 </summary>
 <param name="orderId">The Order Id.</param>
 <param name="infoType">The info type.</param>
 <returns>The list of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo" /> objects.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.GetBySavedCardId(System.Int32)">
 <summary>
 Get the order debugging info by saved Card Id.
 </summary>
 <param name="savedCardId">The saved Card Id.</param>
 <returns>The list of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo" /> objects.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.GetCountBySavedCardId(System.Int32)">
 <summary>
 Get count of the order debugging info for specified saved Card Id.
 </summary>
 <param name="savedCardId">The saved Card Id.</param>
 <returns>Get count of the order debugging info.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.GetByRecurringOrderId(System.Int32)">
 <summary>
 Get the order debugging info by recurring order Id.
 </summary>
 <param name="recurringOrderId">The recurring order Id.</param>
 <returns>The list of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo" /> objects.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.GetAllRecurringOrderErrors(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
 <summary>
 Get all recurring order errors.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.GetAllRecurringOrderEntries(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
 <summary>
 Get all 
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderDebuggingInfo.GetCountByRecurringOrderId(System.Int32)">
 <summary>
 Get count of the order debugging info for specified recurring order Id.
 </summary>
 <param name="recurringOrderId">The recurring order Id.</param>
 <returns>Get count of the order debugging info.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderField">
 <summary>
 Represents information about a custom field in order.
 </summary>
 <example>
 <code description="" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\OrderFieldInformationPageSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderField.ID">
 <summary>
 Gets or sets the ID.
 </summary>
 <value>The ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderField.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderField.SystemName">
 <summary>
 Gets or sets the system name.
 </summary>
 <value>The system name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderField.TemplateName">
 <summary>
 Gets or sets the name of the template.
 </summary>
 <value>The template name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderField.TypeId">
 <summary>
 Gets or sets the type ID.
 </summary>
 <value>The type ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderField.TypeName">
 <summary>
 Gets or sets the type name.
 </summary>
 <value>The type name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderField.Locked">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Orders.OrderField" /> is locked.
 </summary>
 <value><c>true</c> if locked; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderField.Sort">
 <summary>
 Gets or sets the sort.
 </summary>
 <value>The sort.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderField.Types">
 <summary>
 Gets or sets the types.
 </summary>
 <value>The types.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderField.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderField" /> class.
 </summary>
 <param name="fieldId">DB field name is OrderFieldID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderField.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderField" /> class.
 </summary>
 <param name="dataReader">The DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderField.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderField" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderField.Fill(System.Data.IDataReader)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private OrderField GetOrderField(string fieldId)
   {
       OrderField field = default(OrderField);
       field = new OrderField();

       string SQL = "SELECT * FROM EcomOrderField WHERE OrderFieldID = '" + Converter.ToString(fieldId) + "' ";
       IDataReader reader = Dynamicweb.Data.Database.CreateDataReader(SQL);

       if (reader.Read())
       {
           field.Fill(reader);
       }
       reader.Close();
       reader.Dispose();

       return field;
   }
}
 </code>
 </example>
 <summary>
 Fills the properties from the DataReader.
 </summary>
 <param name="dataReader">The DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderField.Save(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
 class OrderField_EditPage : System.Web.UI.Page
 {
 
    private void SaveOrderField( OrderField orderField )
    {
        orderField.Name = NameStr.Text;
        orderField.TemplateName = TemplateNameStr.Text;
        if (orderFieldId == "")
        {
            orderField.SystemName = SystemNameStr.Text;
        	   orderField.TypeID = Converter.ToInt32(TypeStr.SelectedValue);
        	   orderField.TypeName = TypeStr.Items(TypeStr.SelectedIndex).Text;
        }
        orderField.Locked = Locked.Checked;

        bool addField = true;
        if (ValidNames(orderField.SystemName))
        {
        	   UpdateOrderTable();

        	   if (addField || orderFieldId != "")
        	       orderField.Save(orderFieldId);

        	   Dynamicweb.eCommerce.Common.Application.KillOrderFields();
        }
    }
 }
 </code>
 </example>
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DoSave(string fieldId)
   {
       OrderField orderField = default(OrderField);
       orderField = new OrderField();

       orderField.SystemName = Converter.ToString(Request.QueryString["SystemName"]);
       orderField.TypeID = Converter.ToInt32(Request.QueryString["TypeID"]);
       orderField.TypeName = Converter.ToString(Request.QueryString["TypeName"]);
       orderField.Save(fieldId);
   }
}
 </code>
 </example>
 <summary>
 Saves the properties into DB.
 </summary>
 <param name="fieldId">DB field name is OrderFieldID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderField.SaveAtOrder(Dynamicweb.Ecommerce.Orders.Order,System.Collections.Specialized.NameValueCollection)">
 <summary>
 Saves at order.
 </summary>
 <param name="objOrder">The order.</param>
 <param name="ofCollection">New values for updating.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderField.Delete">
 <example>
 <code title="C#" description="" lang="CS">
 class OrderField_EditPage : System.Web.UI.Page
 {
     private void DeleteOrderField( OrderField fld )
     {
        if( FieldExists(orderField.SystemName) ) {
            Database.ExecuteNonQuery("ALTER TABLE [EcomOrders] DROP COLUMN [" + orderField.SystemName + "]")
        }
 
         fld.Delete();
         Dynamicweb.eCommerce.Common.Application.KillOrderLineFields();
     }
 }
 </code>
 </example>
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoDeleteAll()
   {
       foreach (OrderField orderField in OrderField.getOrderFields())
       {
           orderField.Delete();
       }
   }
}
 </code>
 </example>
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderField.Delete(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoDeleteAll()
   {
       foreach (OrderField orderField in OrderField.getOrderFields())
       {
           orderField.Delete(orderField.ID);
       }
   }
}
 </code>
 </example>
 <example>
 <code title="C#" description="" lang="CS">
 class OrderField_EditPage : System.Web.UI.Page
 {
     private void DeleteOrderField( OrderField fld )
     {
        If FieldExists(orderField.SystemName) {
            Database.ExecuteNonQuery("ALTER TABLE [EcomOrders] DROP COLUMN [" + orderField.SystemName + "]")
        }
 
         fld.Delete( fld.ID );
         Dynamicweb.eCommerce.Common.Application.KillOrderLineFields();
     }
 }
 </code>
 </example>
 <summary>
 Deletes the instance.
 </summary>
 <param name="fieldId">DB field name is OrderFieldID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderField.Lock">
 <summary>
 Locks this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderField.Create(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
 class OrderField_EditPage : System.Web.UI.Page
 {
    OrderField orderField;
    protected void Page_Load(object sender, System.EventArgs e)
    {
        OrderField orderField = OrderField.Create( Request("ID"));
    	
    	   if (!Page.IsPostBack)
        {
    		   SystemNameStr.Text = orderField.SystemName;
    		   NameText.Text = orderField.Name;
    		   TemplateNameStr.Text = orderField.TemplateName;
    		   Locked.Checked = orderField.Locked;
 
            System.Collections.SortedList typeList = new System.Collections.SortedList();
            FieldTypeCollection fieldTypes  = FieldType.getFieldTypes;
            foreach( FieldType fieldType in fieldTypes )
                typeList(CType(fieldType.ID, String)) = Translate.JsTranslate(fieldType.Name);
            gui.CreateDropDown(typeList, TypeStr, orderField.TypeID.ToString, False);
            
            if( orderFieldId != "" ) {
                SystemNameStr.Enabled = false;
                TypeStr.Enabled = false;
            }
    	   }

    }
 }
 </code>
 </example>
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public OrderField GetOrderField()
   {
       string orderFieldId = Request["ID"];
       OrderField orderField = OrderField.Create(orderFieldId);
       return orderField;
   }
}
 </code>
 </example>
 <summary>
 Creates the specified OrderField object.
 </summary>
 <param name="fieldId">The field ID. DB field name is OrderFieldID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderField.GetOrderFields">
 <example>
 <code title="C#" description="" lang="CS">
 class MyPage : System.Web.UI.Page
 {
 
     private string GetOrderFieldsLayer()
     {
         System.Text.StringBuilder sbReturn = new System.Text.StringBuilder();
         OrderFieldCollection fields  = OrderField.GetOrderFields();

         sbReturn.Append("&lt;div id=""OrderFieldLayer"" style=""position:absolute; display:none""&gt;");
         if( fields.Count &gt; 0 ) {
            sbReturn.Append("&lt;table style=""border:solid 1px #7F9DB9; background-color:#ffffff"" cellpadding=""0"" cellspacing=""0""&gt;");
            sbReturn.Append("&lt;tr&gt;&lt;td&gt;"); 
            sbReturn.Append("&lt;div&gt;");
         }
         foreach( OrderField field in fields )
         {
            sbReturn.AppendFormat("&lt;table style=""cursor:hand"" cellpadding=""0"" cellspacing=""0"" onClick=""addOrderField('{0}','{1}');"" onmouseover=""mouseoverBox(this);"" onmouseout=""mouseoutBox(this);""&gt;&lt;tr&gt;" + 
                                  "  &lt;td style=""height:20px; width:20px; background-color:#D4D0C8"" align=""center""&gt;&lt;img src=""../images/arrow.gif"" border=0&gt;&lt;/td&gt;" + 
                                  "  &lt;td style=""PADDING-LEFT: 5px; ""&gt;&amp;nbsp;{2}&lt;/td&gt;" + 
                                  "  &lt;td style=""WIDTH:9px;""&gt;&lt;/td&gt;" + 
                                  "&lt;/tr&gt;&lt;/table&gt;",  
                                  Base.HtmlEncode(Base.JSEncode(field.SystemName)), 
                                  Base.HtmlEncode(Base.JSEncode(field.Name)), 
                                  Base.HtmlEncode(field.Name) 
                                  );
         }
         sbReturn.Append("&lt;/div&gt;");
         sbReturn.Append("&lt;/td&gt;&lt;/tr&gt;");
         sbReturn.Append("&lt;/table&gt;");
 
         return sbReturn.ToString();
     }
 }
 </code>
 </example>
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoDeleteAll()
   {
       foreach (OrderField orderField in OrderField.getOrderFields())
       {
           orderField.Delete();
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the order fields.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderField.ValidNames(System.String,System.Boolean)">
 <summary>
 Verifies the system name of the OrderField
 </summary>
 <param name="name"></param>
 <param name="isNew"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderField.FieldExists(System.String)">
 <summary>
 Check for the existence of a OrderField with the given system name
 </summary>
 <param name="checkName"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderFieldCollection">
 <example>
 <code title="C#" description="" lang="CS">
 public static OrderFieldCollection GetOrderFields()
 {
	    string sql = "SELECT * FROM EcomOrderField ORDER BY OrderFieldSort";

  	OrderFieldCollection orderFields = new OrderFieldCollection();
    	using (IDataReader dataReader = Dynamicweb.Data.Database.CreateDataReader(sql))
    	{
    		while (dataReader.Read())
    		{
    			orderFields.Add(new OrderField(dataReader));
    		}
    	}
    	return orderFields;
    }
 </code>
 </example>
 <summary>
 Represents a collection of the OrderField objects.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFieldCollection.Contains(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
 class OrderField_EditPage : System.Web.UI.Page
 {
     private void DeleteOrderField( OrderField fld )
     {
        if( Appliation.OrderFields.Contains(orderField.SystemName)) {
            Database.ExecuteNonQuery("ALTER TABLE [EcomOrders] DROP COLUMN [" + orderField.SystemName + "]")
        }
 
         fld.Delete();
         Dynamicweb.eCommerce.Common.Application.KillOrderLineFields();
     }
 }
 </code>
 </example>
 <summary>
 Determines whether the collection contains the specified system name of the order field.
 </summary>
 <param name="orderfieldSystemName">Name of the order field system.</param>
 <returns>
 <c>true</c> if contains the specified system name of the order field; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFieldCollection.Contains(Dynamicweb.Ecommerce.Orders.OrderField)">
 <example>
 <code title="C#" description="" lang="CS">
 class OrderField_EditPage : System.Web.UI.Page
 {
     private void DeleteOrderField( OrderField fld )
     {
        if( Appliation.OrderFields.Contains(orderField)) {
            Database.ExecuteNonQuery("ALTER TABLE [EcomOrders] DROP COLUMN [" + orderField.SystemName + "]")
        }
 
         fld.Delete();
         Dynamicweb.eCommerce.Common.Application.KillOrderLineFields();
     }
 }
 </code>
 </example>
 <summary>
 Determines whether contains the specified order field.
 </summary>
 <param name="orderfield">The order field.</param>
 <returns>
 <c>true</c> if contains the specified order field; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFieldCollection.Load(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
 public static OrderFieldCollection GetOrderFields()
 {
	    string sql = "SELECT * FROM EcomOrderField ORDER BY OrderFieldSort";

  	OrderFieldCollection orderFields = new OrderFieldCollection();
    	orderFields.Load( sql );
    	return orderFields;
    }
 </code>
 </example>
 <summary>
 Loads the specified order fields from DB.
 </summary>
 <param name="query">The query query.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderFieldValue">
 <example>
 The example shows how you can manipulate the information in custom order fields. 
 The following shows an example where a class subscribes to the notification
 <c>Dynamicweb.Ecommerce.Notifications.eCommerce.Order.Steps.Completed</c>, which can
 be used to manage the custom order field information.
 <code title="C#" description="" lang="CS">
 [Subscribe(Dynamicweb.Ecommerce.Notifications.eCommerce.Order.Steps.Completed)]
 public class OrderCompleteNotificationSubscriber : NotificationSubscriber
 {
     public override void OnNotify(string notification, object[] args)
     {
         bool sendNewsletter = false;
         string emailAddress = "";
 
         Dynamicweb.eCommerce.Orders.Order MyOrder = (Dynamicweb.eCommerce.Orders.Order)args[0];
         OrderFieldValueCollection ofvCol = MyOrder.OrderFieldValues;
         foreach (OrderFieldValue orderField in ofvCol)
         {
             if (orderField.orderField.SystemName.ToLower()  == "newsletteremail")
             {
                emailAddress = orderField.Value.ToString();
                sendNewsletter = true;
                break;
             }
         }
 
         if (sendNewsletter)
         { 
            SendEmail( emailAddress, "Order is completed" );    
         }
 
     }
 }
 </code>
 </example>
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void CustomOrderFields(Order order)
   {
       FieldTypeCollection fieldTypes = FieldType.getFieldTypes();
       foreach (OrderFieldValue ofv in order.OrderFieldValues)
       {
           FieldType ft = fieldTypes.GetFieldType(ofv.orderField.TypeID);

           string reqValue = Converter.ToString(Dynamicweb.Context.Current.Request(ofv.orderField.SystemName));
           switch (ft.DWName.ToLower())
           {
               case "text":
               case "largetext":
               case "integer":
               case "double":
                   ofv.Value = Converter.ToString(Dynamicweb.Context.Current.Request(ofv.orderField.SystemName, false));
                   break;
               case "checkbox":
                   ofv.Value = !string.IsNullOrEmpty(reqValue);
                   break;
               case "date":
               case "datetime":
                   ofv.Value = Dates.ParseAsDate(ofv.orderField.SystemName);
                   break;
               case "link":
                   ofv.Value = reqValue;
                   break;
               case "filemanager":
                   ofv.Value = reqValue;
                   break;
               default:
                   break;
           }
       }
   }
}
 </code>
 </example>
 <summary>
 This class saves the new values for <see cref="P:Dynamicweb.Ecommerce.Orders.OrderFieldValue.OrderField" />
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderFieldValue.OrderField">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void CustomOrderFields(Order order)
   {
       FieldTypeCollection fieldTypes = FieldType.getFieldTypes();
       foreach (OrderFieldValue ofv in order.OrderFieldValues)
       {
           FieldType ft = fieldTypes.GetFieldType(ofv.orderField.TypeID);

           string reqValue = Converter.ToString(Dynamicweb.Context.Current.Request(ofv.orderField.SystemName));
           switch (ft.DWName.ToLower())
           {
               case "text":
               case "largetext":
               case "integer":
               case "double":
                   ofv.Value = Converter.ToString(Dynamicweb.Context.Current.Request(ofv.orderField.SystemName, false));
                   break;
               case "checkbox":
                   ofv.Value = !string.IsNullOrEmpty(reqValue);
                   break;
               case "date":
               case "datetime":
                   ofv.Value = Dates.ParseAsDate(ofv.orderField.SystemName);
                   break;
               case "link":
                   ofv.Value = reqValue;
                   break;
               case "filemanager":
                   ofv.Value = reqValue;
                   break;
               default:
                   break;
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Gets or sets the order field.
 </summary>
 <value>The order field.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderFieldValue.Value">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void CustomOrderFields(Order order)
   {
       FieldTypeCollection fieldTypes = FieldType.getFieldTypes();
       foreach (OrderFieldValue ofv in order.OrderFieldValues)
       {
           FieldType ft = fieldTypes.GetFieldType(ofv.orderField.TypeID);

           string reqValue = Converter.ToString(Dynamicweb.Context.Current.Request(ofv.orderField.SystemName));
           switch (ft.DWName.ToLower())
           {
               case "text":
               case "largetext":
               case "integer":
               case "double":
                   ofv.Value = Converter.ToString(Dynamicweb.Context.Current.Request(ofv.orderField.SystemName, false));
                   break;
               case "checkbox":
                   ofv.Value = !string.IsNullOrEmpty(reqValue);
                   break;
               case "date":
               case "datetime":
                   ofv.Value = Dates.ParseAsDate(ofv.orderField.SystemName);
                   break;
               case "link":
                   ofv.Value = reqValue;
                   break;
               case "filemanager":
                   ofv.Value = reqValue;
                   break;
               default:
                   break;
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Gets or sets the value.
 </summary>
 <value>The value.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFieldValue.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderFieldValue" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFieldValue.#ctor(Dynamicweb.Ecommerce.Orders.OrderField,System.Object)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderFieldValue" /> class.
 </summary>
 <param name="orderField">The order field.</param>
 <param name="fieldValue">The value.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFieldValue.Save(System.Data.DataRow)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
 
   public void SaveOrderFields(Order order, DataRow dataRow)
   {
         foreach (OrderFieldValue orderField in order.OrderFieldValues)
         {
             orderField.Save(dataRow);
         }
   }
}
 </code>
 </example>
 <summary>
 Saves the specified row.
 </summary>
 <param name="dataRow">The data row.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFieldValue.GetOrderFieldValues">
 <example>
 Look at example for <c>OrderFieldValue</c> class
 </example>
 <summary>
 Gets the order field values.
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderFieldValueCollection">
 <example>
 The example shows how you can manipulate the information in custom order fields. 
 The following shows an example where a class subscribes to the notification
 <c>Dynamicweb.Ecommerce.Notifications.eCommerce.Order.Steps.Completed</c>, which can
 be used to manage the custom order field information.
 <code title="C#" description="" lang="CS">
 [Subscribe(Dynamicweb.Ecommerce.Notifications.eCommerce.Order.Steps.Completed)]
 public class OrderCompleteNotificationSubscriber : NotificationSubscriber
 {
     public override void OnNotify(string notification, object[] args)
     {
         bool sendNewsletter = false;
         string emailAddress = "";
 
         Dynamicweb.eCommerce.Orders.Order MyOrder = (Dynamicweb.eCommerce.Orders.Order)args[0];
         OrderFieldValueCollection ofvCol = MyOrder.OrderFieldValues;
         OrderFieldValue orderField = ofvCol.GetOrderFieldValue("newsletteremail");
         if (orderField != null)
         {
                emailAddress = orderField.Value.ToString();
                sendNewsletter = true;
                break;
         }
 
         if (sendNewsletter)
         { 
            SendEmail( emailAddress, "Order is completed" );    
         }
 
     }
 }
 </code>
 </example>
 <summary>
 Represents a collection of the OrderFieldValue objects.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFieldValueCollection.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderFieldValueCollection" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFieldValueCollection.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderFieldValueCollection" /> class.
 </summary>
 <param name="dataReader">The DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFieldValueCollection.#ctor(System.Data.DataRow)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderFieldValueCollection" /> class.
 </summary>
 <param name="dataReader">The DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFieldValueCollection.Save(System.Data.DataRow)">
 <example>
 <code title="C#" description="" lang="CS">
 class MyPage : System.Web.UI.Page
 {
 
     public void SaveOrder( Order order )
     {
 	    IDbConnection objConn = Database.CreateConnection();
        	System.Data.IDbCommand objCommand = objConn.CreateCommand();
        	DataSet objDataset = new DataSet();
        	IDbDataAdapter objDataAdapter = Database.GetAdapter();
        	DataRow objRow = null;

        	//Prepare adapter and fill data
     	string SQL = string.Format("SELECT * FROM EcomOrders WHERE OrderID = '{0}'", order.Id);
    		objCommand.CommandText = SQL;
    		objDataAdapter.SelectCommand = objCommand;
   	 	object objCommandBuilder = Database.GetCommandBuilder(objDataAdapter);
    		objDataAdapter.Fill(objDataset);

    		if (objDataset.Tables[0].Rows.Count > 0)
   	 	{
    			objRow = objDataset.Tables[0].Rows[0];
    		}
    		else
   	 	{
    			objRow = objDataset.Tables[0].NewRow();
    			objDataset.Tables[0].Rows.Add(objRow);
    			if (order.IsCart())
    			{
    				order.Id = NumberGenerator.GetNumber("CART");
    			}
    		    else
    		    {
    			    order.Id = NumberGenerator.GetNumber("ORDER");
    		    }
         }

    	    objRow["OrderID"] = order.Id;
         objRow["OrderShopID"] = order.ShopID;
         objRow["OrderDate"] = order.Date;
         objRow["OrderModified"] = DateTime.Now;
         objRow["OrderComplete"] = order.Complete;
         objRow["OrderDeleted"] = order.Deleted;
         objRow["OrderStateID"] = ((string.IsNullOrEmpty(order.StateID)) ? null : order.StateID); 
         objRow["OrderVAT"] = Convert.ToSingle(order.Price.VAT);
         objRow["OrderTrackTraceNumber"] = order.TrackTraceNumber;
         objRow["OrderShippingMethod"] = order.ShippingMethod;
         objRow["OrderPaymentMethod"] = order.PaymentMethod;
         objRow["OrderSalesDiscount"] = order.SalesDiscount;
         objRow["OrderCurrencyName"] = order.CurrencyName;
         objRow["OrderCurrencyRate"] = order.CurrencyRate;
         objRow["OrderCurrencyCode"] = order.CurrencyCode;
         objRow["OrderReSendEmail"] = order.ReSendEmail;
         objRow["OrderCart"] = order.IsCart;
         objRow["OrderFieldsXML"] = order.FieldsXML;
         objRow["OrderCustomerAccessUserID"] = order.CustomerAccessUserID; 
         objRow["OrderCustomerAccessUserUserName"] = order.CustomerAccessUserUserName;
         objRow["OrderCustomerNumber"] = order.CustomerNumber;
         objRow["OrderCustomerCompany"] = order.CustomerCompany;
         objRow["OrderCustomerName"] = order.CustomerName;
         objRow["OrderCustomerAddress"] = order.CustomerAddress;
         objRow["OrderTotalPrice"] = order.TotalPrice;

         objRow["OrderPriceWithVAT"] = order.Price.PriceWithVAT;
         objRow["OrderPriceWithoutVAT"] = order.Price.PriceWithoutVAT;
         objRow["OrderPriceVAT"] = Convert.ToSingle(order.Price.VAT);
         objRow["OrderPriceVATPercent"] = order.Price.VATPercent;

      	if (order.OrderFieldValues != null)
     	{
    		    order.OrderFieldValues.Save(objRow);
     	}

     	objDataAdapter.Update(objDataset);

    	    objDataset.Dispose();
     	objCommand.Dispose();
     	objConn.Close();
     	objConn.Dispose();

    	    if (order.OrderLines != null)
      	{
    		    order.OrderLines.Save();
     	}

    }
 }
 </code>
 </example>
 <summary>
 Saves the specified row.
 </summary>
 <param name="dataRow">The DataRow.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFieldValueCollection.GetOrderFieldValue(System.String)">
 <example>
 The example shows how you can manipulate the information in custom order fields. 
 The following shows an example where a class subscribes to the notification
 <c>Dynamicweb.Ecommerce.Notifications.eCommerce.Order.Steps.Completed</c>, which can
 be used to manage the custom order field information.
 <code title="C#" description="" lang="CS">
 [Subscribe(Dynamicweb.Ecommerce.Notifications.eCommerce.Order.Steps.Completed)]
 public class OrderCompleteNotificationSubscriber : NotificationSubscriber
 {
     public override void OnNotify(string notification, object[] args)
     {
         bool sendNewsletter = false;
         string emailAddress = "";
 
         Dynamicweb.eCommerce.Orders.Order MyOrder = (Dynamicweb.eCommerce.Orders.Order)args[0];
         OrderFieldValueCollection ofvCol = MyOrder.OrderFieldValues;
         OrderFieldValue orderField = ofvCol.GetOrderFieldValue("newsletteremail");
         if (orderField != null)
         {
                emailAddress = orderField.Value.ToString();
                sendNewsletter = true;
                break;
         }
 
         if (sendNewsletter)
         { 
            SendEmail( emailAddress, "Order is completed" );    
         }
 
     }
 }
 </code>
 </example>
 <summary>
 Gets the OrderFieldValue object.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderFlow.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderFlow.Description">
 <summary>
 Gets or sets the description.
 </summary>
 <value>The description.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderFlow.IsDefault">
 <summary>
 Gets or sets a value indicating whether this instance is default.
 </summary>
 <value>
 <c>true</c> if this instance is default; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderFlow.OrderType">
 <summary>
 Gets or sets a type of this flow: for orders or for quotes
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFlow.#ctor">
 <summary>
 Constructor for <see cref="T:Dynamicweb.eCommerce.Orders.OrderFlow"> OrderFlow</see> class.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFlow.#ctor(System.Int32)">
 <summary>
 Constructor for <see cref="T:Dynamicweb.eCommerce.Orders.OrderFlow"> OrderFlow</see> class.
 </summary>
 <param name="id">News ID.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFlow.Fill(System.Data.IDataReader)">
 <summary>
 Fills flow with data from reader.
 </summary>
 <param name="reader">The reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFlow.UpdateDefault(System.Boolean,System.String)">
 <summary>
 Updates the flow <seealso cref="P:Dynamicweb.Ecommerce.Orders.OrderFlow.IsDefault"/> property.
 </summary>
 <param name="setDefaultTo">The indicator whether flow is default.</param>
 <param name="flowId">The flow id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFlow.UpdateDefault(System.Boolean,Dynamicweb.Ecommerce.Orders.OrderType,System.String)">
 <summary>
 Updates the flow <seealso cref="P:Dynamicweb.Ecommerce.Orders.OrderFlow.IsDefault"/> property.
 </summary>
 <param name="setDefaultTo">The indicator whether flow is default.</param>
 <param name="orderType">The type of order.</param>
 <param name="flowId">The flow id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFlow.Delete(System.Int32)">
 <summary>
 Deletes flow and all the flow states by id.
 </summary>
 <param name="flowId">The flow id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFlow.Save">
 <summary>
 Saves this flow.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFlow.GetOrderFlows">
 <summary>
 Gets all the order flows.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFlow.GetQuoteFlows">
 <summary>
 Gets all the quote flows.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFlow.GetRecurringOrderFlows">
 <summary>
 Gets all the recurring order flows.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFlow.GetAllFlows">
 <summary>
 Gets all the flows.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFlow.GetDefault">
 <summary>
 Gets default order flow.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderFlow.GetDefaultQuote">
 <summary>
 Gets default quote flow.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderFlowCollection">
 <summary>
 The class OrderFlowCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Orders.OrderFlow"/>.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderLine">
 <summary>
 Represents information about an order line.
 </summary>
 <example>
 <code description="" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\OrderLineRendererSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.UnitId">
 <summary>
 Gets or sets the unit ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.BomOrderLines">
 <summary>
 Gets or sets the BOM order lines.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.Order">
 <summary>
 Gets or sets the order.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.Product">
 <summary>
 Gets or sets the product.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.Id">
 <summary>
 Gets or sets the ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.BomItemId">
 <summary>
 Gets or sets the BOM item ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.OrderId">
 <summary>
 Gets or sets the order ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.ParentLineId">
 <summary>
 Gets or sets the parent line ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.Bom">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> is BOM.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.Date">
 <summary>
 Gets or sets the date.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.Modified">
 <summary>
 Gets or sets when the order line was modified.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.ProductNumber">
 <summary>
 Gets or sets the product number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.ProductId">
 <summary>
 Gets or sets the product ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.ProductVariantId">
 <summary>
 Gets or sets the product variant ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.ProductName">
 <summary>
 Gets or sets the product name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.ProductVariantText">
 <summary>
 Gets or sets the product variant text.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.Type">
 <summary>
 Gets or sets the type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.OrderLineType">
 <summary>
 Gets or sets the order line type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.Reference">
 <summary>
 Gets or sets the reference.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.PageId">
 <summary>
 Gets or sets the page ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.Quantity">
 <summary>
 Gets or sets the quantity.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.DiscountId">
 <summary>
 Gets or sets the discount ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.OrderLineFieldValue(System.String)">
 <summary>
 Gets the OrderLineFieldValue object.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.OrderLineFieldValues">
 <summary>
 Gets or sets the collection of OrderLineFieldValue objects.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.ListId">
 <summary>
 Gets or sets the list ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.Attachment">
 <summary>
 Gets or sets the attachment.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.ReverseChargeForVat">
 <summary>
 Gets or sets a value indicating whether the price for this <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> has reverse charge for VAT.
 </summary>
 <value><c>true</c> if the price has reverse charge for VAT; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.UnitPrice">
 <summary>
 Gets or sets the unit price.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.Points">
 <summary>
 Returns number of points of OrderLine necessary for payment.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.UnitPoints">
 <summary>
 Returns points cost of product unit.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.RewardId">
 <summary>
 Gets or sets the loyalty reward id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.RewardValue">
 <summary>
 Gets or sets the order line reward points.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.UnitRewardValue">
 <summary>
 Gets or sets unit reward points.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.RewardPoints">
 <summary>
 Returns information about the points which will be rewarded to the user.
 </summary>          
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.UnitRewardPoints">
 <summary>
 Returns information about the points which will be rewarded to the user for one unit of product.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.GiftCardCode">
 <summary>
 Gets or sets encoded gift card code, orderline based on.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.Price">
 <summary>
 Gets the price.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.TotalDiscount">
 <summary>
 Gets the discount value.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.AllowOverridePrices">
 <summary>
 Indicated whether Price is overridden and not calculated. Used to set explicit PriceInfo values.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.Weight">
 <summary>
 Gets the weight.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLine.Volume">
 <summary>
 Gets the volume.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.Clone">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private OrderLine orderLine;
   public void DoSave()
   {
       OrderLine theOrderLine = new OrderLine();
       theOrderLine = orderLine.Clone();
       theOrderLine.ID = string.Empty;
       theOrderLine.Save(theOrderLine.ID);
   }
}
 </code>
 </example>
 <summary>
 Clones this instance.
 </summary>
 <returns>The copy of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.HasType(Dynamicweb.Ecommerce.Orders.OrderLineType)">
 <summary>
 Determines whether this <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> has the given <see cref="P:Dynamicweb.Ecommerce.Orders.OrderLine.OrderLineType" />.
 </summary>
 <param name="orderLineType">The <see cref="P:Dynamicweb.Ecommerce.Orders.OrderLine.OrderLineType" /> to compare this <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> to.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.HasType(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Orders.OrderLineType})">
 <summary>
 Determines whether this <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> has the given <see cref="P:Dynamicweb.Ecommerce.Orders.OrderLine.OrderLineType" />s.
 </summary>
 <param name="orderLineTypes">The list of <see cref="P:Dynamicweb.Ecommerce.Orders.OrderLine.OrderLineType" />s to compare this <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> to.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.#ctor(System.Data.IDataRecord,Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> class.
 </summary>
 <param name="dataRecord">The data record.</param>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.#ctor(System.Data.IDataRecord)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> class.
 </summary>
 <param name="dataRecord">The data record.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.#ctor(System.Data.DataRow)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> class.
 </summary>
 <param name="dataRow">The data record.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.SetUnitPrice(System.Double)">
 <example>
 <code title="C#" description="" lang="CS"> 
 public class MyDiscountProvider: SalesDiscountProvider
 {
 
 	private OrderLine CreateOrderLine(Order order, double price)
     {
        	////Negate
        	price *= -1;

        	////Add a new order line
        	OrderLine line = new OrderLine();
        	line.Order = order;
        	line.Quantity = 1;
        	line.ProductName = this.DiscountName;
        	line.SetUnitPrice(price);
        	line.ParentLineID = null;
        	line.DiscountId = DiscountId;

        	if (IsProductDiscount)
        		line.Type = Converter.ToString(Converter.ToInt32(OrderLineType.ProductDiscount));
        	else
        		line.Type = Converter.ToString(Converter.ToInt32(OrderLineType.Discount));

        	return line;
     }
 
 }
 </code>
 </example>
 <summary>
 Sets the unit price.
 </summary>
 <param name="theUnitPrice">The price.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.SetUnitPrice(Dynamicweb.Ecommerce.Prices.PriceInfo)">
 <example>
 <code title="C#" description="" lang="CS"> 
 public class MyDiscountProvider: SalesDiscountProvider
 {
 
 	private OrderLine CreateOrderLine(Order order, PriceInfo priceInfo)
     {

        	//Add a new order line
        	OrderLine line = new OrderLine();
        	line.Order = order;
        	line.Quantity = 1;
        	line.ProductName = this.DiscountName;
        	line.SetUnitPrice(priceInfo.Multiply(-1));
        	line.ParentLineID = null;
        	line.DiscountId = DiscountId;

        	if (IsProductDiscount)
        		line.Type = Converter.ToString(Converter.ToInt32(OrderLineType.ProductDiscount));
        	else
        		line.Type = Converter.ToString(Converter.ToInt32(OrderLineType.Discount));

        	return line;
     }
 
 }
 </code>
 </example>
 <summary>
 Sets the unit price.
 </summary>
 <param name="priceInfo">The PriceInfo object. The property - UnitPrice.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.SetUnitPrice(Dynamicweb.Ecommerce.Prices.PriceInfo,System.Boolean)">
 <summary>
 Sets the unit price.
 </summary>
 <param name="priceInfo">The price info.</param>
 <param name="forcePriceRecalculation">if set to <c>true</c> the Price of the OrderLine is recalculated.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.ClearCachedPrices">
 <summary>
 Clears the cached prices for this <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" />.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.SetProductInformation(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Sets the product information based on the given <see cref="T:Dynamicweb.Ecommerce.Products.Product" />.
 Usually used for BOM products.
 </summary>
 <param name="theProduct">The product.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.Save(System.Data.DataRow)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
 
   public void SaveOrderLine(OrderLine orderLine)
   {
       IDbConnection connection = Database.CreateConnection();
       System.Data.IDbCommand command = connection.CreateCommand();
       DataSet dataSet = new DataSet();
       IDbDataAdapter dataAdapter = Database.GetAdapter();
       dataRow dataRow = null;

       string query = "SELECT * FROM EcomOrderLines WHERE OrderLineID = '" + orderLine.Id + "' OR OrderLineParentLineID = '" + orderLine.Id + "'";
       command.CommandText = query;
       dataAdapter.SelectCommand = command;
       object objCommandBuilder = Database.GetCommandBuilder(dataAdapter);
       dataAdapter.Fill(dataSet);

       if (dataSet.Tables[0].Rows.Count > 0)
       {
           dataRow = dataSet.Tables[0].Rows[0];
       }
       else
       {
    	      dataRow = dataSet.Tables[0].NewRow();
    	      dataSet.Tables[0].Rows.Add(dataRow);
    	      orderLine.Id = NumberGenerator.GetNumber("OL");
       }

       orderLine.Save(dataRow);

       dataAdapter.Update(dataSet);
       dataSet.Dispose();
       command.Dispose();
       connection.Close();
       connection.Dispose();
   }
}
 </code>
 </example>
 <summary>
 Saves the specified row.
 </summary>
 <param name="dataRow">The dataRow.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.Save">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private string GetValue(XmlNode node, string value)
    {
	      if (node == null)  return string.Empty;
	
	      XmlNode n = node.SelectSingleNode(value);
	      if (n == null) return string.Empty;
	
       return Converter.ToString(n.InnerText).Trim();
   }
   
   public void SaveOrderLinesToDB(XmlNode orderLinesNode, eCommerce.Orders.Order order)
   {
        if (orderLinesNode == null || order == null || order.Id == null || order.Id.Length == 0)
        	   return;

        foreach (XmlNode o in orderLinesNode.SelectNodes("OrderLine"))
        {
            string OrderLineID = GetValue(o, "OrderLineID");
        	   eCommerce.Orders.OrderLine orderLine = eCommerce.Orders.OrderLine.Create(OrderLineID, order);

        	   orderLine.Id = OrderLineID;
        	   orderLine.OrderID = order.Id;
        	   orderLine.ParentLineID = GetValue(o, "OrderLineParentLineID");
        	   orderLine.BOM = Converter.ToBoolean(GetValue(o, "OrderLineBOM"));
        	   orderLine.Date = Converter.ToDateTimeLegacy(GetValue(o, "OrderLineDate"));
        	   orderLine.Modified = Converter.ToDateTimeLegacy(GetValue(o, "OrderLineModified"));
        	   orderLine.ProductNumber = GetValue(o, "OrderLineProductNumber");
        	   orderLine.ProductID = GetValue(o, "OrderLineProductID");
        	   orderLine.ProductVariantID = GetValue(o, "OrderLineProductVariantID");
        	   orderLine.ProductName = GetValue(o, "OrderLineProductName");
            orderLine.ProductVariantText = GetValue(o, "OrderLineProductVariantText");
            orderLine.Price.VATPercent = Converter.ToDouble(GetValue(o, "OrderLineVatPercent"));
            orderLine.Price.VAT = Converter.ToDouble(GetValue(o, "OrderLineVatPrice"));
            orderLine.Quantity = Converter.ToDouble(GetValue(o, "OrderLineQuantity"));
            orderLine.Type = GetValue(o, "OrderLineType");
            orderLine.Reference = GetValue(o, "OrderLineReference");
            orderLine.BOMItemID = GetValue(o, "OrderLineBOMItemID");
            orderLine.UnitID = GetValue(o, "OrderLineUnitID");
            orderLine.Price.PriceWithVAT = Converter.ToDouble(GetValue(o, "OrderLinePriceWithVAT"));
        	   orderLine.Price.PriceWithoutVAT = Converter.ToDouble(GetValue(o, "OrderLinePriceWithoutVAT"));
        	   orderLine.Price.VAT = Converter.ToDouble(GetValue(o, "OrderLinePriceVAT"));
        	   orderLine.Price.VATPercent = Converter.ToDouble(GetValue(o, "OrderLinePriceVATPercent"));
        	   orderLine.UnitPrice.PriceWithVAT = Converter.ToDouble(GetValue(o, "OrderLineUnitPriceWithVAT"));
        	   orderLine.UnitPrice.PriceWithoutVAT = Converter.ToDouble(GetValue(o, "OrderLineUnitPriceWithoutVAT"));
        	   orderLine.UnitPrice.VAT = Converter.ToDouble(GetValue(o, "OrderLineUnitPriceVAT"));
        	   orderLine.UnitPrice.VATPercent = Converter.ToDouble(GetValue(o, "OrderLineUnitPriceVATPercent"));
        	   orderLine.PageID = Converter.ToInt32(GetValue(o, "OrderLinePageId"));
        	   orderLine.Save();
        }
   }
}
 </code>
 </example>
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.Save(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private string GetValue(XmlNode node, string value)
    {
	      if (node == null)  return string.Empty;
	
	      XmlNode n = node.SelectSingleNode(value);
	      if (n == null) return string.Empty;
	
       return Converter.ToString(n.InnerText).Trim();
   }
   
   public void SaveOrderLinesToDB(XmlNode orderLinesNode, eCommerce.Orders.Order order)
   {
        if (orderLinesNode == null || order == null || order.Id == null || order.Id.Length == 0)
        	   return;

        foreach (XmlNode o in orderLinesNode.SelectNodes("OrderLine"))
        {
            string OrderLineID = GetValue(o, "OrderLineID");
        	   eCommerce.Orders.OrderLine orderLine = eCommerce.Orders.OrderLine.Create(OrderLineID, order);

        	   orderLine.Id = OrderLineID;
        	   orderLine.OrderID = order.Id;
        	   orderLine.ParentLineID = GetValue(o, "OrderLineParentLineID");
        	   orderLine.BOM = Converter.ToBoolean(GetValue(o, "OrderLineBOM"));
        	   orderLine.Date = Converter.ToDateTimeLegacy(GetValue(o, "OrderLineDate"));
        	   orderLine.Modified = Converter.ToDateTimeLegacy(GetValue(o, "OrderLineModified"));
        	   orderLine.ProductNumber = GetValue(o, "OrderLineProductNumber");
        	   orderLine.ProductID = GetValue(o, "OrderLineProductID");
        	   orderLine.ProductVariantID = GetValue(o, "OrderLineProductVariantID");
        	   orderLine.ProductName = GetValue(o, "OrderLineProductName");
            orderLine.ProductVariantText = GetValue(o, "OrderLineProductVariantText");
            orderLine.Price.VATPercent = Converter.ToDouble(GetValue(o, "OrderLineVatPercent"));
            orderLine.Price.VAT = Converter.ToDouble(GetValue(o, "OrderLineVatPrice"));
            orderLine.Quantity = Converter.ToDouble(GetValue(o, "OrderLineQuantity"));
            orderLine.Type = GetValue(o, "OrderLineType");
            orderLine.Reference = GetValue(o, "OrderLineReference");
            orderLine.BOMItemID = GetValue(o, "OrderLineBOMItemID");
            orderLine.UnitID = GetValue(o, "OrderLineUnitID");
            orderLine.Price.PriceWithVAT = Converter.ToDouble(GetValue(o, "OrderLinePriceWithVAT"));
        	   orderLine.Price.PriceWithoutVAT = Converter.ToDouble(GetValue(o, "OrderLinePriceWithoutVAT"));
        	   orderLine.Price.VAT = Converter.ToDouble(GetValue(o, "OrderLinePriceVAT"));
        	   orderLine.Price.VATPercent = Converter.ToDouble(GetValue(o, "OrderLinePriceVATPercent"));
        	   orderLine.UnitPrice.PriceWithVAT = Converter.ToDouble(GetValue(o, "OrderLineUnitPriceWithVAT"));
        	   orderLine.UnitPrice.PriceWithoutVAT = Converter.ToDouble(GetValue(o, "OrderLineUnitPriceWithoutVAT"));
        	   orderLine.UnitPrice.VAT = Converter.ToDouble(GetValue(o, "OrderLineUnitPriceVAT"));
        	   orderLine.UnitPrice.VATPercent = Converter.ToDouble(GetValue(o, "OrderLineUnitPriceVATPercent"));
        	   orderLine.PageID = Converter.ToInt32(GetValue(o, "OrderLinePageId"));
        	   orderLine.Save( OrderLineID );
        }
   }
}
 </code>
 </example>
 <summary>
 Saves the instance into DB.
 </summary>
 <param name="lineId">DB field name is OrderLineID or OrderLineParentLineID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.Delete">
 <example>
 Removes all orderlines that is of type Product and that no longer exist in the database. 
 Also removes products according to the control panel settings: Active, on stock, price is zero.
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Order order;
 
    public void RemoveNoneActiveProducts()
    {

        	//HACK: This prevents dbProduct.Price.Price below to call this method and create an endless loop
        	if (order.IsCart)
        	{
        		Context.SetCart(order);
        	}

        	bool doCheckStock = Converter.ToBoolean(Dynamicweb.Configuration.SystemConfiguration.Instance.GetValue("/Globalsettings/Ecom/Product/DontShowProductIfNotOnStock"));
        	bool doCheckPrice = Converter.ToBoolean(Dynamicweb.Configuration.SystemConfiguration.Instance.GetValue("/Globalsettings/Ecom/Product/DontShowProductIfHasNoPrice"));

        	//First build a list of ID's of the products to get from the database
        	List&lt;string&gt; ids = new List&lt;string&gt;();
        	List&lt;OrderLine&gt; productLines = new List&lt;OrderLine&gt;();
        	foreach (OrderLine orderLine in order.OrderLines)
        	{
        		if (orderLine.Type == Converter.ToString(Converter.ToInt32(OrderLineType.Product)))
        		{
        			ids.Add(orderLine.Product.ID);
        			productLines.Add(orderLine);
        		}
        	}

        	//Get the products that match the ids
        	ProductCollection productsFromDatabase = Product.getProducts(ids.ToArray(), false);

        	//Remove the products that don't exist or is not active
        	foreach (OrderLine productLine in productLines)
        	{
        		bool doRemove = true;
        		Product product = productLine.Product;
        		foreach (Product dbProduct in productsFromDatabase)
        		{
        			if (product.ID == dbProduct.ID &amp;&amp; product.VariantID == dbProduct.VariantID &amp;&amp; product.LanguageID == dbProduct.LanguageID)
        			{
        				if (dbProduct.Active)
        				{
        					doRemove = false;
        				}
        				if (! doRemove &amp;&amp; doCheckPrice &amp;&amp; dbProduct.Price.Price &lt;= 0)
        				{
        					doRemove = true;
        				}
        				if (! doRemove &amp;&amp; doCheckStock &amp;&amp; dbProduct.UnitStock &lt;= 0)
        				{
        					doRemove = true;
        				}
        				break;
        			}
        		}
        		if (doRemove)
        		{
        			order.OrderLines.Remove(productLine);
        			productLine.Delete();
        		}
        	}
   }
}
 </code>
 </example>
 <summary>
 Deletes order line from DB.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.Delete(System.String)">
 <example>
 Removes all orderlines that is of type Product and that no longer exist in the database. 
 Also removes products according to the control panel settings: Active, on stock, price is zero.
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Order order;
 
    public void RemoveNoneActiveProducts()
    {

        	//HACK: This prevents dbProduct.Price.Price below to call this method and create an endless loop
        	if (order.IsCart)
        	{
        		Context.SetCart(order);
        	}

        	bool doCheckStock = Converter.ToBoolean(Dynamicweb.Configuration.SystemConfiguration.Instance.GetValue("/Globalsettings/Ecom/Product/DontShowProductIfNotOnStock"));
        	bool doCheckPrice = Converter.ToBoolean(Dynamicweb.Configuration.SystemConfiguration.Instance.GetValue("/Globalsettings/Ecom/Product/DontShowProductIfHasNoPrice"));

        	//First build a list of ID's of the products to get from the database
        	List&lt;string&gt; ids = new List&lt;string&gt;();
        	List&lt;OrderLine&gt; productLines = new List&lt;OrderLine&gt;();
        	foreach (OrderLine orderLine in order.OrderLines)
        	{
        		if (orderLine.Type == Converter.ToString(Converter.ToInt32(OrderLineType.Product)))
        		{
        			ids.Add(orderLine.Product.ID);
        			productLines.Add(orderLine);
        		}
        	}

        	//Get the products that match the ids
        	ProductCollection productsFromDatabase = Product.getProducts(ids.ToArray(), false);

        	//Remove the products that don't exist or is not active
        	foreach (OrderLine productLine in productLines)
        	{
        		bool doRemove = true;
        		Product product = productLine.Product;
        		foreach (Product dbProduct in productsFromDatabase)
        		{
        			if (product.ID == dbProduct.ID &amp;&amp; product.VariantID == dbProduct.VariantID &amp;&amp; product.LanguageID == dbProduct.LanguageID)
        			{
        				if (dbProduct.Active)
        				{
        					doRemove = false;
        				}
        				if (! doRemove &amp;&amp; doCheckPrice &amp;&amp; dbProduct.Price.Price &lt;= 0)
        				{
        					doRemove = true;
        				}
        				if (! doRemove &amp;&amp; doCheckStock &amp;&amp; dbProduct.UnitStock &lt;= 0)
        				{
        					doRemove = true;
        				}
        				break;
        			}
        		}
        		if (doRemove)
        		{
        			order.OrderLines.Remove(productLine);
        			productLine.Delete(productLine.ID);
        		}
        	}
   }
}
 </code>
 </example>
 <summary>
 Deletes order line from DB.
 </summary>
 <param name="lineId">The OrderLine ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.Copy">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private OrderLine orderLine;
   public OrderLine DoSave()
   {
       OrderLine theOrderLine = new OrderLine();
       theOrderLine = orderLine.Copy();
       return theOrderLine;
   }
}
 </code>
 </example>
 <summary>
 Copies this instance.
 </summary>
 <returns>The copy of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.CanBeMerged(Dynamicweb.Ecommerce.Orders.OrderLine)">
 <example>
 <code title="C#" description="" lang="CS">
 class MyPage : System.Web.UI.Page
 {
    private Order order;
 
     public void AddLine(OrderLine orderLine)
     {
     	bool merged = false;

    		foreach (OrderLine theOrderLine in order.OrderLines)
    		{
    			if (!(string.IsNullOrEmpty(theOrderLine.DiscountId)))
    			{
    				continue;
    			}

    			if (theOrderLine.CanBeMerged(orderLine))
    			{
    				merged = true;

    				if ((theOrderLine.Quantity + orderLine.Quantity) &lt; 1)
    				{
    					List.Remove(theOrderLine);
    					theOrderLine.Delete();
    				}
    				else
    				{
    					theOrderLine.Quantity += orderLine.Quantity;
    				}
    				UpdateBOMOrderLine(theOrderLine);

    				break;
    		   }

        }

        if (merged == false)
    	   {
    		   order.OrderLines.Add(orderLine);
    	   }

    }
 
 }
 </code>
 </example>
 <summary>
 Determines whether this instance can be merged with another order line.
 </summary>
 <param name="other">The other order line.</param>
 <returns><c>true</c> if this instance can be merged with another order line; otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.SetOrderLineType(Dynamicweb.Ecommerce.Orders.OrderLineType)">
 <summary>
 Sets the <see cref="P:Dynamicweb.Ecommerce.Orders.OrderLine.OrderLineType" /> of this <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" />.
 </summary>
 <param name="orderLineType">The <see cref="P:Dynamicweb.Ecommerce.Orders.OrderLine.OrderLineType" /> to set this <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> to.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.GetOrderLineType">
 <summary>
 Gets the <see cref="P:Dynamicweb.Ecommerce.Orders.OrderLine.OrderLineType" /> of this <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" />.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.GetProductImage(System.Nullable{System.Int32})">
 <summary>
 Returns the path to the product image.
 </summary>
 <param name="areaId">The ID of the area.</param>
 <returns>The path to the product image.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.GetOrderLinesByOrder(Dynamicweb.Ecommerce.Orders.Order)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
 
    public double CalcOrderTotalValue(Order order)
    {
       OrderLineCollection orderLines = OrderLines.GetOrderLinesByOrder(order);
       double theVolume = 0.0;
       if (orderLines.Count > 0)
       {
           foreach (OrderLine theOrderLine in orderLines)
           {
		          if (! (theOrderLine.Product.Type == ProductType.Service))
		          {
			          theVolume += theOrderLine.Volume;
		          }
           }
        }
        return theVolume;
    }
 
}
 </code>
 </example>
 <summary>
 Gets the order lines.
 </summary>
 <param name="order">The order.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.GetOrderLineById(System.String)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> by ID.
 </summary>
 <param name="id">The id.</param><returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.GetOrderLineById(System.String,Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" /> by ID and sets the Order property to the given <see cref="P:Dynamicweb.Ecommerce.Orders.OrderLine.Order" />.
 </summary>
 <param name="id">The id.</param>
 <param name="order">The order.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.GetOrderLineType(System.Int32)">
 <summary>
 Gets the <see cref="P:Dynamicweb.Ecommerce.Orders.OrderLine.OrderLineType" /> of this <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" />.
 </summary>
 <param name="orderLineType">The string literal of integer equivalent of <see cref="P:Dynamicweb.Ecommerce.Orders.OrderLine.OrderLineType" />.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLine.GetOrderLineType(System.String)">
 <summary>
 Gets the <see cref="P:Dynamicweb.Ecommerce.Orders.OrderLine.OrderLineType" /> of this <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" />.
 </summary>
 <param name="orderLineType">The integer equivalent of <see cref="P:Dynamicweb.Ecommerce.Orders.OrderLine.OrderLineType" />.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig">
 <summary>
 OrderLineBuilderConfig class. This class cannot be inherited.
 This class helps to build <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine"/>s.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig.Quantity">
 <summary>
 Gets or sets the quantity.
 </summary>
 <value>The quantity.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig.ValidateQuantity">
 <summary>
 Gets or sets a value indicating whether quantity is validated.
 If quantity is validated, any quantity value less than 1 will cause a return value of <c>null</c>; otherwise the quantity is set to 1.
 </summary>
 <value><c>true</c> if quantity is validated; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig.ProductId">
 <summary>
 Gets or sets the product identifier.
 </summary>
 <value>The product identifier.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig.VariantId">
 <summary>
 Gets or sets the variant identifier.
 </summary>
 <value>The variant identifier.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig.VariantText">
 <summary>
 Gets or sets the variant text.
 </summary>
 <value>The variant text.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig.UnitId">
 <summary>
 Gets or sets the unit identifier.
 </summary>
 <value>The unit identifier.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig.OrderLineType">
 <summary>
 Gets or sets the type of the order line.
 </summary>
 <value>The type of the order line.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig.ReferenceUrl">
 <summary>
 Gets or sets the reference URL.
 </summary>
 <value>The reference URL.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig.AddReferenceUrl">
 <summary>
 Gets or sets a value indicating whether to add the <see cref="P:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig.ReferenceUrl"/> to the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine"/>.
 Default value is <c>true</c>.
 </summary>
 <value><c>true</c> if to add the reference URL; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig.PageId">
 <summary>
 Gets or sets the page identifier.
 </summary>
 <value>The page identifier.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig.ProductName">
 <summary>
 Gets or sets the name of the product.
 </summary>
 <value>The name of the product.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig.ProductNumber">
 <summary>
 Gets or sets the product number.
 </summary>
 <value>The product number.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig.AddToCart">
 <summary>
 Gets or sets a value indicating whether to add the specified product to the cart.
 Default value is <c>true</c>.
 </summary>
 <value><c>true</c> if product is added; otherwise, <c>false</c>.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig.OrderLineFieldValues">
 <summary>
 Gets or sets the order line field values.
 </summary>
 <value>The order line field values.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig.FavoriteListId">
 <summary>
 Gets or sets the favorite list identifier.
 </summary>
 <value>The favorite list identifier.</value>
 <autogeneratedoc />
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineBuilderConfig.GiftCardAmount">
 <summary>
 Gets or sets the gift card amount.
 </summary>
 <value>The gift card amount.</value>
 <autogeneratedoc />
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderLineCollection">
 <example>
 <code title="C#" description="" lang="CS">
 class Renderer 
 { 
    public void RenderOrderLines(Order order, Rendering.Template ParentTemplate)
    {

       Rendering.Template orderLineTemplate = ParentTemplate.GetLoop("OrderLines");
       foreach (OrderLine orderLine in order.OrderLines)
    	  {
    		 RenderOrderLine(orderLine, orderLineTemplate);
    		 orderLineTemplate.CommitLoop();
    	  }
    }
    
    public void RenderOrderLine(OrderLine orderLine, Rendering.Template template)
    {
        //TODO: insert your code here.
    }
 }
 </code>
 </example>
 <summary>
 Represents a collection of the OrderLine objects.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineCollection.Order">
 <summary>
 Gets or sets the order.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineCollection.Price">
 <summary>
 Gets the price.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineCollection.CountOnlyProducts">
 <summary>
 Gets the count of products.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineCollection.CountOnlyBom">
 <summary>
 Gets the count of BOM.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineCollection.CountOnlyDiscounts">
 <summary>
 Gets the number of <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" />s of type "Discount" and "ProductDiscount".
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineCollection.CountOnlyTaxes">
 <summary>
 Gets the number of <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" />s of type "Tax".
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineCollection.Products">
 <summary>
 Gets the products.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineCollection.ClearCachedPrices">
 <summary>
 Clears the cached prices for all <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLine" />s in this <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineCollection" />.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineCollection.Add(Dynamicweb.Ecommerce.Orders.OrderLine)">
 <example>
 <code title="C#" description="" lang="CS">
 public static OrderLineCollection GetOrderLineCollection(IDataReader dataReader, Order Order)
 {
     OrderLineCollection orderLines = new OrderLineCollection();

     while (dataReader.Read())
    	{
    		OrderLine orderLine = new OrderLine(dataReader, Order);

    		if (orderLine.ParentLineID == "")
    		{
    			orderLine.Add(orderLine);
    		}
    	}
 
     return orderLines;
 }
 </code>
 </example>
 <summary>
 Adds the specified order line.
 </summary>
 <param name="orderLine">The order line.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineCollection.Add(Dynamicweb.Ecommerce.Orders.OrderLine,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
 public static void CartAddSingleLine( int pageId, Dynamicweb.Frontend.PageView Pageview )
 {

     OrderLineCollection newOrderLines = new OrderLineCollection();

    	mProductId = Dynamicweb.Context.Current.Request("ProductID" + reqLineID, false).Replace("'", "''");
    	mVariantId = Dynamicweb.Context.Current.Request("VariantID" + reqLineID);
    	mVariantTxt = Dynamicweb.Context.Current.Request("VariantText" + reqLineID);
    	mUnitId = Dynamicweb.Context.Current.Request("UnitID" + reqLineID);
    	mQuantity = Dynamicweb.Context.Current.Request("Quantity" + reqLineID);
    	mType = Dynamicweb.Context.Current.Request("Type" + reqLineID);
    	mProductName = Dynamicweb.Context.Current.Request("ProductName" + reqLineID);
    	mProductNumber = Dynamicweb.Context.Current.Request("ProductNumber" + reqLineID);

   	if (mProductId != "")
    	{
    		OrderLine orderLine = OrderLineBuilder(Context.Cart, Converter.ToDouble(mQuantity), true, mProductId, mVariantId, mVariantTxt, mUnitId, Converter.ToString(Converter.ToInt32(mType)), RefUrl, pageId, mProductName, mProductNumber, false);
    		if (orderLine != null)
    		{
    			Context.Cart.OrderLines.Add(orderLine, true);
    		}
    	}

 }
 </code>
 </example>
 <summary>
 Adds the specified order line.
 </summary>
 <param name="orderLine">The order line.</param>
 <param name="doMerge">if set to <c>true</c> try to merge.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineCollection.Add(Dynamicweb.Ecommerce.Orders.OrderLineCollection)">
 <example>
 <code title="C#" description="" lang="CS">
 public static void CartAddMultyLine( int pageId, Dynamicweb.Frontend.PageView Pageview )
 {

     OrderLineCollection newOrderLines = new OrderLineCollection();

     foreach (string reqName in HttpContext.Current.Request.Form)
     {

    		int reqLineID = 0;
    		if (reqName.StartsWith("ProductLoopCounter"))
    		{
    			reqLineID = Converter.ToInt32(HttpContext.Current.Request.Form[reqName]);
    		}

    		if (reqLineID &lt;= 0)
    		{
    			continue;
    		}

    		mProductId = Dynamicweb.Context.Current.Request("ProductID" + reqLineID, false).Replace("'", "''");
    		mVariantId = Dynamicweb.Context.Current.Request("VariantID" + reqLineID);
    		mVariantTxt = Dynamicweb.Context.Current.Request("VariantText" + reqLineID);
    		mUnitId = Dynamicweb.Context.Current.Request("UnitID" + reqLineID);
    		mQuantity = Dynamicweb.Context.Current.Request("Quantity" + reqLineID);
    		mType = Dynamicweb.Context.Current.Request("Type" + reqLineID);
    		mProductName = Dynamicweb.Context.Current.Request("ProductName" + reqLineID);
    		mProductNumber = Dynamicweb.Context.Current.Request("ProductNumber" + reqLineID);

    		if (mProductId != "")
    		{
    			OrderLine orderLine = OrderLineBuilder(Context.Cart, Converter.ToDouble(mQuantity), true, mProductId, mVariantId, mVariantTxt, mUnitId, Converter.ToString(Converter.ToInt32(mType)), RefUrl, pageId, mProductName, mProductNumber, false);
    			if (orderLine != null)
    			{
    				orderLine.Id = "DW_NEWMULTIORDERLINEID_" + mProductId + "_" + reqLineID;
    				OrderLines.Add(orderLine);
    			}
    		}

    }

    if (OrderLines.Count > 0)
    {
    	   Context.Cart.OrderLines.Add(newOrderLines);
    }

 }
 </code>
 </example>
 <summary>
 Adds the specified order lines.
 </summary>
 <param name="orderLines">The order lines.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineCollection.UpdateQuantity(Dynamicweb.Ecommerce.Orders.OrderLine)">
 <example>
 <code title="C#" description="" lang="CS">
 internal static void  UpdateOrderLine (int quantity, string orderLineID)
 {
    	OrderLine line = new OrderLine(orderLineID);
    	Order EcomCart = Common.Context.Cart();
    	EcomCart.IsCart = true;

    	line.Modified = DateTime.Now;
    	line.Order = EcomCart;

    	if (quantity &gt; 0)
    	{
    		line.Quantity = quantity;
    		EcomCart.OrderLines.UpdateQuantity(line);
    	}

    	line.ID = ""; 
    	SaveCart();
 }
 </code>
 </example>
 <summary>
 Updates the quantity.
 </summary>
 <param name="orderLine">The order line.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineCollection.UpdateBomOrderLine(Dynamicweb.Ecommerce.Orders.OrderLine)">
 <example>
 <code title="C#" description="" lang="CS">
 internal static void  UpdateOrderLine (int quantity, string orderLineID)
 {
    	OrderLine line = new OrderLine(orderLineID);
    	Order EcomCart = Common.Context.Cart();
    	EcomCart.IsCart = true;

    	line.Modified = DateTime.Now;
    	line.Order = EcomCart;

    	if (quantity &gt; 0)
    	{
    		line.Quantity = quantity;
    		EcomCart.OrderLines.UpdateBOMOrderLine(line);
    	}

    	line.ID = ""; 
    	SaveCart();
 }
 </code>
 </example>
 <summary>
 Updates the BOM order line.
 </summary>
 <param name="orderLine">The order line.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineCollection.Save(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
 class MyPage : System.Web.UI.Page
 {
 
     public void SaveOrder( Order order )
     {
 	    IDbConnection objConn = Database.CreateConnection();
        	System.Data.IDbCommand objCommand = objConn.CreateCommand();
        	DataSet objDataset = new DataSet();
        	IDbDataAdapter objDataAdapter = Database.GetAdapter();
        	DataRow objRow = null;

        	//Prepare adapter and fill data
     	string SQL = string.Format("SELECT * FROM EcomOrders WHERE OrderID = '{0}'", order.Id);
    		objCommand.CommandText = SQL;
    		objDataAdapter.SelectCommand = objCommand;
   	 	object objCommandBuilder = Database.GetCommandBuilder(objDataAdapter);
    		objDataAdapter.Fill(objDataset);

    		if (objDataset.Tables[0].Rows.Count > 0)
   	 	{
    			objRow = objDataset.Tables[0].Rows[0];
    		}
    		else
   	 	{
    			objRow = objDataset.Tables[0].NewRow();
    			objDataset.Tables[0].Rows.Add(objRow);
    			if (order.IsCart())
    			{
    				order.Id = NumberGenerator.GetNumber("CART");
    			}
    		    else
    		    {
    			    order.Id = NumberGenerator.GetNumber("ORDER");
    		    }
         }

    	    objRow["OrderID"] = order.Id;
         objRow["OrderShopID"] = order.ShopID;
         objRow["OrderDate"] = order.Date;
         objRow["OrderModified"] = DateTime.Now;
         objRow["OrderComplete"] = order.Complete;
         objRow["OrderDeleted"] = order.Deleted;
         objRow["OrderStateID"] = ((string.IsNullOrEmpty(order.StateID)) ? null : order.StateID); 
         objRow["OrderVAT"] = Convert.ToSingle(order.Price.VAT);
         objRow["OrderTrackTraceNumber"] = order.TrackTraceNumber;
         objRow["OrderShippingMethod"] = order.ShippingMethod;
         objRow["OrderPaymentMethod"] = order.PaymentMethod;
         objRow["OrderSalesDiscount"] = order.SalesDiscount;
         objRow["OrderCurrencyName"] = order.CurrencyName;
         objRow["OrderCurrencyRate"] = order.CurrencyRate;
         objRow["OrderCurrencyCode"] = order.CurrencyCode;
         objRow["OrderReSendEmail"] = order.ReSendEmail;
         objRow["OrderCart"] = order.IsCart;
         objRow["OrderFieldsXML"] = order.FieldsXML;
         objRow["OrderCustomerAccessUserID"] = order.CustomerAccessUserID; 
         objRow["OrderCustomerAccessUserUserName"] = order.CustomerAccessUserUserName;
         objRow["OrderCustomerNumber"] = order.CustomerNumber;
         objRow["OrderCustomerCompany"] = order.CustomerCompany;
         objRow["OrderCustomerName"] = order.CustomerName;
         objRow["OrderCustomerAddress"] = order.CustomerAddress;
         objRow["OrderTotalPrice"] = order.TotalPrice;

         objRow["OrderPriceWithVAT"] = order.Price.PriceWithVAT;
         objRow["OrderPriceWithoutVAT"] = order.Price.PriceWithoutVAT;
         objRow["OrderPriceVAT"] = Convert.ToSingle(order.Price.VAT);
         objRow["OrderPriceVATPercent"] = order.Price.VATPercent;

      	if (order.OrderFieldValues != null)
     	{
    		    order.OrderFieldValues.Save(objRow);
     	}

     	objDataAdapter.Update(objDataset);

    	    objDataset.Dispose();
     	objCommand.Dispose();
     	objConn.Close();
     	objConn.Dispose();

    	    if (order.OrderLines != null)
      	{
    		    order.OrderLines.Save(ID);
     	}

    }
 }
 </code>
 </example>
 <summary>
 Saves the specified order ID.
 </summary>
 <param name="orderId">The order ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineCollection.Load(System.String,Dynamicweb.Ecommerce.Orders.Order)">
 <example>
 <code title="C#" description="" lang="CS">
 public static OrderLineCollection GetOrderLineCollection( Order order)
 {
    	OrderLineCollection productCollection = new OrderLineCollection();
    	string sql = String.Format("SELECT * FROM EcomOrderLines WHERE OrderLineOrderID = '{0}' ORDER BY OrderLineID, OrderLineParentLineID", order.Id);

    	productCollection.Load(sql, order);
    	return productCollection;
 }
 </code>
 </example>
 <summary>
 Loads the specified order lines.
 </summary>
 <param name="sql">The SQL query.</param>        
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineCollection.Load(System.String,System.Collections.Generic.Dictionary{System.String,System.Tuple{System.Object,System.Data.DbType}},Dynamicweb.Ecommerce.Orders.Order)">
 <example>
 <code title="C#" description="" lang="CS">
 public static OrderLineCollection GetOrderLineCollection( Order order)
 {
    	OrderLineCollection productCollection = new OrderLineCollection();
    	string sql = String.Format("SELECT * FROM EcomOrderLines WHERE OrderLineOrderID = '{0}' ORDER BY OrderLineID, OrderLineParentLineID", order.Id);

    	productCollection.Load(sql, order);
    	return productCollection;
 }
 </code>
 </example>
 <summary>
 Loads the specified order lines.
 </summary>
 <param name="sql">The SQL query.</param>
 <param name="sqlParams">Command parameters dictionary with key as a parameter name and value of tuple(parameter value, parameter db type)</param>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineCollection.Remove(Dynamicweb.Ecommerce.Orders.OrderLine)">
 <example>
 Removes all orderlines that is of type Product and that no longer exist in the database. 
 Also removes products according to the control panel settings: Active, on stock, price is zero.
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Order order;
 
    public void RemoveNoneActiveProducts()
    {

        	//HACK: This prevents dbProduct.Price.Price below to call this method and create an endless loop
        	if (order.IsCart)
        	{
        		Context.SetCart(order);
        	}

        	bool doCheckStock = Converter.ToBoolean(Dynamicweb.Configuration.SystemConfiguration.Instance.GetValue("/Globalsettings/Ecom/Product/DontShowProductIfNotOnStock"));
        	bool doCheckPrice = Converter.ToBoolean(Dynamicweb.Configuration.SystemConfiguration.Instance.GetValue("/Globalsettings/Ecom/Product/DontShowProductIfHasNoPrice"));

        	//First build a list of ID's of the products to get from the database
        	List&lt;string&gt; ids = new List&lt;string&gt;();
        	List&lt;OrderLine&gt; productLines = new List&lt;OrderLine&gt;();
        	foreach (OrderLine orderLine in order.OrderLines)
        	{
        		if (orderLine.Type == Converter.ToString(Converter.ToInt32(OrderLineType.Product)))
        		{
        			ids.Add(orderLine.Product.ID);
        			productLines.Add(orderLine);
        		}
        	}

        	//Get the products that match the ids
        	ProductCollection productsFromDatabase = Product.getProducts(ids.ToArray(), false);

        	//Remove the products that don't exist or is not active
        	foreach (OrderLine productLine in productLines)
        	{
        		bool doRemove = true;
        		Product product = productLine.Product;
        		foreach (Product dbProduct in productsFromDatabase)
        		{
        			if (product.ID == dbProduct.ID &amp;&amp; product.VariantID == dbProduct.VariantID &amp;&amp; product.LanguageID == dbProduct.LanguageID)
        			{
        				if (dbProduct.Active)
        				{
        					doRemove = false;
        				}
        				if (! doRemove &amp;&amp; doCheckPrice &amp;&amp; dbProduct.Price.Price &lt;= 0)
        				{
        					doRemove = true;
        				}
        				if (! doRemove &amp;&amp; doCheckStock &amp;&amp; dbProduct.UnitStock &lt;= 0)
        				{
        					doRemove = true;
        				}
        				break;
        			}
        		}
        		if (doRemove)
        		{
        			order.OrderLines.Remove(productLine);
        			productLine.Delete();
        		}
        	}
   }
}
 </code>
 </example>
 <summary>
 Removes the specified order line.
 </summary>
 <param name="theOrderLine">The order line.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineCollection.RemoveLine(System.String)">
 <example>
 Removes all orderlines that is of type Product and that no longer exist in the database. 
 Also removes products according to the control panel settings: Active, on stock, price is zero.
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Order order;
 
    public void RemoveNoneActiveProducts()
    {

        	//HACK: This prevents dbProduct.Price.Price below to call this method and create an endless loop
        	if (order.IsCart)
        	{
        		Context.SetCart(order);
        	}

        	bool doCheckStock = Converter.ToBoolean(Dynamicweb.Configuration.SystemConfiguration.Instance.GetValue("/Globalsettings/Ecom/Product/DontShowProductIfNotOnStock"));
        	bool doCheckPrice = Converter.ToBoolean(Dynamicweb.Configuration.SystemConfiguration.Instance.GetValue("/Globalsettings/Ecom/Product/DontShowProductIfHasNoPrice"));

        	//First build a list of ID's of the products to get from the database
        	List&lt;string&gt; ids = new List&lt;string&gt;();
        	List&lt;OrderLine&gt; productLines = new List&lt;OrderLine&gt;();
        	foreach (OrderLine orderLine in order.OrderLines)
        	{
        		if (orderLine.Type == Converter.ToString(Converter.ToInt32(OrderLineType.Product)))
        		{
        			ids.Add(orderLine.Product.ID);
        			productLines.Add(orderLine);
        		}
        	}

        	//Get the products that match the ids
        	ProductCollection productsFromDatabase = Product.getProducts(ids.ToArray(), false);

        	//Remove the products that don't exist or is not active
        	foreach (OrderLine productLine in productLines)
        	{
        		bool doRemove = true;
        		Product product = productLine.Product;
        		foreach (Product dbProduct in productsFromDatabase)
        		{
        			if (product.ID == dbProduct.ID &amp;&amp; product.VariantID == dbProduct.VariantID &amp;&amp; product.LanguageID == dbProduct.LanguageID)
        			{
        				if (dbProduct.Active)
        				{
        					doRemove = false;
        				}
        				if (! doRemove &amp;&amp; doCheckPrice &amp;&amp; dbProduct.Price.Price &lt;= 0)
        				{
        					doRemove = true;
        				}
        				if (! doRemove &amp;&amp; doCheckStock &amp;&amp; dbProduct.UnitStock &lt;= 0)
        				{
        					doRemove = true;
        				}
        				break;
        			}
        		}
        		if (doRemove)
        		{
        			order.OrderLines.Remove(productLine.ID);
        			productLine.Delete();
        		}
        	}
   }
}
 </code>
 </example>
 <summary>
 Removes the order line.
 </summary>
 <param name="orderlineId">The order line ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineCollection.RemoveDiscounts">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void ClearDiscounts()
   {
       //Get the current cart
       Order ecomCart = Dynamicweb.eCommerce.Common.Context.Cart;
       if (ecomCart == null || !ecomCart.IsCart)
       {
           return;
       }

       ecomCart.OrderLines.RemoveDiscounts();
   }
}
 </code>
 </example>
 <summary>
 Removes the discounts.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineCollection.RemoveTaxes">
 <summary>
 Removes all Tax OrderLines from the collection.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineCollection.ReorderDiscounts">
 <summary>
 Rearranges Tax OrderLines so they are the next OrderLine object in the OrderLineCollection after the Product OrderLine they are connected to.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineCollection.ReorderTaxes">
 <summary>
 Rearranges Tax OrderLines so they are the next OrderLine object in the OrderLineCollection after the Product OrderLine they are connected to.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderLineField">
 <summary>
  Represents information about an order line field
 </summary>
 <example>
 <code description="" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\OrderLineFieldInformationPageSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineField.SystemName">
 <summary>
 Gets the name of the system.
 </summary>
 <value>The system name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineField.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineField.Length">
 <summary>
 Gets or sets the length.
 </summary>
 <value>The length.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineField.#ctor">
 <summary>
 Empty constructor
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineField.#ctor(System.String,System.String,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineField" /> class.
 </summary>
 <param name="systemName">Name of the system.</param>
 <param name="name">The name.</param>
 <param name="length">The length.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineField.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineField" /> class.
 </summary>
 <param name="dataReader">The DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineField.Save">
 <example>
 <code title="C#" description="" lang="CS">
 class OrderLineField_EditPage : System.Web.UI.Page
 {
 
    private void SaveOrderLineField()
    {
    	if (Converter.ToBoolean(IsNewOrderLineField.Value))
    	{
    		foreach (OrderLineField orderLineField in Dynamicweb.eCommerce.Common.Application.OrderLineFields)
    		{
    			if (orderLineField.SystemName == SystemNameText.Text)
    			{
    				SaveError.Value = "DuplicateSystemName";
    				return;
    			}
    		}
    	}

    	OrderLineField field = new OrderLineField(SystemNameText.Text, NameText.Text, Converter.ToInt32(LengthText.Text));
    	field.Save();
    	Dynamicweb.eCommerce.Common.Application.KillOrderLineFields();
    }
 }
 </code>
 </example>
 <summary>
 Saves this instance.
 </summary>
 <returns>true if success; otherwise, false.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineField.Delete">
 <example>
 <code title="C#" description="" lang="CS">
 class OrderLineField_EditPage : System.Web.UI.Page
 {
     private void DeleteOrderLineField( OrderLineField fld )
     {
         fld.Delete();
         OrderLineFieldGroupRelation.DeleteBySystemName(fld.SystemName);
         Dynamicweb.eCommerce.Common.Application.KillOrderLineFields();
     }
 }
 </code>
 </example>
 <summary>
 Deletes this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineField.Create(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
 class OrderLineField_EditPage : System.Web.UI.Page
 {
    protected void Page_Load(object sender, System.EventArgs e)
    {
    	
    	   if (!Page.IsPostBack)
        {
    		   if (Dynamicweb.Context.Current.Request("SystemName") != null)
    		   {
    			   OrderLineField field = OrderLineField.Create(Dynamicweb.Context.Current.Request("SystemName"));
    			   SystemNameText.Text = field.SystemName;
    			   NameText.Text = field.Name;
    			   LengthText.Text = field.Length.ToString();
    			   SystemNameText.Enabled = false;
    		    }
    		    else
    		    {
    			   IsNewOrderLineField.Value = "true";
    		    }
    	   }

    }
 }
 </code>
 </example>
 <summary>
 Creates the specified OrderLineField object.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineField.GetOrderLineFields">
 <example>
 <code title="C#" description="" lang="CS">
 class GroupEditPage : System.Web.UI.Page
 {
 
     private string GetOrderlineFieldsLayer()
     {
         System.Text.StringBuilder sbReturn = new System.Text.StringBuilder();
         OrderLineFieldCollection fields  = OrderLineField.GetOrderLineFields();

         sbReturn.Append("&lt;div id=""OrderLineFieldLayer"" style=""position:absolute; display:none""&gt;");
         if( fields.Count &gt; 0 ) {
            sbReturn.Append("&lt;table style=""border:solid 1px #7F9DB9; background-color:#ffffff"" cellpadding=""0"" cellspacing=""0""&gt;");
            sbReturn.Append("&lt;tr&gt;&lt;td&gt;"); 
            sbReturn.Append("&lt;div&gt;");
         }
         foreach( OrderLineField field in fields )
         {
            sbReturn.AppendFormat("&lt;table style=""cursor:hand"" cellpadding=""0"" cellspacing=""0"" onClick=""addOrderLineField('{0}','{1}');"" onmouseover=""mouseoverBox(this);"" onmouseout=""mouseoutBox(this);""&gt;&lt;tr&gt;" + 
                                  "  &lt;td style=""height:20px; width:20px; background-color:#D4D0C8"" align=""center""&gt;&lt;img src=""../images/arrow.gif"" border=0&gt;&lt;/td&gt;" + 
                                  "  &lt;td style=""PADDING-LEFT: 5px; ""&gt;&amp;nbsp;{2}&lt;/td&gt;" + 
                                  "  &lt;td style=""WIDTH:9px;""&gt;&lt;/td&gt;" + 
                                  "&lt;/tr&gt;&lt;/table&gt;",  
                                  Base.HtmlEncode(Base.JSEncode(field.SystemName)), 
                                  Base.HtmlEncode(Base.JSEncode(field.Name)), 
                                  Base.HtmlEncode(field.Name) 
                                  );
         }
         sbReturn.Append("&lt;/div&gt;");
         sbReturn.Append("&lt;/td&gt;&lt;/tr&gt;");
         sbReturn.Append("&lt;/table&gt;");
 
         return sbReturn.ToString();
     }
 }
 </code>
 </example>
 <summary>
 Gets the collection of the OrderLineField objects.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineField.GetOrderLineFields(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
 class GroupEditPage : System.Web.UI.Page
 {
 
     private string GetOrderlineFieldsLayer( Group grp )
     {
         System.Text.StringBuilder sbReturn = new System.Text.StringBuilder();
         OrderLineFieldCollection fields  = OrderLineField.GetOrderLineFields( grp.ID );

         sbReturn.Append("&lt;div id=""OrderLineFieldLayer"" style=""position:absolute; display:none""&gt;");
         if( fields.Count &gt; 0 ) {
            sbReturn.Append("&lt;table style=""border:solid 1px #7F9DB9; background-color:#ffffff"" cellpadding=""0"" cellspacing=""0""&gt;");
            sbReturn.Append("&lt;tr&gt;&lt;td&gt;"); 
            sbReturn.Append("&lt;div&gt;");
         }
         foreach( OrderLineField field in fields )
         {
            sbReturn.AppendFormat("&lt;table style=""cursor:hand"" cellpadding=""0"" cellspacing=""0"" onClick=""addOrderLineField('{0}','{1}');"" onmouseover=""mouseoverBox(this);"" onmouseout=""mouseoutBox(this);""&gt;&lt;tr&gt;" + 
                                  "  &lt;td style=""height:20px; width:20px; background-color:#D4D0C8"" align=""center""&gt;&lt;img src=""../images/arrow.gif"" border=0&gt;&lt;/td&gt;" + 
                                  "  &lt;td style=""PADDING-LEFT: 5px; ""&gt;&amp;nbsp;{2}&lt;/td&gt;" + 
                                  "  &lt;td style=""WIDTH:9px;""&gt;&lt;/td&gt;" + 
                                  "&lt;/tr&gt;&lt;/table&gt;",  
                                  Base.HtmlEncode(Base.JSEncode(field.SystemName)), 
                                  Base.HtmlEncode(Base.JSEncode(field.Name)), 
                                  Base.HtmlEncode(field.Name) 
                                  );
         }
         sbReturn.Append("&lt;/div&gt;");
         sbReturn.Append("&lt;/td&gt;&lt;/tr&gt;");
         sbReturn.Append("&lt;/table&gt;");
 
         return sbReturn.ToString();
     }
 }
 </code>
 </example>
 <summary>
 Gets the collection of the OrderLineField objects.
 </summary>
 <param name="groupId">The group ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineField.GetOrderLineFieldsByShop(System.String)">
 <summary>
 Gets the collection of the OrderLineField objects for specified shop.
 </summary>
 <param name="shopID">The shop ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineField.Delete(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
 class OrderLineField_EditPage : System.Web.UI.Page
 {
     private void DeleteOrderLineField()
     {
         if( !SystemNameText.Enabled &amp;&amp; SystemNameText.Text != "" )
         {
             OrderLineField.Delete(SystemNameText.Text);
             OrderLineFieldGroupRelation.DeleteBySystemName(SystemNameText.Text);
             Dynamicweb.eCommerce.Common.Application.KillOrderLineFields();
         }
     }
 }
 </code>
 </example>
 <summary>
 Deletes the specified instance.
 </summary>
 <param name="systemName">Name of the system.</param>
 <returns>true if success; otherwise, false.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineField.SaveSortOrder(System.String,System.Int32)">
 <summary>
 Save orderline fields sort order
 </summary>
 <param name="systemName">The orderline system name.</param>
 <param name="sortingInt">The sort order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineField.ClearCache">
 <summary>
 Clear cached order line fields
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderLineFieldCollection">
 <summary>
 Represents a collection of the OrderLineField objects.
 </summary>
 <example>
 <code description="" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\OrderLineFieldInformationPageSample.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderLineFieldGroupRelation">
 <example>
 <code title="C#" description="" lang="CS">
 class MyPage : System.Web.UI.Page
 {
 
     private void SaveGroupOrderlineRelations()
     {
      	//Save Orderline field relations. First delete all, then save.
      	OrderLineFieldGroupRelation.DeleteAll(groupId);
      	int rowCount = Converter.ToInt32(Dynamicweb.StringHelper.Request["OrderLineFieldCount"]);
      	for (int i = 0; i &lt; rowCount; i++)
      	{
      		string fieldSystemName = Converter.ToString(Dynamicweb.StringHelper.Request[string.Format("OrderLineFieldHidden_{0}", i)]);
      		if (fieldSystemName != "")
      		{
      			OrderLineFieldGroupRelation relation = new OrderLineFieldGroupRelation(fieldSystemName, groupId);
      			relation.Save();
      		}
      	}
      	grp.ClearOrderLineFieldCache();
     }
 }
 </code>
 </example>
 <summary>
 Represents information about an order line field group relations.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineFieldGroupRelation.OrderLineFieldSystemName">
 <summary>
 Gets or sets the system name of the order line field.
 </summary>
 <value>The system name of the order line field.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineFieldGroupRelation.GroupId">
 <summary>
 Gets or sets the group ID.
 </summary>
 <value>The group ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineFieldGroupRelation.ShopID">
 <summary>
 Gets or sets the shop ID.
 </summary>
 <value>The shop ID.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineFieldGroupRelation.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineFieldGroupRelation" /> class.
 </summary>
 <param name="orderLineFieldsSystemName">System name of the order line field .</param>
 <param name="groupId">The group ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineFieldGroupRelation.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineFieldGroupRelation" /> class.
 </summary>
 <param name="orderLineFieldsSystemName">System name of the order line field .</param>
 <param name="groupID">The group ID.</param>
 <param name="shopID">The shop ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineFieldGroupRelation.Save">
 <example>
 Look at example for <c>OrderLineFieldGroupRelation</c> class
 </example>
 <summary>
 Saves this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineFieldGroupRelation.DeleteAll(System.String)">
 <example>
 Look at example for <c>OrderLineFieldGroupRelation</c> class
 </example>
 <summary>
 Deletes all relations from specified group.
 </summary>
 <param name="groupId">The group ID.</param>
 <returns>true if success; otherwise, false.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineFieldGroupRelation.DeleteBySystemName(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
 class OrderLineField_EditPage : System.Web.UI.Page
 {
     private void DeleteOrderLineField()
     {
         if( !SystemNameText.Enabled &amp;&amp; SystemNameText.Text != "" )
         {
             OrderLineField.Delete(SystemNameText.Text);
             OrderLineFieldGroupRelation.DeleteBySystemName(SystemNameText.Text);
             Dynamicweb.eCommerce.Common.Application.KillOrderLineFields();
         }
     }
 }
 </code>
 </example>
 <summary>
 Deletes the specified instance.
 </summary>
 <param name="sysName">System name.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineFieldGroupRelation.DeleteByShopID(System.String)">
 <example>
 Look at example for <c>OrderLineFieldGroupRelation</c> class
 </example>
 <summary>
 Deletes all relations from specified shop.
 </summary>
 <param name="shopID">The shop ID.</param>
 <returns>true if success; otherwise, false.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderLineFieldValue">
 <example>
 The example shows how you can manipulate the information in custom order line fields. 
 The following shows an example where a class subscribes to the notification
 Dynamicweb.Ecommerce.Notifications.eCommerce.Order.Steps.Completed, which can
 be used to alter the custom order line field information.
 <code title="C#" description="" lang="CS">
 [Subscribe(Dynamicweb.Ecommerce.Notifications.eCommerce.Order.Steps.Completed)]
 public class OrderCompleteNotificationSubscriber : NotificationSubscriber
 {
     public override void OnNotify(string notification, object[] args)
     {
         Dynamicweb.eCommerce.Orders.Order MyOrder = (Dynamicweb.eCommerce.Orders.Order)args[0];
         foreach (Dynamicweb.eCommerce.Orders.OrderLine line in MyOrder.OrderLines)
         {
             foreach (Dynamicweb.eCommerce.Orders.OrderLineFieldValue field in line.OrderLineFieldValues)
             {
                 if (field.OrderLineFieldSystemName.ToLower() == "dispatchestimate")
                 {
                     field.Value = "Week 45";
                     line.Save();
                     break;
                 }
             }
         }
     }
 }
 </code>
 </example>
 <summary>
  Represents information about an order line field value.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineFieldValue.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineFieldValue" /> class.
 </summary>
 <param name="orderLineFieldSystemName">System name of the order line field.</param>
 <param name="value">The value.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineFieldValue.OrderLineFieldSystemName">
 <summary>
 Gets or sets the system name of the order line field.
 </summary>
 <value>System name of the order line field.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineFieldValue.Value">
 <summary>
 Gets or sets the value.
 </summary>
 <value>The value.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineFieldValue.OrderLineFieldName">
 <summary>
 Gets the name of the order line field.
 </summary>
 <value>The name of the order line field.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineFieldValue.OrderLineFieldLength">
 <summary>
 Gets the length of the order line field.
 </summary>
 <value>The length of the order line field.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineFieldValue.ValidationErrorMessage">
 <summary>
 Gets or sets the validation error message.
 </summary>
 <value>The validation error message.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineFieldValue.Equals(System.Object)">
 <example>
 The example of comparing two OrderLineFieldValueCollections
 <code title="C#" description="" lang="CS">
 public static bool IsEquals(OrderLineFieldValueCollection col1, OrderLineFieldValueCollection col2)
 {
     		//Same count?
     		if (col1.List.Count != col2.List.Count)
     		{
     			return false;
     		}

     		//Same OrderLineFieldValues?
     		foreach (OrderLineFieldValue myValue in col1)
     		{
     			bool found = false;
     			foreach (OrderLineFieldValue otherValue in col2)
     			{
     				if (myValue.Equals(otherValue))
     				{
     					found = true;
     					break;
     				}
     			}
     			if (!found)
     			{
     				return false;
     			}
     		}
     		return true;
 }
 </code>
 </example>
 <summary>
 Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
 </summary>
 <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
 <returns>
 <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineFieldValue.GetCartInputFieldName(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
 public void validateOrderLineFieldValues( Order order, int orderStep )
 {     
     List&lt;ValidationField&gt; validationFields = ValidationField.GetAllFields(orderStep);
     Dictionary&lt;string, string&gt; errorMsgs = null;
     Report errorReport = new Report(orderStep);
 
     foreach(OrderLine mainOrderLine in order.OrderLines )
     {
         OrderLineCollection orderLinesWithBOM = new OrderLineCollection();
         orderLinesWithBOM.Add(mainOrderLine);
         foreach( OrderLine bomOrderLine in mainOrderLine.BOMOrderLines )
             orderLinesWithBOM.Add(bomOrderLine);

         foreach( OrderLine orderLine in orderLinesWithBOM )
         {
             foreach( OrderLineFieldValue orderLineFieldValue in orderLine.OrderLineFieldValues )
             {
                 if( orderLineFieldValue.OrderLineFieldSystemName == validationfield.SystemName )
                 {
                     String value = Dynamicweb.Context.Current.Request(OrderLineFieldValue.GetCartInputFieldName(OrderLine.Id));
                     {
                         if( value == null || !validation.Validates(value) ) 
                         {
                              if( errorMsgs == null ) errorMsgs = settings.GetValidationErrorMsgs();
                              errorReport.Add(validationfield, errorMsgs(validation.ID));
                              orderLineFieldValue.ValidationErrorMessage = errorMsgs(validation.ID);
                         }
                         else {
                             orderLineFieldValue.ValidationErrorMessage = "";
                         }
                         break; // On a single orderline, no two orderlinefields are the same.
                 }
             }
         }

         return errorReport;
     }
 }
 </code>
 </example>
 <summary>
 Gets the name of the input field.
 </summary>
 <param name="orderLineId">The order line ID.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderLineFieldValueCollection">
 <example>
 The example shows how you can manipulate the information in custom order line fields. 
 The following shows an example where a class subscribes to the notification
 Dynamicweb.Ecommerce.Notifications.eCommerce.Order.Steps.Completed, which can
 be used to alter the custom order line field information.
 <code title="C#" description="" lang="CS">
 [Subscribe(Dynamicweb.Ecommerce.Notifications.eCommerce.Order.Steps.Completed)]
 public class OrderCompleteNotificationSubscriber : NotificationSubscriber
 {
     public override void OnNotify(string notification, object[] args)
     {
         Dynamicweb.eCommerce.Orders.Order MyOrder = (Dynamicweb.eCommerce.Orders.Order)args[0];
         foreach (Dynamicweb.eCommerce.Orders.OrderLine line in MyOrder.OrderLines)
         {
             OrderLineFieldValueCollection olfvCol = line.OrderLineFieldValues;
             foreach (Dynamicweb.eCommerce.Orders.OrderLineFieldValue field in olfvCol)
             {
                 if (field.OrderLineFieldSystemName.ToLower() == "dispatchestimate")
                 {
                     field.Value = "Week 45";
                     line.Save();
                     break;
                 }
             }
         }
     }
 }
 </code>
 </example>
 <summary>
 Represents a collection of the OrderLineFieldValue objects.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineFieldValueCollection.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineFieldValueCollection" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineFieldValueCollection.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineFieldValueCollection" /> class.
 </summary>
 <param name="xmlText">The XML text.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineFieldValueCollection.#ctor(System.Xml.XmlDocument)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderLineFieldValueCollection" /> class.
 </summary>
 <param name="xmlDoc">The XML document.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineFieldValueCollection.ToXml">
 <example>
 <code title="C#" description="" lang="CS">
  public static OrderLineFieldValueCollection CopyCollection(OrderLineFieldValueCollection col)
 {
     XmlDocument xmlDoc = col.ToXML();
     OrderLineFieldValueCollection newCol = new OrderLineFieldValueCollection();
     XmlNode root = xmlDoc["OrderLineFieldValueCollection"];
     foreach (XmlNode fieldValueNode in root.SelectNodes("OrderLineFieldValue")
     {
         String systemName = fieldValueNode["OrderLineFieldSystemName"].InnerText();
         String value = fieldValueNode["Value"].InnerText();
         newCol.Add(new OrderLineFieldValue(systemName, value));
     }
 
     return newCol;
 }
 </code>
 </example>
 <summary>
 Creates the XML document with OrderLineFieldValue objects in this collection.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineFieldValueCollection.Equals(System.Object)">
 <example>
 In this example we compare two OrderLines to define are they can be merged
 <code title="C#" description="" lang="CS">
 public static bool IsCanBeMerged(OrderLine line1, OrderLine line2) 
 {
     return line1.ID = line2.ID ||
       (line1.Product.ID = line2.Product.ID &amp;&amp;
        line1.ProductVariantID = line2.ProductVariantID &amp;&amp;
        line1.UnitID = line2.UnitID &amp;&amp;
        line1.OrderLineFieldValues.Equals(line2.OrderLineFieldValues) 
       );
 }
 </code>
 </example>
 <summary>
 Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
 </summary>
 <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
 <returns>
 <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
 </returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderLineTemplateExtender">
 <summary>
 OrderLine template extender. Extends the rendering of a <see cref="P:Dynamicweb.Ecommerce.Orders.OrderLineTemplateExtender.OrderLine"></see>.
 </summary>
 <example>
 <code description="Extending the layout template" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\OrderlineTemplateExtender.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineTemplateExtender.Order">
 <summary>
 Gets or sets the order.
 </summary>
 <value>The order.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineTemplateExtender.OrderLine">
 <summary>
 Gets or sets the order line.
 </summary>
 <value>The order line.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderLineTemplateExtender.RenderingState">
 <summary>
 Gets the state of the rendering.
 </summary>
 <value>
 The state of the rendering.
 </value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderLineTemplateExtender.SetRenderingState(Dynamicweb.Ecommerce.Frontend.TemplateExtenderRenderingState)">
 <summary>
 Sets the state of the rendering.
 </summary>
 <param name="state">The state.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderState">
 <summary>
 Represents information about order state.
 </summary>
 <example>
 <code description="" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\OrderStateInformationPageSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.Id">
 <summary>
 Gets or sets the ID.
 </summary>
 <value>The ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.Description">
 <summary>
 Gets or sets the description.
 </summary>
 <value>The description.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.IsDefault">
 <summary>
 Gets or sets a value indicating whether this instance is default.
 </summary>
 <value>
 <c>true</c> if this instance is default; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.DontUseInStatistics">
 <summary>
 Gets or sets a value indicating whether don't use in statistics.
 </summary>
 <value><c>true</c> if don't use in statistics; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.IsDeleted">
 <summary>
 Gets or sets a value indicating whether this instance is deleted.
 </summary>
 <value>
 <c>true</c> if this instance is deleted; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.OrderFlowId">
 <summary>
 Gets or sets the order flow id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.MailTemplate">
 <summary>
 Gets or sets the mail template.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.MailSender">
 <summary>
 Gets or sets the mail sender.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.MailSenderName">
 <summary>
 Gets or sets the mail sender name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.MailSubject">
 <summary>
 Gets or sets the mail subject.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.IsInUse">
 <summary>
 Gets or sets a value indicating whether this instance is in use.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.SendToCustomer">
 <summary>
 Gets or sets a value indicating whether this instance is sent to customer.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.OthersMailTemplate">
 <summary>
 Gets or sets the others mail template.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.OthersRecipients">
 <summary>
 Gets or sets the others recipients.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.SortOrder">
 <summary>
 Gets or sets the sort order.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.AllowOrder">
 <summary>
 Gets or sets a value indicating whether this instance ordering is allowed.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.AllowEdit">
 <summary>
 Gets or sets a value indicating whether a quote in this quote state can be edited
 in the frontend using the cart.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.OrderType">
 <summary>
 Gets or sets the order type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.RulesTo">
 <summary>
 Rules which defines the quote can move from current state to
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderState.RulesFrom">
 <summary>
 Rules which defines the quote can move to current state from
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderState" /> class.
 </summary>
 <param name="stateId">The order state ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderState" /> class.
 </summary>
 <param name="dataReader">The DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.OrderState" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.SetProperties">
 <example>
 <code title="C#" lang="cs">
 public void SaveDefaultOrderState()
 {
 	OrderState os = new OrderState();
 	os.SetProperties();
 	os.Save( os.ID );
 }
 </code>
 </example>
 <summary>
 Sets the properties with empty values. False for boolean.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.SetProperties(Dynamicweb.Ecommerce.Orders.OrderState)">
 <example>
 <code title="C#" lang="cs">
 public void CopyOrderState(String IDStr)
 {
     foreach(OrderState orderState in AllOrderStates )
     {
         if( orderState.ID == IDStr ) 
         {
             SetProperties(orderState);
         }
     }
 }
 </code>
 </example>
 <summary>
 Sets the properties from the other OrderState object.
 </summary>
 <param name="other">The other.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.Save(System.String)">
 <example>
 <code title="C#" lang="cs">
 public void SaveDefaultOrderState()
 {
 	OrderState os = new OrderState();
 	os.SetProperties();
 	os.Save( os.ID );
 }
 </code>
 </example>
 <summary>
 Saves the properties into DB.
 </summary>
 <param name="stateId">DB field name is OrderStateID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.Delete">
 <example>
 Delete line with order state on the page
 <code title="C#" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DeleteButton_Click(System.Object sender, System.EventArgs e) 
   {
       String  osID = Converter.ToString(HttpContext.Current.Request.QueryString("StateID"));
       OrderState os = new OrderState(osID);
       os.Delete();
   }
}
 </code>
 </example>
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.Delete(System.String)">
 <example>
 Delete line with order state on the page
 <code title="C#" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DeleteButton_Click(System.Object sender, System.EventArgs e) 
   {
       String  osID = Converter.ToString(HttpContext.Current.Request.QueryString("StateID"));
       OrderState os = new OrderState();
       os.Delete(osID);
   }
}
 </code>
 </example>
 <summary>
 Deletes the specified instance.
 </summary>
 <param name="stateId">DB field name is OrderStateID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.UpdateDefault(System.Int32,System.Boolean,System.String)">
 <example>
 <code title="C#" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void SaveButton_Click(System.Object sender, System.EventArgs e) 
   {
       String  osID = Converter.ToString(HttpContext.Current.Request.QueryString("StateID"));
       OrderState os = new OrderState(osID);
 
       if( IsDefault.Checked )
          os.UpdateDefault(False)

       os.Name = NameStr.Text;
       os.Description = DescrStr.Text;
       os.IsDefault = IsDefault.Checked;
       os.DontUseInstatistics = DontUseInstatistics.Checked;
       os.Save(os.ID);
   }
}
 </code>
 </example>
 <summary>
 Updates default.
 </summary>
 <param name="flowId">Order flow ID.</param>
 <param name="setDefaultTo">if set to <c>true</c> set default to true.</param>
 <param name="stateId">DB field name is OrderStateID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.Copy">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private OrderState orderState;
   public OrderState DoSave()
   {
       OrderState os = new OrderState();
       os = orderState.Copy();
       return os;
   }
}
 </code>
 </example>
 <summary>
 Copies this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.Clone">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private OrderState orderState;
   public void DoSave()
   {
       OrderState os = new OrderState();
       os = orderState.Clone();
       os.ID = string.Empty;
       os.Save(os.ID);
   }
}
 </code>
 </example>
 <summary>
 Clones this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.Lock">
 <summary>
 Locks this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.SaveRulesTo(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Saves rules which defines the quote can move from current state to
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.SaveRulesFrom(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Saves rules which defines the quote can move to current state from
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.GetOrderstates(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void RenderOrderState( Rendering.Template t, Order order )
   {
      OrderStateCollection orderStates = OrderState.getOrderstates( order.StateID );
      if( orderStates != null ) {
          if( orderStates.Count > 0 ) {
             template.SetTag("Ecom:Order:Orderstate.Name", orderStates.Item(0).Name);
             template.SetTag("Ecom:Order:Orderstate.Description", orderStates.Item(0).Description);
         }
      }
   }
}
 </code>
 </example>
 <summary>
 Gets the collection of the order states.
 </summary>
 <param name="stateId">The state ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.GetQuoteStateById(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void RenderQuoteState( Rendering.Template t, Order quote )
   {
      OrderState quoteStates = OrderState.getQuoteStateByID( order.StateID );
      if( quoteStates != null ) {
         template.SetTag("Ecom:Order:Orderstate.Name", quoteState.Name);
         template.SetTag("Ecom:Order:Orderstate.Description", quoteState.Description);
      }
   }
}
 </code>
 </example>
 <summary>
 Gets the quote state by id.
 </summary>
 <param name="stateId">The state ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.GetAllOrderStates">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void RenderAllOrderStates( Rendering.Template t )
   {
      OrderStateCollection orderStates = OrderState.getAllOrderstates( );
      foreach( Orderstate os in orderStates)
      {
          template.SetTag("Ecom:Order:Orderstate.Name", os.Name);
          template.SetTag("Ecom:Order:Orderstate.Description", os.Description);
      }
   }
}
 </code>
 </example>
 <summary>
 Gets all order states.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.GetAllOrderStates(System.Int32)">
 <summary>
 Gets all order states by flow id.
 </summary>
 <param name="flowId">The flow id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.GetAllOrderStates(System.Int32,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void RenderAllOrderStates( Rendering.Template t )
   {
      OrderStateCollection orderStates = OrderState.getAllOrderstates( false );
      foreach( Orderstate os in orderStates)
      {
          template.SetTag("Ecom:Order:Orderstate.Name", os.Name);
          template.SetTag("Ecom:Order:Orderstate.Description", os.Description);
      }
   }
}
 </code>
 </example>
 <summary>
 Gets all order states.
 </summary>
 <param name="dontShowDeleted">if set to <c>true</c> don't show deleted.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.GetAllQuoteStates(System.Int32)">
 <summary>
 Gets all quote states.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.GetAllRecurringOrderStates(System.Int32)">
 <summary>
 Gets all Recurring order states.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.GetDeletedOrderStates">
 <summary>
 Gets all deleted order states.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.GetDefaultOrderState(System.Int32)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void RenderDefaultOrderStates(int orderflowId, Rendering.Template t)
   {
      OrderStateCollection orderStates = OrderState.getDefaultOrderstate(orderflowId);
      foreach( Orderstate os in orderStates)
      {
          template.SetTag("Ecom:Order:Orderstate.Name", os.Name);
          template.SetTag("Ecom:Order:Orderstate.Description", os.Description);
      }
   }
}
 </code>
 </example>
 <summary>
 Gets the default order state.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderState.GetDefaultQuoteState(System.Int32)">
 <summary>
 Gets the default quote state.
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderStateCollection">
 <example>
 <code title="C#" description="" lang="CS">
 class MyPage : System.Web.UI.Page
 {
 
    private void BuildOrderStateList()
    {
        //Set Order states
        OrderStateCollection orderStates = Dynamicweb.eCommerce.Common.Application.OrderStates;
        OrderStateList.Items.Clear();

        foreach( OrderState orderState in orderStates )
        {
            //Add to context menu
            ContextMenuButton contextOrderState = new ContextMenuButton();
            contextOrderState.Image = Icons.Icon.Type.Check;
            contextOrderState.OnClientClick = String.Format("setOrderState('{0}');", orderState.ID);
            contextOrderState.Text = orderState.Name;
            contextOrderState.DoTranslate = ContextMenuButton.TranslateStates.False;
            ContextSetOrderState.ChildItems.Add(contextOrderState);

            //Add to dropdown in ribbon
            OrderStateList.Items.Add(New ListItem(orderState.Name, orderState.ID));
        }
 
        OrderStateListView.Visible = true;
        }
    }
 }
 </code>
 </example>
 <summary>
 Represents a collection of the OrderState objects.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderStateCollection.Item(System.Int32)">
 <summary>
 Gets or sets the element at the specified index.
 </summary>
 <value></value>
 <returns>
 The element at the specified index.
 </returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderStateCollection.Load(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
 public OrderStateCollection getDefaultOrderstate() 
 {
    String SQL = "SELECT * FROM EcomOrderStates WHERE OrderStateIsDefault = " + Database.SqlBool(True) + " ";
    OrderStateCollection col = new OrderStateCollection();
    col.Load(SQL);
    return col;
 }
 </code>
 </example>
 <summary>
 Loads the specified OrderState objects.
 </summary>
 <param name="sql">The SQL query.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderTemplateExtender">
 <summary>
 Order template extender. Extends the rendering of a <see cref="P:Dynamicweb.Ecommerce.Orders.OrderTemplateExtender.Order"></see>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderTemplateExtender.Order">
 <summary>
 Gets or sets the order.
 </summary>
 <value>The order.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderTemplateExtender.RenderingState">
 <summary>
 Gets the state of the rendering.
 </summary>
 <value>
 The state of the rendering.
 </value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.OrderTemplateExtender.SetRenderingState(Dynamicweb.Ecommerce.Frontend.TemplateExtenderRenderingState)">
 <summary>
 Sets the state of the rendering.
 </summary>
 <param name="state">The state.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderTemplateExtender.ParagraphId">
 <summary>
 Gets or sets the current ParagraphID
 </summary>
 <value>Current ParagraphID</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.OrderTemplateExtender.RenderingContext">
 <summary>
 Gets or sets the context of the order. Default is Order.
 </summary>
 <value></value>
 <returns>Order=1: indicates render of cart or order confirmation (default). CustomerCenter=2: indicates render of order from Customer Center.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderTemplateExtenderContext">
 <summary>
 Indicates in which context an order is being rendered. Default is Order.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderTotalPriceCondition">
 <summary>
 The OrderTotalPriceCondition enumeration defines the logical operators used in an order total price comparison.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderTotalPriceCondition.EqualTo">
 <summary>
 The total price of the order must be equal to the order total price on the discount.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderTotalPriceCondition.NotEqualTo">
 <summary>
 The total price of the order must not be equal to the order total price on the discount.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderTotalPriceCondition.LesserThan">
 <summary>
 The total price of the order must be lesser than the order total price on the discount.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderTotalPriceCondition.LesserThanOrEqualTo">
 <summary>
 The total price of the order must be lesser than or equal to the order total price on the discount.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderTotalPriceCondition.GreaterThan">
 <summary>
 The total price of the order must be greater than the order total price on the discount.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.OrderTotalPriceCondition.GreaterThanOrEqualTo">
 <summary>
 The total price of the order must be greater than or equal to the order total price on the discount.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.OrderType">
 <summary>
 Represents information about order type.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Payment">
 <summary>
 Represents information about a payment method
 </summary>
 <example>
 <code description="" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\PaymentInformationPageSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.Id">
 <summary>
 Gets or sets the ID.
 </summary>
 <value>The ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.LanguageId">
 <summary>
 Gets or sets the language ID.
 </summary>
 <value>The language ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.Name">
 <summary>
 Gets or sets the payment name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.Description">
 <summary>
 Gets or sets the description.
 </summary>
 <value>The description.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.Icon">
 <summary>
 Gets or sets the icon file name.
 </summary>
 <value>The icon.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.IconOrderList">
 <summary>
 Gets or sets the icon file name for order list.
 </summary>
 <value>The icon order list.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.IconImage">
 <summary>
 Gets the full path to icon image.
 </summary>
 <value>The icon image.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.PaymentAddInType">
 <summary>
 Gets or sets the type of the addIn.
 </summary>
 <value>The type of the addIn.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.GatewayId">
 <summary>
 Gets or sets the gateway ID.
 </summary>
 <value>The gateway ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.GatewayParameters">
 <summary>
 Gets or sets the gateway parameters.
 </summary>
 <value>The gateway parameters.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.CheckoutSystemName">
 <summary>
 Gets or sets the system name of the checkout addIn .
 </summary>
 <value>The system name of the checkout addIn.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.CheckoutParameters">
 <summary>
 Gets or sets the checkout parameters.
 </summary>
 <value>The checkout parameters.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.CountryId">
 <summary>
 Gets or sets the country ID.
 </summary>
 <value>The country ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.IsDefault">
 <summary>
 Gets or sets a value indicating whether this payment method is default.
 </summary>
 <value>
 <c>true</c> if this payment method is default; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.CountryRelation(System.String)">
 <summary>
 Gets or sets the country relation.
 </summary>
 <value>The country relation.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.Sorting">
 <summary>
 Sort order of current group inside parent group's children collection
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.MethodCountryRelMethodType">
 <summary>
 Gets MethodCountryRelMethodType.
 </summary>
 <value>The method type.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.MethodCountryRelLanguageId">
 <summary>
 Gets MethodCountryRelLanguageID.
 </summary>
 <value>The method country language id.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.MethodCountryRelCountryId">
 <summary>
 Gets MethodCountryRelCountryID.
 </summary>
 <value>The method country id.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.MethodCountryRelRegionCode">
 <summary>
 Gets MethodCountryRelRegionCode.
 </summary>
 <value>The method country region code.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Payment.CaptureObject">
 <summary>
 Gets the capture object.
 </summary>
 <value>The capture object.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Payment" /> class from database by ID.
 </summary>
 <param name="paymentId">The ID STR.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Payment" /> class from database by key.
 </summary>
 <param name="paymentId">The ID STR.</param>
 <param name="theLanguageId">The Language code.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Payment" /> class from data reader.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Payment" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.SetProperties">
 <example>
 <code title="C#" lang="cs">
 public void SaveDefaultPaymentData()
 {
 	Payment paym = new Payment();
 	paym.SetProperties();
 	paym.Save( paym.ID );
 }
 </code>
 </example>
 <summary>
 Sets the default properties.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.Save(System.String)">
 <example>
 <code title="C#" lang="cs">
 public void SaveDefaultPaymentData()
 {
 	Payment pay = new Payment();
 	pay.SetProperties();
 	pay.Save( pay.ID );
 }
 </code>
 </example>
 <summary>
 Saves payment. If payment with specified ID is exist, it will be overwritten
 </summary>
 <param name="paymentId">The payment Id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.Delete">
 <example>
 Delete line with payment method on the page
 <code title="C#" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void Page_Load(System.Object sender, System.EventArgs e) 
   {
       String CMD = HttpContext.Current.Request.QueryString("CMD");

       if(CMD == "DeletePaymentLine")
       {
           String  paymentID = Converter.ToString(HttpContext.Current.Request.QueryString("PaymentID"));
           Payment thePayment = new Payment(paymentID);
           thePayment.Delete();
       }
   }
}
 </code>
 </example>
 <summary>
 Deletes this payment.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.Delete(System.String)">
 <example>
 Delete line with payment method on the page
 <code title="C#" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void Page_Load(System.Object sender, System.EventArgs e) 
   {
       String CMD = HttpContext.Current.Request.QueryString("CMD");

       if(CMD == "DeletePaymentLine")
       {
           String  paymentID = Converter.ToString(HttpContext.Current.Request.QueryString("PaymentID"));
           Payment thePayment = new Payment();
           thePayment.Delete(paymentID);
       }
   }
}
 </code>
 </example>
 <summary>
 Deletes the payment with specified ID.
 </summary>
 <param name="paymentId">The payment ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.Delete(System.String,System.String)">
 <example>
 Delete line with payment method on the page
 <code title="C#" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void Page_Load(System.Object sender, System.EventArgs e) 
   {
       String CMD = HttpContext.Current.Request.QueryString("CMD");

       if(CMD == "DeletePaymentLine")
       {
           String  paymentID = Converter.ToString(HttpContext.Current.Request.QueryString("PaymentID"));
           Payment thePayment = new Payment();
           thePayment.Delete(paymentID, "DK");
       }
   }
}
 </code>
 </example>
 <summary>
 Deletes the payment with specified ID and language 
 </summary>
 <param name="paymentId">The payment ID.</param>
 <param name="theLanguageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.DeleteByLanguage(System.String)">
 <example>
 Delete line with payment method on the page
 <code title="C#" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void Page_Load(System.Object sender, System.EventArgs e) 
   {
       String CMD = HttpContext.Current.Request.QueryString("CMD");

       if(CMD == "DeletePayments")
       {
           String  languageID = Converter.ToString(HttpContext.Current.Request.QueryString("LanguageID"));
           Payment thePayment = new Payment();
           thePayment.Delete(languageID);
       }
   }
}
 </code>
 </example>
 <summary>
 Deletes items by language.
 </summary>
 <param name="theLanguageId">The language ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.Copy">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Payment payment;
   public Payment DoSave()
   {
       Payment thePayment = new Payment();
       thePayment = payment.Copy();
       return thePayment;
   }
}
 </code>
 </example>
 <summary>
 Copies this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.Clone">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Payment payment;
   public void DoSave()
   {
       Payment thePayment = new Payment();
       thePayment = payment.Clone();
       thePayment.ID = string.Empty;
       thePayment.Save(thePayment.ID);
   }
}
 </code>
 </example>
 <summary>
 Clones this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.GetPaymentMethods">
 <example>
 <code title="C#" description="" lang="CS">
public String GetPaymentData() 
{
    PaymentCollection dwPay = Payment.getPaymethods();

    return GetPaymentData( dwPay );
 }
 </code>
 </example>
 <summary>
 Gets the payment methods that has relation to any country.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.GetPaymentMethods(System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetAllShippingData() 
{
    PaymentCollection dwPay = Payment.getPaymethods(false);

    return GetPaymentData( dwPay );
 }
 </code>
 </example>
 <summary>
 Gets the payment methods that has relation to any country, if joinCountryRelations parameter is <c>true</c>. 
 Otherwise gets all pay methods.
 </summary>
 <param name="joinCountryRelations">if set to <c>true</c> [join country relations].</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.GetPaymentMethods(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetPaymentMethodsForOrder(Order order) 
{
    PaymentCollection dwPay = Payment.getPaymethods( order.FeeCountryCode("PAY") );

    return GetPaymentData( dwPay );
 }
 </code>
 </example>
 <summary>
 Gets the payment methods with the suitable country code.
 </summary>
 <param name="countryCode">The country code.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.GetPaymethodsByRegion(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetPaymentMethodsForOrder(Order order) 
{
    PaymentCollection dwPay = Payment.getPaymethodsByRegion( order.FeeCountryCode("PAY"), order.FeeRegionCode("PAY", order.FeeCountryCode("PAY")) );

    return GetPaymentData( dwPay );
 }
 </code>
 </example>
 <summary>
 Gets the payment methods with the suitable country code AND  region code.
 </summary>
 <param name="countryCode">The country code.</param>
 <param name="regionCode">The region/state code.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.GetPaymentMethods(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetPaymentMethodsForOrder(Order order) 
{
    PaymentCollection dwPay = Payment.getPaymethods( order.FeeCountryCode("PAY"), order.PaymentMethodID );

    return GetPaymentData( dwPay );
 }
 </code>
 </example>
 <summary>
 Gets the payment methods with the suitable country code and pay method ID.
 </summary>
 <param name="countryCode">The country code.</param>
 <param name="paymentIds">The pay methods ID, separated by comma.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.GetPaymentMethods(System.String,System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetPaymentMethodsForOrder(Order order) 
{
    PaymentCollection dwPay = Payment.getPaymethods( order.FeeCountryCode("PAY"), order.PaymentMethodID );

    return GetPaymentData( dwPay );
 }
 </code>
 </example>
 <summary>
 Gets the payment methods with the suitable country code, region code and pay method ID.
 </summary>
 <param name="countryCode">The country code.</param>
 <param name="regionCode">The region/state code.</param>
 <param name="paymentIds">The pay methods ID, separated by comma.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.GetDefaultPaymentMethod(System.String)">
 <summary>
 Gets the default payment method.
 </summary>
 <param name="countryCode">The country code.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.ClearCache">
 <summary>
 Clear cached payments
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Payment.SaveSortOrder(System.String,System.String,System.Int32)">
 <summary>
 Save payment sort order
 </summary>
 <param name="paymentId">The payment ID.</param>
 <param name="theLanguageId">The language id.</param>
 <param name="sortingIndex">The sort order.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.PaymentCollection">
 <summary>
 Represents a collection of payment objects
 </summary>
 <example>
 <code description="" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\PaymentInformationPageSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.PaymentCollection.Item(System.Int32)">
 <summary>
 Gets the element at the specified index.
 </summary>
 <param name="index">The index.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.PaymentCollection.Load(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public ShippingCollection GetAllPaymethods() 
{
 	String query = "SELECT * FROM EcomPayments WHERE PaymentLanguageID = '" + Context.LanguageID() + "' ORDER BY PaymentID";

 	PaymentCollection col = new PaymentCollection();
 	col.Load(query);
 	return col;
}
 </code>
 </example>
 <summary>
 Loads PaymentCollection using the specified query.
 </summary>
 <param name="query">The query.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.PaymentCollection.Add(Dynamicweb.Ecommerce.Orders.Payment)">
 <summary>
 Adds distinct payment to the collection
 </summary>
 <param name="payment"></param>
 <remarks>If the payment already exists in the collection it is not added</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.PaymentCollection.AddRange(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Orders.Payment})">
 <summary>
 Adds range of distinct payments to the collection
 </summary>
 <param name="payments"></param>
 <remarks>If the payment already exists in the collection it is not added</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.PaymentCollection.Contains(Dynamicweb.Ecommerce.Orders.Payment)">
 <summary>
 Determines whether collection contains the given payment.
 </summary>
 <param name="payment">Payment reference.</param>
 <returns>Value indicating whether collection contains the given payment.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.RecurringOrder">
 <summary>
 The class RecurringOrder represents recurring order.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.RecurringOrder.StartDate">
 <summary>
 Gets or sets recurring orders start date.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.RecurringOrder.EndDate">
 <summary>
 Gets or sets recurring orders end date.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.RecurringOrder.Interval">
 <summary>
 Gets or sets recurring orders interval.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.RecurringOrder.IntervalUnit">
 <summary>
 Gets or sets recurring orders interval unit(day, week, month).
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.RecurringOrder.UserId">
 <summary>
 Gets the recurring order related user ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.RecurringOrder.BaseOrderId">
 <summary>
 Gets or sets recurring order base order ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.RecurringOrder.TotalPrice">
 <summary>
 Gets or sets recurring order base order ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.RecurringOrder.CanceledDeliveries">
 <summary>
 Gets or sets recurring order canceled deliveries as comma-separated string of serial numbers of deliveries counted from start date.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.RecurringOrder.LastDelivery">
 <summary>
 Gets or sets previous date of recurring.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.RecurringOrder.NextDelivery">
 <summary>
 Gets next date of recurring.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.RecurringOrder.Frequency">
 <summary>
 Returns frequency as string in format "Every (Interval) (IntervalUnit)"
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.RecurringOrder">RecurringOrder</see> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.RecurringOrder">RecurringOrder</see> class from data reader.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.FillRow(System.Data.DataRow)">
 <summary>
 Fills the given <see cref="T:System.Data.DataRow">System.Data.DataRow</see> object with property values of the current object.
 </summary>
 <param name="row">An instance of the <see cref="T:System.Data.DataRow">System.Data.DataRow</see> object to write data to.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.Fill(System.Data.IDataReader)">
 <summary>
 Fills the Card token properties from the specified data reader.
 </summary>
 <param name="reader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.GetRecurringOrderById(System.Int32)">
 <summary>
 Retrieve recurring order by ID
 </summary>
 <param name="id">The id of recurring order</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.GetRecurringOrderByTemplateId(System.String)">
 <summary>
 Retrieve recurring order by ID
 </summary>
 <param name="id">The id of recurring order</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.GetUserRecurringOrders(System.Int32)">
 <summary>
 Retrieve recurring orders for an user
 </summary>
 <param name="userId">The id of user</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.GetUserRecurringOrders(System.Int32,System.Boolean)">
 <summary>
 Retrieve recurring orders for an user
 </summary>
 <param name="userId">The id of user</param>
 <param name="useCustomerNumber">The indicator whether to use customer number instead of user id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.GetUserRecurringOrders(System.Int32,System.Boolean,System.DateTime)">
 <summary>
 Retrieve recurring orders for an user
 </summary>
 <param name="userId">The id of user</param>
 <param name="useCustomerNumber">The indicator whether to use customer number instead of user id.</param>
 <param name="fromDate">The minimum order date.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.GetRecurringOrderTotalPrice">
 <summary>
 Retrieve recurring orders total
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.GetPreviousOrdersIds">
 <summary>
 Retrieve previous recurring orders IDs
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.GetFutureDeliveriesList">
 <summary>
 Gets future deliveries collection of tuples of delivery index, delivery date and is delivery canceled.
 </summary>        
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.GetNextDeliveryIndex(System.Boolean)">
 <summary>
 Gets index of next delivery.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.GetNextDeliveryDate(System.Boolean)">
 <summary>
 Gets next date of recurring.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.HasErros">
 <summary>
 Retrieve recurring order errors occurred during scheduler
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.GetEvents">
 <summary>
 Retrieve recurring order events occurred during scheduler
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.EndRecurring(System.Int32)">
 <summary>
 Update recurring order end date to now
 </summary>
 <param name="recurringOrderId">The id recurring order</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.GetRecurringOrdersForScheduling">
 <summary>
 Get recurring orders for current time to execute
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.RecurringOrder.MakeRecurringCopy(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Creates copy of an order for recurring
 </summary>
 <returns>
 New order based on input order or Nothing if has no active products 
 </returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Shipping">
 <summary>
 Represents information about a shipping method
 </summary>
 <example>
 <code description="" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\ShippingInformationPageSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Shipping.Id">
 <summary>
 Gets or sets the id.
 </summary>
 <value>The id.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Shipping.LanguageId">
 <summary>
 Gets or sets the language id.
 </summary>
 <value>The language id.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Shipping.Name">
 <summary>
 Gets or sets the name of shipping.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Shipping.Description">
 <summary>
 Gets or sets the description.
 </summary>
 <value>The description.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Shipping.PriceOverMaxWeight">
 <summary>
 Gets or sets the price for over max weight.
 </summary>
 <value>The price over max weight.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Shipping.FreeFeeAmount">
 <summary>
 Gets or sets the free fee amount.
 </summary>
 <value>The free fee amount.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Shipping.CountryId">
 <summary>
 Gets or sets the country id.
 </summary>
 <value>The country id.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Shipping.IsDefault">
 <summary>
 Gets or sets a value indicating whether this shipping is default.
 </summary>
 <value>
 <c>true</c> if this shipping is default; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Shipping.CountryRelation(System.String)">
 <summary>
 Gets or sets the country relation object.
 </summary>
 <value>The country relation.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Shipping.CountryRelationCollection">
 <summary>
 Gets or sets the collection of country relation objects.
 </summary>
 <value>The country relation collection.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Shipping.ServiceSystemName">
 <summary>
 Gets or sets the shipping service SystemName.
 </summary>
 <value>The shipping service SystemName.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Shipping.ServiceParameters">
 <summary>
 Gets or sets the shipping service parameters.
 </summary>
 <value>The shipping service parameters.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Shipping.Sorting">
 <summary>
 Sort order of current group inside parent group'theShipping children collection
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Shipping.FeeSelection">
 <summary>
 Gets or sets the rule for fee selection: high or low.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Shipping.LimitsUseLogic">
 <summary>
 Gets or sets the limits use logic.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Shipping.FeeRulesSource">
 <summary>
 Gets or sets the source of fee rules.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Shipping.Icon">
 <summary>
 Gets or sets the icon file name.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Shipping" /> class.
 </summary>
 <param name="shippingId">The shipping id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Shipping" /> class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Shipping" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.SetProperties">
 <example>
 <code title="C#" lang="cs">
 public void SaveDefaultShippingData(string ShippingID)
 {
 	Shipping ship = new Shipping();
 	ship.SetProperties();
 	ship.Save( ship.ID );
 }
 </code>
 </example>
 <summary>
 Sets the default properties.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.Save(System.String)">
 <example>
 <code title="C#" lang="cs">
 public void SaveDefaultShippingData(string ShippingID)
 {
 	Shipping ship = new Shipping();
 	ship.SetProperties();
 	ship.Save( ship.ID );
 }
 </code>
 </example>
 <summary>
 Saves the specified id.
 </summary>
 <param name="shippingId">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.Delete">
 <example>
 Delete line with shipping method on the page
 <code title="C#" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void Page_Load(System.Object sender, System.EventArgs e) 
   {
       String CMD = HttpContext.Current.Request.QueryString("CMD");

       if(CMD == "DeleteShippingLine")
       {
           String  shippingID = Converter.ToString(HttpContext.Current.Request.QueryString("ShippingID"));
           Shipping theShipping = new Shipping(shippingID);
           theShipping.Delete();
       }
   }
}
 </code>
 </example>
 <summary>
 Deletes this shipping.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.Delete(System.String)">
 <example>
 Delete line with shipping method on the page
 <code title="C#" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void Page_Load(System.Object sender, System.EventArgs e) 
   {
       String CMD = HttpContext.Current.Request.QueryString("CMD");

       if(CMD == "DeleteShippingLine")
       {
           String  shippingID = Converter.ToString(HttpContext.Current.Request.QueryString("ShippingID"));
           Shipping theShipping = new Shipping();
           theShipping.Delete(shippingID);
       }
   }
}
 </code>
 </example>
 <summary>
 Deletes the shipping with specified id.
 </summary>
 <param name="shippingId">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.Delete(System.String,System.String)">
 <example>
 Delete line with shipping method on the page
 <code title="C#" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void Page_Load(System.Object sender, System.EventArgs e) 
   {
       String CMD = HttpContext.Current.Request.QueryString("CMD");

       if(CMD == "DeleteShippingLine")
       {
           String  shippingID = Converter.ToString(HttpContext.Current.Request.QueryString("ShippingID"));
           Shipping theShipping = new Shipping();
           theShipping.Delete(shippingID, "DK");
       }
   }
}
 </code>
 </example>
 <summary>
 Deletes the shipping with specified ID and language
 </summary>
 <param name="shippingId">The id.</param>
 <param name="theLanguageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.DeleteByLanguage(System.String)">
 <example>
 Delete line with shipping method on the page
 <code title="C#" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void Page_Load(System.Object sender, System.EventArgs e) 
   {
       String CMD = HttpContext.Current.Request.QueryString("CMD");

       if(CMD == "DeleteShippingLine")
       {
           String languageID = Converter.ToString(HttpContext.Current.Request.QueryString("LanguageID"));
           Shipping theShipping = new Shipping();
           theShipping.Delete(languageID);
       }
   }
}
 </code>
 </example>
 <summary>
 Deletes the by language.
 </summary>
 <param name="theLanguageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.DeleteAll">
 <summary>
 Deletes all shippings.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.Copy">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Shipping shipping;
   public Shipping DoSave()
   {
       Shipping theShipping = new Shipping();
       theShipping = shipping.Copy();
       return theShipping;
   }
}
 </code>
 </example>
 <summary>
 Copies this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.Clone">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Shipping shipping;
   public void DoSave()
   {
       Shipping theShipping = new Shipping();
       theShipping = shipping.Clone();
       theShipping.ID = string.Empty;
       theShipping.Save(theShipping.ID);
   }
}
 </code>
 </example>
 <summary>
 Clones this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.Create(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
private static String ReturnNameInsteadOfId(String id) 
{
    Shipping theShipping = Shipping.Create(id);

    return theShipping.Name;
}
 </code>
 </example>
 <summary>
 Returns the shipping with specified id.
 </summary>
 <param name="shippingId">The shipping id.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.UpdateLanguage(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public static void changeLanguage(String languageID) 
{
    Shipping.UpdateLanguage( languageID, "" );
}
 </code>
 </example>
 <summary>
 Updates the language ID of shippings. If parameter OldLanguageID is specified the update will affect only suitable records
 </summary>
 <param name="newLanguageId">The new language id.</param>
 <param name="oldLanguageId">The old language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.GetShippingMethods">
 <example>
 <code title="C#" description="" lang="CS">
public String GetShippingData() 
{
    ShippingCollection dwShip = Shipping.getShippingmethods();

    return GetShippingData( dwShip );
 }
 </code>
 </example>
 <summary>
 Gets the shipping methods that has relation to any country.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.GetAllShippingmethods">
 <example>
 <code title="C#" description="" lang="CS">
public String GetAllShippingData() 
{
    ShippingCollection dwShip = Shipping.getAllShippingmethods();

    return GetShippingData( dwShip );
 }
 </code>
 </example>
 <summary>
 Gets all shipping methods.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.GetShippingMethods(System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetAllShippingData() 
{
    ShippingCollection dwShip = Shipping.getShippingmethods(false);

    return GetShippingData( dwShip );
 }
 </code>
 </example>
 <summary>
 Gets the shipping methods that has relation to any country, if joinCountryRelations parameter is <c>true</c>. 
 Otherwise gets all shipping methods.
 </summary>
 <param name="joinCountryRelations">if set to <c>true</c> [join country relations].</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.GetShippingMethods(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetShippingMethodsForOrder(Order order) 
{
    ShippingCollection dwShip = Shipping.getShippingmethods( order.FeeCountryCode("SHIP") );

    return GetShippingData( dwShip );
 }
 </code>
 </example>
 <summary>
 Gets the shipping methods with the suitable country code.
 </summary>
 <param name="countryCode">The country code.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.GetShippingmethodsByRegion(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetShippingMethodsForOrder(Order order) 
{
    ShippingCollection dwShip = Shipping.getShippingmethodsByRegion( order.FeeCountryCode("SHIP"), order.FeeRegionCode("SHIP", order.FeeCountryCode("SHIP")) );

    return GetShippingData( dwShip );
 }
 </code>
 </example>
 <summary>
 Gets the shipping methods with the suitable country code and region code. 
 </summary>
 <param name="countryCode">The country code.</param>
 <param name="regionCode">The region/state code.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.GetShippingMethods(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetShippingMethodsForOrder(Order order) 
{
    ShippingCollection dwShip = Shipping.getShippingmethods( order.FeeCountryCode("SHIP"), order.ShippingMethodID );

    return GetShippingData( dwShip );
 }
 </code>
 </example>
 <summary>
 Gets the shipping methods with the suitable country code and shipping method id.
 </summary>
 <param name="countryCode">The country code.</param>
 <param name="shippingIds">The shipping methods ID, separated by comma.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.GetShippingMethods(System.String,System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetShippingMethodsForOrder(Order order) 
{
    ShippingCollection dwShip = Shipping.getShippingmethods( order.FeeCountryCode("SHIP"), order.ShippingMethodID );

    return GetShippingData( dwShip );
 }
 </code>
 </example>
 <summary>
 Gets the shipping methods with the suitable country code, region code and shipping method id.
 </summary>
 <param name="countryCode">The country code.</param>
 <param name="regionCode">The region/state code.</param>
 <param name="shippingIds">The shipping methods ID, separated by comma.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.GetShippingMethods(System.String,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetShippingMethodsForOrder(Order order) 
{
    ShippingCollection dwShip = Shipping.getShippingmethods( order.FeeCountryCode("SHIP"), order.ShippingMethodID, true );

    return GetShippingData( dwShip );
 }
 </code>
 </example>
 <summary>
 Gets the shipping methods with the suitable country code and shipping method ID, if joinCountryRelations parameter is <c>true</c>. 
 Otherwise gets all shipping methods.
 </summary>
 <param name="countryCode">The country code.</param>
 <param name="shippingIds">The shipping methods ID, separated by comma.</param>
 <param name="joinCountryRelations">if set to <c>true</c> [join country relations].</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.GetShippingMethods(System.String,System.String,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
public String GetShippingMethodsForOrder(Order order) 
{
    ShippingCollection dwShip = Shipping.getShippingmethods( order.FeeCountryCode("SHIP"), order.ShippingMethodID, true );

    return GetShippingData( dwShip );
 }
 </code>
 </example>
 <summary>
 Gets the shipping methods with the suitable country code, region code and shipping method ID, if joinCountryRelations parameter is <c>true</c>. 
 Otherwise gets all shipping methods.
 </summary>
 <param name="countryCode">The country code.</param>
 <param name="regionCode">The region/state code.</param>
 <param name="shippingIds">The shipping methods ID, separated by comma.</param>
 <param name="joinCountryRelations">if set to <c>true</c> [join country relations].</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.GetShippingmethodById(System.String)">
 <summary>
 Gets shipping method by its id.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.GetDefaultShippingMethod(System.String)">
 <summary>
 Gets the default shipping method.
 </summary>
 <param name="countryCode">The country code.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.SaveSortOrder(System.String,System.String,System.Int32)">
 <summary>
 Save shipment sort order
 </summary>
 <param name="shippingId">The shipping id.</param>
 <param name="theLanguageId">The language id.</param>
 <param name="sortingInt">The sort order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Shipping.ClearCache">
 <summary>
 Clear cached shippings
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.ShippingCollection">
 <summary>
 Represents a collection of shipping objects
 </summary>
 <example>
 <code description="" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\ShippingInformationPageSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.ShippingCollection.Item(System.Int32)">
 <summary>
 Gets the element at the specified index.
 </summary>
 <param name="index">The index.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ShippingCollection.Load(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
public ShippingCollection GetAllShippingmethods() 
{
 	String query = "SELECT * FROM EcomShippings WHERE ShippingLanguageID = '" + Context.LanguageID() + "' ORDER BY ShippingID";

 	ShippingCollection col = new ShippingCollection();
 	col.Load(query);
 	return col;
}
 </code>
 </example>
 <summary>
 Loads ShippingCollection using the specified query.
 </summary>
 <param name="query">The query.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ShippingCollection.Add(Dynamicweb.Ecommerce.Orders.Shipping)">
 <summary>
 Adds distinct shipping to the collection
 </summary>
 <param name="shipping"></param>
 <remarks>If the shipping already exists in the collection it is not added</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ShippingCollection.AddRange(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Orders.Shipping})">
 <summary>
 Adds range of shippings to the collection
 </summary>
 <param name="shippings"></param>
 <remarks>If the payment already exists in the collection it is not added</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.ShippingCollection.Contains(Dynamicweb.Ecommerce.Orders.Shipping)">
 <summary>
 Determines whether collection contains the given shipping.
 </summary>
 <param name="shipping">shipping reference.</param>
 <returns>Value indicating whether collection contains the given shipping.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.TrackAndTrace">
 <summary>
 The class TrackAndTrace represents order track and trace.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.TrackAndTrace.CacheKey">
 <summary>
 The track and trace cache key.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.TrackAndTrace.Name">
 <summary>
 Gets or sets the track and trace name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.TrackAndTrace.Url">
 <summary>
 Gets or sets the track and trace URL.
 </summary>
 <value>The URL.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.TrackAndTrace.Parameters">
 <summary>
 Gets or sets the track and trace Parameters.
 </summary>
 <value>The Parameters.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.TrackAndTrace.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.TrackAndTrace" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.TrackAndTrace.Fill(System.Data.IDataReader)">
 <summary>
 Fills this track and trace with data from the reader.
 </summary>
 <param name="reader">The reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.TrackAndTrace.Delete(System.Int32)">
 <summary>
 Deletes track and trace by id.
 </summary>
 <param name="trackAndTraceId">The track and trace id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.TrackAndTrace.Save">
 <summary>
 Saves this track and trace.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.TrackAndTrace.GetFormatedUrl(System.String)">
 <summary>
 Gets the track and trace formated URL.
 </summary>
 <param name="parameterValues">The URL parameters.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.TrackAndTrace.AddParameter(System.String,System.String,System.String)">
 <summary>
 Adds the new <seealso cref="T:Dynamicweb.Ecommerce.Orders.TrackAndTraceParameter"/> created from provided name, default value and description.
 </summary>
 <param name="parameterName">The parameter name.</param>
 <param name="defaultValue">The parameter default value.</param>
 <param name="description">The parameter description.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.TrackAndTrace.GetTrackAndTraceById(System.Int32)">
 <summary>
 Gets the track and trace by id.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.TrackAndTrace.GetTrackAndTraces">
 <summary>
 Gets all the track and trace objects.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.TrackAndTraceCollection">
 <summary>
 The class TrackAndTraceCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Orders.TrackAndTrace"/>
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.TrackAndTraceParameter">
 <summary>
 The class TrackAndTraceParameter represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.TrackAndTrace"/> parameter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.TrackAndTraceParameter.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.TrackAndTraceParameter.DefaultValue">
 <summary>
 Gets or sets the Default value.
 </summary>
 <value>The Default value.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.TrackAndTraceParameter.Description">
 <summary>
 Gets or sets the Description.
 </summary>
 <value>The Description.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.TrackAndTraceParameter.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.TrackAndTraceParameter" /> class.
 </summary>
 <param name="name">The parameter name.</param>
 <param name="defaultValue">The parameter default value.</param>
 <param name="description">The parameter description.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Report">
 <summary>
 The class Report represents validation report.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Report.#ctor(System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Validation.Report" /> class.
 </summary>
 <param name="stepNum">The number of validation step.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Report.StepNum">
 <summary>
 Gets the number of validation step.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Report.Add(Dynamicweb.Ecommerce.Orders.Validation.ValidationField,System.String)">
 <summary>
 Adds new <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.ValidationError"/> to the report created with given field and error message.
 </summary>
 <param name="validationField">The validation field.</param>
 <param name="errorMsg">The error message.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Report.Count">
 <summary>
 Counts the report validation errors.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Report.Item(System.Int32)">
 <summary>
 Gets validation error by the index.
 </summary>
 <param name="index">The index.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Report.GetEnumerator">
 <summary>
 Gets the <seealso cref="T:System.Collections.IEnumerator"/> of the report validation error collection.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Report.GetEnumerator1">
 <summary>
 Gets the <seealso cref="T:System.Collections.IEnumerator"/> of the report validation error collection.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.ContainsRule">
 <summary>
 The class ContainsRule represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/> based on contains checking.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Rules.ContainsRule.Parameters">
 <summary>
 The rule parameters.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.ContainsRule.Validates(System.String)">
 <summary>
 Validates value according the "contains" checking.
 </summary>
 <param name="value">The value to validate.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.EmailRule">
 <summary>
 The class EmailRule represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/> based on is email valid checking.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Rules.EmailRule.Parameters">
 <summary>
 The rule parameters.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.EmailRule.Validates(System.String)">
 <summary>
 Validates value according the <seealso cref="M:Dynamicweb.Core.Helpers.StringHelper.IsValidEmailAddress(System.String)">is email valid</seealso> checking.
 </summary>
 <param name="value">The value to validate.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.EqualsRule">
 <summary>
 The class EqualsRule represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/> based on equals checking.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Rules.EqualsRule.Parameters">
 <summary>
 The rule parameters.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.EqualsRule.Validates(System.String)">
 <summary>
 Validates value according the "equals" checking.
 </summary>
 <param name="value">The value to validate.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.GiftCardNotExpiredRule">
 <summary>
 The class GiftCardNotExpiredRule represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/> based on is <seealso cref="T:Dynamicweb.Ecommerce.GiftCards.GiftCard"/> expired checking.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Rules.GiftCardNotExpiredRule.Parameters">
 <summary>
 The rule parameters.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.GiftCardNotExpiredRule.Validates(System.String)">
 <summary>
 Validates value according the giftcard exist and not expired checking.
 </summary>
 <param name="value">The value as comma-separated(with ";" symbol) gift card codes.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.GiftCardValidCurrencyRule">
 <summary>
 The class GiftCardValidCurrencyRule represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/> based on is <seealso cref="T:Dynamicweb.Ecommerce.GiftCards.GiftCard"/> currency proper checking.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Rules.GiftCardValidCurrencyRule.Parameters">
 <summary>
 The rule parameters.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.GiftCardValidCurrencyRule.Validates(System.String)">
 <summary>
 Validates value according the giftcard exist and have currency code equal to current <seealso cref="T:Dynamicweb.Ecommerce.Common.Context"/> cart currency code checking.
 </summary>
 <param name="value">The value as comma-separated(with ";" symbol) gift card codes.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.GiftCardValidRule">
 <summary>
 The class GiftCardValidRule represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/> based on is <seealso cref="T:Dynamicweb.Ecommerce.GiftCards.GiftCard"/> valid to use checking.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Rules.GiftCardValidRule.Parameters">
 <summary>
 The rule parameters.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.GiftCardValidRule.Validates(System.String)">
 <summary>
 Validates value checking if the giftcard exist,
 have currency code equal to current <seealso cref="T:Dynamicweb.Ecommerce.Common.Context"/> cart currency code,
 not expired and
 have balance > 0.
 </summary>
 <param name="value">The value as comma-separated(with ";" symbol) gift card codes.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.GreaterThanRule">
 <summary>
 The class GreaterThanRule represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/> based on is greater then checking.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.GreaterThanRule.Validates(System.String)">
 <summary>
 Validates value according the "is greater then" checking.
 </summary>
 <param name="value">The value to validate.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.IntegerRule">
 <summary>
 The class IntegerRule represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/> based on is integer checking.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Rules.IntegerRule.Parameters">
 <summary>
 The rule parameters.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.IntegerRule.Validates(System.String)">
 <summary>
 Validates value according the "is integer" checking.
 </summary>
 <param name="value">The value to validate.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.LessThanRule">
 <summary>
 The class LessThanRule represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/> based on is less then checking.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Rules.LessThanRule.Parameters">
 <summary>
 The rule parameters.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.LessThanRule.Validates(System.String)">
 <summary>
 Validates value according the "is less then" checking.
 </summary>
 <param name="value">The value to validate.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.MaxLengthRule">
 <summary>
 The class MaxLengthRule represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/> based on max length checking.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.MaxLengthRule.Validates(System.String)">
 <summary>
 Validates value according the "max length" checking.
 </summary>
 <param name="value">The value to validate.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.MinLengthRule">
 <summary>
 The class MinLengthRule represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/> based on min length checking.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Rules.MinLengthRule.Parameters">
 <summary>
 The rule parameters.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.MinLengthRule.Validates(System.String)">
 <summary>
 Validates value according the "min length" checking.
 </summary>
 <param name="value">The value to validate.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.NotContainsRule">
 <summary>
 The class NotContainsRule represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/> based on not contains checking.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.NotContainsRule.Validates(System.String)">
 <summary>
 Validates value according the "not contains" checking.
 </summary>
 <param name="value">The value to validate.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.NotEqualsRule">
 <summary>
 The class NotEqualsRule represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/> based on not equals checking.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.NotEqualsRule.Validates(System.String)">
 <summary>
 Validates value according the "not equals" checking.
 </summary>
 <param name="value">The value to validate.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.NumericRule">
 <summary>
 The class NumericRule represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/> based on is number checking.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Rules.NumericRule.Parameters">
 <summary>
 The rule parameters.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.NumericRule.Validates(System.String)">
 <summary>
 Validates value according the "is number" checking.
 </summary>
 <param name="value">The value to validate.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.RegexRule">
 <summary>
 The class RegexRule represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/> based on successful path via regular expression checking.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Rules.RegexRule.Parameters">
 <summary>
 The rule parameters.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.RegexRule.Validates(System.String)">
 <summary>
 Validates value according the "successful path via regular expression" checking.
 </summary>
 <param name="value">The value to validate.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.RequiredRule">
 <summary>
 The class RequiredRule represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/> based on required checking.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.RequiredRule.Validates(System.String)">
 <summary>
 Validates value according the "required" checking.
 </summary>
 <param name="value">The value to validate.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule">
 <summary>
 The class Rule represents validation rule.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule.Parameters">
 <summary>
 Gets or sets rule parameters.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule.Validates(System.String)">
 <summary>
 Validates value with rule.
 </summary>
 <param name="value">The value to validate.</param>
 <returns>Value indicating whether value valid according to rule.</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule.Id">
 <summary>
 Gets or sets the rule id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule.ValidationId">
 <summary>
 Gets or sets <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Validation"/> id.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule.Save">
 <summary>
 Saves this rule.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule.Save(System.Boolean)">
 <summary>
 Saves this rule.
 </summary>
 <param name="doKillCache">Indicates whether to clear the caches after save.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule.Delete">
 <summary>
 Deletes this rule.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule.Delete(System.Boolean)">
 <summary>
 Deletes this rule.
 </summary>
 <param name="doKillCache">Indicates whether to clear the caches after delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule.GetRules(System.String)">
 <summary>
 Gets rules for the provided <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Validation"/> id.
 </summary>
 <param name="ruleValidationId">The validation id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule.GetRules(System.String[])">
 <summary>
 Gets rules by provided ids.
 </summary>
 <param name="ids">The rules ids.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule.GetRulesBySql(System.String)">
 <summary>
 Gets rules by sql query..
 </summary>
 <param name="query">The query.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule.GetRuleTypes">
 <summary>
 Gets all the rule types.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule.GetRuleTypes(System.Boolean)">
 <summary>
 Gets all the rule types.
 </summary>
 <param name="doSort">Indicates whether to sort rules.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule.Create(System.Data.IDataReader)">
 <summary>
 Creates a new rule from given data reader.
 </summary>
 <param name="dataReader">The reader.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.RuleCollection">
 <summary>
 The class RuleCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/>.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.VaucherNotExpiredRule">
 <summary>
 The class VaucherNotExpiredRule represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/> based on is <seealso cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher"/> expired checking.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Rules.VaucherNotExpiredRule.Parameters">
 <summary>
 The rule parameters.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.VaucherNotExpiredRule.Validates(System.String)">
 <summary>
 Validates value according the "voucher exist and discount referenced by the code or containing list not expired" checking.
 </summary>
 <param name="value">The voucher code to validate.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.VaucherValidRule">
 <summary>
 The class VaucherValidRule represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Rules.Rule"/> based on is <seealso cref="T:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher"/> valid checking.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Rules.VaucherValidRule.Parameters">
 <summary>
 The rule parameters.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Rules.VaucherValidRule.Validates(System.String)">
 <summary>
 Validates value checking if the voucher exist and successfully passed through <see cref="M:Dynamicweb.Ecommerce.Orders.SalesDiscounts.Voucher.IsValid(System.String,System.Int32)"/> method.
 </summary>
 <param name="value">The voucher code to validate.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.Validation">
 <summary>
 The class Validation represents order validation service.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Validation.Id">
 <summary>
 Gets or sets the validation id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Validation.GroupId">
 <summary>
 Gets or sets the validation group id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Validation.FieldName">
 <summary>
 Gets or sets the validation field name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Validation.UseAndOperator">
 <summary>
 Gets or sets value indicating whether to use and operator during validation process.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Validation.FieldType">
 <summary>
 Gets or sets the validation field type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.Validation.Rules">
 <summary>
 Gets or sets the validation rules.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Validation.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Validation.Validation" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Validation.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Validation.Validation" /> class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Validation.Validates(System.String)">
 <summary>
 Validates value through all the <see cref="P:Dynamicweb.Ecommerce.Orders.Validation.Validation.Rules" />.
 </summary>
 <param name="value">The value to validate.</param>
 <remarks>If <see cref="P:Dynamicweb.Ecommerce.Orders.Validation.Validation.UseAndOperator" /> is set to <c>true</c> then all the rules must be valid, otherwise - at least one of them.</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Validation.Save">
 <summary>
 Saves this validation.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Validation.Save(System.Boolean)">
 <summary>
 Saves this validation.
 </summary>
 <param name="doKillCache">Sets value indication whether to clear the caches after save.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Validation.Delete">
 <summary>
 Deletes this validation.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Validation.Delete(System.Boolean)">
 <summary>
 Deletes this validation.
 </summary>
 <param name="doKillCache">Sets value indication whether to clear the caches after delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Validation.GetValidationById(System.String)">
 <summary>
 Gets the validation by id.
 </summary>
 <param name="id">The validation id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Validation.GetValidations(System.String)">
 <summary>
 Gets the validations by validation group id.
 </summary>
 <param name="validationGroupId">The validation group id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Validation.GetValidations(System.String[])">
 <summary>
 Gets the validations by validation ids.
 </summary>
 <param name="ids">The validation ids.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Validation.GetValidationsBySql(System.String)">
 <summary>
 Gets the validations by sql query.
 </summary>
 <param name="query">The sql query.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.Validation.GetTranslatedName">
 <summary>
 Gets the validation field translated name.
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.ValidationCollection">
 <summary>
 The class ValidationCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Validation"/>
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.ValidationError">
 <summary>
 The structure ValidationError represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Validation"/> error used for <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Report"/>.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Validation.ValidationError.ValidationField">
 <summary>
 Gets or sets the validation field.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Orders.Validation.ValidationError.ErrorMessage">
 <summary>
 Gets or sets the validation error message.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationError.#ctor(Dynamicweb.Ecommerce.Orders.Validation.ValidationField,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Validation.ValidationError" /> class.
 </summary>
 <param name="validationField">The validation field.</param>
 <param name="errorMessage">The validation error message.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.ValidationField">
 <summary>
 The structure ValidationField represents <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Validation"/> field.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.ValidationField.SystemName">
 <summary>
 Gets or sets the validation field system name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.ValidationField.NiceName">
 <summary>
 Gets or sets the validation field friendly name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.ValidationField.Type">
 <summary>
 Gets or sets the validation field type.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationField.#ctor(System.String,System.String,Dynamicweb.Ecommerce.Orders.Validation.ValidationFieldType)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Validation.ValidationField" /> class.
 </summary>
 <param name="systemName">The validation field system name.</param>
 <param name="niceName">The validation field friendly name.</param>
 <param name="type">The validation field type.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationField.GetAllFields(System.Int32)">
 <summary>
 Gets the validation fields by validation step number.
 </summary>
 <param name="stepNumber">The validation step number.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationField.GetAllFields">
 <summary>
 Gets all the validation fields.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationField.GetFieldBySystemName(System.String)">
 <summary>
 Gets the validation fields by validation field system name.
 </summary>
 <param name="systemName">The validation field system name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationField.GetStandardOrderFields">
 <summary>
 Gets all the standard order fields.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationField.GetStandardOrderFields(System.Int32)">
 <summary>
 Gets all the standard order fields by validation step number.
 </summary>
 <param name="stepNumber">The validation step number.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationField.GetCustomOrderFields">
 <summary>
 Gets all the order custom fields.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationField.GetOrderLineFields">
 <summary>
 Gets all the order orderline fields.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.ValidationFieldType">
 <summary>
 The enum ValidationFieldType represents validation field types enumeration.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup">
 <summary>
 The class ValidationGroup represents group of <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.Validation"/>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.Name">
 <summary>
 Gets or sets validation group name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.Id">
 <summary>
 Gets or sets validation group id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.Validations">
 <summary>
 Gets or sets validation group <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.ValidationCollection"/>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.Language">
 <summary>
 Gets validation group language.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.DoNotValidateIfAllFieldsAreEmpty">
 <summary>
 Do not validate when all fields are empty
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup" /> class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup" /> class.
 </summary>
 <param name="id">The group id.</param>
 <param name="languageId">The group language id.</param>        
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.GetValidationGroups">
 <summary>
 Gets validation groups collection.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.GetValidationGroups(System.String)">
 <summary>
 Gets validation groups by languageID.
 </summary>
 <param name="languageId">eCommerce Language.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.GetValidationGroups(System.Collections.Generic.List{System.String})">
 <summary>
 Gets validation groups Collection by certain IDs in default language.
 </summary>
 <param name="groups">List of group IDs.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.GetValidationGroups(System.Collections.Generic.List{System.String},System.String)">
 <summary>
 Gets validation groups Collection by certain IDs and language.
 </summary>
 <param name="groups">List of group IDs.</param>
 <param name="languageId">eCommerce Language.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.GetValidationGroupById(System.String)">
 <summary>
 Gets Validation Group by its ID in default language.
 </summary>
 <param name="id">Validation Group IDs.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.GetValidationGroupById(System.String,System.String)">
 <summary>
 Gets Validation Group by its ID and language.
 </summary>
 <param name="id">Validation Group IDs.</param>
 <param name="languageId">Ecommerce Language.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.GetValidationGroupsBySql(System.String)">
 <summary>
 Gets Validation Group by sql query.
 </summary>
 <param name="query">The sql query.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.Save">
 <summary>
 Saves this validation group.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.Delete">
 <summary>
 Deletes this validation group.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.AllValidationGroups">
 <summary>
 Gets the validation groups collection.
 </summary>
 <value>The validation groups.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup.ClearCache">
 <summary>
 Clear cached validation groups.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroupCollection">
 <summary>
 The class ValidationGroupCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Orders.Validation.ValidationGroup"/>.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.VatManager">
 <summary>
 The class VatManager represents vat manager.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.VatManager.FindVatPercent(System.Double,Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Finds vat percent for given product.
 </summary>
 <param name="defaultVatPercent">The default vat percent.</param>
 <param name="product">The product.</param>
 <returns>Suitable vat percent if found, otherwise <para name="defaultVatPercent"/> </returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Orders.VatProvider">
 <summary>
 The VatProvider allows you to manipulate country VAT on a product 
 in eCommerce using a class inherited from Dynamicweb.eCommerce.Orders.VatProvider.
 </summary>
 <example>
 The following example demonstrates how to create a VAT on luxury products
 (a sign that the product is a luxury suite will be the presence of the 'LUX' word in MetaKeywords field).
 <code description="" source="05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Orders\VatProviderSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Orders.VatProvider.FindVatPercent(System.Double,Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Finds the vat percent for the product that should replace standard one.
 </summary>
 <param name="defaultVatPercent">The default vat percent.</param>
 <param name="product">The product.</param>
 <returns>Vat percent for the specified product</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.IPriceSourceInfo">
 <summary>
 The interface returns information about <seealso cref="P:Dynamicweb.Ecommerce.IPriceSourceInfo.PriceSource">provider type</seealso> used for product price
 </summary>
 <remarks>
 The <see cref="!:PriceInfo"/> and <see cref="!:PriceRaw"/> impelments this interface
 </remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.IPriceSourceInfo.PriceSource">
 <summary>
 Gets or sets a value indicating which price provider used for generate price.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.PriceSource">
 <summary>
 Represents information about price source.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.PriceSource.ProductDefault">
 <summary>
 The default product price
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.PriceSource.PriceMatrix">
 <summary>
 The price matrix 
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.PriceSource.CustomProvider">
 <summary>
 The custom provider generates price
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Categories.CategoryExtensions">
 <summary>
 The class CategoryExtensions represents extensions for <seealso cref="T:Dynamicweb.Ecommerce.Products.Categories.Category"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.CategoryExtensions.LoadCategoryValues(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.Group})">
 <summary>
 Loads category values for <seealso cref="T:Dynamicweb.Ecommerce.Products.Group"/>.
 </summary>
 <param name="groups">The groups.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Categories.FieldValueAndInheritanceInformation">
 <summary>
 Used to return both a field value and information about if it is inherited.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.FieldValueAndInheritanceInformation.#ctor(System.Object,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.Categories.FieldValueAndInheritanceInformation"/> class.
 </summary>
 <param name="fieldValue">The field value.</param>
 <param name="inheritedFieldValue">if set to <c>true</c> [inherited field value].</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.FieldValueAndInheritanceInformation.Value">
 <summary>
 Gets or sets the value.
 </summary>
 <value>
 The value.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.FieldValueAndInheritanceInformation.Inherited">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Products.Categories.FieldValueAndInheritanceInformation"/> is inherited.
 </summary>
 <value>
   <c>true</c> if inherited; otherwise, <c>false</c>.
 </value>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Categories.GroupInformation">
 <summary>
 Plain object to collect group information
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.GroupInformation.GetFromDatabase(System.String,System.String)">
 <summary>
 Gets the group information.
 </summary>
 <param name="groupId">The group identifier.</param>
 <param name="languageId">The group language identifier.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Categories.ApplicationStartSubscriber">
 <summary>
 The class ApplicationStartSubscriber represents subscriber on application start event.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.ApplicationStartSubscriber.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Notifies about the event.
 </summary>
 <param name="notification">The notification name.</param>
 <param name="args">The notification arguments.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Categories.Category">
 <summary>
 The class Category represents product category.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Category.Id">
 <summary>
 Returns the ID of the current Dynamicweb.eCommerce.Products.Categories.Category.
 </summary>
 <value></value>
 <returns></returns>
 <remarks>0 indicates a new Dynamicweb.eCommerce.Products.Categories.Category.</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Category.Language">
 <summary>
 Gets the language for this Dynamicweb.eCommerce.Products.Categories.Category.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Category.Name">
 <summary>
 Gets or sets the name of this Dynamicweb.eCommerce.Products.Categories.Category.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Category.IsNew">
 <summary>
 Indicates whether this Dynamicweb.eCommerce.Products.Categories.Category is new.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Category.Fields">
 <summary>
 The fields belonging to this Dynamicweb.eCommerce.Products.Categories.Category object.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Category.ProductProperties">
 <summary>
 Gets or sets the name of this Dynamicweb.eCommerce.Products.Categories.Category.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Category.#ctor">
 <summary>
 Creates a new instance of the type Dynamicweb.eCommerce.Products.Categories.Category.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Category.Create(System.String)">
 <summary>
 Creates a new Dynamicweb.eCommerce.Products.Categories.Category object with the given parameters and saves it to the database.
 In addition a Dynamicweb.eCommerce.Products.Categories.Category object is creates for all current eCommerce Languages.
 The ID of the object is auto-generated.
 The Dynamicweb.eCommerce.International.Language of the object is set to Context.Language.
 </summary>
 <param name="name">The Name of the object.</param>
 <returns>The language version of the Dynamicweb.eCommerce.Products.Categories.Category related to the Default eCommerce Language.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Category.Create(System.String,System.String)">
 <summary>
 Creates a new Dynamicweb.eCommerce.Products.Categories.Category object with the given parameters and saves it to the database.
 In addition a Dynamicweb.eCommerce.Products.Categories.Category object is creates for all current eCommerce Languages.
 </summary>
 <param name="systemName">The SystemName of the object.</param>
 <param name="name">The Name of the object.</param>
 <returns>The language version of the Dynamicweb.eCommerce.Products.Categories.Category related to the Default eCommerce Language.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Category.Create(System.String,System.String,System.Boolean)">
 <summary>
 Creates a new Dynamicweb.eCommerce.Products.Categories.Category object with the given parameters and saves it to the database.
 In addition a Dynamicweb.eCommerce.Products.Categories.Category object is creates for all current eCommerce Languages.
 </summary>
 <param name="systemName">The SystemName of the object.</param>
 <param name="name">The Name of the object.</param>
 <param name="productProperties">The value indicates whether category is used fo product properties.</param>
 <returns>The language version of the Dynamicweb.eCommerce.Products.Categories.Category related to the Default eCommerce Language.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Category.Save">
 <summary>
 Saves the current Dynamicweb.eCommerce.Products.Categories.Category.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Category.Delete">
 <summary>
 Deletes the current Dynamicweb.eCommerce.Products.Categories.Category and all fields associated, and all Language Versions.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Category.AddField(System.String,System.String,System.String,System.String,System.String,Dynamicweb.Ecommerce.Products.FieldListPresentationType,Dynamicweb.Ecommerce.Products.FieldOptionCollection)">
 <summary>
 Adds a Dynamicweb.eCommerce.Products.Categories.Field to the Dynamicweb.eCommerce.Products.Categories.FieldCollection of this Dynamicweb.eCommerce.Products.Categories.Category.
 Also adds a language version of the Dynamicweb.eCommerce.Products.Categories.Field to each language version of this Dynamicweb.eCommerce.Products.Categories.Category.
 </summary>
 <param name="systemName">The SystemName of the Dynamicweb.eCommerce.Products.Categories.Field.</param>
 <param name="label">The Label of the Dynamicweb.eCommerce.Products.Categories.Field.</param>
 <param name="type">The type of the Dynamicweb.eCommerce.Products.Categories.Field.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Category.AddField(System.String,System.String,System.String,System.String,System.String,Dynamicweb.Ecommerce.Products.FieldListPresentationType,Dynamicweb.Ecommerce.Products.FieldOptionCollection,System.Int32)">
 <summary>
 Adds a Dynamicweb.eCommerce.Products.Categories.Field to the Dynamicweb.eCommerce.Products.Categories.FieldCollection of this Dynamicweb.eCommerce.Products.Categories.Category.
 Also adds a language version of the Dynamicweb.eCommerce.Products.Categories.Field to each language version of this Dynamicweb.eCommerce.Products.Categories.Category.
 </summary>
 <param name="systemName">The SystemName of the Dynamicweb.eCommerce.Products.Categories.Field.</param>
 <param name="label">The Label of the Dynamicweb.eCommerce.Products.Categories.Field.</param>
 <param name="type">The type of the Dynamicweb.eCommerce.Products.Categories.Field.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Category.AddField(Dynamicweb.Ecommerce.Products.Categories.Field)">
 <summary>
 Adds a Dynamicweb.eCommerce.Products.Categories.Field to the Dynamicweb.eCommerce.Products.Categories.FieldCollection of this Dynamicweb.eCommerce.Products.Categories.Category.
 Also adds a language version of the Dynamicweb.eCommerce.Products.Categories.Field to each language version of this Dynamicweb.eCommerce.Products.Categories.Category.
 </summary>
 <param name="field">The Dynamicweb.eCommerce.Products.Categories.Field to add.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Category.RemoveField(Dynamicweb.Ecommerce.Products.Categories.Field)">
 <summary>
 Removes a Dynamicweb.eCommerce.Products.Categories.Field.
 </summary>
 <param name="field">The Dynamicweb.eCommerce.Products.Categories.Field to remove.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Category.GetAllCategories">
 <summary>
 Returns all Dynamicweb.eCommerce.Products.Categories.Category objects from database.
 </summary>
 <returns>Dynamicweb.eCommerce.Products.Categories.List(Of Category) containing 0 or more Dynamicweb.eCommerce.Products.Categories.Category objects.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Category.GetCategories">
 <summary>
 Returns all Dynamicweb.eCommerce.Products.Categories.Category objects from database.
 </summary>
 <returns>Dynamicweb.eCommerce.Products.Categories.List(Of Category) containing 0 or more Dynamicweb.eCommerce.Products.Categories.Category objects.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Category.GetCategoriesByLanguage(System.String)">
 <summary>
 Returns all Dynamicweb.eCommerce.Products.Categories.Category objects from database matching the given Language ID.
 </summary>
 <returns>Dynamicweb.eCommerce.Products.Categories.List(Of Category) containing 0 or more Dynamicweb.eCommerce.Products.Categories.Category objects.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Category.GetCategories(System.String)">
 <summary>
 Returns all Dynamicweb.eCommerce.Products.Categories.Category objects from database matching the given Language ID.
 </summary>
 <returns>Dynamicweb.eCommerce.Products.Categories.List(Of Category) containing 0 or more Dynamicweb.eCommerce.Products.Categories.Category objects.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Category.GetCategoryById(System.String)">
 <summary>
 Returns the Dynamicweb.eCommerce.Products.Categories.Category with the given ID. The default Language is used.
 </summary>
 <param name="categoryId">The ID of the Dynamicweb.eCommerce.Products.Categories.Category to find.</param>
 <returns>Dynamicweb.eCommerce.Products.Categories.Category otherwise Null</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Category.GetCategoryById(System.String,System.String)">
 <summary>
 Returns the Dynamicweb.eCommerce.Products.Categories.Category with the given ID and Language ID.
 </summary>
 <param name="categoryId">The ID of the Dynamicweb.eCommerce.Products.Categories.Category to find.</param>
 <param name="languageId">The LanguageID of the Dynamicweb.eCommerce.Products.Categories.Category to find.</param>
 <returns>Dynamicweb.eCommerce.Products.Categories.Category otherwise Null</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Category.GetAllTranslations(System.String)">
 <summary>
 Returns all language versions of the Dynamicweb.eCommerce.Products.Categories.Category with the given SystemName.
 </summary>
 <param name="systemName">The SystemName of the Dynamicweb.eCommerce.Products.Categories.Category objects to find.</param>
 <returns>Dynamicweb.eCommerce.Products.Categories.List(Of Category) containing 0 or more Dynamicweb.eCommerce.Products.Categories.Category objects.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Category.ClearCache">
 <summary>
 Remove dictionary from cache
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Category.CachedCategories">
 <summary>
 Gets or sets a list of cached product categories.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Categories.CategoryCollection">
 <summary>
 Collection of Categories
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.CategoryCollection.ContainsId(System.String)">
 <summary>
 Determines whether the <see cref="T:Dynamicweb.Ecommerce.Products.Categories.Category" /> with the specific ID is contained in this <see cref="T:System.Collections.Generic.List`1" />.
 </summary>
 <param name="id">The ID.</param>
 <returns>
   <c>true</c> if the specified ID is contained; otherwise, <c>false</c>.
 </returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Categories.Field">
 <summary>
 The class Field represents product <seealso cref="T:Dynamicweb.Ecommerce.Products.Categories.Category"/> field.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Field.Id">
 <summary>
 The ID of the field.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Field.Category">
 <summary>
 Gets the <see cref="P:Dynamicweb.Ecommerce.Products.Categories.Field.Category" /> that this <see cref="T:Dynamicweb.Ecommerce.Products.Categories.Field" /> belongs to.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Field.Label">
 <summary>
 The label of this Dynamicweb.eCommerce.Products.Categories.Field object.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Field.Type">
 <summary>
 The type of this Dynamicweb.eCommerce.Products.Categories.Field object.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Field.HideEmpty">
 <summary>
 Is used to skip the field in the loops in the frontend rendering.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Field.DoNotRender">
 <summary>
 Is used to skip the field in the loops in the frontend rendering.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Field.TemplateTag">
 <summary>
 The template tag for this Dynamicweb.eCommerce.Products.Categories.Field object.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Field.DefaultValue">
 <summary>
 The default value of this Dynamicweb.eCommerce.Products.Categories.Field object.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Field.PresentationType">
 <summary>
 The presentation type of list box field values
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Field.SortOrder">
 <summary>
 Gets or sets the sort order.
 </summary>
 <value>
 The sort order.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Field.FieldOptions">
 <summary>
 The field options of this Dynamicweb.eCommerce.Products.Categories.Field object.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Categories.Field.IsFieldLockedByLanguage">
 <summary>
 Returns true if the field is locked across all languages otherwise false.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Field.Create(System.String,Dynamicweb.Ecommerce.Products.Categories.Category,System.String,System.String,System.String,System.String,Dynamicweb.Ecommerce.Products.FieldListPresentationType,Dynamicweb.Ecommerce.Products.FieldOptionCollection)">
 <summary>
 Creates a new Dynamicweb.eCommerce.Products.Categories.Field object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Field.CreateFieldWithNullCategory(System.String,System.String,System.String,System.String,System.String,Dynamicweb.Ecommerce.Products.FieldListPresentationType,Dynamicweb.Ecommerce.Products.FieldOptionCollection)">
 <summary>
 Creates a new Dynamicweb.eCommerce.Products.Categories.Field object.
 </summary>
 <remarks>!! THIS METHOD IS ONLY FOR USE IN THE CONVERSION TOOL !!</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Field.Save">
 <summary>
 Saves this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Field.Save(System.Data.IDbConnection)">
 <summary>
 Saves this instance.
 </summary>
 <param name="connection">The <see cref="T:System.Data.IDbConnection">connection</see> to use to save the <see cref="T:Dynamicweb.Ecommerce.Products.Categories.Field" />.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Field.ParseValue(System.Object)">
 <summary>
 Parses the value based on the <see cref="T:Dynamicweb.Ecommerce.Products.FieldType">type</see> of this <see cref="T:Dynamicweb.Ecommerce.Products.Categories.Field" />.
 </summary>
 <param name="value">The value.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Field.FieldOptionsToXml(Dynamicweb.Ecommerce.Products.FieldOptionCollection)">
 <summary>
 Converts fields options to XML string.
 </summary>
 <param name="options">The options.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Field.FieldOptionsFromXmlString(System.String,System.String,System.String)">
 <summary>
 Converts XML string to the fields options.
 </summary>
 <param name="categoryId">The category id.</param>
 <param name="fieldId">The field id.</param>
 <param name="xml">The XML string.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Field.Equals(System.Object)">
 <summary>
 Check whether given comparable object equal to this instance.
 </summary>
 <param name="comparable">The comparable object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.Field.GetHashCode">
 <summary>
 Gets the field hash code.
 </summary>
 <remarks>Hash code is taken from the field id.</remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Categories.FieldCollection">
 <summary>
 The class FieldCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Products.Categories.Field"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.FieldCollection.Contains(Dynamicweb.Ecommerce.Products.Categories.Field)">
 <summary>
 Returns true if the <see cref="T:Dynamicweb.Ecommerce.Products.Categories.Field" /> already is contained in the <see cref="T:Dynamicweb.Ecommerce.Products.Categories.FieldCollection" />.
 Returns false otherwise.
 </summary>
 <param name="value">The field.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.FieldCollection.GetFieldById(System.String)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Products.Categories.Field" /> by its Id.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Categories.FieldValueCollection">
 <summary>
 The class FieldValueCollection represents <seealso cref="T:Dynamicweb.Ecommerce.Products.Categories.Field"/> value collection.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.FieldValueCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Categories.FieldValueCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="info">Serialization information.</param>
 <param name="context">Streaming context.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.FieldListPresentationType">
 <summary>
 Represents presentation type for fields of type "list".
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.FieldListPresentationType.RadioButtonList">
 <summary>
 List of radio buttons.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.FieldListPresentationType.DropDownList">
 <summary>
 Drop-down list.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.FieldListPresentationType.MultiSelectList">
 <summary>
 Multi-select list.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.FieldListPresentationType.CheckBoxList">
 <summary>
 List of checkboxes.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.GroupCollectionSortBy">
 <summary>
 Sorting fields.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.GroupCollectionSortBy.Name">
 <summary>
 Group name.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.GroupCollectionSortBy.ShopOrder">
 <summary>
 Shop order.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.GroupMetaData">
 <summary>
 Represents information about meta data.
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\ProductGroupMetaDataEditPageSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupMetaData.Title">
 <summary>
 Gets or sets the title.
 </summary>
 <value>The title.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupMetaData.Keywords">
 <summary>
 Gets or sets the keywords.
 </summary>
 <value>Keywords.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupMetaData.Description">
 <summary>
 Gets or sets the description.
 </summary>
 <value>Description.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupMetaData.Url">
 <summary>
 Gets or sets the URL.
 </summary>
 <value>URL.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupMetaData.UrlIgnoreParent">
 <summary>
 Gets or sets if the parent should be ignored in URL.
 </summary>
 <value>URL.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupMetaData.Canonical">
 <example>
 For example see <see cref="T:Dynamicweb.Ecommerce.Products.GroupMetaData"/>
 </example>
 <summary>
 Gets or sets the Canonical.
 </summary>
 <value>Canonical.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupMetaData.PrimaryPage">
 <summary>
 Gets or sets the primary page for this group.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupMetaData.PrimaryPageId">
 <summary>
 Gets the primary page ID.
 </summary>
 <value>
 The primary page ID if Primary page is set, otherwise 0.
 </value>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.GroupRelationType">
 <summary>
 The relation types enumeration.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.GroupRepository">
 <summary>
 The GroupRepository providing persistence operations for the Group aggregate.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.GroupService">
 <summary>
 The GroupService class providing methods for querying and saving the Group aggregate to and from persistence.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.GetProductCountForBackendTree(System.String,System.String)">
 <summary>
 Gets the number of the products in the group.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="languageId">The language ID/</param>
 <returns>The number of products with the specified language ID in the group.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.GetGroupShops(System.String)">
 <summary>
 Gets the shops for specified group.
 </summary>
 <param name="groupId">The group ID.</param>
 <returns>The collections of the <see cref="T:Dynamicweb.Ecommerce.Shops.Shop"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.AddSubgroup(Dynamicweb.Ecommerce.Products.Group,Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Adds a subgroup to group.
 </summary>
 <param name="toGroup">The group to which will added a subgroup.</param>
 <param name="subgroup">The subgroup for adding.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.Save(Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Saves the group.
 </summary>
 <param name="group">The group.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.Save(Dynamicweb.Ecommerce.Products.Group,System.String)">
 <summary>
 Saves the group.
 </summary>
 <param name="group">The group.</param>
 <param name="groupId">The group ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.HasProducts(Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Determines whether the group contains products.
 </summary>
 <param name="group">The group.</param>
 <returns><c>True</c>, if group contains at least one product, otherwise, <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.HasProductsWithoutVariants(Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Determines whether the group contains products without variants.
 </summary>
 <param name="group">The group.</param>
 <returns><c>True</c>, if group contains at least one product, otherwise, <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.HasProductsWithVariants(Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Determines whether the group contains products with variants.
 </summary>
 <param name="group">The group.</param>
 <returns><c>True</c>, if group contains at least one product, otherwise, <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.UpdateGroupId(Dynamicweb.Ecommerce.Products.Group,System.String)">
 <summary>
 Updates the group ID in all related tables.
 </summary>
 <param name="group">The group.</param>
 <param name="newGroupId">The new group ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.GetProductCountByGroupsForBackendTree(Dynamicweb.Ecommerce.Products.GroupCollection)">
 <summary>
 Gets products count in groups for current language, without variants.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.Delete(Dynamicweb.Ecommerce.Products.Group,System.String)">
 <summary>
 Deletes the group.
 </summary>
 <param name="group">The group.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.Delete(Dynamicweb.Ecommerce.Products.GroupCollection)">
 <summary>
 Deletes all groups from provided collection.
 </summary>
 <param name="groups">The group collection.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.DeleteAll(Dynamicweb.Ecommerce.Products.GroupCollection)">
 <summary>
 Deletes appropriate relations between shops, other groups and products as well.
 </summary>
 <param name="groups">The groups collection.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.ClearOrderLineFieldCache(Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Clears order line fields cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.ClearCache">
 <summary>
 Clears all the product group cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.ClearCache(System.Boolean)">
 <summary>
 Clears the product group cache.
 </summary>
 <param name="clearAssortmentsNavigationCache">The indicator whether to clear assortment navigation cache also.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.GetGroup(System.String)">
 <summary>
 Gets the group by ID.
 </summary>
 <param name="groupId">The group ID.</param>
 <returns>The group.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.GetGroup(System.String,System.String)">
 <summary>
 Gets the group.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="languageId">The language ID.</param>
 <returns>The group.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.GetGroup(System.String,System.String,System.String)">
 <summary>
 Gets the group.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="languageId">The language ID.</param>
 <param name="defaultLanguageId">The default language ID.</param>
 <returns>The group.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.GetToplevelGroups">
 <summary>
 Gets the top level groups.
 </summary>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Products.GroupCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.GetToplevelGroups(System.String)">
 <summary>
 Gets the top level groups in specified language.
 </summary>
 <param name="languageId">The language ID.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Products.GroupCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.GetGroups">
 <summary>
 Gets all product groups sorted by name.
 </summary>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Products.GroupCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.GetGroups(System.String)">
 <summary>
 Gets groups by language ID.
 </summary>
 <param name="languageId">The language ID.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Products.GroupCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.GetGroups(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Gets groups by provided group IDs.
 </summary>
 <param name="groupIds">The list of group IDs.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.GetGroups(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
 <summary>
 Gets groups by provided group IDs.
 </summary>
 <param name="groupIds">The list of group IDs.</param>
 <param name="applyFiltering">The filter results by current language and/or permissions.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.FindGroups(System.String,System.Int32)">
 <summary>
 Finds the groups by keyword.
 </summary>
 <param name="keyword">The keyword to find.</param>
 <param name="maxAmount">The maximum number of returned results.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.FindGroups(System.String,System.Int32,System.String)">
 <summary>
 Finds the groups by keyword.
 </summary>
 <param name="keyword">The keyword to find.</param>
 <param name="maxAmount">The maximum number of returned results.</param>
 <param name="shopId">The shop ID to search in.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.GetRelatedProducts(Dynamicweb.Ecommerce.Products.Group,System.String)">
 <summary>
 Gets the list of related products for relation group. Related products are used as default list of related products for child products.
 </summary>
 <param name="relatedGroupId">relation group ID</param>
 <returns>Related products collection</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.GetRelatedProductIds(Dynamicweb.Ecommerce.Products.Group,System.String)">
 <summary>
 Gets the string with list of related product IDs for relation group. Related products are used as default list of related products for child products.
 </summary>
 <returns>Related product ids, delimited by "#;#"</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.AddRelatedProductId(Dynamicweb.Ecommerce.Products.Group,System.String,System.String)">
 <summary>
 Adds the related product to group.
 </summary>
 <param name="group">The group.</param>
 <param name="relatedGroupId">The relation group ID.</param>
 <param name="productId">The product ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.AddRelatedProductId(Dynamicweb.Ecommerce.Products.Group,System.String,System.String,System.String)">
 <summary>
 Adds the related product to group.
 </summary>
 <param name="group">The group.</param>
 <param name="relatedGroupId">The relation group ID.</param>
 <param name="productId">The product ID.</param>
 <param name="variantId">The variant ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.DeleteRelatedProducts(Dynamicweb.Ecommerce.Products.Group,System.String)">
 <summary>
 Deletes the related products from group.
 </summary>
 <param name="group">The group.</param>
 <param name="relatedGroupId">The relation group ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.DeleteRelatedProductId(Dynamicweb.Ecommerce.Products.Group,System.String,System.String)">
 <summary>
 Deletes the related product from relation.
 </summary>
 <param name="group">The group.</param>
 <param name="relatedGroupId">The relation group ID.</param>
 <param name="productId">The product ID to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupService.DeleteRelatedProductId(Dynamicweb.Ecommerce.Products.Group,System.String,System.String,System.String)">
 <summary>
 Deletes the related product from relation.
 </summary>
 <param name="group">The group.</param>
 <param name="relatedGroupId">The relation group ID.</param>
 <param name="productId">The product ID to delete.</param>
 <param name="variantId">The product variant ID to delete.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.GroupShopRelationType">
 <summary>
 The enum GroupShopRelationType represents group shop relation types enumeration.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ManufacturerCollectionSortBy">
 <summary>
 Sorting fields.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ManufacturerCollectionSortBy.Id">
 <summary>
 Manufacturer ID
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ManufacturerCollectionSortBy.Name">
 <summary>
 Manufacturer name
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroupRepository.GetAllProductRelatedGroups">
 <summary>
 Gets all related groups.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroupRepository.Delete(System.String)">
 <summary>
 Deletes the instance from DB.
 </summary>
 <param name="groupId">DB field name is RelatedGroupID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroupRepository.Delete(System.String,System.String)">
 <summary>
 Deletes the instance from DB.
 </summary>
 <param name="groupId">DB field name is RelatedGroupID.</param>
 <param name="languageId">DB field name is RelatedGroupLanguageID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroupRepository.Save(Dynamicweb.Ecommerce.Products.ProductRelatedGroup)">
 <summary>
 Saves the properties into DB.
 </summary>
 <param name="group">ProductRelatedGroup.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroupRepository.GetRelatedGroupsWithProducts(Dynamicweb.Ecommerce.Products.Product,System.Boolean)">
 <summary>
 Gets the related groups with products.
 </summary>
 <param name="product">The product.</param>
 <param name="isFrontend">if set to <c>true</c> removes not used items from collection.</param>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductRelatedGroupService.Repository">
 <summary>
 Gets the repository for working with the ProductRelatedGroup
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroupService.ClearCache">
 <summary>
 Crears the related groups caches
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroupService.GetProductRelatedGroup(System.String,System.String)">
 <summary>
 Gets the related group.
 </summary>
 <param name="groupId">The related group id.</param>
 <param name="languageId">The language id.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Products.ProductRelatedGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroupService.Save(Dynamicweb.Ecommerce.Products.ProductRelatedGroup)">
 <summary>
 Saves the related group.
 </summary>
 <param name="group">The related group.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroupService.Delete(System.String)">
 <summary>
 Deletes the related groups with the specified id.
 </summary>
 <param name="groupId">The related group id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroupService.Delete(System.String,System.String)">
 <summary>
 Deletes the related group with the specified id and language id.
 </summary>
 <param name="groupId">The related group id.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroupService.GetAllRelatedGroups">
 <summary>
 Gets all related groups.
 </summary>
 <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroupService.GetRelatedGroupsByLanguage(System.String)">
 <summary>
 Gets the related groups by language.
 </summary>
 <param name="languageId">The language id.</param> 
 <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroupService.GetRelatedGroupsByLanguage(System.String,System.Boolean)">
 <summary>
 Gets the related groups by language.
 </summary>
 <param name="languageId">The language id.</param> 
 <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroupService.GetRelatedGroupsWithProducts(Dynamicweb.Ecommerce.Products.Product,System.Boolean)">
 <summary>
 Gets the related groups with products.
 </summary>
 <param name="product">The product.</param>
 <param name="isFrontend">if set to <c>true</c> removes not used items from collection.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.ClearProductsCache">
 <summary>
 Crears the variant groups caches
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.ReFactorProductList(System.Collections.Generic.ICollection{Dynamicweb.Ecommerce.Products.Product},System.Boolean)">
 <summary>
 Removes not used items from product list.
 </summary>
 <param name="useAssortments">If set to <c>true</c> then assortments are used to re-factor the product collection.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetStockStatus(Dynamicweb.Ecommerce.Products.Product,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void Notify(Product product, string productId, string variantId)
   {
       StockStatus OldStockStatus = product.StockStatus;
       Product px = new Product(productId, variantId);
       StockStatus NewStockStatus = px.StockStatus;

       if (NewStockStatus.ID != OldStockStatus.ID)
       {
           NotificationManager.Notify(Dynamicweb.Ecommerce.Notifications.eCommerce.Stock.StatusChanged, new object[] {
                 px,
                 OldStockStatus,
                 NewStockStatus
                });
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the stock status.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.Clone(Dynamicweb.Ecommerce.Products.Product)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Product product;
   public void DoSave()
   {
       Product product = new Product();
       product = product.Clone();
       product.ID = string.Empty;
       product.VariantID = string.Empty;
       product.Save(product.ID, product.VariantID);
   }
}
 </code>
 </example>
 <summary>
 Clones this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.MakeFullCopyToGroup(Dynamicweb.Ecommerce.Products.Product,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void CopyProducts(ProductCollection products)
   {
       string groupID = Dynamicweb.Context.Current.Request("ToGroupID");

       foreach (Product product in products)
       {
           product.MakeFullCopyToGroup(groupID);
       }
   }
}
 </code>
 </example>
 <summary>
 Makes a clone of the product and all its relations (except group relations) and saves it in the DB.
 </summary>
 <param name="groupId">The group ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.MakeFullCopyToGroupWithLanguage(Dynamicweb.Ecommerce.Products.Product,System.String,System.String,System.String)">
 <summary>
 Makes a clone of the product and all its relations (except group relations) for specified languages and saves it in the DB.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="productLanguageId">The language IDs.</param>
 <param name="newProductId">The product IDs.</param>
 <returns>The new Product ID.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.Delete(System.String,System.String,System.String)">
 <summary>
 Deletes this <see cref="T:Dynamicweb.Ecommerce.Products.Product" />. If this instance is a Variant or a specific language version, then only this instance is deleted. Requires the product to be in the Database or exception is thrown.
 </summary>
 <exception cref="T:System.ArgumentException">If <see cref="T:Dynamicweb.Ecommerce.Products.Product" /> does not exist in the database.</exception>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.DeleteVariants(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoDelete(string ProductID, string VariantID)
   {
       //TODO: insert your code here
 
       Product.DeleteVariants(ProductID, VariantID);       
   }
}
 </code>
 </example>
 <summary>
 Deletes the specified variant from all language layers.
 </summary>
 <param name="productId">DB field name is ProductID.</param>
 <param name="productVariantId">DB field name is ProductVariantID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.DeleteLanguageSpecificProduct(System.String,System.String,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoDelete(string ProductID, string VariantID, string productLanguageId)
   {
       //TODO: insert your code here
 
       Product.DeleteLanguageSpecificProduct(ProductID, VariantID, productLanguageId);       
   }
}
 </code>
 </example>
 <summary>
 Deletes the variant.
 </summary>
 <param name="productId">DB field name is ProductID.</param>
 <param name="productVariantId">DB field name is ProductVariantID.</param>
 <param name="productLanguageId">DB field name is ProductLanguageID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.DeleteAll(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.Product},System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoDelete(string SQL)
   {
       //TODO: insert your code here
 
       ProductCollection products = new ProductCollection();
       products.Load(SQL);
       SQL = Product.DeleteAll(products, false);
       Database.ExecuteNonQuery(SQL);
   }
}
 </code>
 </example>
 <summary>
 Deletes all.
 </summary>
 <param name="products">The products.</param>
 <param name="doRun">if set to <c>true</c> execute.</param>
 <returns>The SQL query</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.DeleteAll(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoDelete(string SQL)
   {
       ProductCollection products = new ProductCollection();
       products.Load(SQL);
       List&lt;string&gt; idList = new List&lt;string&gt;();
       foreach (Product product in products)
       {
           idList.Add(product.ID);
       }
 
       SQL = Product.DeleteAll(idList, false);
       Database.ExecuteNonQuery(SQL);
   }
}
 </code>
 </example>
 <summary>
 Deletes all.
 </summary>
 <param name="ids">The list of IDs.</param>
 <param name="doRun">if set to <c>true</c> execute.</param>
 <returns>The SQL query</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.Delete(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.Product})">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Dynamicweb.eCommerce.Products.Product product;
   public void DoDelete(string SQL)
   {
       //TODO: insert your code here
 
       ProductCollection products = new ProductCollection();
       products.Load(SQL);
       product.Delete(products);       
   }
}
 </code>
 </example>
 <summary>
 Deletes the specified products.
 </summary>
 <param name="products">The products.</param>
 <returns>The SQL query.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.CompileProductImagePath(System.String,Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Compiles product image path with replacing product related placeholders with product values
 </summary>
 <param name="image">The image path</param>
 <param name="product">The product</param>
 <returns>Compiled image path.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.CompileProductImagePath(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Compiles product image path with replacing product related placeholders with product values
 </summary>
 <param name="image">Image pattern</param>
 <param name="productId">Product id</param>
 <param name="productNumber">Product number</param>
 <param name="productName">Product name</param>
 <param name="productPrimaryGroupId">Product primary group id</param>
 <param name="productVariantId">Product variant id</param>
 <param name="productManufacturerName">Product manufacturer name</param>
 <param name="variantOptionName">variantOptionName</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.UpdateStock(Dynamicweb.Ecommerce.Orders.Order)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DeleteOrders(string orderID)
   {
       Dynamicweb.eCommerce.Orders.OrderState deletedOrderState = null;

       //Check for a 'Deleted' Order state and use if exists
       Dynamicweb.eCommerce.Orders.OrderStateCollection orderStates = Dynamicweb.eCommerce.Orders.OrderState.getAllOrderstates(false);
       foreach (Dynamicweb.eCommerce.Orders.OrderState orderState in orderStates) {
           if (orderState.IsDeleted) {
               deletedOrderState = orderState;
           }
       }

       Dynamicweb.eCommerce.Orders.Order order = Dynamicweb.eCommerce.Orders.Order.Create(orderID);
       order.Deleted = true;
       order.StateID = deletedOrderState.ID;
       order.Save();

       if (order.Complete)
       {
           Product.UpdateStock(order);
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the stock.
 </summary>
 <param name="Order">The order.</param>
 <returns>The number of products that have had their Stock updated.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.UpdateStock(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Ecommerce.Products.ProductOrderStockOperator)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DeleteOrders(string orderID)
   {
       Dynamicweb.eCommerce.Orders.OrderState deletedOrderState = null;

       //Check for a 'Deleted' Order state and use if exists
       Dynamicweb.eCommerce.Orders.OrderStateCollection orderStates = Dynamicweb.eCommerce.Orders.OrderState.getAllOrderstates(false);
       foreach (Dynamicweb.eCommerce.Orders.OrderState orderState in orderStates) {
           if (orderState.IsDeleted) {
               deletedOrderState = orderState;
           }
       }

       Dynamicweb.eCommerce.Orders.Order order = Dynamicweb.eCommerce.Orders.Order.Create(orderID);
       order.Deleted = true;
       order.StateID = deletedOrderState.ID;
       order.Save();

       if (order.Complete)
       {
           Product.UpdateStock(order, Product.ProductOrderStockOperator.Positive);
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the stock.
 </summary>
 <param name="Order">The order.</param>
 <param name="Operator">The operator.</param>
 <returns>The number of products that have had their Stock updated.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.UpdateStock(Dynamicweb.Ecommerce.Orders.OrderLine,Dynamicweb.Ecommerce.Products.ProductOrderStockOperator)">
 <summary>
 Updates the stock.
 </summary>
 <param name="orderLine">The orderLine.</param>
 <param name="operator">The operator.</param>
 <returns>Whether stock was updated or no.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.ProductVariantExists(Dynamicweb.Ecommerce.Products.Product,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void UpdateStock(Dynamicweb.eCommerce.Orders.Order order)
   {
       foreach (Dynamicweb.eCommerce.Orders.OrderLine orderLine in order.OrderLines)
       {
           if (Product.ProductVariantExists(orderLine.Product, orderLine.ProductVariantID))
           {
               //TODO: insert your code here
           }
       }
   }
}
 </code>
 </example>
 <summary>
 If variant exists return <c>true</c>.
 </summary>
 <param name="product">The product.</param>
 <param name="productVariandId">The variant ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.UpdateCounters(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Updates the variant and unit counters. Should be called after adding variants or units to a product through the API.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.UpdateDefaultVariantId(Dynamicweb.Ecommerce.Products.Product,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void VariantOptions(Product product)
   {
       string overwriteDefaultVarCombo = string.Empty;
       if (Request["saveVariant"] == "1")
       {
           Dynamicweb.eCommerce.Variants.VariantCombinationCollection variantCombinationCollection = Dynamicweb.eCommerce.Variants.VariantCombination.getProductCombinations(product);
           Product.UpdateVariantCnt(product, variantCombinationCollection.Count);
       }
       if (Request["saveDefaultVariant"] == "1")
       {
           if (!string.IsNullOrEmpty(Converter.ToString(Dynamicweb.Context.Current.Request("DefaultVariantComboID"))))
           {
               overwriteDefaultVarCombo = Converter.ToString(Dynamicweb.Context.Current.Request("DefaultVariantComboID"));
           }
           Product.UpdateDefaultVariantID(product, overwriteDefaultVarCombo);
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the default variant ID.
 </summary>
 <param name="product">The product.</param>
 <param name="variantComboId">The variant combo ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.RemoveItem(Dynamicweb.Ecommerce.Products.Product,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DelProductItem()
   {
       Product product = new Product();
       product = (Product)Session["Ecom.Backend.Product"];

       string itemID = Context.Current.Request.QueryString["itemID"];

       product.RemoveItem(itemID);
       ProductItem pi = new ProductItem();
       pi.Delete(itemID, product.ID);
   }
}
 </code>
 </example>
 <summary>
 Removes the item.
 </summary>
 <param name="itemId">The item ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetCommaSeparatedProductIDs(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.Product})">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public string Delete(ProductCollection products, bool run)
   {
       string SQL = "DELETE FROM EcomDetails WHERE DetailProductID " + Product.GetSqlConditionPartForIDs(Product.GetCommaSeparatedProductIDs(products)) + "; ";
       if (run)
       {
           Database.ExecuteNonQuery(SQL);
       }
       return SQL;
   }
}
 </code>
 </example>
 <summary>
 Returns list of IDs.
 </summary>
 <param name="products">The products.</param>
 <exception cref="T:System.ArgumentNullException">If given <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection" /> is null.</exception>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsIds(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.Product})">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public string Delete(ProductCollection products, bool run)
   {
       string SQL = "DELETE FROM EcomDetails WHERE DetailProductID " + Product.GetSqlConditionPartForIDs(Product.GetProductsIds(products)) + "; ";
       if (run)
       {
           Database.ExecuteNonQuery(SQL);
       }
       return SQL;
   }
}
 </code>
 </example>
 <summary>
 Returns list of IDs.
 </summary>
 <param name="products">The products.</param>
 <exception cref="T:System.ArgumentNullException">If given <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection" /> is null.</exception>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetAllProductsWithoutVariants(System.Boolean,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getProducts(string productLanguageId)
   {
       ProductCollection dwProds = Product.GetAllProductsWithoutVariants(true, productLanguageId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets all products without variants.
 </summary>
 <param name="doRefactoring">if set to <c>true</c>; - do refactoring the product collection.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsAndVariantsByProduct(Dynamicweb.Ecommerce.Products.Product)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(Product product)
   {
       ProductCollection dwProds = Product.GetProductsAndVariantsByProduct(product);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the all products and variants with the same product ID and language ID as the given product.
 </summary>
 <param name="product">The product.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.AddRelatedProduct(System.String,Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Products.ProductRelatedGroup)">
 <summary>
 Adds a related product to this product and saves it to the database.
 </summary>
 <exception cref="T:System.ArgumentException">If this instance is not saved first.</exception>
 <exception cref="T:System.ArgumentException">If the related product is not saved first.</exception>
 <exception cref="T:System.ArgumentException">If the relation group is not saved first.</exception>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetLastActiveProducts(System.Int32,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string productLanguageId)
   {
       ProductCollection dwProds = Product.GetLastActiveProducts(10, productLanguageId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the last active products.
 </summary>
 <param name="count">Select top from selected items.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetLastActiveProducts(System.Int32,System.String[],System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string[] groupIds, string productLanguageId)
   {
       ProductCollection dwProds = Product.GetLastActiveProducts(10, groupIds, productLanguageId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the last active products. Context.LanguageID is used.
 </summary>
 <param name="count">Select top from selected items.</param>
 <param name="groupIds">The array of group IDs.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductSql(System.String,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Gets query to select the product/product variants by ID.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetAllProductsByShopId(System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string shopID)
   {
       ProductCollection dwProds = Product.GetAllProductsByShopID(shopID);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets all products from shop. No language filter is applied meaning all language version of all products in the shop are returned.
 </summary>
 <param name="shopId">DB field name is ShopGroupShopID.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsByShopId(System.String,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string shopID, string productLanguageId)
   {
       ProductCollection dwProds = Product.GetProductsByShopID(shopID, productLanguageId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets products from shop.
 </summary>
 <param name="shopId">DB field name is ShopGroupShopID.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.CollectChildGroupIDs(Dynamicweb.Ecommerce.Products.GroupCollection,System.Collections.Generic.List{System.String})">
 <summary>
 Recursively adds child group IDs to the specified list of IDs.
 </summary>
 <param name="groups">Groups whose child groups to examine.</param>
 <param name="appendTo">List where to add new IDs.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.AddGroup(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Products.Group)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Product product;
   public string AddGroups(GroupCollection gc)
   {
       foreach(Group group in gc)
       {
           product.AddGroup(group);
       }
   }
}
 </code>
 </example>
 <summary>
 Adds the group to the products Groups collection. Also creates the ProductGroupRelation in the database if it does not already exist and group.ID is exists.
 </summary>
 <param name="Group">The group.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsByGroup(Dynamicweb.Ecommerce.Products.Group,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DeleteProducts(GroupCollection groups)
   {
       if (groups.Count > 0)
       {
           //Delete products from groups
           ProductCollection productIds = Product.GetProductsByGroup(groups);
           Dynamicweb.eCommerce.Products.ProductDeleting.Run(productIds, groups);
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products from group.
 </summary>
 <param name="group">The group.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsByGroups(Dynamicweb.Ecommerce.Products.GroupCollection,System.String,System.Boolean,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DeleteProducts(GroupCollection groups)
   {
       if (groups.Count > 0)
       {
           //Delete products from groups
           ProductCollection productIds = Product.GetProductsByGroups(groups, false);
           Dynamicweb.eCommerce.Products.ProductDeleting.Run(productIds, groups);
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products from groups.
 </summary>
 <param name="groups">The groups.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="isFrontEnd">if set to <c>true</c> removes not used items.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsByGroupId(System.String,System.Boolean,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string groupID)
   {
       ProductCollection dwProds = Product.GetProductsByGroupID(groupID, true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the product collection based on Group ID.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="onlyActive">if set to <c>true</c> removes not active items from collection.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter the collection.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsByGroupId(System.String,System.Int32,System.Boolean,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string groupID, int top)
   {
       ProductCollection dwProds = Product.GetProductsByGroupID(groupID, top, true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products. Context.LanguageID is used.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="Top">If not 0 then select only top from selected items.</param>
 <param name="doRefactoring">if set to <c>true</c> removes not used items.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are use to filter the collection.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsByGroupId(System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getOrderProducts(string groupID, string productLanguageId, bool doRefactoring)
   {
       ProductCollection dwProds = Product.GetProductsByGroupID(groupID, true, true, productLanguageId, doRefactoring);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="useOrderBy">if set to <c>true</c> the returned collection of product is sorted by the user defined sort order. If set to <c>false</c> the products are returned unsorted.</param>
 <param name="includeVariants">if set to <c>true</c> gets all variants.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="doRefactoring">if set to <c>true</c> remove unused products.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter collection.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsCountByGroupId(System.String,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Gets the products count.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="searchValue">The search value.</param>
 <param name="includeVariants">if set to <c>true</c> gets all variants.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="doRefactoring">if set to <c>true</c> remove unused products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsCountByGroupId(System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Gets the products count.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="countOnlyActive">if set to <c>true</c> count only active products.</param>
 <param name="searchValue">The search value.</param>
 <param name="includeVariants">if set to <c>true</c> gets all variants.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="doRefactoring">if set to <c>true</c> remove unused products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsByGroupIdAndSearchValue(System.String,System.String,System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string groupID)
   {
       string searchKeyWord = Context.Current.Request["searchField"];
       ProductCollection dwProds = Product.GetProductsByGroupIDAndSearchValue(groupID, "100", searchKeyWord, "");
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products. Context.LanguageID is used.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="topValue">The top value.</param>
 <param name="searchValue">The search value.</param>
 <param name="productVariantId">The variant ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsByGroupIdAndSearchValue(System.String,System.String,System.String,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(string groupID)
   {
       string searchKeyWord = Context.Current.Request["searchField"];
       ProductCollection dwProds = Product.GetProductsByGroupIDAndSearchValue(groupID, "100", searchKeyWord, "", true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products. Context.LanguageID is used.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="topValue">The top value, i.e. the number of products to get.</param>
 <param name="searchValue">The search value.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="isFrontend">if set to <c>true</c> removes not used items.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsByGroupIdAndSearchValue(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(string groupID)
   {
       string searchKeyWord = Context.Current.Request["searchField"];
       ProductCollection dwProds = Product.GetProductsByGroupIDAndSearchValue(groupID, "100", searchKeyWord, "", true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="topValue">The top value, i.e. the number of products to get.</param>
 <param name="searchValue">The search value.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="isFrontend">if set to <c>true</c> removes not used items.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsByGroupIdAndSearchValue(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(string groupID)
   {
       string searchKeyWord = Context.Current.Request["searchField"];
       ProductCollection dwProds = Product.GetProductsByGroupIDAndSearchValue(groupID, "100", searchKeyWord, "", true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="topValue">The top value, i.e. the number of products to get.</param>
 <param name="searchValue">The search value.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="isFrontend">if set to <c>true</c> removes not used items.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter collection.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetPagedProductsWithCount(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.Product}@,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Nullable{System.Boolean},System.Boolean)">
 <summary>
 Fills the product collection with specified page of results and return the total results count
 </summary>
 <param name="products">The collection to be filled with products.</param>
 <param name="groupIds">The groupIds of products</param>
 <param name="searchValue">The text search</param>
 <param name="languageId">The languageId</param>
 <param name="orderBy">The order by column name</param>
 <param name="orderByDirection">The order by direction</param>
 <param name="pageSize">The size of paged results</param>
 <param name="pageNumber">The page number of paged result</param>
 <param name="searchInAllFields">The value indicating whether to search through all fields</param>
 <param name="fromPimWarehouse">The value indicating whether to get products only from PIM. If set to nothing result conatains both - from PIM and from Ecom.</param>
 <param name="includeOrphanedProducts">The value indicating whether to get product not related to any group.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductById(System.String,System.String,System.String)">
 <summary>
 Gets the product by ID.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="productLanguageId">The language ID.</param><returns></returns>
 <remarks>When specified product with variant id and language not equal <c>Common.Context.LanguageID</c> not found returns product with variant id from <c>Common.Context.LanguageID</c></remarks> 
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductById(System.String,System.String,System.String,System.Boolean)">
 <summary>
 Gets the product by ID.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="productLanguageId">The language ID.</param><returns></returns>
 <param name="useAssortments">If set to <c>true</c> use assortments.</param>
 <remarks>When specified product with variant id and language not equal <c>Common.Context.LanguageID</c> not found returns product with variant id from <c>Common.Context.LanguageID</c></remarks> 
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductByNumber(System.String,System.Boolean)">
 <summary>
 Gets the product by number.
 </summary>
 <param name="productNumber">Product number.</param>
 <param name="useDefaultLanguage">Value indicating whether to use default language.</param>
 <returns>Product with the given number or null (Nothing in Visual Basic) if product with the given number cannot be found.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductByNumber(System.String,System.String)">
 <summary>
 Gets the product by number.
 </summary>
 <param name="productNumber">Product number.</param>
 <param name="productLanguageId">The language ID.</param>
 <returns>Product with the given number or null (Nothing in Visual Basic) if product with the given number cannot be found.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.UpdatePriceCount(Dynamicweb.Ecommerce.Products.Product,System.Int32)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void StockForUnits(Product product)
   {
       if (Request["saveUnit"] == "1")
       {
           Dynamicweb.eCommerce.Prices.PriceCollection price = Dynamicweb.eCommerce.Prices.Price.getPrices(product.ID);
           Product.UpdatePriceCount(product, price.Count);
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the price counter.
 </summary>
 <param name="product">The product.</param>
 <param name="priceCount">The price counter.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.UpdateVariantCount(Dynamicweb.Ecommerce.Products.Product,System.Int32)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void VariantOptions(Product product)
   {
       string overwriteDefaultVarCombo = string.Empty;
       if (Request["saveVariant"] == "1")
       {
           Dynamicweb.eCommerce.Variants.VariantCombinationCollection variantCombinationCollection = Dynamicweb.eCommerce.Variants.VariantCombination.getProductCombinations(product);
           Product.UpdateVariantCount(product, variantCombinationCollection.Count);
       }
       if (Request["saveDefaultVariant"] == "1")
       {
           if (!string.IsNullOrEmpty(Converter.ToString(Dynamicweb.Context.Current.Request("DefaultVariantComboID"))))
           {
               overwriteDefaultVarCombo = Converter.ToString(Dynamicweb.Context.Current.Request("DefaultVariantComboID"));
           }
           Product.UpdateDefaultVariantID(product, overwriteDefaultVarCombo);
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the variant counter.
 </summary>
 <param name="product">The product.</param>
 <param name="variantCount">The variant counter.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.MakeFullCopyToGroupWithLanguage(System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Makes a clone of the product and all its relations for specified languages and saves it in the DB.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="groupId">The group ID.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="newProductId">The new Product ID.</param>
 <returns>The new Product ID.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.MakeFullCopyToGroup(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void CopyProducts(ProductCollection products)
   {
       string groupID = Dynamicweb.Context.Current.Request("ToGroupID");

       foreach (Product product in products)
       {
           Product.MakeFullCopyToGroup(product.ID, groupID);
       }
   }
}
 </code>
 </example>
 <summary>
 Makes a clone of the product and all its relations (except group relations) and saves it in the DB.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="groupId">The group ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.MakeFullCopyToGroupWithLanguage(System.String,System.String,System.String,System.String)">
 <summary>
 Makes a clone of the product and all its relations (except group relations)  for specified languages and saves it in the DB.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="groupId">The group ID.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="newProductId">The new Product ID.</param>
 <returns>The new Product ID.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductFieldValue(Dynamicweb.Ecommerce.Products.Product,System.String)">
 <summary>
 Gets the product field value.
 </summary>
 <param name="productFieldSystemName">SystemName of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductField" />.</param>
 <exception cref="T:System.ArgumentException">If not <see cref="T:Dynamicweb.Ecommerce.Products.ProductField" /> or <see cref="T:Dynamicweb.Ecommerce.Products.ProductFieldValue" /> exist based on the given SystemName.</exception>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.SetProductFieldValue(Dynamicweb.Ecommerce.Products.Product,System.String,System.Object)">
 <summary>
 Gets the product field value.
 </summary>
 <param name="productFieldSystemName">SystemName of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductField" />.</param>
 <param name="value">The value to set.</param>
 <exception cref="T:System.ArgumentException">If not <see cref="T:Dynamicweb.Ecommerce.Products.ProductField" /> or <see cref="T:Dynamicweb.Ecommerce.Products.ProductFieldValue" /> exist based on the given SystemName.</exception>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductStock(System.String,System.String,System.String)">
 <summary>
 Gets the product stock count.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="productLanguageId">The language ID.</param>
 <returns>The value of product's stock field from DB.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.CurrentBackendUserCanEdit(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Checks if the current backend user has permission to edit a given product. 
 </summary>
 <param name="theProduct">the product in question</param>
 <returns>True if the current backend user has permission to edit the given product. False if he doesn't, or if no backend user is logged in</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.AddRelatedProduct(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Products.ProductRelatedGroup)">
 <summary>
 Adds a related product to this product and saves it to the database.
 </summary>
 <exception cref="T:System.ArgumentException">If this instance is not saved first.</exception>
 <exception cref="T:System.ArgumentException">If the related product is not saved first.</exception>
 <exception cref="T:System.ArgumentException">If the relation group is not saved first.</exception>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.DeleteOrphanedVariantCombinations(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Delete product's orphaned variant combinations.
 </summary>
 <param name="product">The product.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.ExtendedSave(Dynamicweb.Ecommerce.Products.Product,System.Boolean@)">
 <summary>
 Extended saving of this instance.
 </summary>
 <param name="forceSaveCustomFields">If set than product custom fields values will apply to all product versions</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.ExtendedSave(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
 <summary>
 Saves the given field values on the given destinations based on the fields FieldSettings 
 </summary>
 <param name="fieldValues">The values which should be saved</param>
 <param name="selectedLanguageIds">The languages to which the values should be saved (Only if the fields are language dependent)</param>
 <param name="productVariants">The products and variants to which the values should be saved (Only if the fields are variant dependent)</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.SetDefaultProductFields(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Initializes or reinitializes the ProductFieldValues property with all current ProductFields in the system and null values.
 This method is explicitly called by the constructor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.RemoveVariantGroup(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DelVariantGrpProdRelated()
   {
       Product product = new Product();
       product = (Product)Session["Ecom.Backend.Product"];

       string varGrpID = Context.Current.Request.QueryString["grpArr"];

       Dynamicweb.eCommerce.Variants.VariantGroup variantGrp = Dynamicweb.eCommerce.Variants.VariantGroup.Create(varGrpID);
       product.RemoveVariantGroup(variantGrp);

       Dynamicweb.eCommerce.Variants.VariantGroupProductRelation vgpr = new Dynamicweb.eCommerce.Variants.VariantGroupProductRelation();
       vgpr.Delete(product.ID, varGrpID);
 
       Dynamicweb.eCommerce.Variants.VariantCombination vopr = new Dynamicweb.eCommerce.Variants.VariantCombination();
       vopr.Delete(product.ID);

       product.VariantGroups = null;
       product.VariantCombinations = null;
   }
}
 </code>
 </example>
 <summary>
 Removes the variant group by object reference.
 </summary>
 <param name="variantGroup">The VariantGroup object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.RemoveVariantGroupLoop(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DeleteVariantGroupProductRelated()
   {
       Product product = (Product)Session["Ecom.Backend.Product"];

       string variantGroupID = Context.Current.Request.QueryString["grpArr"];

       Dynamicweb.eCommerce.Variants.VariantGroup variantGroup = Dynamicweb.eCommerce.Variants.VariantGroup.Create(variantGroupID);
       product.RemoveVariantGroupLoop(variantGroup);

       Dynamicweb.eCommerce.Variants.VariantGroupProductRelation variantGroupProductRelation = new Dynamicweb.eCommerce.Variants.VariantGroupProductRelation();
       variantGroupProductRelation.Delete(product.ID, variantGroupID);
 
       Dynamicweb.eCommerce.Variants.VariantCombination variantCombination = new Dynamicweb.eCommerce.Variants.VariantCombination();
       variantCombination.Delete(product.ID);

       product.VariantGroups = null;
       product.VariantCombinations = null;
   }
}
 </code>
 </example>
 <summary>
 Removes the variant group by ID, LanguageID, Label and Name.
 </summary>
 <param name="variantGroup">The VariantGroup object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.AddVariantGroup(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void AddVariantGrpProdRelated()
   {
       Product product = new Product();
       product = (Product)Session["Ecom.Backend.Product"];

       string varGrpID = Context.Current.Request.QueryString["grpArr"];
       bool addRelation = false;

       Dynamicweb.eCommerce.Variants.VariantGroup variantGrp = Dynamicweb.eCommerce.Variants.VariantGroup.Create(varGrpID);
       if (!product.VariantGroups.Contains(variantGrp, true))
       {
           addRelation = true;
           product.AddVariantGroup(variantGrp);
       }

       if (addRelation)
       {
           Dynamicweb.eCommerce.Variants.VariantGroupProductRelation vgpr = new Dynamicweb.eCommerce.Variants.VariantGroupProductRelation(product.ID, varGrpID);
           try
           {
               vgpr.ProductID = product.ID;
               vgpr.VariantGroupID = varGrpID;
               vgpr.Save(product.ID, varGrpID);
           }
           catch (Exception ex)
           {
               //Nothing
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Adds the variant group.
 </summary>
 <param name="variantGroup">The VariantGroup object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsByVariantGroup(Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(Dynamicweb.eCommerce.Variants.VariantGroup vgpr)
   {
       ProductCollection dwProds = Product.GetProductsByVariantGroup(vgrp);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="variantGroup">The VariantGroup object.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetPagedProductsByVariantGroup(Dynamicweb.Ecommerce.Variants.VariantGroup,System.Int32,System.Int32)">
 <summary>
 Gets the products portion limited by page size.
 </summary>
 <param name="variantGroup">The VariantGroup object.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.RemoveGroup(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Products.Group)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Product product;
   public string RemoveGroups(GroupCollection gc)
   {
       foreach(Group group in gc)
       {
           product.RemoveGroup(group);
       }
   }
}
 </code>
 </example>
 <summary>
 Removes the group from the products Groups collection. Also deletes the ProductGroupRelation from the database if group.ID exists.
 </summary>
 <param name="Group">The group.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetIdUrlEncoded(System.String)">
 <summary>
 Gets the ID URL encoded.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.Language(System.String)">
 <summary>
 Gets the product language. To change the language of this <see cref="T:Dynamicweb.Ecommerce.Products.Product" /> use the LanguageID property.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.IsActive(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Gets the value that indicates if the product is active or not and if the period of the product is active or not.
 </summary>
 <remarks>Checks if the product is active and if the period of product is active</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.IsVariantMaster(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Gets the value that indicates if the variant is a master.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetRelatedProducts(Dynamicweb.Ecommerce.Products.Product)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Product product;
    private Product productNew;
    private void SavePrices()
    {
         foreach (Dynamicweb.eCommerce.Products.ProductRelated pr in product.RelatedProducts)
         {
             pr.Save(productNew.ID, pr.ProdRelID);
         }
    }
}
 </code>
 </example>
 <summary>
 Gets the related products. 
 Related products are used to suggest a customer to buy complementary products to the products they want to buy, e.group. a shirt and a tie.
 Administrator can create relations in Management Center -> eCommerce settings -> Product catalog -> Related products.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetRelatedCountFrontend(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Gets the RelatedProducts counting.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetPropertyValue(Dynamicweb.Ecommerce.Products.Product,System.String)">
 <summary>
 Gets the property value.
 </summary>
 <param name="propertyName">Name of the property.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetSqlConditionPartForIDs(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public string DeleteAll(GroupCollection groups, bool run)
   {
       string grps = Group.WhereClauseBuilder(groups);
       System.Text.StringBuilder SQL = new System.Text.StringBuilder();

       //01) Delete group releations
       SQL.Append("DELETE FROM EcomGroupRelations WHERE GroupRelationsGroupID " + Product.GetSqlConditionPartForIDs(grps) + "; ");
       //02) Delete group to shop releations
       SQL.Append("DELETE FROM EcomShopGroupRelation WHERE ShopGroupGroupID " + Product.GetSqlConditionPartForIDs(grps) + "; ");
       //03) Delete the items (BOM) groups from products
       SQL.Append("DELETE FROM EcomProductItems WHERE ProductItemBomGroupID " + Product.GetSqlConditionPartForIDs(grps) + "; ");
       //04) Delete the groups
       SQL.Append("DELETE FROM EcomGroups WHERE GroupID " + Product.GetSqlConditionPartForIDs(grps) + "; ");

       if (run)
       {
           Database.ExecuteNonQuery(SQL.ToString());

           // Sending out notifications
           Dynamicweb.Extensibility.NotificationManager.Notify(Dynamicweb.Ecommerce.Notifications.eCommerce.Group.Deleted, new Dynamicweb.Ecommerce.Notifications.eCommerce.Group.GroupModifiedEventArgs(groups));
       }
       return SQL.ToString();
   }
}
 </code>
 </example>
 <summary>
 Gets the condition part of a SQL statement.
 </summary>
 <param name="idList">The ID or IDs. Multiple IDs must be separated by ', ' or ','.</param>
 <returns>The condition part of a SQL statement based on the given ID or IDs</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetSqlConditionPartForIDs(System.Collections.Generic.IEnumerable{System.String})">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public string DeleteAll(GroupCollection groups, bool run)
   {
       var grps = groups.Select(Function(g) g.Id);
       System.Text.StringBuilder SQL = new System.Text.StringBuilder();

       //01) Delete group releations
       SQL.Append("DELETE FROM EcomGroupRelations WHERE GroupRelationsGroupID " + Product.GetSqlConditionPartForIDs(grps) + "; ");
       //02) Delete group to shop releations
       SQL.Append("DELETE FROM EcomShopGroupRelation WHERE ShopGroupGroupID " + Product.GetSqlConditionPartForIDs(grps) + "; ");
       //03) Delete the items (BOM) groups from products
       SQL.Append("DELETE FROM EcomProductItems WHERE ProductItemBomGroupID " + Product.GetSqlConditionPartForIDs(grps) + "; ");
       //04) Delete the groups
       SQL.Append("DELETE FROM EcomGroups WHERE GroupID " + Product.GetSqlConditionPartForIDs(grps) + "; ");

       if (run)
       {
           Database.ExecuteNonQuery(SQL.ToString());

           // Sending out notifications
           Dynamicweb.Extensibility.NotificationManager.Notify(Dynamicweb.Ecommerce.Notifications.eCommerce.Group.Deleted, new Dynamicweb.Ecommerce.Notifications.eCommerce.Group.GroupModifiedEventArgs(groups));
       }
       return SQL.ToString();
   }
}
 </code>
 </example>
 <summary>
 Gets the condition part of a SQL statement.
 </summary>
 <param name="ids">The ID or IDs. Multiple IDs must be separated by ', ' or ','.</param>
 <returns>The condition part of a SQL statement based on the given ID or IDs</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetSqlConditionPartForIDs(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.Product})">
 <summary>
 Gets the condition part of a SQL statement.
 </summary>
 <param name="products">The products.</param>
 <returns>The condition part of a SQL statement based on the given products</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetAllProducts(System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getProducts()
   {
       ProductCollection dwProds = Product.getAllProducts();
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets all products.
 </summary>
 <param name="productLanguageId">The language ID to use.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetAllVariantProducts(System.Collections.Generic.IEnumerable{System.String},System.String)">
 <summary>
 Gets all variants for the given product collection.
 </summary>
 <param name="productIds"></param>
 <param name="productLanguageId">The language ID to use.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetActiveProducts(System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string productLanguageId)
   {
       ProductCollection dwProds = Product.GetActiveProducts(productLanguageId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the active products.
 </summary>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsByProductAndVariantId(Dynamicweb.Ecommerce.Products.Product,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Dynamicweb.eCommerce.Products.Product product;
   public void getActiveProducts(string variantId)
   {
       ProductCollection dwProds = Product.GetProductsByProductAndVariantID(product, variantId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="product">The product.</param>
 <param name="productVariantId">The variant ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.Save(Dynamicweb.Ecommerce.Products.Product)">
 <example>
 <code title="C#" description="" lang="CS">
class class MyPage : System.Web.UI.Page
{
   public void DoSave()
   {
       Product product = new Product();
       product.Save();
   }
}
 </code>
 </example>
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.Save(Dynamicweb.Ecommerce.Products.Product,System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Product targetProduct;
    private void SaveSelectedPhrase(string phrase)
    {
        string productID = Converter.ToString(Request.QueryString["ProductID"]);
        string productVariantID = Converter.ToString(Request.QueryString["ProductVariantID"]);
        targetProduct.OptimizedFor = phrase;
        targetProduct.Save(productID, productVariantID);
    }
}
 </code>
 </example>
 <summary>
 Saves this instance.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The product variant ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.Save(Dynamicweb.Ecommerce.Products.Product,System.String,System.String,System.String)">
 <summary>
 Saves this instance. See <see cref="M:Dynamicweb.Ecommerce.Products.Product.Save"></see> for example.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The product variant ID.</param>
 <param name="productLanguageId">The product language ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.SaveAndConfirm(Dynamicweb.Ecommerce.Products.Product,System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Product targetProduct;
    private void SaveSelectedPhrase(string phrase)
    {
        string productID = Converter.ToString(Request.QueryString["ProductID"]);
        string productVariantID = Converter.ToString(Request.QueryString["ProductVariantID"]);
        targetProduct.OptimizedFor = phrase;
        if(targetProduct.SaveAndConfirm(productID, productVariantID))
        {
            //TODO: insert your code here
        }
    }
}
 </code>
 </example>
 <summary>
 Saves this instance and confirms it.
 </summary>
 <param name="productId">DB field name is ProductID.</param>
 <param name="productVariantId">DB field name is ProductVariantID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.SaveAndConfirm(Dynamicweb.Ecommerce.Products.Product,System.String,System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Product targetProduct;
    private void SaveSelectedPhrase(string phrase)
    {
        string productID = Converter.ToString(Request.QueryString["ProductID"]);
        string productVariantID = Converter.ToString(Request.QueryString["ProductVariantID"]);
        targetProduct.OptimizedFor = phrase;
        if(targetProduct.SaveAndConfirm(productID, productVariantID, Context.LanguageID()))
        {
            //TODO: insert your code here
        }
    }
}
 </code>
 </example>
 <summary>
 Saves this instance and confirms it.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The product variant ID.</param>
 <param name="productLanguageId">The product language ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.Save(Dynamicweb.Ecommerce.Products.Product,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class class MyPage : System.Web.UI.Page
{
   public void DoSave()
   {
       Product product = new Product();
       product.Save(true);
   }
}
 </code>
 </example>
 <summary>
 Saves this instance.
 </summary>
 <param name="skipExtendedSave">If true; Extended Save of the Product is skipped. Default is false.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.Save(Dynamicweb.Ecommerce.Products.Product,System.String,System.String,System.Boolean)">
 <summary>
 Saves this instance.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The product variant ID.</param>
 <param name="skipExtendedSave">If true; Extended Save of the Product is skipped. Default is false.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.Save(Dynamicweb.Ecommerce.Products.Product,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Saves this instance.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The product variant ID.</param>
 <param name="productLanguageId">The product language ID.</param>
 <param name="skipExtendedSave">If true; Extended Save of the Product is skipped. Default is false.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.SaveAndConfirm(Dynamicweb.Ecommerce.Products.Product,System.String,System.String,System.Boolean)">
 <summary>
 Saves this instance and confirms it.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The product variant ID.</param>
 <param name="skipExtendedSave">If true; Extended Save of the Product is skipped. Default is false.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.SaveAndConfirm(Dynamicweb.Ecommerce.Products.Product,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Saves this instance and confirms it.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The product variant ID.</param>
 <param name="productLanguageId">The product language ID.</param>
 <param name="skipExtendedSave">If true; Extended Save of the Product is skipped. Default is false.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.UpdateUnitCount(Dynamicweb.Ecommerce.Products.Product,System.Int32)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Product product;
   public void StockForUnits(Product product)
   {
       if (Request["saveUnit"] == "1")
       {
           AddProdUnit(product);

           Dynamicweb.eCommerce.Variants.VariantOptionCollection units = Dynamicweb.eCommerce.Variants.VariantOption.getVariantOptions(product, 1);
           Product.UpdateUnitCount(product, units.Count);
       }
   }

   private void AddProdUnit(Product product)
   {
       string reqName = null;
       string reqValue = null;

       if (Converter.ToInt32(product.Type) == 0)
       {
           Dynamicweb.eCommerce.Stocks.StockUnit su = new Dynamicweb.eCommerce.Stocks.StockUnit();
           su.Delete(product.ID);

           foreach (string item in Request.Form)
           {
               reqName = item.ToString();
               reqValue = Request[item];

               if (reqName.IndexOf("PRODUNIT_ID") == 0)
               {
                   if (!string.IsNullOrEmpty(reqValue))
                   {
                       su.ProductID = product.ID;
                       su.VariantID = "";
                       su.UnitID = reqValue;
                       su.Save(product.ID, "", reqValue);
                   }
               }
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the unit counter.
 </summary>
 <param name="product">The product.</param>
 <param name="unitCount">The unit counter.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.Copy(Dynamicweb.Ecommerce.Products.Product,System.String,System.String)">
 <summary>
 Creates a new instance of a product, and applies a new product id and variant id to it.
 </summary>
 <param name="productToCopy">The product to copy</param>
 <param name="newProductId">The product id of the new instance. If this is null or empty, a new product id will be generated </param>
 <param name="newVariantId">The variant id of the new instance</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsBySql(System.String)">
 <summary>
 Gets the ProductCollection object.
 </summary>
 <param name="query">The SQL query.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsBySql(System.String,System.Boolean)">
 <summary>
 Gets the ProductCollection object.
 </summary>
 <param name="query">The SQL query.</param>
 <param name="doRefactoring">if set to <c>true</c> removes not used items.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsBySql(System.Boolean,System.String)">
 <summary>
 Gets the ProductCollection object.
 </summary>
 <param name="useAssortments">if set to <c>true</c> assortments are used to filter the product collection.</param>
 <param name="query">The SQL query.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsBySql(System.String,System.Boolean,System.Boolean)">
 <summary>
 Gets the products by SQL.
 </summary>
 <param name="query">The SQL.</param>
 <param name="doRefactoring">if set to <c>true</c> [do refactoring].</param>
 <param name="bulkFill">if set to <c>true</c> [bulk fill].</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductDataSet">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private bool FieldExists(string checkName)
   {
       DataSet dataSet = Product.GetProductDataSet();
       foreach (DataColumn dc in dataSet.Tables[0].Columns)
       {
           if (checkName == dc.ColumnName)
           {
               return true;
           }
       }
       return false;
   }
}
 </code>
 </example>
 <summary>
 Gets an empty DataSet that matches the database schema.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductDataSet(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private bool FieldExists(string checkName)
   {
       DataSet dataSet = Product.GetProductDataSet();
       foreach (DataColumn dc in dataSet.Tables[0].Columns)
       {
           if (checkName == dc.ColumnName)
           {
               return true;
           }
       }
       return false;
   }
}
 </code>
 </example>
 <summary>
 Gets a DataSet with the Products and Variants that match the given product ID.
 </summary>
 <param name="productId">The product ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.Fill(System.Data.IDataReader)">
 <example>
 <code title="C#" description="" lang="CS">
class class MyPage : System.Web.UI.Page
{
   private Product product;
   public void FillProperties()
   {
       string SQL = "SELECT * FROM EcomProducts";
       IDataReader reader = Dynamicweb.Data.Database.CreateDataReader(SQL);

       if (reader.Read())
       {
           product.Fill(reader);
       }

       reader.Close();
       reader.Dispose();
   }
}
 </code>
 </example>
 <summary>
 Fills the properties from DataReader.
 </summary>
 <param name="dataReader">DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.Fill(Dynamicweb.Ecommerce.Products.Product@,System.Data.IDataReader)">
 <example>
 <code title="C#" description="" lang="CS">
class class MyPage : System.Web.UI.Page
{
   private Product product;
   public void FillProperties()
   {
       string SQL = "SELECT * FROM EcomProducts";
       IDataReader reader = Dynamicweb.Data.Database.CreateDataReader(SQL);

       if (reader.Read())
       {
           product.Fill(reader);
       }

       reader.Close();
       reader.Dispose();
   }
}
 </code>
 </example>
 <summary>
 Fills the properties from DataReader.
 </summary>
 <param name="dataReader">DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductsByProductAndVariantId(Dynamicweb.Ecommerce.Products.Product,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Dynamicweb.eCommerce.Products.Product product;
   public void getActiveProducts(string variantId)
   {
       ProductCollection dwProds = Product.GetProductsByProductAndVariantID(product, variantId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="product">The product.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductById(System.String,System.String,System.Boolean)">
 <summary>
 Gets the product by ID.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="useDefaultLanguage">if set to <c>true</c> [use default language].</param><returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetAllProductVersions(System.String,System.String,System.String)">
 <summary>
 Gets all versions for the product.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="productLanguageId">The language ID.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Content.Versioning.VersionData"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetAllProductVersions(System.String)">
 <summary>
 Gets all versions for the product include versions for any variants and any versions.
 </summary>
 <param name="productId">The product ID.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Content.Versioning.VersionData"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetVersionProduct(Dynamicweb.Content.Versioning.VersionData)">
 <summary>
 Gets product which stored in versionData.
 </summary>
 <param name="version">The version.</param>
 <returns>The draft product.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.GetProductIdsByGroupId(System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean)">
 <summary>
 Gets the products.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="useOrderBy">if set to <c>true</c> the returned collection of product is sorted by the user defined sort order. If set to <c>false</c> the products are returned unsorted.</param>
 <param name="includeVariants">if set to <c>true</c> gets all variants.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="doRefactoring">if set to <c>true</c> remove unused products.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter collection.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductService.CleanUpProductVersions">
 <summary>
 Cleans product versions based on globalsettings
 </summary>
 <remarks>The settings:
 "/Globalsettings/Settings/Ecom/PIM/EnableVersionCleanup" indicates whether the clean-up logic will be executed
 "/Globalsettings/Settings/Ecom/PIM/VersionRetention" indicates how old should be version to be deleted in days
 "/Globalsettings/Settings/Ecom/PIM/VersionKeepAmount" indicates how many versions should be left no matter what
 </remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductBackInStockNotificationState">
 <summary>
 The enum ProductBackInStockNotificationState represents <seealso cref="T:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification"/> states enumeration.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductMetaData">
 <summary>
 Represents information about meta data.
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\ProductMetaDataEditPageSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductMetaData.Title">
 <summary>
 Gets or sets the title.
 </summary>
 <value>The title.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductMetaData.Keywords">
 <summary>
 Gets or sets the keywords.
 </summary>
 <value>Keywords.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductMetaData.Description">
 <summary>
 Gets or sets the description.
 </summary>
 <value>Description.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductMetaData.Url">
 <summary>
 Gets or sets the URL.
 </summary>
 <value>URL.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductMetaData.Canonical">
 <example>
 For example see <see cref="T:Dynamicweb.Ecommerce.Products.ProductMetaData"/>
 </example>
 <summary>
 Gets or sets the Canonical.
 </summary>
 <value>Canonical.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductOrderStockOperator">
 <summary>
 1 - Negative, 0 - Positive.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductOrderStockOperator.Negative">
 <summary>
 Negative
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductOrderStockOperator.Positive">
 <summary>
 Positive
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductRepository.ProductCountForBackendTree">
 <summary>
 Counting  products total for current language, without variants
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetProductCategoriesLanguageControl(System.Collections.Generic.Dictionary{System.String,Dynamicweb.Ecommerce.Products.Categories.FieldValueCollection})">
 <summary>
 Read global settings for categories language and variant differentiation
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.ExtendedSave(Dynamicweb.Ecommerce.Products.Product,System.Boolean@)">
 <summary>
 Extended saving of this instance.
 </summary>
 <param name="forceSaveCustomFields">If set than product custom fields values will apply to all product versions</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.ExecuteSaveSql(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Products.UpdateType,System.Boolean)">
 <summary>
 Extended saving saves data into the other versions of the same product (languages, variants) based on the eCom settings for this.
 </summary>
 <param name="updateType">Update type.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.ExecuteSaveSql(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
 <summary>
 This method save the given values in the specified destinations.
 </summary>
 <param name="fieldValues">The field values which will be saved to the destinations</param>
 <param name="selectedLanguageIds">The languages to which the values should be saved</param>
 <param name="productVariants">The products and variants to which the values should be saved</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.ExecuteSql(Dynamicweb.Data.CommandBuilder,Dynamicweb.Data.CommandBuilder,Dynamicweb.Data.CommandBuilder)">
 <summary>
 Executes the given commands in the three commandbuilders in the same connection
 </summary>
 <param name="languageDependent">The commandBuilder of updating language dependent fields</param>
 <param name="variantDependent">The commandBuilder of updating variant dependent fields</param>
 <param name="NoDependent">The commandBuilder of updating fields with no dependencies</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.BuildUpdate(Dynamicweb.Data.CommandBuilder,System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 Builds the update statement based on the values given
 </summary>
 <param name="builder">The commandbuilder which the Update statement should be appended on</param>
 <param name="values">The values which should be set in the Update statement</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetFieldSystemName(Dynamicweb.Ecommerce.Products.ProductDataBaseField)">
 <summary>
 Gets the system name of the field
 </summary>
 <param name="datebaseField">The field which we want to system name of</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.ConvertValue(Dynamicweb.Ecommerce.Products.ProductField,System.Object)">
 <summary>
 Converts the value from a product field depending on the fields FieldType
 </summary>
 <param name="productField">The product field</param>
 <param name="productFieldValue">The value from the field</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetFieldValue(System.String,Dynamicweb.Ecommerce.Products.Product,System.Boolean)">
 <summary>
 Gets the value for a specific field
 </summary>
 <param name="fieldSystemName">The system name of the field</param>
 <param name="product">The product from which we want to get the value</param>
 <param name="isCustomField">A boolean indication if the field we are fetching the value from, is a Custom Field</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.Delete(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoDelete(string ProductID)
   {
       //TODO: insert your code here
   
       Product.Delete(ProductID);       
   }
}
 </code>
 </example>
 <summary>
 Deletes the specified product.
 </summary>
 <param name="productId">DB field name is ProductID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.DeleteVariantsAndRelations(System.String,System.String,System.String)">
 <summary>
 If languageId is different from Nothing, it will only delete the variant, and it's relations in the specified language. However if languageId is Nothing, it will delete the variant and relations in all languages layers.
 </summary>
 <param name="productId">The id of the product that should be deleted</param>
 <param name="productVariantId">The id of the variant that should be deleted</param>
 <param name="languageId">The id of the language where the variant should be deleted. This can be Nothing. </param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.DeleteLanguageSpecificProduct(System.String,System.String,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoDelete(string ProductID, string VariantID, string productLanguageId)
   {
       //TODO: insert your code here
 
       Product.DeleteLanguageSpecificProduct(ProductID, VariantID, productLanguageId);       
   }
}
 </code>
 </example>
 <summary>
 Deletes the variant.
 </summary>
 <param name="productId">DB field name is ProductID.</param>
 <param name="productVariantId">DB field name is ProductVariantID.</param>
 <param name="productLanguageId">DB field name is ProductLanguageID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.Delete(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.Product})">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Dynamicweb.eCommerce.Products.Product product;
   public void DoDelete(string SQL)
   {
       //TODO: insert your code here
 
       var products = new List(Of Product)();
       products.Load(SQL);
       product.Delete(products);       
   }
}
 </code>
 </example>
 <summary>
 Deletes the specified products.
 </summary>
 <param name="products">The products.</param>
 <returns>The SQL query.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetProductsIds(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.Product})">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public string Delete(ProductCollection products, bool run)
   {
       string SQL = "DELETE FROM EcomDetails WHERE DetailProductID " + Product.GetSqlConditionPartForIDs(Product.GetProductIds(products)) + "; ";
       if (run)
       {
           Database.ExecuteNonQuery(SQL);
       }
       return SQL;
   }
}
 </code>
 </example>
 <summary>
 Returns list of IDs.
 </summary>
 <param name="products">The products.</param>
 <exception cref="T:System.ArgumentNullException">If given <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection" /> is null.</exception>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetProductsByGroupId(System.String,System.Boolean,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string groupID)
   {
       var dwProds = Product.GetProductsByGroupID(groupID, true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the product collection based on Group ID.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="onlyActive">if set to <c>true</c> removes not active items from collection.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter the collection.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetProductsByGroupId(System.String,System.Int32,System.Boolean,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string groupID, int top)
   {
       var dwProds = Product.GetProductsByGroupID(groupID, top, true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products. Context.LanguageID is used.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="Top">If not 0 then select only top from selected items.</param>
 <param name="doRefactoring">if set to <c>true</c> removes not used items.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are use to filter the collection.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetProductsByGroupId(System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getOrderProducts(string groupID, string productLanguageId, bool doRefactoring)
   {
       var dwProds = Product.GetProductsByGroupID(groupID, true, true, productLanguageId, doRefactoring);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="useOrderBy">if set to <c>true</c> the returned collection of product is sorted by the user defined sort order. If set to <c>false</c> the products are returned unsorted.</param>
 <param name="includeVariants">if set to <c>true</c> gets all variants.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="doRefactoring">if set to <c>true</c> remove unused products.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter collection.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetProductIdsByGroupId(System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean)">
 <summary>
 Gets the product ids for the current group.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="useOrderBy">if set to <c>true</c> the returned collection of product is sorted by the user defined sort order. If set to <c>false</c> the products are returned unsorted.</param>
 <param name="includeVariants">if set to <c>true</c> gets all variants.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="doRefactoring">if set to <c>true</c> remove unused products.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter collection.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetProductsByGroupIdAndSearchValue(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(string groupID)
   {
       string searchKeyWord = Context.Current.Request["searchField"];
       var dwProds = Product.GetProductsByGroupIDAndSearchValue(groupID, "100", searchKeyWord, "", true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="topValue">The top value, i.e. the number of products to get.</param>
 <param name="searchValue">The search value.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="isFrontend">if set to <c>true</c> removes not used items.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter collection.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetProductsByVariantGroup(Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(Dynamicweb.eCommerce.Variants.VariantGroup vgpr)
   {
       ProductCollection dwProds = Product.GetProductsByVariantGroup(vgrp);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="variantGroup">The VariantGroup object.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetPagedProductsByVariantGroup(Dynamicweb.Ecommerce.Variants.VariantGroup,System.Int32,System.Int32)">
 <summary>
 Gets the products portion limited by page size.
 </summary>
 <param name="variantGroup">The VariantGroup object.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetProductsByProductAndVariantId(Dynamicweb.Ecommerce.Products.Product,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Dynamicweb.eCommerce.Products.Product product;
   public void getActiveProducts(string variantId)
   {
       ProductCollection dwProds = Product.GetProductsByProductAndVariantID(product, variantId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="product">The product.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetAllProducts(System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getProducts()
   {
       ProductCollection dwProds = Product.getAllProducts();
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets all products.
 </summary>
 <param name="productLanguageId">The language ID to use.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.CurrentBackendUserCanEdit(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Checks if the current backend user has permission to edit a given product. 
 </summary>
 <param name="theProduct">the product in question</param>
 <returns>True if the current backend user has permission to edit the given product. False if he doesn't, or if no backend user is logged in</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetGroupIdentities(System.Int32[])">
 <summary>
 Gets the list containing an ID of all groups (according to their hierarchy) that are inaccessible for the specified user (group) identities.
 </summary>
 <param name="ids">A list of user (group) IDs to check access for.</param>
 <returns>A list of IDs.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetDisallowedProductsIdsSql(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Gets an SQL statement which selects all product IDs that are not accessible for the specified users or groups.
 </summary>
 <param name="checkPermissionsFor">Indicates what permissions to search for. Can be either "group" or "shop".</param>
 <param name="checkUserIds">A list of user IDs to check permissions for.</param>
 <param name="checkGroupIds">A list of group IDs to check permissions for.</param>
 <returns>Compiled SQL statement.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.CollectChildGroupIDs(Dynamicweb.Ecommerce.Products.GroupCollection,System.Collections.Generic.List{System.String})">
 <summary>
 Recursively adds child group IDs to the specified list of IDs.
 </summary>
 <param name="groups">Groups whose child groups to examine.</param>
 <param name="appendTo">List where to add new IDs.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetAllProductsWithoutVariants(System.Boolean,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getProducts(string productLanguageId)
   {
       ProductCollection dwProds = Product.GetAllProductsWithoutVariants(true, productLanguageId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets all products without variants.
 </summary>
 <param name="doRefactoring">if set to <c>true</c>; - do refactoring the product collection.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetAllVariantProducts(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.Product},System.String)">
 <summary>
 Gets all variants for the given product collection.
 </summary>
 <param name="products"></param>
 <param name="productLanguageId">The language ID to use.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetAllVariantProducts(System.Collections.Generic.IEnumerable{System.String},System.String)">
 <summary>
 Gets all variants for the given product collection.
 </summary>
 <param name="productIds"></param>
 <param name="productLanguageId">The language ID to use.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetActiveProducts(System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string productLanguageId)
   {
       ProductCollection dwProds = Product.GetActiveProducts(productLanguageId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the active products.
 </summary>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetByShopId(System.String,System.String,System.Boolean)">
 <summary>
 Gets all products from shop. If productLanguageId is Null Or Empty it means that no language filter is applied meaning all language version of all products in the shop are returned.
 </summary>
 <param name="shopId">DB field name is ShopGroupShopID.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetProductsByGroup(Dynamicweb.Ecommerce.Products.Group,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DeleteProducts(GroupCollection groups)
   {
       if (groups.Count > 0)
       {
           //Delete products from groups
           var productIds = Product.GetProductsByGroup(groups);
           Dynamicweb.eCommerce.Products.ProductDeleting.Run(productIds, groups);
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products from group.
 </summary>
 <param name="group">The group.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetProductsByGroups(Dynamicweb.Ecommerce.Products.GroupCollection,System.String,System.Boolean,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DeleteProducts(GroupCollection groups)
   {
       if (groups.Count > 0)
       {
           //Delete products from groups
           var productIds = Product.GetProductsByGroups(groups, false);
           Dynamicweb.eCommerce.Products.ProductDeleting.Run(productIds, groups);
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products from groups.
 </summary>
 <param name="groups">The groups.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="isFrontEnd">if set to <c>true</c> removes not used items.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetProductById(System.String,System.String,System.String,System.Boolean)">
 <summary>
 Gets the product by ID.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="productLanguageId">The language ID.</param><returns></returns>
 <param name="useAssortments">If set to <c>true</c> use assortments.</param>
 <remarks>When specified product with variant id and language not equal <c>Common.Context.LanguageID</c> not found returns product with variant id from <c>Common.Context.LanguageID</c></remarks> 
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetProductSql(System.String,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Gets query to select the product/product variants by ID.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetProductByNumber(System.String,System.String)">
 <summary>
 Gets the product by number.
 </summary>
 <param name="productNumber">Product number.</param>
 <param name="productLanguageId">The language ID.</param>
 <returns>Product with the given number or null (Nothing in Visual Basic) if product with the given number cannot be found.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetProductDataSet(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private bool FieldExists(string checkName)
   {
       DataSet dataSet = Product.GetProductDataSet();
       foreach (DataColumn dc in dataSet.Tables[0].Columns)
       {
           if (checkName == dc.ColumnName)
           {
               return true;
           }
       }
       return false;
   }
}
 </code>
 </example>
 <summary>
 Gets a DataSet with the Products and Variants that match the given product ID.
 </summary>
 <param name="productId">The product ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetProductStock(System.String,System.String,System.String)">
 <summary>
 Gets the product stock count.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="productLanguageId">The language ID.</param>
 <returns>The value of product's stock field from DB.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.MakeFullCopyToGroupWithLanguage(System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
 Makes a clone of the product and all its relations for specified languages and saves it in the DB.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="groupId">The group ID.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="newProductId">The new Product ID.</param>
 <returns>The new Product ID.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.MakeFullCopyToGroup_MakeSQLWithoutKeyField(System.String,System.String,System.String,System.String,System.String,System.String,System.Data.IDbConnection)">
 <summary>
 Makes the full copy to group make SQL for tables without string key field
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.MakeFullCopyToGroup_MakeSQL(System.String,System.String,System.String,System.String,System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 Makes a clone of the product and all its relations (except group relations) and saves it in the DB.
 </summary>
 <param name="tableName">Name of the table.</param>
 <param name="productIdName">Name of the product id.</param>
 <param name="productId">The product ID.</param>
 <param name="newProductId">The new product ID.</param>
 <param name="connection">The SQL connection.</param>
 <param name="parameters">The parameters.</param>
 <returns>The SQL query.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.UpdateDoublePrice(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Products.UpdateType)">
 <summary>
 Updates the double price.
 </summary>
 <param name="updateType">Update type.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.UpdatePriceCount(Dynamicweb.Ecommerce.Products.Product,System.Int32)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void StockForUnits(Product product)
   {
       if (Request["saveUnit"] == "1")
       {
           Dynamicweb.eCommerce.Prices.PriceCollection price = Dynamicweb.eCommerce.Prices.Price.getPrices(product.ID);
           Product.UpdatePriceCount(product, price.Count);
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the price counter.
 </summary>
 <param name="product">The product.</param>
 <param name="priceCount">The price counter.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.UpdateUnitCount(Dynamicweb.Ecommerce.Products.Product,System.Int32)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Product product;
   public void StockForUnits(Product product)
   {
       if (Request["saveUnit"] == "1")
       {
           AddProdUnit(product);

           Dynamicweb.eCommerce.Variants.VariantOptionCollection units = Dynamicweb.eCommerce.Variants.VariantOption.getVariantOptions(product, 1);
           Product.UpdateUnitCount(product, units.Count);
       }
   }

   private void AddProdUnit(Product product)
   {
       string reqName = null;
       string reqValue = null;

       if (Converter.ToInt32(product.Type) == 0)
       {
           Dynamicweb.eCommerce.Stocks.StockUnit su = new Dynamicweb.eCommerce.Stocks.StockUnit();
           su.Delete(product.ID);

           foreach (string item in Request.Form)
           {
               reqName = item.ToString();
               reqValue = Request[item];

               if (reqName.IndexOf("PRODUNIT_ID") == 0)
               {
                   if (!string.IsNullOrEmpty(reqValue))
                   {
                       su.ProductID = product.ID;
                       su.VariantID = "";
                       su.UnitID = reqValue;
                       su.Save(product.ID, "", reqValue);
                   }
               }
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the unit counter.
 </summary>
 <param name="product">The product.</param>
 <param name="unitCount">The unit counter.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.UpdateVariantCount(Dynamicweb.Ecommerce.Products.Product,System.Int32)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void VariantOptions(Product product)
   {
       string overwriteDefaultVarCombo = string.Empty;
       if (Request["saveVariant"] == "1")
       {
           Dynamicweb.eCommerce.Variants.VariantCombinationCollection variantCombinationCollection = Dynamicweb.eCommerce.Variants.VariantCombination.getProductCombinations(product);
           Product.UpdateVariantCount(product, variantCombinationCollection.Count);
       }
       if (Request["saveDefaultVariant"] == "1")
       {
           if (!string.IsNullOrEmpty(Converter.ToString(Dynamicweb.Context.Current.Request("DefaultVariantComboID"))))
           {
               overwriteDefaultVarCombo = Converter.ToString(Dynamicweb.Context.Current.Request("DefaultVariantComboID"));
           }
           Product.UpdateDefaultVariantID(product, overwriteDefaultVarCombo);
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the variant counter.
 </summary>
 <param name="product">The product.</param>
 <param name="variantCount">The variant counter.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.DeleteOrphanedVariantCombinations(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Delete product's orphaned variant combinations.
 </summary>
 <param name="product">The product.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.UpdateDefaultVariantId(Dynamicweb.Ecommerce.Products.Product,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void VariantOptions(Product product)
   {
       string overwriteDefaultVarCombo = string.Empty;
       if (Request["saveVariant"] == "1")
       {
           Dynamicweb.eCommerce.Variants.VariantCombinationCollection variantCombinationCollection = Dynamicweb.eCommerce.Variants.VariantCombination.getProductCombinations(product);
           Product.UpdateVariantCnt(product, variantCombinationCollection.Count);
       }
       if (Request["saveDefaultVariant"] == "1")
       {
           if (!string.IsNullOrEmpty(Converter.ToString(Dynamicweb.Context.Current.Request("DefaultVariantComboID"))))
           {
               overwriteDefaultVarCombo = Converter.ToString(Dynamicweb.Context.Current.Request("DefaultVariantComboID"));
           }
           Product.UpdateDefaultVariantID(product, overwriteDefaultVarCombo);
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the default variant ID.
 </summary>
 <param name="product">The product.</param>
 <param name="variantComboId">The variant combo ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetSqlConditionPartForIDs(System.Collections.Generic.IEnumerable{System.String})">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public string DeleteAll(GroupCollection groups, bool run)
   {
       string grps = Group.WhereClauseBuilder(groups);
       System.Text.StringBuilder SQL = new System.Text.StringBuilder();

       //01) Delete group releations
       SQL.Append("DELETE FROM EcomGroupRelations WHERE GroupRelationsGroupID " + Product.GetSqlConditionPartForIDs(grps) + "; ");
       //02) Delete group to shop releations
       SQL.Append("DELETE FROM EcomShopGroupRelation WHERE ShopGroupGroupID " + Product.GetSqlConditionPartForIDs(grps) + "; ");
       //03) Delete the items (BOM) groups from products
       SQL.Append("DELETE FROM EcomProductItems WHERE ProductItemBomGroupID " + Product.GetSqlConditionPartForIDs(grps) + "; ");
       //04) Delete the groups
       SQL.Append("DELETE FROM EcomGroups WHERE GroupID " + Product.GetSqlConditionPartForIDs(grps) + "; ");

       if (run)
       {
           Database.ExecuteNonQuery(SQL.ToString());

           // Sending out notifications
           Dynamicweb.Extensibility.NotificationManager.Notify(Dynamicweb.Ecommerce.Notifications.eCommerce.Group.Deleted, new Dynamicweb.Ecommerce.Notifications.eCommerce.Group.GroupModifiedEventArgs(groups));
       }
       return SQL.ToString();
   }
}
 </code>
 </example>
 <summary>
 Gets the condition part of a SQL statement.
 </summary>
 <param name="ids">The ID or IDs. Multiple IDs must be separated by ', ' or ','.</param>
 <returns>The condition part of a SQL statement based on the given ID or IDs</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetCategories(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Get the Dynamicweb.eCommerce.Products.Categories.Category objects for each of the Dynamicweb.eCommerce.Products.Group this belongs
 </summary>
 <returns>Dynamicweb.eCommerce.Products.Categories.List(Of Category)</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetUserIdentities">
 <summary>
 Gets the list containing an ID of the current user as well as IDs of all its parent groups (as presented in the group hierarchy).
 </summary>
 <returns>A list of IDs.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.GetBySql(System.String,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
 Gets the products by SQL.
 </summary>
 <param name="query">The SQL.</param>
 <param name="doRefactoring">if set to <c>true</c> [do refactoring].</param>
 <param name="bulkFill">if set to <c>true</c> [bulk fill].</param>
 <param name="useAssortments">if set to <c>true</c> [use assortments].</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.LoadPrices(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.Product})">
 <summary>
 Loads the prices.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.LoadStockUnits(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.Product})">
 <summary>
 Loads the stock units.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRepository.LoadProductItems(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.Product})">
 <summary>
 Loads the product items.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductVersionService.CleanUpProductVersions(System.Int32,System.Int32)">
 <summary>
 Cleans product versions based on globalsettings
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductWorkflowStateChangedSubscriber">
 <summary>
 The class ProductWorkflowStateChangedSubscriber represents product workflow state changed event subscriber.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductWorkflowStateChangedSubscriber.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Notifies when the notification in triggered.
 </summary>
 <param name="notification">The notification.</param>
 <param name="arguments">The <seealso cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.ProductWorkflowStateChangedArgs">arguments</seealso></param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.SortDirection">
 <summary>
 Sorting direction.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.SortDirection.Ascending">
 <summary>
 Ascending
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.SortDirection.Descending">
 <summary>
 Descending
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.NamespaceDoc">
 <summary>
 The Dynamicweb.Ecommerce.Products namespace contains all the classes and logic used for managing the data in the product catalog, inluding products, variants, fields, groups and more.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Detail">
 <summary>
 Represents product details objects
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\ProductDetailRendererSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Detail.Id">
 <summary>
 Gets or sets id of product detail.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Detail.ProductId">
 <summary>
 Gets or sets id of product, details of this product are stored in current object.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Detail.VariantId">
 <summary>
 Gets or sets current product variant ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Detail.LanguageId">
 <summary>
 Gets or sets current product language ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Detail.Type">
 <summary>
 Gets or sets detail type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Detail.Value">
 <summary>
 Gets or sets detail value.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Detail.SortOrder">
 <summary>
 Gets or sets detail sort order.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Detail.#ctor(System.String)">
 <summary>
 Creates Detail object using income DetailID
 </summary>
 <param name="detailId">ID of Detail row</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Detail.#ctor(System.String,System.String,System.String)">
 <summary>
 Creates Detail object using detail ID, related product ID and variant ID
 </summary>
 <param name="detailId">ID of Detail row</param>
 <param name="detailProductId">Related product ID</param>
 <param name="detailVariantId">Product variant ID</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Detail.#ctor(System.Data.IDataReader)">
 <summary>
 Creates Detail object using income data reader
 </summary>
 <param name="dataReader">Data reader with Detail loaded</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Detail.#ctor">
 <summary>
 Default empty constructor
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Detail.Fill(System.Data.IDataReader)">
 <summary>
 Fill Details properties using fields of income DataReader
 </summary>
 <param name="dataReader">Data reader with Detail loaded</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Detail.Save(System.String,Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Save details for provided product
 </summary>
 <param name="detailId">Detail row ID</param>
 <param name="prod">Product object</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Detail.Save(System.String,System.String,System.String)">
 <summary>
 Save details for provided product and variant
 </summary>
 <param name="detailId">Detail row ID</param>
 <param name="detailProductId">Product ID</param>
 <param name="detailVariantId">Product variant ID</param>
 <remarks>If there is no existing detail row for detailId, procedure creates the new one</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Detail.Delete">
 <summary>
 Delete current Detail object
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Detail.Delete(System.String)">
 <summary>
 Delete Detail object by row ID
 </summary>
 <param name="detailId">ID of Detail object to delete</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Detail.Delete(System.String,System.String,System.String,System.String)">
 <summary>
 Delete Detail object by row ID, language ID, product ID and optional product variant ID
 </summary>
 <param name="detailId">ID of Detail object to delete</param>
 <param name="detailLanguageId">Product language ID</param>
 <param name="detailProductId">Product ID</param>
 <param name="detailVariantId">Product variant ID (optional)</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Detail.Delete(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Delete all Detail object from collection
 </summary>
 <param name="products">Collection of Detail objects to delete</param>
 <returns>query statement used for delete</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Detail.Delete(Dynamicweb.Ecommerce.Products.ProductCollection,System.Boolean)">
 <summary>
 Prepare delete query statement for collection of products and optionally execute it
 </summary>
 <param name="products">Products collection to delete</param>
 <param name="run">Execute prepared query statement or not</param>
 <returns>query statement used for delete</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Detail.GetDetails">
 <summary>
 Select all product details
 </summary>
 <returns>Collection of Detail objects for all products in database</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Detail.GetDetails(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Select details for a product
 </summary>
 <param name="prod">Product to select details for</param>
 <returns>Collection of Detail objects for income product</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Detail.GetDetails(Dynamicweb.Ecommerce.Products.Product,System.String)">
 <summary>
 Selected details of some type for income product
 </summary>
 <param name="prod">Product to select details for</param>
 <param name="detailType">Details type, use an empty string to select all details</param>
 <returns>Collection of Detail objects</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Detail.GetDetails(System.String,System.String,System.String,System.String)">
 <summary>
 Selected details of some type for income product
 </summary>
 <param name="detailLanguageId">Product language ID</param>
 <param name="detailProductId">Product ID</param>
 <param name="detailVariantId">Product variant ID (optional)</param>
 <param name="detailType">Details type, use an empty string to select all details</param>
 <returns>Collection of Detail objects</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.FieldOption">
 <summary>
 Represents a single field option.
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\ProductFieldOptionHandlerSample.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.FieldOption.FieldOptionCache">
 <summary>
 Provides cache capabilities for field options.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.FieldOption.FieldOptionCache.CacheKey">
 <summary>
 Gets the key by which to locate cached options.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.FieldOption.FieldOptionCache.AllOptions">
 <summary>
 Gets the list of all field options mapped to their IDs.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.FieldOptionCache.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.FieldOptionCache.Purge">
 <summary>
 Clears the cache.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.FieldOptionCache.GetOptionById(System.String)">
 <summary>
 Retrieves an option from the cache by its ID.
 </summary>
 <param name="optionId">An ID of the option.</param>
 <returns>Cached option or null (Nothing in Visual Basic) if the specified option can not be found in the cache.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.FieldOptionCache.GetOptionsByFieldId(System.String)">
 <summary>
 Retrieves a collection of options that matches specified field ID.
 </summary>
 <param name="fieldId">An ID of the field.</param>
 <returns>A collection of options that matches specified field ID.</returns>
 <remarks>The resulting collection is sorted ascending by the sort number.</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.FieldOption.Id">
 <summary>
 Gets or sets option ID.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.FieldOption.FieldId">
 <summary>
 Gets or sets and ID of the related field.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.FieldOption.Name">
 <summary>
 Gets or sets option name.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.FieldOption.Value">
 <summary>
 Gets or sets the value associated with this option.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.FieldOption.IsDefault">
 <summary>
 Gets or sets value indicating whether this option is selected by default.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.FieldOption.Sort">
 <summary>
 Gets or sets the sort number.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.FieldOption.InternalCache">
 <summary>
 Gets the cache object which holds all field options.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.#ctor">
 <summary>
 Initializes a new instance of <see cref="T:Dynamicweb.Ecommerce.Products.FieldOption"/>.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.#ctor(System.String)">
 <summary>
 Initializes a new instance of <see cref="T:Dynamicweb.Ecommerce.Products.FieldOption"/>.
 </summary>
 <param name="optionId">An ID of the option.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.#ctor(Dynamicweb.Ecommerce.Products.FieldOption)">
 <summary>
 Initializes a new instance of <see cref="T:Dynamicweb.Ecommerce.Products.FieldOption"/>.
 </summary>
 <param name="[option]">Option to copy property values from.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of <see cref="T:Dynamicweb.Ecommerce.Products.FieldOption"/>.
 </summary>
 <param name="reader">An instance of <see cref="T:System.Data.IDataReader">System.Data.IDataReader</see> object to retrieve data from.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.Copy">
 <summary>
 Retrieves shallow copy of the current object.
 </summary>
 <returns>Shallow copy of the current object.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.Save">
 <summary>
 Saves an option.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.Delete">
 <summary>
 Deletes an option.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.CopyFrom(Dynamicweb.Ecommerce.Products.FieldOption)">
 <summary>
 Copies property values from the given object to the current one.
 </summary>
 <param name="[option]">Field option to perform copying from.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.Fill(System.Data.IDataReader)">
 <summary>
 Fills object properties with the data from the specified <see cref="T:System.Data.IDataReader">System.Data.IDataReader</see> object.
 </summary>
 <param name="reader">An instance of <see cref="T:System.Data.IDataReader">System.Data.IDataReader</see> object to read data from.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.FillRow(System.Data.DataRow)">
 <summary>
 Fill specified <see cref="T:System.Data.DataRow">System.Data.DataRow</see> object with property values of the current object.
 </summary>
 <param name="row">An instance of <see cref="T:System.Data.DataRow">System.Data.DataRow</see> object to persist data onto.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.Save(System.String)">
 <summary>
 Saves property values of the current object under the options with the specified ID.
 </summary>
 <param name="optionId">An ID of the option.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.Delete(System.String)">
 <summary>
 Deletes specified option.
 </summary>
 <param name="optionId">An ID of the option to delete.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.DeleteAll(System.String)">
 <summary>
 Deletes all options that belongs to specified field.
 </summary>
 <param name="fieldId">An ID of either a product field or a product group field.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.GetOptionById(System.String)">
 <summary>
 Retrieves an option from by its ID.
 </summary>
 <param name="optionId">An ID of the option.</param>
 <returns>Option instance or null (Nothing in Visual Basic) if the specified option can not be found.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.GetOptionsByFieldId(System.String)">
 <summary>
 Retrieves a collection of options that matches specified field ID.
 </summary>
 <param name="fieldId">An ID of the field.</param>
 <returns>A collection of options that matches specified field ID.</returns>
 <remarks>The resulting collection is sorted ascending by the sort number.</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.MinimumSort(System.String)">
 <summary>
 Retrieves the minimum sort number for options that matches specified field ID.
 </summary>
 <param name="fieldId">An ID of the field.</param>
 <returns>The minimum sort number for options that matches specified field ID.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOption.MaximumSort(System.String)">
 <summary>
 Retrieves the maximum sort number for options that matches specified field ID.
 </summary>
 <param name="fieldId">An ID of the field.</param>
 <returns>The maximum sort number for options that matches specified field ID.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.FieldOptionCollection">
 <summary>
 Represents a collection of field options.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.FieldOptionCollection.Locked">
 <summary>
 Gets or sets value indicating whether collection is locked.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionCollection.#ctor">
 <summary>
 Initializes new instance of an object.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.FieldOption})">
 <summary>
 Initializes new instance of an object.
 </summary>
 <param name="items">Items to be initially added into collection.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionCollection.Add(Dynamicweb.Ecommerce.Products.FieldOption)">
 <summary>
 Adds a field option to this collection.
 </summary>
 <param name="item">The field option.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionCollection.AddRange(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.FieldOption})">
 <summary>
 Adds a field options to this collection.
 </summary>
 <param name="collection">The field options.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionCollection.Clear">
 <summary>
 Clears this collection.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionCollection.Insert(System.Int32,Dynamicweb.Ecommerce.Products.FieldOption)">
 <summary>
 Inserts a field option to this collection with specified index.
 </summary>
 <param name="index">The index.</param>
 <param name="item">The field option.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.FieldOption})">
 <summary>
 Inserts a field options to this collection with specified index.
 </summary>
 <param name="index">The index.</param>
 <param name="collection">The field options.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionCollection.Remove(Dynamicweb.Ecommerce.Products.FieldOption)">
 <summary>
 Removes a field option to this collection.
 </summary>
 <param name="item">The field option.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionCollection.RemoveAll(System.Predicate{Dynamicweb.Ecommerce.Products.FieldOption})">
 <summary>
 Removes a field options from this collection.
 </summary>
 <param name="match">The field options.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionCollection.RemoveAt(System.Int32)">
 <summary>
 Removes a field option by specified index.
 </summary>
 <param name="index">The index.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionCollection.RemoveRange(System.Int32,System.Int32)">
 <summary>
 Removes a number field options by specified index.
 </summary>
 <param name="index">The index.</param>
 <param name="count">The number of options to delete.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.FieldOptionTranslation">
 <summary>
 The class FieldOptionTranslation represents product <seealso cref="T:Dynamicweb.Ecommerce.Products.FieldOption"/> translation.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.FieldOptionTranslation.OptionId">
 <summary>
 Gets or sets the translation option id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.FieldOptionTranslation.LanguageId">
 <summary>
 Gets or sets the translation language id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.FieldOptionTranslation.Name">
 <summary>
 Gets or sets the translation name.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionTranslation.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.FieldOptionTranslation" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionTranslation.Fill(System.Data.IDataReader)">
 <summary>
 Fills this translation instance with data from the data reader.
 </summary>
 <param name="reader">The reader</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionTranslation.ClearCache">
 <summary>
 Clears product field option translations cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionTranslation.DeleteFieldOptions(System.String,System.String)">
 <summary>
 Deletes product field options by given field and language ids.
 </summary>
 <param name="fieldId">The field id.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionTranslation.DeleteExcessOptions">
 <summary>
 Deletes non existing options transaltions.
 </summary>        
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionTranslation.DeleteFieldOptions(System.String)">
 <summary>
 Deletes product field options by given field id.
 </summary>
 <param name="fieldId">The field id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionTranslation.GetTranslatedOption(System.String,System.String)">
 <summary>
 Gets the field option translation.
 </summary>
 <param name="optionId">The option id.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionTranslation.GetTranslatedOptionName(Dynamicweb.Ecommerce.Products.FieldOption,System.String)">
 <summary>
 Gets the field option translation name.
 </summary>
 <param name="[option]">The option.</param>
 <param name="languageId">The language id.</param>
 <returns>The translation name.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionTranslation.GetAllTranslations">
 <summary>
 Gets the all translations
 </summary>
 <returns>The all translations</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionTranslation.GetOptionsListBySql(System.String)">
 <summary>
 Gets the field options translations by SQL query.
 </summary>
 <param name="query">The SQL query.</param>
 <returns>The collection of stock location.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.FieldOptionTranslationCollection">
 <summary>
 The class FieldOptionTranslationCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Products.FieldOptionTranslation"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionTranslationCollection.Add(Dynamicweb.Ecommerce.Products.FieldOptionTranslation)">
 <summary>
 Add the field option translation
 </summary>
 <param name="item">The field option translation.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldOptionTranslationCollection.GetTranslatedOption(System.String,System.String)">
 <summary>
 Gets the field option translation
 </summary>
 <param name="optionId">The option id.</param>
 <param name="languageId">The language id.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.FieldType">
 <summary>
 Represents product field type object
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.FieldType.Id">
 <summary>
 ID of FieldType object
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.FieldType.Name">
 <summary>
 Name of field type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.FieldType.DynamicwebAlias">
 <summary>
 System name for field type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.FieldType.Sort">
 <summary>
 Sort order for field types in various GUI lists
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.FieldType.SqlPresentation">
 <summary>
 Field type DDL presentation in MS SQL.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldType.#ctor(System.Int32)">
 <summary>
 Create FieldType object by provided type ID
 </summary>
 <param name="typeId">Type ID of object to create</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldType.#ctor(System.String)">
 <summary>
 Create FieldType object by provided type name
 </summary>
 <param name="typeName">Type name of object to create</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldType.#ctor(System.Data.IDataReader)">
 <summary>
 Create FieldType object using income DataReader with loaded properties
 </summary>
 <param name="dataReader">DataReader with selected object</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldType.#ctor">
 <summary>
 Empty constructor
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldType.Fill(System.Data.IDataReader)">
 <summary>
 Fill current object with properties loaded to DataReader
 </summary>
 <param name="dataReader">DataReader with selected FieldType object</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldType.GetFieldTypes">
 <summary>
 Load custom field types
 </summary>
 <returns>Collection of FieldType objects</returns>
 <remarks>Procedure skips advanced field types</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldType.GetFieldTypes(System.Boolean)">
 <summary>
 Load custom field types
 </summary>
 <param name="showAdvanced">Include or not advanced types</param>
 <returns>Collection of FieldType objects</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldType.GetFieldTypes(System.Int32)">
 <summary>
 Get field type object by type ID
 </summary>
 <param name="typeId">Field type ID</param>
 <returns>Collection with selected object or empty collection if provided ID is not found in DB</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldType.ClearCache">
 <summary>
 Clear cached FieldTypes
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.FieldType.SupportCollate(System.Int32)">
 <summary>
 Is this type of field can be used with collate statement
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Group">
 <summary>
 Product group class
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.Meta">
 <summary>
 Gets or sets meta data.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.Granted(Dynamicweb.Ecommerce.UserPermissions.UserPermissionRights)">
 <summary>
 Determines have a current user specified permission for current group.
 </summary>
 <param name="permission">Permission to check.</param>
 <returns>Granted or not boolean flag.</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.Id">
 <summary>
 Gets or sets the group ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.IdUrlEncoded">
 <summary>
 Gets the ID URL encoded.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.LanguageId">
 <summary>
 Gets or sets the language ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.Name">
 <summary>
 Gets or sets the group name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.ProductCount">
 <summary>
 Gets products count in groups for current language, without variants.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.Number">
 <summary>
 Gets or sets the group number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.PageIdRelation">
 <summary>
 Gets or sets the relation to a page by specifying an ID.
 </summary>
 <remarks>Deprecated...</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.LargeImage">
 <summary>
 Gets or sets the large group image.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.SmallImage">
 <summary>
 Gets or sets the small group image.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.Description">
 <summary>
 Gets or sets the group description.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.Assortment">
 <summary>
 Defines if a group belongs to assortment group.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.Icon">
 <summary>
 Gets or sets the group icon.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.ShopId">
 <summary>
 Gets or sets the ID of shop for current group.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.Shops">
 <summary>
 Gets the shops for current group.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.Products">
 <summary>
 Gets or sets the products in this group.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.ProductsByLanguageWithOutVariants">
 <summary>
 Gets or sets the products in this group by language without variants.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.ProductsByLanguageWithOutVariantsCount">
 <summary>
 Gets the products count in this group by language without variants.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.ProductsByLanguage">
 <summary>
 Gets or sets the products by language.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.ProductsWithOutVariants">
 <summary>
 Products in this group without variants.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.IsTopGroup">
 <summary>
 Determines is current group a top group - resides at top level of groups tree.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.ParentGroups">
 <summary>
 Get list of parent groups.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.PrimaryParentGroupId">
 <summary>
 Get the ID of primary parent group.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.RelatedGroups">
 <summary>
 Gets the list of related groups. Related groups are used as default list of related groups for child products.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.RelatedGroupIds">
 <summary>
 Gets the string with list of related groups. Related groups are used as default list of related groups for child products.
 </summary>
 <returns>Related group ids, delimited by "#;#"</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.ManufacturerId">
 <summary>
 Gets or sets the default value for manufacturer ID property of child products.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.VatGroupId">
 <summary>
 Gets or sets the default value for VAT group ID property of child products.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.ProductType">
 <summary>
 Gets or sets the default value for product type property of child products.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.StockGroupId">
 <summary>
 Gets or sets the default value for stock group ID property of child products.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.ParentGroupsDefaultLanguage">
 <summary>
 Gets the list of parent groups in current or default language.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.Subgroups">
 <summary>
 Gets the list of child groups with current context language.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.UntranslatedSubgroups">
 <summary>
 Gets the list of child groups in all languages.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.SubgroupsDefaultLanguage">
 <summary>
 Gets the list of child groups in current or default language.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.ProductGroupFieldValues">
 <summary>
 Gets or sets the list of custom fields values.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.InheritOrderLineFields">
 <summary>
 Determines whether order line fields should be included from parent groups or not.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.OrderLineFieldsWithoutInheritance">
 <summary>
 Gets the order line fields collection without inherited from parent groups.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.OrderLineFields">
 <summary>
 Gets the order line fields collection.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.CachedOrderLineFieldsWithoutInheritance">
 <summary>
 Gets or sets the order line fields collection without inherited from parent groups, cached in current session.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.CachedOrderLineFields">
 <summary>
 Gets or sets the order line fields collection cached in current session.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.NavigationShowInMenu">
 <summary>
 Determines whether group should be shown in navigation menu or not.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.NavigationShowInSiteMap">
 <summary>
 Determines whether group should be shown in site map or not.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.NavigationClickable">
 <summary>
 Determines whether the current group is clickable in navigation.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.Category">
 <summary>
 Gets or sets the default category for this group and all language versions.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.InheritCategoryFieldsFromParent">
 <summary>
 Gets or sets value indicating whether to inherit product category fields from parent group[s].
 </summary>
 <remarks>
 When property is true, the group should inherit Product Category field from parents(in a direct line).
 If the group both have selected a product category And have the 'Inherit fields from parents',
 the set of fields which is available in the group,
 should a be a the combined set of fields from the selected Product Category and all product category fields from the parent.
 Also the fields from the parents parent, if it is set to inherit field.
 </remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.HasChildGroups">
 <summary>
 Defines if a group includes child elements.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.ProductsWithOutVariantsWithOutRefactoring">
 <summary>
 Gets or sets the products in this group without variants without refactoring.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.RelatedSearches">
 <summary>
 Related smart searches
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.#ctor">
 <summary>
 Initializes new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.Copy">
 <summary>
 Creates and saves to database a copy of current group.
 </summary>
 <returns>The copy of the group.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.Copy(System.String,System.String)">
 <summary>
 Creates and saves to database a copy of current group with specified group ID and language ID.
 </summary>
 <param name="groupId">The new group ID.</param>
 <param name="groupLanguageId">The language ID.</param>
 <returns>The copy of the group.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.Clone">
 <summary>
 Creates in-memory copy of current group.
 </summary>
 <returns>The copy of the group.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.ClearInheritedOrderLineFieldsCache">
 <summary>
 Clears order line fields cache for child groups that inherit from this group.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Group.ProductCountForBackendTree">
 <summary>
 Gets products count in group for current language, without variants.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.AddSubgroup(Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Adds the given <see cref="T:Dynamicweb.Ecommerce.Products.Group" /> as a subgroup to this <see cref="T:Dynamicweb.Ecommerce.Products.Group" />.
 </summary>
 <param name="subgroup">The subgroup.</param>
 <exception cref="T:System.ArgumentException">If this instance is not saved first.</exception>
 <exception cref="T:System.ArgumentException">If the subgroup is not saved first.</exception>
 <example>
 <code description="Adding subgroups to a Group" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\GroupAddSubgroupSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.ClearCache">
 <summary>
 Clears all the product group cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.ClearCache(System.Boolean)">
 <summary>
 Clears the product group cache.
 </summary>
 <param name="clearAssortmentsnavigationCache">The indicator whether to clear assortment navigation cache also.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.UpdateGroupId(System.String,System.String)">
 <summary>
 Updates group id value in all tables where this column is present.
 </summary>
 <param name="oldGroupId">The existing group id.</param>
 <param name="newGroupId">The new group id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.GetGroupById(System.String)">
 <summary>
 Gets the group by ID.
 </summary>
 <param name="groupId">The group ID.</param>
 <returns>The group.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.GetGroupById(System.String,System.Boolean)">
 <summary>
 Gets the group by ID.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="showUntranslated">This parameter is no longer used.</param>
 <returns>The group.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.GetAllGroups">
 <summary>
 Gets all product groups sorted by name.
 </summary>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Products.GroupCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.GetToplevelGroups">
 <summary>
 Gets the top level groups.
 </summary>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Products.GroupCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.GetToplevelGroups(System.String)">
 <summary>
 Gets the top level groups in specified language.
 </summary>
 <param name="languageId">The language ID.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Products.GroupCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.HasProducts(Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Determines has this group products or not.
 </summary>
 <param name="group">The group to check.</param>
 <returns><c>True</c> if group has products, otherwise, <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.HasProducts">
 <summary>
 Determines has this group products or not.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.GetGroupById(System.String,System.String)">
 <summary>
 Gets the group by ID.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="grouplanguageId">The language ID.</param>
 <returns>The group.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.GetRelatedProducts(System.String)">
 <summary>
 Gets the list of related products for relation group. Related products are used as default list of related products for child products.
 </summary>
 <param name="relatedGroupId">relation group ID</param>
 <returns>Related products collection</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.GetRelatedProductIds(System.String)">
 <summary>
 Gets the string with list of related products for relation group. Related products are used as default list of related products for child products.
 </summary>
 <returns>Related product ids, delimited by "#;#"</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.AddRelatedProductId(System.String,System.String)">
 <summary>
 Adds the default related product to relation group.
 </summary>
 <param name="relatedGroupId">The relation group ID.</param>
 <param name="productId">The product ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.AddRelatedProductId(System.String,System.String,System.String)">
 <summary>
 Adds the default related product to relation group.
 </summary>
 <param name="relatedGroupId">The relation group ID.</param>
 <param name="productId">The product ID.</param>
 <param name="variantId">The variant ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.DeleteRelatedProducts(System.String)">
 <summary>
 Deletes the related products from relation group.
 </summary>
 <param name="relatedGroupId">The relation group ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.DeleteRelatedProductId(System.String,System.String)">
 <summary>
 Deletes the related product from relation.
 </summary>
 <param name="relatedGroupId">The relation group ID.</param>
 <param name="productId">The product ID to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.DeleteRelatedProductId(System.String,System.String,System.String)">
 <summary>
 Deletes the related product from relation.
 </summary>
 <param name="relatedGroupId">The relation group ID.</param>
 <param name="productId">The product ID to delete.</param>
 <param name="variantId">The product variant ID to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.GetGroupsByProduct(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Gets the groups for given product.
 </summary>
 <param name="prod">The product.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Products.GroupCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.Delete(System.String,System.String)">
 <summary>
 Deletes the group from database using group ID and language ID.
 </summary>
 <param name="groupId">The group ID to delete.</param>
 <param name="groupLanguageId">The language ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.Delete(System.String)">
 <summary>
 Deletes the group from database using group ID.
 </summary>
 <param name="groupId">The group ID to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.Delete">
 <summary>
 Deletes the current group from database.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.Save">
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.Save(System.String)">
 <summary>
 Saves the group using provided group ID.
 </summary>
 <param name="groupId">The group ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.Save(System.String,System.String)">
 <summary>
 Saves the group using provided group ID and language ID.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="groupLanguageId">The language ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.GetGroupsByIDs(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Gets groups by provided group IDs.
 </summary>
 <param name="groupIds">The list of group IDs.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Products.GroupCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.GetGroupsByIDs(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
 <summary>
 Retrieves a list of groups by their IDs with an option to filter results by current language and/or permissions.
 </summary>
 <param name="groupIds">The list of group IDs.</param>
 <param name="applyFiltering">The filter results by current language and/or permissions.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Products.GroupCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.GetGroupsBySearchWord(System.String,System.Int32)">
 <summary>
 Finds the topCounter groups using given keyword.
 </summary>
 <param name="keyword">The keyword to find.</param>
 <param name="topCounter">The maximum number of returned results.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Products.GroupCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.GetGroupsBySearchWord(System.String,System.Int32,System.String)">
 <summary>
 Finds the topCounter groups using given keyword and shop ID.
 </summary>
 <param name="keyword">The keyword to find.</param>
 <param name="topCounter">The maximum number of returned results.</param>
 <param name="shopId">The shop ID to search in.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Products.GroupCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.GetEmptyGroupDataSet">
 <summary>
 Returns an empty dataset from the Group table - used for looking at the columns.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.Delete(Dynamicweb.Ecommerce.Products.GroupCollection)">
 <summary>
 Deletes all groups from provided collection.
 </summary>
 <param name="groups">The groups collection to delete.</param>
 <returns>Empty string.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.Delete(Dynamicweb.Ecommerce.Products.GroupCollection,System.Boolean)">
 <summary>
 Prepares SQL statement to delete groups from provided collection and optionally execute this statement.
 </summary>
 <param name="groups">The groups collection to delete.</param>
 <param name="run">Determines whether the delete statement should be executed or not.</param>
 <returns>Empty string.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.WhereClauseBuilder(Dynamicweb.Ecommerce.Products.GroupCollection)">
 <summary>
 Builds a comma separated string of group ids, for where statements.
 </summary>
 <param name="groups">The <see cref="T:Dynamicweb.Ecommerce.Products.GroupCollection"/>.</param>
 <returns>The string of the group IDs separated by comma.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.DeleteAll(Dynamicweb.Ecommerce.Products.GroupCollection,System.Boolean)">
 <summary>
 Prepares SQL statement to delete groups from provided collection and optionally execute this statement.
 Deletes appropriate relations between shops, other groups and products as well.
 </summary>
 <param name="groups">The groups collection to delete.</param>
 <param name="run">Determines whether the delete statement should be executed or not.</param>
 <returns>Empty string.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Group.ClearOrderLineFieldCache">
 <summary>
 Clears order line fields cache.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.GroupCollection">
 <summary>
 Collection of product groups.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupCollection.#ctor">
 <summary>
 Initializes new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupCollection.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.Group})">
 <summary>
 Initializes new instance of the class.
 </summary>
 <param name="groups">The groups to be added into the list.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupCollection.ContainsById(System.String)">
 <summary>
 Determines does current list contain product group with given ID.
 </summary>
 <param name="groupId">The group ID to find in the list.</param>
 <returns><c>True</c> if collection contain a group, otherwise <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupCollection.Sort(Dynamicweb.Ecommerce.Products.GroupCollectionSortBy)">
 <summary>
 Sorts the groups in the collection.
 </summary>
 <param name="sortBy">The sort by parameter</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.GroupDeleting">
 <summary>
 Helper class to properly delete group with access rights checks and from all places: pages, shops, other groups and products relations etc.
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\ProductGroupDeleteHandlerSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupDeleting.Run(System.String)">
 <summary>
 Execute product group delete
 </summary>
 <param name="groupId">ID of group to delete</param>
 <returns>Success flag</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.GroupRelation">
 <summary>
 Class for parent-child relations between product groups
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\GroupRelationDeleteHandlerSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupRelation.Id">
 <summary>
 Group ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupRelation.ParentId">
 <summary>
 Parent group ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupRelation.Sorting">
 <summary>
 Sort order of current group inside parent group's children collection.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupRelation.IsPrimary">
 <summary>
 Is this group primary.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupRelation.InheritCategories">
 <summary>
 Do inherit categories.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupRelation.#ctor(System.String,System.String)">
 <summary>
 Create groups relation using group ID and parent group ID
 </summary>
 <param name="id">Group ID</param>
 <param name="groupParentId">Parent group ID</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupRelation.#ctor(System.Data.IDataReader)">
 <summary>
 Create relation object with data from given DataReader
 </summary>
 <param name="dataReader">DataReader with selected relation</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupRelation.#ctor">
 <summary>
 Empty constructor
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupRelation.Fill(System.Data.IDataReader)">
 <summary>
 Fill current relation object with data from given DataReader
 </summary>
 <param name="dataReader">DataReader with selected relation</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupRelation.Save(System.String,System.String)">
 <summary>
 Save relation object
 </summary>
 <param name="theGroupId">Group ID</param>
 <param name="theParentId">Parent group ID</param>
 <remarks>Fires Notifications.eCommerce.Group.RelationUpdated event</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupRelation.Delete">
 <summary>
 Delete current relation
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupRelation.Delete(System.String,System.String)">
 <summary>
 Delete relation between given group and parent group
 </summary>
 <param name="theGroupId">Group ID</param>
 <param name="groupParentId">Parent group ID</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupRelation.Delete(Dynamicweb.Ecommerce.Products.GroupCollection)">
 <summary>
 Delete all relations for groups from given collection
 </summary>
 <param name="groups">Groups collection to delete from group relations</param>
 <returns>SQL statement used to delete relations</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupRelation.Delete(Dynamicweb.Ecommerce.Products.GroupCollection,System.Boolean)">
 <summary>
 Create SQL statement to delete all relations for groups from given collection and optionally execute it
 </summary>
 <param name="groups">Groups collection to delete from group relations</param>
 <param name="run">Execute prepared SQL statement or not</param>
 <returns>SQL statement used to delete relations</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupRelation.Copy">
 <summary>
 Create a copy of current relation and save it to database
 </summary>
 <returns>Copied relation</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupRelation.Clone">
 <summary>
 Create in-memory copy of current relation
 </summary>
 <returns>Copied relation</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupRelation.GroupRelationsByParentId(System.String)">
 <summary>
 Get all group relations for given parent group ID
 </summary>
 <param name="theParentId">Parent group ID</param>
 <returns>GroupRelation collection</returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupRelation.GroupRelationsByChildId(System.String)">
 <summary>
 Get all group relations for given child group ID
 </summary>
 <param name="childId">Child group ID</param>
 <returns>GroupRelation collection</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupRelation.ClearCache">
 <summary>
 Clears the relations cache.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.GroupRelationCollection">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void SaveGroupRelations(Group grp)
   {
       // using additioal collection - to save sorting order
       // load group relations
       GroupRelationCollection relationsList = new GroupRelationCollection();
       for (int i = 0; i &lt;= int.MaxValue; i++)
       {
           string pId = Request["GRPREL_ID" + i];
           if (string.IsNullOrEmpty(pId))
               break;

           GroupRelation g = new GroupRelation(grp.ID, pId);
           g.ID = grp.ID;
           g.ParentID = pId;

           relationsList.Add(g);
       }

       // remove all relations
       GroupRelation grpRelDel = new GroupRelation();
       grpRelDel.Delete(grp.ID);

       // save loaded relations
       foreach (GroupRelation g in relationsList)
       {
           g.Save(g.ID, g.ParentID);
       }
   }
}
 </code>
 </example>
 <summary>
 Collection class for parent-child relations between product groups
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupRelationCollection.Find(System.String,System.String)">
 <summary>
 Find group relation based on given parent and child gorup IDs
 </summary>
 <param name="parentID">Parent group ID</param>
 <param name="childID">Child group ID</param>
 <returns>Found group relation or Nothing</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.GroupShopRelation">
 <summary>
 Class for relation objects between shops and product groups
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupShopRelation.ShopId">
 <summary>
 Shop ID in relation
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupShopRelation.GroupId">
 <summary>
 Group ID in relation
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupShopRelation.Sorting">
 <summary>
 Sort order for related shops
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupShopRelation.#ctor(System.String,System.String)">
 <summary>
 Create relation for given group ID and shop ID
 </summary>
 <param name="theGroupId">Group ID</param>
 <param name="theShopId">Shop ID</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupShopRelation.#ctor(System.Data.IDataReader)">
 <summary>
 Create relation using DataReader with selected relation
 </summary>
 <param name="dataReader">DataReader with selected properties</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupShopRelation.#ctor">
 <summary>
 Empty constructor
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupShopRelation.Fill(System.Data.IDataReader)">
 <summary>
 Fill object properties with data from given DataReader with selected relation
 </summary>
 <param name="dataReader">DataReader with selected properties</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupShopRelation.Save(System.String,System.String)">
 <summary>
 Save relation for given group ID and shop ID
 </summary>
 <param name="theGroupId">Group ID</param>
 <param name="theShopId">Shop ID</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupShopRelation.Delete">
 <summary>
 Delete relation from database
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupShopRelation.Delete(System.String,System.String)">
 <summary>
 Delete relation between given group ID and shop ID
 </summary>
 <param name="theGroupId">Group ID</param>
 <param name="theShopId">Shop ID</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupShopRelation.Delete(Dynamicweb.Ecommerce.Products.GroupCollection)">
 <summary>
 Delete groups from given collection from relations between shops and groups
 </summary>
 <param name="groups">Groups collection to delete from relations</param>
 <returns>SQL statement used to delete relations</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupShopRelation.Delete(Dynamicweb.Ecommerce.Products.GroupCollection,System.Boolean)">
 <summary>
 Create SQL statement to delete given groups from relations between shops and groups and optionally execute it
 </summary>
 <param name="groups">Groups to delete from relations</param>
 <param name="run">Execute created statement or not</param>
 <returns>SQL statement used to delete relations</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupShopRelation.Copy">
 <summary>
 Create and save to database a copy of current object
 </summary>
 <returns>Copied relation</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupShopRelation.Clone">
 <summary>
 Create in-memory copy of current object
 </summary>
 <returns>Copied relation</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.GroupShopRelation.ClearCache">
 <summary>
 Clears group shop relation cache.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.GroupTemplateExtender">
 <summary>
 Group template extender. Extends the rendering of a <see cref="P:Dynamicweb.Ecommerce.Products.GroupTemplateExtender.Group"></see>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupTemplateExtender.Group">
 <summary>
 Gets or sets the group.
 </summary>
 <value>The group.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.GroupTemplateExtender.Order">
 <summary>
 Gets or sets the order.
 </summary>
 <value>The order.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Manufacturer">
 <summary>
 Class for Manufacturer objects
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Manufacturer.Id">
 <summary>
 Manufacturer ID
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Manufacturer.Name">
 <summary>
 Manufacturer name
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Manufacturer.Address">
 <summary>
 Manufacturer address
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Manufacturer.ZipCode">
 <summary>
 Manufacturer ZIP code
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Manufacturer.City">
 <summary>
 Manufacturer city
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Manufacturer.Country">
 <summary>
 Manufacturer country
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Manufacturer.Phone">
 <summary>
 Manufacturer phone
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Manufacturer.Fax">
 <summary>
 Manufacturer fax
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Manufacturer.Email">
 <summary>
 Manufacturer Email
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Manufacturer.Web">
 <summary>
 Manufacturer Web address
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Manufacturer.Logo">
 <summary>
 Manufacturer logo
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Manufacturer.Description">
 <summary>
 Manufacturer description
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Manufacturer.CachedManufacturers">
 <summary>
 Gets the cached version of all the manufacturers.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Manufacturer.#ctor(System.String)">
 <summary>
 Create new object by manufacturer ID
 </summary>
 <param name="id">Manufacturer ID</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Manufacturer.#ctor(System.Data.IDataReader)">
 <summary>
 Create new manufacturer using properties from given data reader
 </summary>
 <param name="dataReader">DataReader with selected manufacturer properties</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Manufacturer.#ctor">
 <summary>
 Empty constructor
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Manufacturer.#ctor(Dynamicweb.Ecommerce.Products.Manufacturer)">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="copyFrom">Object to copy the state from.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="copyFrom">copyFrom</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Manufacturer.CopyTo(Dynamicweb.Ecommerce.Products.Manufacturer)">
 <summary>
 Copies that state of the current object into the given one.
 </summary>
 <param name="manufacturerCopy">Object to copy the state to.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="manufacturerCopy">manufacturerCopy</paramref> is null.</exception>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Manufacturer.Fill(System.Data.IDataReader)">
 <summary>
 Fill current object with properties from given data reader
 </summary>
 <param name="dataReader">DataReader with selected manufacturer properties</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Manufacturer.Save(System.String)">
 <summary>
 Save manufacturer using provided ID
 </summary>
 <param name="manufacturerId">Manufacturer ID</param>
 <remarks>If manufacturer for given ID is not found, a new one created with auto-generated ID</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Manufacturer.Delete">
 <summary>
 Delete manufacturer
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Manufacturer.Delete(System.String)">
 <summary>
 Delete manufacturer by ID
 </summary>
 <param name="manufacturerId">Manufacturer ID</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Manufacturer.Copy">
 <summary>
 Create a copy of manufacturer and save it to database
 </summary>
 <returns>Copied manufacturer</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Manufacturer.Clone">
 <summary>
 Create in-memory copy of manufacturer
 </summary>
 <returns>Copied manufacturer</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Manufacturer.ClearCache">
 <summary>
 Clears the cache.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Manufacturer.GetManufacturers">
 <summary>
 Select all manufacturers from database
 </summary>
 <returns>Manufacturer collection</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ManufacturerCollection">
 <summary>
 Collection of Manufacturer class objects
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ManufacturerCollection.Load(System.String)">
 <summary>
 Load manufacturers to current collection loaded by current SQL statement
 </summary>
 <param name="query">SQL statement to load manufacturers</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ManufacturerCollection.Sort(Dynamicweb.Ecommerce.Products.ManufacturerCollectionSortBy,Dynamicweb.Ecommerce.Products.SortDirection)">
 <summary>
 Sort current collection
 </summary>
 <param name="sortByEnum">Sort parameter</param>
 <param name="sortDirectionEnum">Sort direction</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Period">
 <summary>
 General-purpose Period class, used, for example, for prices
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Period.Id">
 <summary>
 Period ID
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Period.Name">
 <summary>
 Period name
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Period.StartDate">
 <summary>
 Period start date
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Period.CreatedDate">
 <summary>
 Period created date
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Period.EndDate">
 <summary>
 Period end date
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Period.Always">
 <summary>
 Is this period always valid
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Period.Hidden">
 <summary>
 Is this period active
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Period.Active">
 <summary>
 Is this period active
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Period.ShowProductsAfterExpiration">
 <summary>
 Gets or sets a value indicating whether products are shown after period expiration. Price will not be affected by Period after expiration.
 </summary>
 <value>
 <c>true</c> if products are shown after <c ref="Period">Period</c> expires; otherwise, <c>false</c>.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Period.ActiveNow">
 <summary>
 Determines if the period is active according to todays date.
 </summary>
 <value><c>true</c> if period active now; otherwise, <c>false</c></value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Period.EndDateForGrid">
 <summary>
 Period end date for grid
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Period.#ctor(System.String)">
 <summary>
 Create new period by given ID
 </summary>
 <param name="periodId">Period ID</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Period.#ctor(System.Data.IDataReader)">
 <summary>
 Create new period using properties from provided data reader
 </summary>
 <param name="dataReader">Data reader with loaded period properties</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Period.#ctor">
 <summary>
 Empty constructor
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Period.Fill(System.Data.IDataReader)">
 <summary>
 Fill Period with properties from provided data reader
 </summary>
 <param name="dataReader">Data reader with loaded properties</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Period.Save(System.String)">
 <summary>
 Save period using period ID
 </summary>
 <param name="periodId">Period ID</param>
 <remarks>If period with this ID is not found, new period created with auto-generated ID</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Period.Delete">
 <summary>
 Delete period
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Period.Delete(System.String)">
 <summary>
 Delete period by ID
 </summary>
 <param name="periodId">Period ID</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Period.Copy">
 <summary>
 Create and save to database a copy of period
 </summary>
 <returns>Copied period</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Period.Clone">
 <summary>
 Create in-memory copy of current period
 </summary>
 <returns>Copied period</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Period.Lock">
 <summary>
 Makes this object read-only
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Period.ToString">
 <summary>
 Get string representation of a period
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Period.ToTimeSpanString">
 <summary>
 Get string with Start\End dates
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Period.GetPeriods">
 <summary>
 Load all not hidden periods from database
 </summary>
 <returns>Periods collection</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Period.GetHiddenPeriods">
 <summary>
 Load all hidden periods from database
 </summary>
 <returns>Periods collection</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Period.GetAllPeriods">
 <summary>
 Load all periods from database
 </summary>
 <returns>Periods collection</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Period.GetPeriods(System.Boolean)">
 <summary>
 Get all periods from database by active/inactive flag
 </summary>
 <param name="active">Load active or inactive</param>
 <returns>Periods collection</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Period.GetPeriods(System.String)">
 <summary>
 Load period to collection using period ID
 </summary>
 <param name="periodId">Period ID</param>
 <returns>Collection with loaded object</returns>
 <remarks>If this ID is not found in database, return empty collection</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Period.IsPeriodActive(System.String)">
 <summary>
 Is period with given ID active
 </summary>
 <param name="periodId">Period ID</param>
 <returns>Active or not active flag</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Product">
 <summary>
 Represents information about a product.
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\BomConfiguratorSample.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.Product.FormatOperator">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public int UpdateStock(Dynamicweb.eCommerce.Orders.Order order, Dynamicweb.eCommerce.Products.Product.ProductOrderStockOperator _Operator)
   {
       Dynamicweb.eCommerce.Products.Product product = new Product();
       string SQL = string.Empty;
       int updateCount = 0;

       foreach (Dynamicweb.eCommerce.Orders.OrderLine orderLine in order.OrderLines)
       {
           if (!(orderLine.Product.Type == ProductType.Service))
           {
               Dynamicweb.eCommerce.Stocks.StockStatus oldStockStatus = orderLine.Product.get_StockStatus(orderLine.Product.LanguageID);

               if (!string.IsNullOrEmpty(orderLine.UnitID))
               {
                   if (UnitExists(orderLine.UnitID))
                   {
                       SQL = "UPDATE EcomStockUnit SET StockUnitQuantity = StockUnitQuantity " + Dynamicweb.eCommerce.Products.Product.FormatOperator[(int)_Operator] + " " + orderLine.Quantity + " ";
                       SQL += "WHERE StockUnitProductID = '" + orderLine.ProductID + "' AND StockUnitID = '" + orderLine.UnitID + "' ";
                       if (!string.IsNullOrEmpty(orderLine.ProductVariantID))
                       {
                           SQL += "AND StockUnitVariantID = '" + orderLine.ProductVariantID + "' ";
                       }
                   }
                   else { continue; }
               }
               else { continue; }

               if (Database.ExecuteNonQuery(SQL) > 0)
               {
                   updateCount += 1;
               }
           }
       }

       return updateCount;
   }

   public static bool UnitExists(string unitId)
   {
       foreach (Dynamicweb.eCommerce.Variants.VariantOption u in Dynamicweb.eCommerce.Common.Context.Units)
       {
           if (u.ID == unitId)
           {
               return true;
           }
       }

       return false;
   }
}
 </code>
 </example>
 <summary>
 Plus or Minus.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.ApprovalState">
 <summary>
 Gets or sets the state of the approval.
 </summary>
 <value>The state of the approval.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Meta">
 <summary>
 Gets or sets meta data. Meta information is used by search engines to index searches by means of keywords.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.OptimizedFor">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Product targetProduct;
    private void SaveSelectedPhrase(string phrase)
    {
        string productID = Converter.ToString(Request.QueryString["ProductID"]);
        string productVariantID = Converter.ToString(Request.QueryString["ProductVariantID"]);
        targetProduct.OptimizedFor = phrase;
        targetProduct.Save(productID, productVariantID);
    }
}
 </code>
 </example>
 <summary>
 Gets or sets the keyword or phrase for which this product's meta data is optimized for.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Prices">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Product objProduct;
    private Product objProductNew;
    private void SavePrices()
    {
         foreach (Dynamicweb.eCommerce.Prices.Price pr in objProduct.Prices)
         {
             pr.Save("", objProductNew.ID, pr.CurrencyCode);
         }
    }
}
 </code>
 </example>
 <history>
 	[cpk]	28-03-2006	Added the Prices property
 	[tfc]	31-05-2006	rewrite Prices property
     [eal]   27-11-2006  changed Period-property to check if _PeriodID is set, and if it is it should return the related Period of that id.
 </history>
 <summary>
 Gets or sets the collection of prices. 
 Product prices are ranged according to variety of criteria e.group. Bulk prices, Campaigns, Units and Variant. 
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.ProductFieldValues">
 <summary>
 Gets or sets the collection of custom product field values.
 Administrator can create custom product fields in the Management Center -> eCommerce settings -> Product catalog -> Product fields.
 </summary>
 <example>
 <code description="Working with ProductFieldValues" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\ProductProductFieldValuesSample.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.VariantGroups">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Product product;
   public void ShowVariantGroupList()
   {
       if (product.VariantGroups.Count > 0)
       {
           foreach (VariantGroup vgpr in product.VariantGroups)
           {
               //TODO: insert your code here
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Gets or sets the collection of VariantGroup objects. 
 The same product can be available in different variants, e.group. shoes of different sizes and colors. 
 Administrator can create variants in Management Center -> eCommerce settings -> Product catalog -> Variants
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.RelatedGroups">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Product product;
   public void ShowRelatedGroupList()
   {
       if (product.RelatedGroups.Count > 0)
       {
           foreach (ProductRelatedGroup prg in product.RelatedGroups)
           {
               //TODO: insert your code here
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Gets or sets the collection of related groups.
 The products can be placed in a different product group and then they will appear in more than one product category.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.RelatedGroups(System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Product product;
   public void ShowRelatedGroupList()
   {
       if (product.RelatedGroups.Count > 0)
       {
           foreach (ProductRelatedGroup prg in product.RelatedGroups(true))
           {
               //TODO: insert your code here
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Gets or sets the collection of related groups excluding not used items.
 The products can be placed in a different product group and then they will appear in more than one product category.
 </summary>
 <param name="isfrontend">Is it frontend</param>
 <value>ProductRelatedGroupCollection.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.RelatedGroupsWithoutProducts">
 <summary>
 Gets or sets the related groups without products.
 </summary>
 <value>
 The related groups without products.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.RelatedSearches">
 <summary>
 Related smart searches
 </summary>
 <returns>Related smart search collection</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Groups">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Product product;
   public void ShowGroupList()
   {
       if (product.Groups.Count > 0)
       {
           foreach (Group group in product.Groups)
           {
               //TODO: insert your code here
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Gets or sets the collection of groups that own the product. 
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.PrimaryGroupId">
 <summary>
 Get ID of primary group
 </summary>
 <returns>Primary group ID</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.DefaultGroup">
 <summary>
 Get primary or default group 
 </summary>
 <returns>Primary or default group</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetDefaultGroupByShopId(System.String)">
 <summary>
 Gets the default group by shop id.
 </summary>
 <param name="ShopId">The shop id.</param>
 <returns>Group.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetDefaultGroupByShopId(System.String,System.Boolean)">
 <summary>
 Gets the default group by shop id.
 </summary>
 <param name="ShopId">The shop id.</param>
 <returns>Group.</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Items">
 <summary>
 Gets or sets the collection of product items for composite products. 
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\BomConfiguratorSample.cs" lang="CS"></code>
 </example>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Shop">
 <summary>
 Gets or sets shop the product belongs to. 
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.UnitStock">
 <summary>
 Gets the stock of the current product instance based on the provider if any are specified. Goes through the stockelevel provider (and hence the ERP if configured to do that).
 If there are not providers, 0.0 is returned
 </summary>
 <remarks>Use <see cref="P:Dynamicweb.Ecommerce.Products.Product.Stock"/> to get the value from the database.</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Stock">
 <summary>
 Gets or sets the product stock from the data record of the product (EcomProducts table).
 </summary>
 <remarks>
 Does not use the stock providers or get the stock levels from ERP in integrated solutions.
 Use <see cref="P:Dynamicweb.Ecommerce.Products.Product.UnitStock"/> property for getting the calculated value from the provider.
 </remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.SumStock">
 <summary>
 Gets value indicating whether to sum stock units.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.VariantStockSum">
 <summary>
 Gets sum of all product variant stock units.
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.StockGroupId">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   protected System.Web.UI.WebControls.DropDownList StockGroupID;
   private Product product;
   public void CreateDropDown()
   {
       SortedList stocklist = new SortedList();
       StockGroupCollection stocks = Dynamicweb.eCommerce.Common.Application.StockGroups;
       foreach (StockGroup stock in stocks)
       {
           if (stock.ID != null)
           {
               stocklist[Convert.ToString(stock.ID)] = stock.Name;
           }
        }
       product.StockGroupID = Converter.ToString(Dynamicweb.Context.Current.Request("StockGroupID"));
       Dynamicweb.eCommerce.Common.Gui.CreateDropDown(stocklist, StockGroupID, product.StockGroupID);
   }
}
 </code>
 </example>
 <summary>
 Gets or sets StockGroupID.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Rating">
 <summary>
 Gets or sets the rating of the product.
 </summary>
 <value>The rating.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.CommentCount">
 <summary>
 Gets or sets the count of comments.
 </summary>
 <value>The count of comments.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.SoldItems">
 <summary>
 Gets or sets the number of sold items.
 </summary>
 <value>The items sold.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.StockGroup">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   protected System.Web.UI.WebControls.DropDownList StockGroupID;
   private Product product;
   public void CreateDropDown()
   {
       SortedList stocklist = new SortedList();
       StockGroupCollection stocks = Dynamicweb.eCommerce.Common.Application.StockGroups;
       foreach (StockGroup stock in stocks)
       {
           if (stock.ID == product.StockGroup.ID)
           {
               stocklist[Convert.ToString(stock.ID)] = stock.Name;
           }
        }
       product.StockGroupID = Converter.ToString(Dynamicweb.Context.Current.Request("StockGroupID"));
       Dynamicweb.eCommerce.Common.Gui.CreateDropDown(stocklist, StockGroupID, product.StockGroupID);
   }
}
 </code>
 </example>
 <summary>
 Gets or sets the stock group.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.StockStatus(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void Notify(Product product, string productId, string variantId)
   {
       StockStatus OldStockStatus = product.StockStatus;
       Product px = new Product(productId, variantId);
       StockStatus NewStockStatus = px.StockStatus;

       if (NewStockStatus.ID != OldStockStatus.ID)
       {
           NotificationManager.Notify(Dynamicweb.Ecommerce.Notifications.eCommerce.Stock.StatusChanged, new object[] {
                 px,
                 OldStockStatus,
                 NewStockStatus
                });
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the stock status.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Manufacturer">
 <summary>
 Gets the product manufacturer. To set the <see cref="P:Dynamicweb.Ecommerce.Products.Product.Manufacturer" /> use the ManufacturerID property.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Period">
 <summary>
 Gets or sets the period.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Periods(System.Boolean)">
 <summary>
 Gets or sets the periods.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.VatGroups">
 <summary>
 Gets or sets VAT groups on product for each country.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.VatGroup">
 <summary>
 Gets or sets VatGroup object.
 VAT groups are managed in the Management Center -> eCommerce settings -> Internationalization -> VAT groups.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.VariantCombinations">
 <summary>
 Gets VariantCombinationCollection object.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.VariantCombinationsWithStockCheck">
 <summary>
 Gets VariantCombinationCollection object.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Units">
 <summary>
 Gets or sets the collection of stock units.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.UnitsUnique">
 <summary>
 Gets or sets the collection of stock units.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.UnitList">
 <summary>
 Gets or sets VariantOptionCollection object.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.DefaultUnit">
 <summary>
 Gets the default unit.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Details(System.String)">
 <summary>
 Gets the detail collection.
 </summary>
 <param name="typeValue">Type of value</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Details">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Product objProduct;
    private Product objProductNew;
    private void SaveDetails()
    {
         foreach (Dynamicweb.eCommerce.Products.Detail det in objProduct.Details)
         {
             // create new detail and add to product
             det.Save("", objProductNew);
         }
    }
}
 </code>
 </example>
 <summary>
 Gets or sets the detail collection.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Id">
 <summary>
 Gets or sets the ID of the product.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.IdUrlEncoded">
 <summary>
 Gets the ID URL encoded.
 </summary>
 <value>The ID URL encoded.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.LanguageId">
 <summary>
 Gets or sets the product language ID. 
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Language">
 <summary>
 Gets the product language. To change the language of this <see cref="T:Dynamicweb.Ecommerce.Products.Product" /> use the LanguageID property.
 </summary>
 <value>language.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.DefaultShopId">
 <summary>
 Gets or sets the default shop ID.
 </summary>
 <value>The default shop ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Number">
 <summary>
 Gets or sets the product number.
 </summary>
 <value>number.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Name">
 <summary>
 Gets or sets product name. Product name is used in the frontend product catalog. 
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.ShortDescription">
 <summary>
 Gets or sets the short(teaser) description of the product.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.LongDescription">
 <summary>
 Gets or sets the detailed description of the product.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Weight">
 <summary>
 Gets or sets the product weight.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Volume">
 <summary>
 Gets or sets the product volume.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.VatGroupId">
 <summary>
 Gets or sets VatGroupID.
 VAT groups are managed in the Management Center -> eCommerce settings -> Internationalization -> VAT groups.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.ManufacturerId">
 <summary>
 Gets or sets the ID of the product manufacturer.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Active">
 <summary>
 Gets or sets the value that indicates if the product is active or not.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.IsActive">
 <summary>
 Gets the value that indicates if the product is active or not and if the period of the product is active or not.
 </summary>
 <remarks>Checks if the product is active and if the period of product is active</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.PeriodId">
 <summary>
 Gets or sets the ID of the period.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Created">
 <summary>
 Gets or sets the date when the product was created.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Updated">
 <summary>
 Gets or sets the date when the product was updated.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.TaxCollection">
 <summary>
 Gets the tax collection.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Type">
 <summary>
 Gets or sets the type of the product (stock item, service, giftCard or parts list).
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.PriceType">
 <summary>
 Gets or sets the type of the price e.group. calculated, fixed, fixed plus changes. 
 Price type is only available if the product type is Parts List.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.VariantId">
 <summary>
 Gets or sets VariantID.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.VirtualVariantId">
 <summary>
 Gets or sets VirtualVariantID.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.ImageSmall">
 <summary>
 Gets or sets a small image.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.ImageMedium">
 <summary>
 Gets or sets a medium image.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.ImageLarge">
 <summary>
 Gets or sets a large image.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Link1">
 <summary>
 Gets or sets the Link1.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Link2">
 <summary>
 Gets or sets the Link2.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.DefaultUnitId">
 <summary>
 Gets or sets the default ID of the unit.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.DefaultVariantComboId">
 <summary>
 Gets or sets the default VariantComboID.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.IsVariantMaster">
 <summary>
 Gets the value that indicates if the variant is a master.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.VariantCount">
 <summary>
 Gets the variant counting.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.VariantProductCount">
 <summary>
 Gets or sets the VariantProduct counting.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.VariantGroupCount">
 <summary>
 Gets the VariantGroup counting.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.PriceCount">
 <summary>
 Gets or sets the price counting.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.RelatedCount">
 <summary>
 Gets the RelatedProducts counting.
 </summary>
 <remarks>RelatedCount is not set in DB if using import! Use RelatedProducts.Count instead!</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.UnitCount">
 <summary>
 Gets or sets the unit counting.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.PriceMatrixUnit">
 <summary>
 Gets or sets PriceMatrixUnit.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.PriceMatrixVariant">
 <summary>
 Gets or sets PriceMatrixVariant.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.PriceMatrixPeriod">
 <summary>
 Gets or sets PriceMatrixPeriod.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.PriceMatrixMultiplePrices">
 <summary>
 Gets or sets PriceMatrixMultiplePrices.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.PriceMatrixQuantitySpecification">
 <summary>
 Gets or sets PriceMatrixQuantitySpecification.
 </summary>
 <value>PriceMatrixQuantitySpecification.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.RelationSorting">
 <summary>
 Gets or sets RelationSorting.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.CategoryFieldValues">
 <summary>
 Gets or sets the category field values.
 </summary>
 <value>
 The category field values.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.ExcludeFromIndex">
 <summary>
 Gets or sets value indicating whether to exclude the product from indexing.
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.ExcludeFromCustomizedUrls">
 <summary>
 Gets or sets value indicating whether to exclude the product from customized URLs.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.ExcludeFromAllProducts">
 <summary>
 Gets or sets value indicating whether to exclude the product from all products list
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.DefaultPoints">
 <summary>
 Gets or sets product default loyalty reward points
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.ShowInProductList">
 <summary>
 Gets or sets value indicating whether to exclude the product from all products list
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.WorkflowStateId">
 <summary>
 Gets or sets the workflow state.
 </summary>
 <value>The workflow state.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.ProductPriceString">
 <summary>
 Gets or sets the product price string.
 </summary>
 <value>The product price string.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.DefaultPrice">
 <summary>
 Gets or sets the default price. 
 This price is a basis for calculating the final price that is displayed in the frontend. 
 </summary>
 <value>The default price.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Cost">
 <summary>
 Gets or sets the default cost. 
 </summary>
 <value>The default cost.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Markup">
 <summary>
 Gets the markup. This value is calculated from DefaultPrice and Cost and is represented as a percentage.
 </summary>
 
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.FormattedMarkup">
 <summary>
 Gets the markup as a formatted string, like: "10.25%".
 </summary>
 
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.FormattedPrice">
 <summary>
 Gets the price string in currency format.
 </summary>
 <value>The formatted price.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.FormattedInformativePrice">
 <summary>
 Gets the informative price string in currency format.
 </summary>
 <value>
 The formatted informative price.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.UnformattedPrice">
 <summary>
 Gets the price value. This is the final calculated price for the product. 
 </summary>
 <value>The unformatted price.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.UnformattedInformativePrice">
 <summary>
 Gets the informative price value. This is the final calculated informative price for the product. 
 </summary>
 <value>
 The unformatted informative price.
 </value>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.CachePrice(Dynamicweb.Ecommerce.Prices.PriceInfo)">
 <summary>
 Caches the price.
 </summary>
 <param name="thePrice">The price.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.CacheInformativePrice(Dynamicweb.Ecommerce.Prices.PriceInfo)">
 <summary>
 Caches the informative price.
 </summary>
 <param name="thePrice">The price.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.IsPriceCached">
 <summary>
 Determines whether the price cached.
 </summary>
 <returns>
 <c>true</c> if the price cached; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.IsInformativePriceCached">
 <summary>
 Determines whether the informative price is cached.
 </summary>
 <returns>
 <c>true</c> if the informative price is cached; otherwise, <c>false</c>.
 </returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Discounts">
 <summary>
 Gets the product discounts collection.
 </summary>
 <value>The discounts.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.ClearDiscountsCache">
 <summary>
 Clears the product discounts collection.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.ClearPriceCache">
 <summary>
 Clears the product price cache to force a recalculation of the price from the priceprovider.
 </summary>
 <remarks>Be aware that calling this method can have an impact on performance because prices has to be re-calculated more often.</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.DiscountMatrix">
 <summary>
 Gets the product discount matrix
 </summary>        
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.Price">
 <summary>
 Gets the price. This is the final calculated price for the product. 
 </summary>
 <value>The price.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.InformativePrice">
 <summary>
 Gets the informative price.
 </summary>
 <value>
 The informative price.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.OrderLineFields">
 <summary>
 Gets the order line fields.
 </summary>
 <value>The order line fields.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Product.ProductCountForBackendTree">
 <summary>
 Counting  products total for current language, without variants
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.Product" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.SetProperties">
 <summary>
 Sets default properties.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.LoadDataFromOrderline(Dynamicweb.Ecommerce.Orders.OrderLine)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoSaveOrderLine(Dynamicweb.eCommerce.Orders.OrderLine orderLine)
   {
       Product product = new Product();
       product.LoadDataFromOrderline(orderLine);
       product.Save();
   }
}
 </code>
 </example>
 <summary>
 Loads the Name, Number and VariantID from OrderLine.
 </summary>
 <param name="OrderLine">The order line.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.HasPriceWithTheseCriteria(System.String,System.String,System.String,System.String,System.Double)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Dynamicweb.eCommerce.Prices.Price price;
   private Dynamicweb.eCommerce.Products.Product product;
   public void LoadPrice(Dynamicweb.eCommerce.Orders.OrderLine orderLine)
   {
       if (!product.HasPriceWithTheseCriteria(product.VariantID, price.UnitID, price.PeriodID, price.CurrencyCode, price.Quantity))
       {
           product.Prices.Add(price);
       }
   }
}
 </code>
 </example>
 <summary>
 Determines whether there is the price with this criteria.
 </summary>
 <param name="productVariantId">The variant ID.</param>
 <param name="unitId">The unit ID.</param>
 <param name="productPeriodId">The period ID.</param>
 <param name="currencyCode">The currency code.</param>
 <param name="quantity">The quantity.</param>
 <returns>
 <c>true</c> if there is the price with this criteria; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.HasPriceWithTheseCriteria(System.String,System.String,System.String,System.String,System.Double,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Dynamicweb.eCommerce.Prices.Price price;
   private Dynamicweb.eCommerce.Products.Product product;
   public void LoadPrice(Dynamicweb.eCommerce.Orders.OrderLine orderLine)
   {
       if (!product.HasPriceWithTheseCriteria(product.VariantID, price.UnitID, price.PeriodID, price.CurrencyCode, price.Quantity, price.IsInformative))
       {
           product.Prices.Add(price);
       }
   }
}
 </code>
 </example>
 <summary>
 Determines whether there is the price with this criteria.
 </summary>
 <param name="productVariantId">The variant ID.</param>
 <param name="unitId">The unit ID.</param>
 <param name="productPeriodId">The period ID.</param>
 <param name="currencyCode">The currency code.</param>
 <param name="quantity">The quantity.</param>
 <param name="isInformative">Is informative.</param>
 <returns>
 <c>true</c> if there is the price with this criteria; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.LoadOwnPrices(Dynamicweb.Ecommerce.Prices.PriceCollection)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Dynamicweb.eCommerce.Products.Product product;
   public void LoadPrice(Dynamicweb.eCommerce.Prices.PriceCollection prices)
   {
       product.LoadOwnPrices(prices);
       foreach(Dynamicweb.eCommerce.Prices.Price price in product.Prices)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Loads the own prices.
 </summary>
 <param name="productPrices">The prices.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.UnitExists(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void UpdateStock(Dynamicweb.eCommerce.Orders.Order order)
   {
       foreach (Dynamicweb.eCommerce.Orders.OrderLine orderLine in order.OrderLines)
       {
           if (!string.IsNullOrEmpty(orderLine.UnitID))
           {
               if (Product.UnitExists(orderLine.UnitID))
               {
                   //TODO: insert your code here
               }
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Determines whether unit exists.
 </summary>
 <param name="unitId">The unit ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetCategories">
 <summary>
 Get the Dynamicweb.eCommerce.Products.Categories.Category objects for each of the Dynamicweb.eCommerce.Products.Group this belongs
 </summary>
 <returns>Dynamicweb.eCommerce.Products.Categories.CategoryCollection</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetCategories(System.Boolean)">
 <summary>
 Get the Dynamicweb.eCommerce.Products.Categories.Category objects for each of the Dynamicweb.eCommerce.Products.Group this belongs
 </summary>
 <returns>Dynamicweb.eCommerce.Products.Categories.List(Of Category)</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetCategoryValue(System.String,System.String)">
 <summary>
 Retrieves the value of the given category field.
 </summary>
 <param name="categoryId">An ID (system name) of the category.</param>
 <param name="fieldId">An ID of the target category field.</param>
 <returns>Category field value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetCategoryValue(System.String,System.String,System.Boolean)">
 <summary>
 Retrieves the value of the given category field.
 </summary>
 <param name="categoryId">An ID (system name) of the category.</param>
 <param name="fieldId">An ID of the target category field.</param>
 <returns>Category field value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetDefaultCategoryValue(Dynamicweb.Ecommerce.Products.Categories.Field)">
 <summary>
 Gets default product category field value
 </summary>
 <param name="field"></param>
 <returns>Field value</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.SetCategoryValue(System.String,System.String,System.Object)">
 <summary>
 Assigns category field value to the current product.
 </summary>
 <param name="categoryId">An ID (system name) of the category.</param>
 <param name="fieldId">An ID of the target category field.</param>
 <param name="value">Category field value.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.SetCategoryValue(System.String,Dynamicweb.Ecommerce.Products.Categories.Field,System.Object)">
 <summary>
 Assigns category field value to the current product.
 </summary>
 <param name="categoryId">An ID (system name) of the category.</param>
 <param name="field">An instance of the target category field.</param>
 <param name="value">Category field value.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.RemoveGroup(Dynamicweb.Ecommerce.Products.Group)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Product product;
   public string RemoveGroups(GroupCollection gc)
   {
       foreach(Group group in gc)
       {
           product.RemoveGroup(group);
       }
   }
}
 </code>
 </example>
 <summary>
 Removes the group from the products Groups collection. Also deletes the ProductGroupRelation from the database if group.ID exists.
 </summary>
 <param name="Group">The group.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.AddVariantGroup(Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void AddVariantGrpProdRelated()
   {
       Product product = new Product();
       product = (Product)Session["Ecom.Backend.Product"];

       string varGrpID = Context.Current.Request.QueryString["grpArr"];
       bool addRelation = false;

       Dynamicweb.eCommerce.Variants.VariantGroup variantGrp = Dynamicweb.eCommerce.Variants.VariantGroup.Create(varGrpID);
       if (!product.VariantGroups.Contains(variantGrp, true))
       {
           addRelation = true;
           product.AddVariantGroup(variantGrp);
       }

       if (addRelation)
       {
           Dynamicweb.eCommerce.Variants.VariantGroupProductRelation vgpr = new Dynamicweb.eCommerce.Variants.VariantGroupProductRelation(product.ID, varGrpID);
           try
           {
               vgpr.ProductID = product.ID;
               vgpr.VariantGroupID = varGrpID;
               vgpr.Save(product.ID, varGrpID);
           }
           catch (Exception ex)
           {
               //Nothing
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Adds the variant group.
 </summary>
 <param name="variantGroup">The VariantGroup object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.RemoveVariantGroup(Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DelVariantGrpProdRelated()
   {
       Product product = new Product();
       product = (Product)Session["Ecom.Backend.Product"];

       string varGrpID = Context.Current.Request.QueryString["grpArr"];

       Dynamicweb.eCommerce.Variants.VariantGroup variantGrp = Dynamicweb.eCommerce.Variants.VariantGroup.Create(varGrpID);
       product.RemoveVariantGroup(variantGrp);

       Dynamicweb.eCommerce.Variants.VariantGroupProductRelation vgpr = new Dynamicweb.eCommerce.Variants.VariantGroupProductRelation();
       vgpr.Delete(product.ID, varGrpID);
 
       Dynamicweb.eCommerce.Variants.VariantCombination vopr = new Dynamicweb.eCommerce.Variants.VariantCombination();
       vopr.Delete(product.ID);

       product.VariantGroups = null;
       product.VariantCombinations = null;
   }
}
 </code>
 </example>
 <summary>
 Removes the variant group by object reference.
 </summary>
 <param name="variantGroup">The VariantGroup object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.RemoveVariantGroupLoop(Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DeleteVariantGroupProductRelated()
   {
       Product product = (Product)Session["Ecom.Backend.Product"];

       string variantGroupID = Context.Current.Request.QueryString["grpArr"];

       Dynamicweb.eCommerce.Variants.VariantGroup variantGroup = Dynamicweb.eCommerce.Variants.VariantGroup.Create(variantGroupID);
       product.RemoveVariantGroupLoop(variantGroup);

       Dynamicweb.eCommerce.Variants.VariantGroupProductRelation variantGroupProductRelation = new Dynamicweb.eCommerce.Variants.VariantGroupProductRelation();
       variantGroupProductRelation.Delete(product.ID, variantGroupID);
 
       Dynamicweb.eCommerce.Variants.VariantCombination variantCombination = new Dynamicweb.eCommerce.Variants.VariantCombination();
       variantCombination.Delete(product.ID);

       product.VariantGroups = null;
       product.VariantCombinations = null;
   }
}
 </code>
 </example>
 <summary>
 Removes the variant group by ID, LanguageID, Label and Name.
 </summary>
 <param name="variantGroup">The VariantGroup object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.SetDefaultProductFields">
 <summary>
 Initializes or reinitializes the ProductFieldValues property with all current ProductFields in the system and null values.
 This method is explicitly called by the constructor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetSqlConditionPartForIDs(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public string DeleteAll(GroupCollection groups, bool run)
   {
       string grps = Group.WhereClauseBuilder(groups);
       System.Text.StringBuilder SQL = new System.Text.StringBuilder();

       //01) Delete group releations
       SQL.Append("DELETE FROM EcomGroupRelations WHERE GroupRelationsGroupID " + Product.GetSqlConditionPartForIDs(grps) + "; ");
       //02) Delete group to shop releations
       SQL.Append("DELETE FROM EcomShopGroupRelation WHERE ShopGroupGroupID " + Product.GetSqlConditionPartForIDs(grps) + "; ");
       //03) Delete the items (BOM) groups from products
       SQL.Append("DELETE FROM EcomProductItems WHERE ProductItemBomGroupID " + Product.GetSqlConditionPartForIDs(grps) + "; ");
       //04) Delete the groups
       SQL.Append("DELETE FROM EcomGroups WHERE GroupID " + Product.GetSqlConditionPartForIDs(grps) + "; ");

       if (run)
       {
           Database.ExecuteNonQuery(SQL.ToString());

           // Sending out notifications
           Dynamicweb.Extensibility.NotificationManager.Notify(Dynamicweb.Ecommerce.Notifications.eCommerce.Group.Deleted, new Dynamicweb.Ecommerce.Notifications.eCommerce.Group.GroupModifiedEventArgs(groups));
       }
       return SQL.ToString();
   }
}
 </code>
 </example>
 <summary>
 Gets the condition part of a SQL statement.
 </summary>
 <param name="idList">The ID or IDs. Multiple IDs must be separated by ', ' or ','.</param>
 <returns>The condition part of a SQL statement based on the given ID or IDs</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductDataSet">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private bool FieldExists(string checkName)
   {
       DataSet dataSet = Product.GetProductDataSet();
       foreach (DataColumn dc in dataSet.Tables[0].Columns)
       {
           if (checkName == dc.ColumnName)
           {
               return true;
           }
       }
       return false;
   }
}
 </code>
 </example>
 <summary>
 Gets an empty DataSet that matches the database schema.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductDataSet(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private bool FieldExists(string checkName)
   {
       DataSet dataSet = Product.GetProductDataSet();
       foreach (DataColumn dc in dataSet.Tables[0].Columns)
       {
           if (checkName == dc.ColumnName)
           {
               return true;
           }
       }
       return false;
   }
}
 </code>
 </example>
 <summary>
 Gets a DataSet with the Products and Variants that match the given product ID.
 </summary>
 <param name="productId">The product ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.AddRelatedProduct(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Products.ProductRelatedGroup)">
 <summary>
 Adds a related product to this product and saves it to the database.
 </summary>
 <exception cref="T:System.ArgumentException">If this instance is not saved first.</exception>
 <exception cref="T:System.ArgumentException">If the related product is not saved first.</exception>
 <exception cref="T:System.ArgumentException">If the relation group is not saved first.</exception>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.UpdateStock(Dynamicweb.Ecommerce.Orders.Order)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DeleteOrders(string orderID)
   {
       Dynamicweb.eCommerce.Orders.OrderState deletedOrderState = null;

       //Check for a 'Deleted' Order state and use if exists
       Dynamicweb.eCommerce.Orders.OrderStateCollection orderStates = Dynamicweb.eCommerce.Orders.OrderState.getAllOrderstates(false);
       foreach (Dynamicweb.eCommerce.Orders.OrderState orderState in orderStates) {
           if (orderState.IsDeleted) {
               deletedOrderState = orderState;
           }
       }

       Dynamicweb.eCommerce.Orders.Order order = Dynamicweb.eCommerce.Orders.Order.Create(orderID);
       order.Deleted = true;
       order.StateID = deletedOrderState.ID;
       order.Save();

       if (order.Complete)
       {
           Product.UpdateStock(order);
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the stock.
 </summary>
 <param name="Order">The order.</param>
 <returns>The number of products that have had their Stock updated.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.UpdateStock(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Ecommerce.Products.ProductOrderStockOperator)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DeleteOrders(string orderID)
   {
       Dynamicweb.eCommerce.Orders.OrderState deletedOrderState = null;

       //Check for a 'Deleted' Order state and use if exists
       Dynamicweb.eCommerce.Orders.OrderStateCollection orderStates = Dynamicweb.eCommerce.Orders.OrderState.getAllOrderstates(false);
       foreach (Dynamicweb.eCommerce.Orders.OrderState orderState in orderStates) {
           if (orderState.IsDeleted) {
               deletedOrderState = orderState;
           }
       }

       Dynamicweb.eCommerce.Orders.Order order = Dynamicweb.eCommerce.Orders.Order.Create(orderID);
       order.Deleted = true;
       order.StateID = deletedOrderState.ID;
       order.Save();

       if (order.Complete)
       {
           Product.UpdateStock(order, Product.ProductOrderStockOperator.Positive);
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the stock.
 </summary>
 <param name="Order">The order.</param>
 <param name="Operator">The operator.</param>
 <returns>The number of products that have had their Stock updated.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.UpdateStock(Dynamicweb.Ecommerce.Orders.OrderLine,Dynamicweb.Ecommerce.Products.ProductOrderStockOperator)">
 <summary>
 Updates the stock.
 </summary>
 <param name="orderLine">The orderLine.</param>
 <param name="operator">The operator.</param>
 <returns>Whether stock was updated or no.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.CurrentBackendUserCanEdit(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Checks if the current backend user has permission to edit a given product. 
 </summary>
 <param name="theProduct">the product in question</param>
 <returns>True if the current backend user has permission to edit the given product. False if he doesn't, or if no backend user is logged in</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.Fill(System.Data.IDataReader)">
 <example>
 <code title="C#" description="" lang="CS">
class class MyPage : System.Web.UI.Page
{
   private Product product;
   public void FillProperties()
   {
       string SQL = "SELECT * FROM EcomProducts";
       IDataReader reader = Dynamicweb.Data.Database.CreateDataReader(SQL);

       if (reader.Read())
       {
           product.Fill(reader);
       }

       reader.Close();
       reader.Dispose();
   }
}
 </code>
 </example>
 <summary>
 Fills the properties from DataReader.
 </summary>
 <param name="dataReader">DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.CountReservedStock">
 <summary>
 Counts product reserved stock.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductFieldValue(System.String)">
 <summary>
 Gets the product field value.
 </summary>
 <param name="productFieldSystemName">SystemName of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductField" />.</param>
 <exception cref="T:System.ArgumentException">If not <see cref="T:Dynamicweb.Ecommerce.Products.ProductField" /> or <see cref="T:Dynamicweb.Ecommerce.Products.ProductFieldValue" /> exist based on the given SystemName.</exception>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.SetProductFieldValue(System.String,System.Object)">
 <summary>
 Gets the product field value.
 </summary>
 <param name="productFieldSystemName">SystemName of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductField" />.</param>
 <param name="value">The value to set.</param>
 <exception cref="T:System.ArgumentException">If not <see cref="T:Dynamicweb.Ecommerce.Products.ProductField" /> or <see cref="T:Dynamicweb.Ecommerce.Products.ProductFieldValue" /> exist based on the given SystemName.</exception>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.MakeFullCopyToGroup(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void CopyProducts(ProductCollection products)
   {
       string groupID = Dynamicweb.Context.Current.Request("ToGroupID");

       foreach (Product product in products)
       {
           product.MakeFullCopyToGroup(groupID);
       }
   }
}
 </code>
 </example>
 <summary>
 Makes a clone of the product and all its relations (except group relations) and saves it in the DB.
 </summary>
 <param name="groupId">The group ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.MakeFullCopyToGroupWithLanguage(System.String,System.String,System.String)">
 <summary>
 Makes a clone of the product and all its relations (except group relations) for specified languages and saves it in the DB.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="productLanguageId">The language IDs.</param>
 <param name="newProductId">The product IDs.</param>
 <returns>The new Product ID.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.MakeFullCopyToGroup(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void CopyProducts(ProductCollection products)
   {
       string groupID = Dynamicweb.Context.Current.Request("ToGroupID");

       foreach (Product product in products)
       {
           Product.MakeFullCopyToGroup(product.ID, groupID);
       }
   }
}
 </code>
 </example>
 <summary>
 Makes a clone of the product and all its relations (except group relations) and saves it in the DB.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="groupId">The group ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.MakeFullCopyToGroupWithLanguage(System.String,System.String,System.String,System.String)">
 <summary>
 Makes a clone of the product and all its relations (except group relations)  for specified languages and saves it in the DB.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="groupId">The group ID.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="newProductId">The new Product ID.</param>
 <returns>The new Product ID.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.UpdateVariantCount(Dynamicweb.Ecommerce.Products.Product,System.Int32)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void VariantOptions(Product product)
   {
       string overwriteDefaultVarCombo = string.Empty;
       if (Request["saveVariant"] == "1")
       {
           Dynamicweb.eCommerce.Variants.VariantCombinationCollection variantCombinationCollection = Dynamicweb.eCommerce.Variants.VariantCombination.getProductCombinations(product);
           Product.UpdateVariantCount(product, variantCombinationCollection.Count);
       }
       if (Request["saveDefaultVariant"] == "1")
       {
           if (!string.IsNullOrEmpty(Converter.ToString(Dynamicweb.Context.Current.Request("DefaultVariantComboID"))))
           {
               overwriteDefaultVarCombo = Converter.ToString(Dynamicweb.Context.Current.Request("DefaultVariantComboID"));
           }
           Product.UpdateDefaultVariantID(product, overwriteDefaultVarCombo);
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the variant counter.
 </summary>
 <param name="product">The product.</param>
 <param name="variantCount">The variant counter.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.UpdatePriceCount(Dynamicweb.Ecommerce.Products.Product,System.Int32)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void StockForUnits(Product product)
   {
       if (Request["saveUnit"] == "1")
       {
           Dynamicweb.eCommerce.Prices.PriceCollection price = Dynamicweb.eCommerce.Prices.Price.getPrices(product.ID);
           Product.UpdatePriceCount(product, price.Count);
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the price counter.
 </summary>
 <param name="product">The product.</param>
 <param name="priceCount">The price counter.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.AddGroup(Dynamicweb.Ecommerce.Products.Group)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Product product;
   public string AddGroups(GroupCollection gc)
   {
       foreach(Group group in gc)
       {
           product.AddGroup(group);
       }
   }
}
 </code>
 </example>
 <summary>
 Adds the group to the products Groups collection. Also creates the ProductGroupRelation in the database if it does not already exist and group.ID is exists.
 </summary>
 <param name="Group">The group.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroup(Dynamicweb.Ecommerce.Products.Group,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DeleteProducts(GroupCollection groups)
   {
       if (groups.Count > 0)
       {
           //Delete products from groups
           ProductCollection productIds = Product.GetProductsByGroup(groups);
           Dynamicweb.eCommerce.Products.ProductDeleting.Run(productIds, groups);
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products from group.
 </summary>
 <param name="group">The group.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroup(Dynamicweb.Ecommerce.Products.Group,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DeleteProducts(GroupCollection groups)
   {
       if (groups.Count > 0)
       {
           //Delete products from groups
           ProductCollection productIds = Product.GetProductsByGroup(groups);
           Dynamicweb.eCommerce.Products.ProductDeleting.Run(productIds, groups);
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products from group.
 </summary>
 <param name="group">The group.</param>
 <param name="productLanguageId">The language ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroup(Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Gets all language version of all products from the group.
 </summary>
 <param name="group">The group.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroups(Dynamicweb.Ecommerce.Products.GroupCollection,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DeleteProducts(GroupCollection groups)
   {
       if (groups.Count > 0)
       {
           //Delete products from groups
           ProductCollection productIds = Product.GetProductsByGroups(groups, false);
           Dynamicweb.eCommerce.Products.ProductDeleting.Run(productIds, groups);
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products from groups.
 </summary>
 <param name="groups">The groups.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="isFrontEnd">if set to <c>true</c> removes not used items.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroups(Dynamicweb.Ecommerce.Products.GroupCollection,System.String,System.Boolean,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DeleteProducts(GroupCollection groups)
   {
       if (groups.Count > 0)
       {
           //Delete products from groups
           ProductCollection productIds = Product.GetProductsByGroups(groups, false);
           Dynamicweb.eCommerce.Products.ProductDeleting.Run(productIds, groups);
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products from groups.
 </summary>
 <param name="groups">The groups.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="isFrontEnd">if set to <c>true</c> removes not used items.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroupId(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string groupID)
   {
       ProductCollection dwProds = Product.GetProductsByGroupID(groupID);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the product collection based on Group ID, containing active products only. Context.LanguageID is used.
 </summary>
 <param name="groupId">The group ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroupId(System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string groupID)
   {
       ProductCollection dwProds = Product.GetProductsByGroupID(groupID, true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the product collection based on Group ID. Context.LanguageID is used.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="onlyActive">if set to <c>true</c> removes not active items from collection.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroupId(System.String,System.Boolean,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string groupID)
   {
       ProductCollection dwProds = Product.GetProductsByGroupID(groupID, true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the product collection based on Group ID.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="onlyActive">if set to <c>true</c> removes not active items from collection.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroupId(System.String,System.Boolean,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string groupID)
   {
       ProductCollection dwProds = Product.GetProductsByGroupID(groupID, true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the product collection based on Group ID.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="onlyActive">if set to <c>true</c> removes not active items from collection.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter the collection.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroupId(System.String,System.Int32)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string groupID, int top)
   {
       ProductCollection dwProds = Product.GetProductsByGroupID(groupID, top);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products. Context.LanguageID is used.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="Top">The top.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroupId(System.String,System.Int32,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string groupID, int top)
   {
       ProductCollection dwProds = Product.GetProductsByGroupID(groupID, top, true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products. Context.LanguageID is used.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="Top">If not 0 then select only top from selected items.</param>
 <param name="doRefactoring">if set to <c>true</c> removes not used items.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroupId(System.String,System.Int32,System.Boolean,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string groupID, int top)
   {
       ProductCollection dwProds = Product.GetProductsByGroupID(groupID, top, true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products. Context.LanguageID is used.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="Top">If not 0 then select only top from selected items.</param>
 <param name="doRefactoring">if set to <c>true</c> removes not used items.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroupId(System.String,System.Int32,System.Boolean,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string groupID, int top)
   {
       ProductCollection dwProds = Product.GetProductsByGroupID(groupID, top, true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products. Context.LanguageID is used.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="Top">If not 0 then select only top from selected items.</param>
 <param name="doRefactoring">if set to <c>true</c> removes not used items.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are use to filter the collection.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroupId(System.String,System.Boolean,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getOrderProducts(string groupID)
   {
       ProductCollection dwProds = Product.GetProductsByGroupID(groupID, true, true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products. Context.LanguageID is used.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="useOrderBy">if set to <c>true</c> the returned collection of product is sorted by the user defined sort order. If set to <c>false</c> the products are returned unsorted.</param>
 <param name="includeVariants">if set to <c>true</c> gets all variants.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroupId(System.String,System.Boolean,System.Boolean,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getOrderProducts(string groupID, string productLanguageId)
   {
       ProductCollection dwProds = Product.GetProductsByGroupID(groupID, true, true, productLanguageId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="useOrderBy">if set to <c>true</c> use Order By.</param>
 <param name="includeVariants">if set to <c>true</c> gets all variants.</param>
 <param name="productLanguageId">The language ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroupId(System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getOrderProducts(string groupID, string productLanguageId, bool doRefactoring)
   {
       ProductCollection dwProds = Product.GetProductsByGroupID(groupID, true, true, productLanguageId, doRefactoring);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="useOrderBy">if set to <c>true</c> the returned collection of product is sorted by the user defined sort order. If set to <c>false</c> the products are returned unsorted.</param>
 <param name="includeVariants">if set to <c>true</c> gets all variants.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="doRefactoring">if set to <c>true</c> remove unused products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroupId(System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getOrderProducts(string groupID, string productLanguageId, bool doRefactoring)
   {
       ProductCollection dwProds = Product.GetProductsByGroupID(groupID, true, true, productLanguageId, doRefactoring);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="useOrderBy">if set to <c>true</c> the returned collection of product is sorted by the user defined sort order. If set to <c>false</c> the products are returned unsorted.</param>
 <param name="includeVariants">if set to <c>true</c> gets all variants.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="doRefactoring">if set to <c>true</c> remove unused products.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter collection.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsCountByGroupId(System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Gets the products count.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="includeVariants">if set to <c>true</c> gets all variants.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="doRefactoring">if set to <c>true</c> remove unused products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsCountByGroupId(System.String,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Gets the products count.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="searchValue">The search value.</param>
 <param name="includeVariants">if set to <c>true</c> gets all variants.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="doRefactoring">if set to <c>true</c> remove unused products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsCountByGroupId(System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Gets the products count.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="countOnlyActive">if set to <c>true</c> count only active products.</param>
 <param name="searchValue">The search value.</param>
 <param name="includeVariants">if set to <c>true</c> gets all variants.</param>
 <param name="productLanguageId">The language ID.</param>
 <param name="doRefactoring">if set to <c>true</c> remove unused products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroupIdAndSearchValue(System.String,System.String,System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string groupID)
   {
       string searchKeyWord = Context.Current.Request["searchField"];
       ProductCollection dwProds = Product.GetProductsByGroupIDAndSearchValue(groupID, "100", searchKeyWord, "");
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products. Context.LanguageID is used.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="topValue">The top value.</param>
 <param name="searchValue">The search value.</param>
 <param name="productVariantId">The variant ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroupIdAndSearchValue(System.String,System.String,System.String,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(string groupID)
   {
       string searchKeyWord = Context.Current.Request["searchField"];
       ProductCollection dwProds = Product.GetProductsByGroupIDAndSearchValue(groupID, "100", searchKeyWord, "", true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products. Context.LanguageID is used.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="topValue">The top value, i.e. the number of products to get.</param>
 <param name="searchValue">The search value.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="isFrontend">if set to <c>true</c> removes not used items.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroupIdAndSearchValue(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(string groupID)
   {
       string searchKeyWord = Context.Current.Request["searchField"];
       ProductCollection dwProds = Product.GetProductsByGroupIDAndSearchValue(groupID, "100", searchKeyWord, "", true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="topValue">The top value, i.e. the number of products to get.</param>
 <param name="searchValue">The search value.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="isFrontend">if set to <c>true</c> removes not used items.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroupIdAndSearchValue(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(string groupID)
   {
       string searchKeyWord = Context.Current.Request["searchField"];
       ProductCollection dwProds = Product.GetProductsByGroupIDAndSearchValue(groupID, "100", searchKeyWord, "", true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="topValue">The top value, i.e. the number of products to get.</param>
 <param name="searchValue">The search value.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="isFrontend">if set to <c>true</c> removes not used items.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter collection.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.ProductVariantExists(Dynamicweb.Ecommerce.Products.Product,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void UpdateStock(Dynamicweb.eCommerce.Orders.Order order)
   {
       foreach (Dynamicweb.eCommerce.Orders.OrderLine orderLine in order.OrderLines)
       {
           if (Product.ProductVariantExists(orderLine.Product, orderLine.ProductVariantID))
           {
               //TODO: insert your code here
           }
       }
   }
}
 </code>
 </example>
 <summary>
 If variant exists return <c>true</c>.
 </summary>
 <param name="product">The product.</param>
 <param name="productVariandId">The variant ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductByNumber(System.String)">
 <summary>
 Gets the product by number.
 </summary>
 <param name="productNumber">Product number.</param>
 <returns>Product with the given number or null (Nothing in Visual Basic) if product with the given number cannot be found.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductByNumber(System.String,System.Boolean)">
 <summary>
 Gets the product by number.
 </summary>
 <param name="productNumber">Product number.</param>
 <param name="useDefaultLanguage">Value indicating whether to use default language.</param>
 <returns>Product with the given number or null (Nothing in Visual Basic) if product with the given number cannot be found.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductByNumber(System.String,System.String)">
 <summary>
 Gets the product by number.
 </summary>
 <param name="productNumber">Product number.</param>
 <param name="productLanguageId">The language ID.</param>
 <returns>Product with the given number or null (Nothing in Visual Basic) if product with the given number cannot be found.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroups(Dynamicweb.Ecommerce.Products.GroupCollection,System.Boolean)">
 <summary>
 Gets the products from groups for the specified language ID. See <see cref="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByGroups(Dynamicweb.Ecommerce.Products.GroupCollection,System.Boolean)"></see> for example.
 </summary>
 <param name="groups">The groups.</param>
 <param name="isFrontEnd">if set to <c>true</c> current context is frontend.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductById(System.String)">
 <summary>
 Gets the product by ID.
 </summary>
 <param name="productId">The product ID.</param><returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductById(System.String,System.String)">
 <summary>
 Gets the product by ID.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The variant ID.</param><returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductById(System.String,System.String,System.Boolean)">
 <summary>
 Gets the product by ID.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="useDefaultLanguage">if set to <c>true</c> [use default language].</param><returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductById(System.String,System.String,System.String)">
 <summary>
 Gets the product by ID.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="productLanguageId">The language ID.</param><returns></returns>
 <remarks>When specified product with variant id and language not equal <c>Common.Context.LanguageID</c> not found returns product with variant id from <c>Common.Context.LanguageID</c></remarks> 
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductById(System.String,System.String,System.String,System.Boolean)">
 <summary>
 Gets the product by ID.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="productLanguageId">The language ID.</param><returns></returns>
 <param name="useAssortments">If set to <c>true</c> use assortments.</param>
 <remarks>When specified product with variant id and language not equal <c>Common.Context.LanguageID</c> not found returns product with variant id from <c>Common.Context.LanguageID</c></remarks> 
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetAllProductsByShopId(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string shopID)
   {
       ProductCollection dwProds = Product.GetAllProductsByShopID(shopID);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets all products from shop. No language filter is applied meaning all language version of all products in the shop are returned.
 </summary>
 <param name="shopId">DB field name is ShopGroupShopID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetAllProductsByShopId(System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string shopID)
   {
       ProductCollection dwProds = Product.GetAllProductsByShopID(shopID);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets all products from shop. No language filter is applied meaning all language version of all products in the shop are returned.
 </summary>
 <param name="shopId">DB field name is ShopGroupShopID.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByShopId(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string shopID)
   {
       ProductCollection dwProds = Product.GetProductsByShopID(shopID);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets products from shop. Context.LanguageID is used.
 </summary>
 <param name="shopId">DB field name is ShopGroupShopID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByShopId(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string shopID, string productLanguageId)
   {
       ProductCollection dwProds = Product.GetProductsByShopID(shopID, productLanguageId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets products from shop.
 </summary>
 <param name="shopId">DB field name is ShopGroupShopID.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByShopId(System.String,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string shopID, string productLanguageId)
   {
       ProductCollection dwProds = Product.GetProductsByShopID(shopID, productLanguageId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets products from shop.
 </summary>
 <param name="shopId">DB field name is ShopGroupShopID.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetLastActiveProducts(System.Int32)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts()
   {
       ProductCollection dwProds = Product.GetLastActiveProducts(10);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the last active products. Context.LanguageID is used.
 </summary>
 <param name="count">Select top from selected items.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetLastActiveProducts(System.Int32,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string productLanguageId)
   {
       ProductCollection dwProds = Product.GetLastActiveProducts(10, productLanguageId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the last active products.
 </summary>
 <param name="count">Select top from selected items.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetLastActiveProducts(System.Int32,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string productLanguageId)
   {
       ProductCollection dwProds = Product.GetLastActiveProducts(10, productLanguageId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the last active products.
 </summary>
 <param name="count">Select top from selected items.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetLastActiveProducts(System.Int32,System.String[])">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string[] groupIds)
   {
       ProductCollection dwProds = Product.GetLastActiveProducts(10, groupIds);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the last active products. Context.LanguageID is used.
 </summary>
 <param name="count">Select top from selected items.</param>
 <param name="groupIds">The array of group IDs.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetLastActiveProducts(System.Int32,System.String[],System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string[] groupIds, string productLanguageId)
   {
       ProductCollection dwProds = Product.GetLastActiveProducts(10, groupIds, productLanguageId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the last active products. Context.LanguageID is used.
 </summary>
 <param name="count">Select top from selected items.</param>
 <param name="groupIds">The array of group IDs.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetLastActiveProducts(System.Int32,System.String[],System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string[] groupIds, string productLanguageId)
   {
       ProductCollection dwProds = Product.GetLastActiveProducts(10, groupIds, productLanguageId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the last active products. Context.LanguageID is used.
 </summary>
 <param name="count">Select top from selected items.</param>
 <param name="groupIds">The array of group IDs.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetActiveProducts">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts()
   {
       ProductCollection dwProds = Product.GetActiveProducts();
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the active products. Context.LanguageID is used.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetActiveProducts(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string productLanguageId)
   {
       ProductCollection dwProds = Product.GetActiveProducts(productLanguageId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the active products.
 </summary>
 <param name="productLanguageId">The language ID to use.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetActiveProducts(System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getActiveProducts(string productLanguageId)
   {
       ProductCollection dwProds = Product.GetActiveProducts(productLanguageId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the active products.
 </summary>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetAllProducts">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getProducts()
   {
       ProductCollection dwProds = Product.getAllProducts();
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets all products. Context.LanguageID is used.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetAllProducts(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getProducts()
   {
       ProductCollection dwProds = Product.getAllProducts();
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets all products.
 </summary>
 <param name="productLanguageId">The language ID to use.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetAllProducts(System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getProducts()
   {
       ProductCollection dwProds = Product.getAllProducts();
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets all products.
 </summary>
 <param name="productLanguageId">The language ID to use.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.RelatedProducts">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Product product;
    private Product productNew;
    private void SavePrices()
    {
         foreach (Dynamicweb.eCommerce.Products.ProductRelated pr in product.RelatedProducts)
         {
             pr.Save(productNew.ID, pr.ProdRelID);
         }
    }
}
 </code>
 </example>
 <summary>
 Gets the related products. 
 Related products are used to suggest a customer to buy complementary products to the products they want to buy, e.group. a shirt and a tie.
 Administrator can create relations in Management Center -> eCommerce settings -> Product catalog -> Related products.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.RelatedCountFrontend">
 <summary>
 Gets the RelatedProducts counting.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.Copy">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Product product;
   public Product DoSave()
   {
       Product product = new Product();
       product = product.Copy();
       return product;
   }
}
 </code>
 </example>
 <summary>
 Copies this instance and saves it in the DB. This method like Clone method, but generates new ID and sets empty VariantID.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.Clone">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Product product;
   public void DoSave()
   {
       Product product = new Product();
       product = product.Clone();
       product.ID = string.Empty;
       product.VariantID = string.Empty;
       product.Save(product.ID, product.VariantID);
   }
}
 </code>
 </example>
 <summary>
 Clones this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.CopyAsVariant(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Product product;
   public Product DoSave()
   {
       Product product = new Product();
       product = product.CopyAsVariant(product.VariantID);
       return product;
   }
}
 </code>
 </example>
 <summary>
 Copies this instance and saves it in the DB.
 </summary>
 <param name="productVariantId">The variant ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.Delete">
 <summary>
 Deletes this <see cref="T:Dynamicweb.Ecommerce.Products.Product" />. If this instance is a Variant or a specific language version, then only this instance is deleted. Requires the product to be in the Database or exception is thrown.
 </summary>
 <exception cref="T:System.ArgumentException">If <see cref="T:Dynamicweb.Ecommerce.Products.Product" /> does not exist in the database.</exception>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.IsSameProduct(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Determines whether the given product is the same as this product.
 This is not an object comparison but an ID comparison.
 Product ID and Variant ID (including virtual Variant ID where applicable).
 </summary>
 <param name="product">The product.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetPropertyValue(System.String)">
 <summary>
 Gets the property value.
 </summary>
 <param name="propertyName">Name of the property.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.Delete(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoDelete(string ProductID)
   {
       //TODO: insert your code here
   
       Product.Delete(ProductID);       
   }
}
 </code>
 </example>
 <summary>
 Deletes the specified product.
 </summary>
 <param name="productId">DB field name is ProductID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.DeleteVariant(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoDelete(string ProductID, string VariantID)
   {
       //TODO: insert your code here
 
       Product.DeleteVariant(ProductID, VariantID);       
   }
}
 </code>
 </example>
 <summary>
 Deletes the variant.
 </summary>
 <param name="productId">DB field name is ProductID.</param>
 <param name="productVariantId">DB field name is ProductVariantID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.DeleteVariants(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoDelete(string ProductID, string VariantID)
   {
       //TODO: insert your code here
 
       Product.DeleteVariants(ProductID, VariantID);       
   }
}
 </code>
 </example>
 <summary>
 Deletes the specified variant from all language layers.
 </summary>
 <param name="productId">DB field name is ProductID.</param>
 <param name="productVariantId">DB field name is ProductVariantID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.DeleteLanguageSpecificProduct(System.String,System.String,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoDelete(string ProductID, string VariantID, string productLanguageId)
   {
       //TODO: insert your code here
 
       Product.DeleteLanguageSpecificProduct(ProductID, VariantID, productLanguageId);       
   }
}
 </code>
 </example>
 <summary>
 Deletes the variant.
 </summary>
 <param name="productId">DB field name is ProductID.</param>
 <param name="productVariantId">DB field name is ProductVariantID.</param>
 <param name="productLanguageId">DB field name is ProductLanguageID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.Delete(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Dynamicweb.eCommerce.Products.Product product;
   public void DoDelete(string SQL)
   {
       //TODO: insert your code here
 
       ProductCollection products = new ProductCollection();
       products.Load(SQL);
       product.Delete(products);       
   }
}
 </code>
 </example>
 <summary>
 Deletes the specified products.
 </summary>
 <param name="products">The products.</param>
 <returns>The SQL query.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.DeleteAll(Dynamicweb.Ecommerce.Products.ProductCollection,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoDelete(string SQL)
   {
       //TODO: insert your code here
 
       ProductCollection products = new ProductCollection();
       products.Load(SQL);
       SQL = Product.DeleteAll(products, false);
       Database.ExecuteNonQuery(SQL);
   }
}
 </code>
 </example>
 <summary>
 Deletes all.
 </summary>
 <param name="products">The products.</param>
 <param name="doRun">if set to <c>true</c> execute.</param>
 <returns>The SQL query</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.DeleteAll(System.Collections.Generic.List{System.String},System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoDelete(string SQL)
   {
       ProductCollection products = new ProductCollection();
       products.Load(SQL);
       List&lt;string&gt; idList = new List&lt;string&gt;();
       foreach (Product product in products)
       {
           idList.Add(product.ID);
       }
 
       SQL = Product.DeleteAll(idList, false);
       Database.ExecuteNonQuery(SQL);
   }
}
 </code>
 </example>
 <summary>
 Deletes all.
 </summary>
 <param name="ids">The list of IDs.</param>
 <param name="doRun">if set to <c>true</c> execute.</param>
 <returns>The SQL query</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsBySql(System.String)">
 <summary>
 Gets the ProductCollection object.
 </summary>
 <param name="query">The SQL query.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsBySql(System.Boolean,System.String)">
 <summary>
 Gets the ProductCollection object.
 </summary>
 <param name="useAssortments">if set to <c>true</c> assortments are used to filter the product collection.</param>
 <param name="query">The SQL query.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.RemoveItem(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private void DelProductItem()
   {
       Product product = new Product();
       product = (Product)Session["Ecom.Backend.Product"];

       string itemID = Context.Current.Request.QueryString["itemID"];

       product.RemoveItem(itemID);
       ProductItem pi = new ProductItem();
       pi.Delete(itemID, product.ID);
   }
}
 </code>
 </example>
 <summary>
 Removes the item.
 </summary>
 <param name="itemId">The item ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetCommaSeparatedProductIDs(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public string Delete(ProductCollection products, bool run)
   {
       string SQL = "DELETE FROM EcomDetails WHERE DetailProductID " + Product.GetSqlConditionPartForIDs(Product.GetCommaSeparatedProductIDs(products)) + "; ";
       if (run)
       {
           Database.ExecuteNonQuery(SQL);
       }
       return SQL;
   }
}
 </code>
 </example>
 <summary>
 Returns list of IDs.
 </summary>
 <param name="products">The products.</param>
 <exception cref="T:System.ArgumentNullException">If given <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection" /> is null.</exception>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetAllProductsWithoutVariants">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getProducts()
   {
       ProductCollection dwProds = Product.GetAllProductsWithoutVariants();
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets all products without variants. Context.LanguageID is used.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetAllProductsWithoutVariants(System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getProducts()
   {
       ProductCollection dwProds = Product.GetAllProductsWithoutVariants(true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets all products without variants. Context.LanguageID is used.
 </summary>
 <param name="doRefactoring">if set to <c>true</c>; - do refactoring the product collection.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetAllProductsWithoutVariants(System.Boolean,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getProducts(string productLanguageId)
   {
       ProductCollection dwProds = Product.GetAllProductsWithoutVariants(true, productLanguageId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets all products without variants.
 </summary>
 <param name="doRefactoring">if set to <c>true</c>; - do refactoring the product collection.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetAllProductsWithoutVariants(System.Boolean,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public static void getProducts(string productLanguageId)
   {
       ProductCollection dwProds = Product.GetAllProductsWithoutVariants(true, productLanguageId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets all products without variants.
 </summary>
 <param name="doRefactoring">if set to <c>true</c>; - do refactoring the product collection.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsAndVariantsByProduct(Dynamicweb.Ecommerce.Products.Product)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(Product product)
   {
       ProductCollection dwProds = Product.GetProductsAndVariantsByProduct(product);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the all products and variants with the same product ID and language ID as the given product.
 </summary>
 <param name="product">The product.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.Save">
 <example>
 <code title="C#" description="" lang="CS">
class class MyPage : System.Web.UI.Page
{
   public void DoSave()
   {
       Product product = new Product();
       product.Save();
   }
}
 </code>
 </example>
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.Save(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Product targetProduct;
    private void SaveSelectedPhrase(string phrase)
    {
        string productID = Converter.ToString(Request.QueryString["ProductID"]);
        string productVariantID = Converter.ToString(Request.QueryString["ProductVariantID"]);
        targetProduct.OptimizedFor = phrase;
        targetProduct.Save(productID, productVariantID);
    }
}
 </code>
 </example>
 <summary>
 Saves this instance.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The product variant ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.Save(System.String,System.String,System.String)">
 <summary>
 Saves this instance. See <see cref="M:Dynamicweb.Ecommerce.Products.Product.Save"></see> for example.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The product variant ID.</param>
 <param name="productLanguageId">The product language ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.SaveAndConfirm(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Product targetProduct;
    private void SaveSelectedPhrase(string phrase)
    {
        string productID = Converter.ToString(Request.QueryString["ProductID"]);
        string productVariantID = Converter.ToString(Request.QueryString["ProductVariantID"]);
        targetProduct.OptimizedFor = phrase;
        if(targetProduct.SaveAndConfirm(productID, productVariantID))
        {
            //TODO: insert your code here
        }
    }
}
 </code>
 </example>
 <summary>
 Saves this instance and confirms it.
 </summary>
 <param name="productId">DB field name is ProductID.</param>
 <param name="productVariantId">DB field name is ProductVariantID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.SaveAndConfirm(System.String,System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Product targetProduct;
    private void SaveSelectedPhrase(string phrase)
    {
        string productID = Converter.ToString(Request.QueryString["ProductID"]);
        string productVariantID = Converter.ToString(Request.QueryString["ProductVariantID"]);
        targetProduct.OptimizedFor = phrase;
        if(targetProduct.SaveAndConfirm(productID, productVariantID, Context.LanguageID()))
        {
            //TODO: insert your code here
        }
    }
}
 </code>
 </example>
 <summary>
 Saves this instance and confirms it.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The product variant ID.</param>
 <param name="productLanguageId">The product language ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.Save(System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class class MyPage : System.Web.UI.Page
{
   public void DoSave()
   {
       Product product = new Product();
       product.Save(true);
   }
}
 </code>
 </example>
 <summary>
 Saves this instance.
 </summary>
 <param name="skipExtendedSave">If true; Extended Save of the Product is skipped. Default is false.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.Save(System.String,System.String,System.Boolean)">
 <summary>
 Saves this instance.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The product variant ID.</param>
 <param name="skipExtendedSave">If true; Extended Save of the Product is skipped. Default is false.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.Save(System.String,System.String,System.String,System.Boolean)">
 <summary>
 Saves this instance.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The product variant ID.</param>
 <param name="productLanguageId">The product language ID.</param>
 <param name="skipExtendedSave">If true; Extended Save of the Product is skipped. Default is false.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.SaveAndConfirm(System.String,System.String,System.Boolean)">
 <summary>
 Saves this instance and confirms it.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The product variant ID.</param>
 <param name="skipExtendedSave">If true; Extended Save of the Product is skipped. Default is false.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.SaveAndConfirm(System.String,System.String,System.String,System.Boolean)">
 <summary>
 Saves this instance and confirms it.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="productVariantId">The product variant ID.</param>
 <param name="productLanguageId">The product language ID.</param>
 <param name="skipExtendedSave">If true; Extended Save of the Product is skipped. Default is false.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.UpdateUnitCount(Dynamicweb.Ecommerce.Products.Product,System.Int32)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Product product;
   public void StockForUnits(Product product)
   {
       if (Request["saveUnit"] == "1")
       {
           AddProdUnit(product);

           Dynamicweb.eCommerce.Variants.VariantOptionCollection units = Dynamicweb.eCommerce.Variants.VariantOption.getVariantOptions(product, 1);
           Product.UpdateUnitCount(product, units.Count);
       }
   }

   private void AddProdUnit(Product product)
   {
       string reqName = null;
       string reqValue = null;

       if (Converter.ToInt32(product.Type) == 0)
       {
           Dynamicweb.eCommerce.Stocks.StockUnit su = new Dynamicweb.eCommerce.Stocks.StockUnit();
           su.Delete(product.ID);

           foreach (string item in Request.Form)
           {
               reqName = item.ToString();
               reqValue = Request[item];

               if (reqName.IndexOf("PRODUNIT_ID") == 0)
               {
                   if (!string.IsNullOrEmpty(reqValue))
                   {
                       su.ProductID = product.ID;
                       su.VariantID = "";
                       su.UnitID = reqValue;
                       su.Save(product.ID, "", reqValue);
                   }
               }
           }
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the unit counter.
 </summary>
 <param name="product">The product.</param>
 <param name="unitCount">The unit counter.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByProductIDs(System.String[])">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(string[] productIds)
   {
       ProductCollection dwProds = Product.GetProductsByProductIDs(productIds);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products. Context.LanguageID is used.
 </summary>
 <param name="productIds">The collection of product IDs.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByProductIDs(System.String[],System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(string[] productIds)
   {
       ProductCollection dwProds = Product.GetProductsByProductIDs(productIds, true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products. Context.LanguageID is used.
 </summary>
 <param name="productIds">The array of products ID.</param>
 <param name="doRefactoring">if set to <c>true</c> removes not used items.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByProductIDs(System.String[],System.Boolean,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(string[] productIds)
   {
       ProductCollection dwProds = Product.GetProductsByProductIDs(productIds, true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="productIds">The array of products ID.</param>
 <param name="doRefactoring">if set to <c>true</c> removes not used items.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByProductIDs(System.String[],System.Boolean,System.Boolean,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(string[] productIds)
   {
       ProductCollection dwProds = Product.GetProductsByProductIDs(productIds, true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="productIds">The array of products ID.</param>
 <param name="doRefactoring">if set to <c>true</c> removes not used items.</param>
 <param name="productLanguageId">The language ID to use.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter the products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.UpdateDefaultVariantId(Dynamicweb.Ecommerce.Products.Product,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void VariantOptions(Product product)
   {
       string overwriteDefaultVarCombo = string.Empty;
       if (Request["saveVariant"] == "1")
       {
           Dynamicweb.eCommerce.Variants.VariantCombinationCollection variantCombinationCollection = Dynamicweb.eCommerce.Variants.VariantCombination.getProductCombinations(product);
           Product.UpdateVariantCnt(product, variantCombinationCollection.Count);
       }
       if (Request["saveDefaultVariant"] == "1")
       {
           if (!string.IsNullOrEmpty(Converter.ToString(Dynamicweb.Context.Current.Request("DefaultVariantComboID"))))
           {
               overwriteDefaultVarCombo = Converter.ToString(Dynamicweb.Context.Current.Request("DefaultVariantComboID"));
           }
           Product.UpdateDefaultVariantID(product, overwriteDefaultVarCombo);
       }
   }
}
 </code>
 </example>
 <summary>
 Updates the default variant ID.
 </summary>
 <param name="product">The product.</param>
 <param name="variantComboId">The variant combo ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.UpdateCounters">
 <summary>
 Updates the variant and unit counters. Should be called after adding variants or units to a product through the API.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductBySql(System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(string query)
   {
       ProductCollection dwProds = Product.GetProductBySql(query, true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products by SQL.
 </summary>
 <param name="query">The SQL query.</param>
 <param name="doRefactoring">if set to <c>true</c> removes not used items.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductBySql(System.String,System.Boolean,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(string query)
   {
       ProductCollection dwProds = Product.GetProductBySql(query, true);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products by SQL.
 </summary>
 <param name="query">The SQL query.</param>
 <param name="doRefactoring">if set to <c>true</c> removes not used items.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductBySql(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(string query)
   {
       ProductCollection dwProds = Product.GetProductBySql(query);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products by SQL.
 </summary>
 <param name="query">The SQL query.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByProductAndVariantId(Dynamicweb.Ecommerce.Products.Product,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Dynamicweb.eCommerce.Products.Product product;
   public void getActiveProducts(string variantId)
   {
       ProductCollection dwProds = Product.GetProductsByProductAndVariantID(product, variantId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="product">The product.</param>
 <param name="productVariantId">The variant ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByProductAndVariantId(Dynamicweb.Ecommerce.Products.Product,System.String,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Dynamicweb.eCommerce.Products.Product product;
   public void getActiveProducts(string variantId)
   {
       ProductCollection dwProds = Product.GetProductsByProductAndVariantID(product, variantId);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="product">The product.</param>
 <param name="productVariantId">The variant ID.</param>
 <param name="useAssortments">If set to <c>true</c> assortments are used to filter products.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetProductsByVariantGroup(Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void getActiveProducts(Dynamicweb.eCommerce.Variants.VariantGroup vgpr)
   {
       ProductCollection dwProds = Product.GetProductsByVariantGroup(vgrp);
       foreach (Product dwProd in dwProds)
       {
           //TODO: insert your code here
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the products.
 </summary>
 <param name="variantGroup">The VariantGroup object.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.GetPagedProductsByVariantGroup(Dynamicweb.Ecommerce.Variants.VariantGroup,System.Int32,System.Int32)">
 <summary>
 Gets the products portion limited by page size.
 </summary>
 <param name="variantGroup">The VariantGroup object.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Product.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.Product" /> class.
 </summary>
 <param name="DataReader">DataReader.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification">
 <summary>
 Represents information about an <see cref="T:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification">product back in stock notification</see>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.UserId">
 <summary>
 Gets the user Id
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.Email">
 <summary>
 Gets or sets the user email
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.ProductId">
 <summary>
 Gets or sets the product Id
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.VariantId">
 <summary>
 Gets or sets the product variant Id
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.LanguageId">
 <summary>
 Gets or sets the product language Id
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.UnitId">
 <summary>
 Gets or sets the product unit Id
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.ContextLanguageId">
 <summary>
 Gets or sets the context language Id
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.ContextAreaId">
 <summary>
 Gets or sets the context area Id
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.Created">
 <summary>
 Gets the notification create time
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.SentTime">
 <summary>
 Gets the notification sent time
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification">Notification</see> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification">Notification</see> class from data reader.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.FillRow(System.Data.DataRow)">
 <summary>
 Fills the given <see cref="T:System.Data.DataRow">System.Data.DataRow</see> object with property values of the current object.
 </summary>
 <param name="row">An instance of the <see cref="T:System.Data.DataRow">System.Data.DataRow</see> object to write data to.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.Fill(System.Data.IDataReader)">
 <summary>
 Fills the Notification properties from the specified data reader.
 </summary>
 <param name="reader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.DeleteById(System.Int32)">
 <summary>
 Deletes notification by id..
 </summary>
 <param name="id">The notification id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.DeleteByProduct(System.String,System.String,System.String)">
 <summary>
 Deletes notifications by a product.
 </summary>
 <param name="productId">The product id.</param>
 <param name="variantId">The product variant id.</param>
 <param name="languageId">The product language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.SetMessageSent(System.Collections.Generic.IEnumerable{System.Int32})">
 <summary>
 Updates notifications with given ids with message sent status.
 </summary>
 <param name="notificationIds">The notifications ids.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.RegisterNotification(System.String,Dynamicweb.Ecommerce.Products.Product,System.String)">
 <summary>
 Registers a new notification for the product and unit id with given email.
 </summary>
 <param name="email">The email address.</param>
 <param name="product">The product.</param>
 <param name="unitId">The unit id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.BackInStockNotificationExists(Dynamicweb.Ecommerce.Products.Product,System.String)">
 <summary>
 Checks whether notification exists by product and unit id.
 </summary>
 <param name="product">The product</param>
 <param name="unitId">The unit id.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.GetNotificationById(System.Int32)">
 <summary>
 Gets notification by the id.
 </summary>
 <param name="notificationId">The notification id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.GetNotificationsToSent(System.Int32)">
 <summary>
 Gets notification ready to sent.
 </summary>
 <param name="areaId">The area id.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductBackInStockNotification.UnsubscribeNotifications(System.String)">
 <summary>
 Unsubscribes the email from notification.
 </summary>
 <param name="email"></param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductCollection">
 <summary>
 Represents a collection of the products.
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\BomConfiguratorSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.Insert(System.Int32,Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Inserts the given product at the specified index.
 </summary>
 <param name="index">Zero-based index.</param>
 <param name="product">Product to insert.</param>
 <remarks>If the index is less the zero then the product will be inserted at the beginning of the list. If the index is greater (or equal to) the number of products in the collection then the product will be inserted at the end of the list.</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.AddRange(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Products.Product},System.Boolean)">
 <summary>
 Adds a range of products to this collection.
 </summary>
 <param name="collection">The range of products to add.</param>
 <param name="allowDuplicates">If True, then the same product can be added more than once. Otherwise it will not be added again</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.Contains(Dynamicweb.Ecommerce.Products.Product)">
 -----------------------------------------------------------------------------
 <summary>
 Search the ProductCollection for existence of the given product
 </summary>
 <param name="Product">The product.</param>
 <returns>
 <c>true</c> if the list contains the specified product; otherwise, <c>false</c>.
 </returns>
 <remarks>
 </remarks>
 <history>
 	[tfc]	28-08-2006	Created
 </history>
 -----------------------------------------------------------------------------
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.LoadPrices">
 <summary>
 Loads the prices.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.LoadStockUnits">
 <summary>
 Loads the stock units.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.LoadProductItems">
 <summary>
 Loads the product items.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.LoadProductCategoryValues">
 <summary>
 Loads the product category values.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.LoadStocks">
 <summary>
 Loads the stocks.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.IndexOf(System.String)">
 <summary>
 Searches product in the list by ID.
 </summary>
 <param name="productId">The product ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.Replace(System.Int32,Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Replaces the product at specified position with another one.
 </summary>
 <param name="index">Product index.</param>
 <param name="data">Product to be placed at the specified index.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.GetProductById(System.String)">
 <summary>
 Gets the product by ID.
 </summary>
 <param name="productId">The product ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.GetProductById(System.String,System.String)">
 <summary>
 Gets the product by ID and variant ID.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="variantId">The variant ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.Load(System.String)">
 <summary>
 Loads data for products from DB.
 </summary>
 <param name="query">The SQL query.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.Load(System.String,System.Boolean)">
 <summary>
 Loads the data for products from DB.
 </summary>
 <param name="query">The SQL query.</param>
 <param name="doRefactoring">if set to <c>true</c> then removes not used items from product list.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.Load(System.String,System.Boolean,System.Boolean)">
 <summary>
 Loads the data for products from DB.
 </summary>
 <param name="query">The SQL query.</param>
 <param name="doRefactoring">if set to <c>true</c> then removes not used items from product list.</param>
 <param name="useAssortments">if set to <c>true</c> then assortments are used to re-factor the product collection.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.SaveAllProducts">
 <summary>
 Saves all <see cref="T:Dynamicweb.Ecommerce.Products.Product" /> objects the this <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection" />.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.ReFactorProductList">
 <summary>
 Removes not used items from product list.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.ReFactorProductList(System.Boolean)">
 <summary>
 Removes not used items from product list.
 </summary>
 <param name="useAssortments">If set to <c>true</c> then assortments are used to re-factor the product collection.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.Remove(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Removes the specified products.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.Contains(Dynamicweb.Ecommerce.Products.Product,System.Boolean)">
 <summary>
 Search the ProductCollection for existence of the product.
 </summary>
 <param name="product">The product.</param>
 <param name="defaultCheck">if set to <c>true</c> then calls default method.</param>
 <returns>
 <c>true</c> if the list contains the specified product; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.Sort">
 <summary>
 Sorts this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.Sort(System.String)">
 <summary>
 Sorts this instance.
 </summary>
 <param name="sortBy">The sort by product field name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.Sort(System.String,Dynamicweb.Ecommerce.Products.SortDirection)">
 <summary>
 Sorts this instance.
 </summary>
 <param name="sortBy">The sort by product field name.</param>
 <param name="sortDirectionEnum">The sort direction enum.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.Sort(System.String,Dynamicweb.Ecommerce.Products.SortDirection,System.String)">
 <summary>
 Sorts this instance.
 </summary>
 <param name="sortBy">The sort by product field name.</param>
 <param name="sortDirectionEnum">The sort direction enum.</param>
 <param name="groupId">An ID of the group to perform a sorting within.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductCollection.DefaultSortByField">
 <summary>
 Default Sort By Field Name
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductCollection.UserDefinedSortByField">
 <summary>
 User Defined Sort By Field Name
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductCollection.SortByField">
 <summary>
 Gets or sets the sort by field.
 </summary>
 <value>The sort by field.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.SortByFieldExists(System.String)">
 <summary>
 Checks if the sortBy exists
 </summary>
 <param name="fieldName">Name that should be found in the Product fields, custom and calculated fields</param>
 <returns></returns>
 <remarks></remarks>
 <history>
 	[eal]	18-04-2007	Created
 </history>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.GetSortByFieldsList">
 <summary>
 Returns Product sorting fields, Product Custom Fields and Calculated Fields list
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.IsProductSortByField(System.String)">
 <summary>
 Returns true if field name is product field. Otherwise false
 </summary>
 <param name="fieldName">Field name to check</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.IsCustomFieldSortByField(System.String)">
 <summary>
 Returns true if field name is custom product field. Otherwise false
 </summary>
 <param name="fieldName">Field name to check</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCollection.IsFieldNamesEqual(System.String,System.String)">
 <summary>
 Returns true if field names are equal(ignore case). Otherwise false
 </summary>
 <param name="x">Field name to compare</param>
 <param name="y">Field name to compare</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductCommentSaveSubscriber">
 <summary>
 The class ProductCommentSaveSubscriber represents after product comment saved event subscriber.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductCommentSaveSubscriber.OnNotify(System.String,Dynamicweb.Extensibility.Notifications.NotificationArgs)">
 <summary>
 Notifies when the notification in triggered.
 </summary>
 <param name="notification">The notification.</param>
 <param name="arguments">The <seealso cref="T:Dynamicweb.Notifications.Commenting.CommentArgs">arguments</seealso></param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductDataBaseField">
 <summary>
 DB fields.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductDefaultShopId">
 <summary>
 Default shop ID
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductNumber">
 <summary>
 Number
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductName">
 <summary>
 Name
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductShortDescription">
 <summary>
 Short description
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductLongDescription">
 <summary>
 Long description
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductImageSmall">
 <summary>
 Small image
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductImageMedium">
 <summary>
 Medium image
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductImageLarge">
 <summary>
 Large image
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductImages">
 <summary>
 Product Images complex field - primary image + images from links
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductLink1">
 <summary>
 The link
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductLink2">
 <summary>
 The link
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductDetailsImages">
 <summary>
 The product details images
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductDetailsText">
 <summary>
 The product details text
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductPrice">
 <summary>
 Price
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductCost">
 <summary>
 Cost
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductStock">
 <summary>
 Stock
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductStockGroupId">
 <summary>
 Stock group ID
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductWeight">
 <summary>
 Weight
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductVolume">
 <summary>
 Volume
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductVatGrpId">
 <summary>
 VAT ID
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductManufacturerId">
 <summary>
 Manufacturer ID
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductActive">
 <summary>
 Active or not
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductPeriodId">
 <summary>
 Period ID
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductCreated">
 <summary>
 When was created
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductUpdated">
 <summary>
 When was updated
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductCustomFieldsXml">
 <summary>
 XML
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductType">
 <summary>
 Type
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductPriceType">
 <summary>
 Type of price
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductPriceCounter">
 <summary>
 Counter of prices
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductVariantCounter">
 <summary>
 Counter of variants
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductVariantProdCounter">
 <summary>
 Counter of product variants
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductVariantGroupCounter">
 <summary>
 Counter of group variants
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductRelatedCounter">
 <summary>
 Related counter
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductUnitCounter">
 <summary>
 Unit counter
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductDefaultUnitId">
 <summary>
 Default unit ID
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductDefaultVariantComboId">
 <summary>
 Default variant combo ID
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductPriceMatrixUnit">
 <summary>
 Price matrix unit
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductPriceMatrixVariant">
 <summary>
 Price matrix variant
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductPriceMatrixPeriod">
 <summary>
 Price matrix period
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductPriceMatrixMultiplePrices">
 <summary>
 Multiple prices
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductPriceMatrixQuantitySpecification">
 <summary>
 Quantity specification
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductMetaKeywords">
 <summary>
 Meta information Keywords
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.OptimizedFor">
 <summary>
 A keyword or phrase for which this product's meta data is optimized for.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductRating">
 <summary>
 The rating for this products
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductCommentcount">
 <summary>
 The count of comments on this product
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductDefaultPoints">
 <summary>
 The count of loyalty points
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductMetaTitle">
 <summary>
 Meta information Title
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductMetaDescription">
 <summary>
 Meta information Description
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductMetaUrl">
 <summary>
 Meta information Url
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductMetaCanonical">
 <summary>
 Meta information Canonical
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductShowInProductList">
 <summary>
 Show in product list
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductApprovalState">
 <summary>
 Approval state
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductDataBaseField.ProductWorkflowStateId">
 <summary>
 Workflow state
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductDeleting">
 <summary>
 Represents methods for deleting products.
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\ProductDeleteHandlerSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductDeleting.RunCleanUp">
 <summary>
 Deletes all products that don't have a group.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductDeleting.Run(System.String,System.String)">
 <summary>
 Runs deleting.
 </summary>
 <param name="productId">The product id.</param>
 <param name="groupId">The group id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductDeleting.Run(System.String,System.String,System.String)">
 <summary>
 Runs deleting.
 </summary>
 <param name="productId">The product id.</param>
 <param name="groupId">The group id.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductDeleting.Run(Dynamicweb.Ecommerce.Products.ProductCollection,Dynamicweb.Ecommerce.Products.GroupCollection)">
 <summary>
 Runs deleting.
 </summary>
 <param name="products">The products.</param>
 <param name="groups">The groups.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductDeleting.Run(Dynamicweb.Ecommerce.Products.ProductCollection,Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Runs deleting.
 </summary>
 <param name="products">The products.</param>
 <param name="group">The group.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductDeleting.Run(Dynamicweb.Ecommerce.Products.ProductCollection,Dynamicweb.Ecommerce.Products.Group,System.String)">
 <summary>
 Runs deleting.
 </summary>
 <param name="products">The products.</param>
 <param name="group">The group.</param>
 <param name="languageId">The language ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductDeleting.DeleteRelations(Dynamicweb.Ecommerce.Products.ProductCollection,Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Deletes the relations.
 </summary>
 <param name="products">The products.</param>
 <param name="group">The group.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductDeleting.DeleteProducts(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Deletes the products.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductDeleting.RemoveParagraphModuleSetting(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Removes the product paragraph XML.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductDeleting.CanDeleteProducts(Dynamicweb.Ecommerce.Products.Product[])">
 <summary>
 To delete products current user must have access for all product groups.
 </summary>
 <param name="products">Products for deleting</param>
 <returns>False or True.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductField">
 <summary>
 Provides information about a product field.
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\ProductGroupCustomFieldsRendererSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductField.Id">
 <summary>
 Gets or sets the ID.
 </summary>
 <value>The ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductField.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductField.SystemName">
 <summary>
 Gets or sets a system name.
 </summary>
 <value>System name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductField.TemplateName">
 <summary>
 Gets or sets the name of the template.
 </summary>
 <value>The name of the template.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductField.TypeId">
 <summary>
 Gets or sets the type of ID.
 </summary>
 <value>The type of ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductField.TypeName">
 <summary>
 Gets or sets the name of the type.
 </summary>
 <value>The name of the type.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductField.DoNotRender">
 <summary>
 Is used to skip the field in the loops in the frontend rendering.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductField.Locked">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Products.ProductField" /> is locked.
 </summary>
 <value><c>true</c> if locked; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductField.Sort">
 <summary>
 Gets or sets the sorting.
 </summary>
 <value>The sort.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductField.Types">
 <summary>
 Gets or sets the types.
 </summary>
 <value>The types.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductField.ListPresentationType">
 <summary>
 Gets or sets the presentation type for this field (only applies for product fields of type "list").
 </summary>
 <remarks>Setting this property only makes sense for product fields of type "list".</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductField.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductField" /> class.
 </summary>
 <param name="fieldId">The field ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductField.#ctor(Dynamicweb.Ecommerce.Products.ProductField)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductField" /> class.
 </summary>
 <param name="copyOf">The ProductField object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductField.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductField" /> class.
 </summary>
 <param name="dataReader">DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductField.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductField" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductField.GetById(System.String)">
 <summary>
 Gets the ProductField object by ID.
 </summary>
 <param name="fieldId">DB field name is ProductFieldID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductField.Fill(System.Data.IDataReader)">
 <summary>
 Fills the properties from DataReader.
 </summary>
 <param name="dataReader">DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductField.Save(System.String)">
 <summary>
 Saves the properties into DB.
 </summary>
 <param name="fieldId">DB field name is ProductFieldID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductField.UpdateTable">
 <summary>
 Updates the table.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductField.FieldExists(System.String)">
 <summary>
 Determines whether field with the given system name already exists.
 </summary>
 <param name="name">System name of the field.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductField.SaveAtProduct(Dynamicweb.Ecommerce.Products.Product,System.Collections.Specialized.NameValueCollection)">
 <summary>
 Saves the product.
 </summary>
 <param name="prod">The product.</param>
 <param name="pfCollection">The NameValueCollection object.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductField.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductField.Delete(System.String)">
 <summary>
 Deletes the instance by ProductFieldID.
 </summary>
 <param name="fieldId">DB field name is ProductFieldID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductField.Lock">
 <summary>
 Locks this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductField.GetProductFields">
 <summary>
 Gets the collection ProductField objects.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductField.FindProductFieldsBySystemName(System.String)">
 <summary>
 Finds the collection ProductField objects.
 </summary>
 <param name="systemName">System name.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductField.FindProductFieldsBySystemName(System.String,System.String)">
 <summary>
 Finds the collection of ProductField objects.
 </summary>
 <param name="systemName">System name.</param>
 <param name="fieldId">The field ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductField.RemoveCachedProductFields">
 <summary>
 Remove dictionary from cache
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductField.CachedProductFields">
 <summary>
 Gets or sets a list of cached product fields.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductField.CachedCategoryFields">
 <summary>
 Gets or sets a list of cached product fields.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductFieldTranslation">
 <summary>
 The class ProductFieldTranslation represents <seealso cref="T:Dynamicweb.Ecommerce.Products.ProductField"/> translation.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductFieldTranslation.FieldId">
 <summary>
 The field id.
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductFieldTranslation.LanguageId">
 <summary>
 The language Id.
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductFieldTranslation.Name">
 <summary>
 The translation name.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldTranslation.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductFieldTranslation" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldTranslation.Fill(System.Data.IDataReader)">
 <summary>
 Fills the translation with data from given reader.
 </summary>
 <param name="reader"></param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldTranslation.Save">
 <summary>
 Saves the translation.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldTranslation.Delete(System.Int32)">
 <summary>
 Deletes the translation by given id.
 </summary>
 <param name="translationId"></param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldTranslation.ClearCache">
 <summary>
 Clears the translations cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldTranslation.GetTranslatedField(System.String,System.String)">
 <summary>
 Gets the product field translation
 </summary>
 <returns>The all translations</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldTranslation.IsTranslationExists(System.String,System.String)">
 <summary>
 Is translation exists
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldTranslation.GetTranslatedFieldName(Dynamicweb.Ecommerce.Products.ProductField,System.String)">
 <summary>
 Gets the product field Name translation
 </summary>
 <returns>The all translations</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldTranslation.GetTranslatedFields(System.String)">
 <summary>
 Gets the product field translations (all languages) 
 </summary>
 <returns>The all translations</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldTranslation.GetAllTranslations">
 <summary>
 Gets the all translations
 </summary>
 <returns>The all translations</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldTranslation.GetProductListBySql(System.String)">
 <summary>
 Gets the product field translations by SQL.
 </summary>
 <param name="query">The SQL query.</param>
 <returns>The collection of stock location.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldTranslation.EnsureCache">
 <summary>
 Ensures the cache.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductFieldTranslationCollection">
 <summary>
 The class ProductFieldTranslationCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Products.ProductFieldTranslation"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldTranslationCollection.Add(Dynamicweb.Ecommerce.Products.ProductFieldTranslation)">
 <summary>
 Add the product field translation
 </summary>
 <param name="field">The field.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldTranslationCollection.Contains(System.String,System.String)">
 <summary>
 Determines whether the collection contains a translation for the specified field ID and language ID.
 </summary>
 <param name="fieldId">The field id.</param>
 <param name="languageId">The language id.</param>
 <returns><c>true</c> if the collection contains a translation; otherwise <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldTranslationCollection.GetTranslatedField(System.String,System.String)">
 <summary>
 Gets the product field translation
 </summary>
 <param name="fieldId">The field id.</param>
 <param name="languageId">The language id.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldTranslationCollection.GetTranslatedFields(System.String)">
 <summary>
 Gets the product field translations (all languages) 
 </summary>
 <param name="fieldId">The field id.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductFieldValue">
 <summary>
 This class saves the new values for <see cref="P:Dynamicweb.Ecommerce.Products.ProductFieldValue.ProductField" />
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\ProductGroupCustomFieldsRendererSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductFieldValue.LanguageId">
 <summary>
 Gets the language id.
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductFieldValue.ProductField">
 <summary>
 Gets or sets the product field.
 </summary>
 <value>The product field.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductFieldValue.Value">
 <summary>
 Gets or sets the value.
 </summary>
 <value>The value.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductFieldValue.HasValue">
 <summary>
 Gets value indicating whether the product field value has been set.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldValue.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductFieldValue" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldValue.#ctor(Dynamicweb.Ecommerce.Products.ProductField,System.Object)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductFieldValue" /> class.
 </summary>
 <param name="productField">The product field.</param>
 <param name="Value">The value.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldValue.#ctor(System.String,Dynamicweb.Ecommerce.Products.ProductField,System.Object)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductFieldValue" /> class.
 </summary>
 <param name="languageID">Language ID.</param>
 <param name="productField">The product field.</param>
 <param name="Value">The value.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldValue.GetFieldName">
 <summary>
 Get product field name
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldValue.Save(System.Data.DataRow)">
 <summary>
 Saves the specified DataRow.
 </summary>
 <param name="dataRow">DataRow.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductFieldValueCollection">
 <summary>
 Represents a collection of ProductFieldValue objects.
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\ProductGroupCustomFieldsRendererSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldValueCollection.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductFieldValueCollection" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldValueCollection.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductFieldValueCollection" /> class.
 </summary>
 <param name="dataReader">DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldValueCollection.#ctor(System.String,System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductFieldValueCollection" /> class.
 </summary>
 <param name="languageId">The Language ID.</param>
 <param name="dataReader">The DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldValueCollection.#ctor(System.String,System.Data.IDataReader,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductFieldValueCollection" /> class.
 </summary>
 <param name="languageId">The Language ID.</param>
 <param name="dataReader">The DataReader.</param>
 <param name="checkIfColumnExists">If true check that product field columns exists in reader and add field value</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldValueCollection.Save(System.Data.DataRow)">
 <summary>
 Saves the specified DataRow.
 </summary>
 <param name="dataRow">DataRow.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductFieldValueCollection.GetProductFieldValue(System.String)">
 <summary>
 Gets the ProductFieldValue object.
 </summary>
 <param name="systemName">System name.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductGroupField">
 <summary>
 Represents information about product group.
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\ProductGroupFieldEditPageSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupField.Id">
 <summary>
 Gets or sets the ID.
 </summary>
 <value>The ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupField.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupField.SystemName">
 <summary>
 Gets or sets system name.
 </summary>
 <value>System name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupField.TemplateName">
 <summary>
 Gets or sets the name of the template.
 </summary>
 <value>The template name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupField.TypeId">
 <summary>
 Gets or sets the type of ID.
 </summary>
 <value>The type of ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupField.TypeName">
 <summary>
 Gets or sets the name of the type.
 </summary>
 <value>The type name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupField.Locked">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Products.ProductGroupField" /> is locked.
 </summary>
 <value><c>true</c> if locked; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupField.Sort">
 <summary>
 Gets or sets the sort.
 </summary>
 <value>The sort.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupField.Types">
 <summary>
 Gets or sets the types.
 </summary>
 <value>The types.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupField.Required">
 <summary>
 Gets or sets required value.
 </summary>
 <value>The types.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupField.ListPresentationType">
 <summary>
 Gets or sets the presentation type for this field (only applies for product group fields of type "list").
 </summary>
 <remarks>Setting this property only makes sense for product group fields of type "list".</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupField.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductGroupField" /> class using income ProductGroupFieldID.
 </summary>
 <param name="fieldId">DB field name is ProductGroupFieldID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupField.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductGroupField" /> class using income DataReader.
 </summary>
 <param name="dataReader">DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupField.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductGroupField" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupField.Fill(System.Data.IDataReader)">
 <summary>
 Fills properties from data reader.
 </summary>
 <param name="dataReader">DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupField.Save(System.String)">
 <summary>
 Saves the properties into DB.
 </summary>
 <param name="fieldId">DB field name is ProductGroupFieldID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupField.UpdateTable">
 <summary>
 Adds new field to either "EcomProducts" or "EcomGroups" table.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupField.FieldExists(System.String)">
 <summary>
 Determines whether field with the given system name already exists.
 </summary>
 <param name="name">System name of the field.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupField.Delete">
 <summary>
 Deletes this instance from DB.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupField.Delete(System.String)">
 <summary>
 Deletes the instance from DB by ProductGroupFieldID.
 </summary>
 <param name="fieldId">DB field name is ProductGroupFieldID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupField.Lock">
 <summary>
 Locks this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupField.GetProductGroupFields">
 <summary>
 Gets the ProductGroupFields.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupField.FindProductGroupFieldsBySystemName(System.String)">
 <summary>
 Finds the ProductGroupFields.
 </summary>
 <param name="SystemName">System name.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupField.FindProductGroupFieldsBySystemName(System.String,System.String)">
 <summary>
 Finds the ProductGroupFields in DB.
 </summary>
 <param name="SystemName">DB field name is ProductGroupFieldSystemName.</param>
 <param name="fieldId">DB field name is ProductGroupFieldID.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductGroupFieldCollection">
 <summary>
 The class ProductGroupFieldCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Products.ProductGroupField"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupFieldCollection.Load(System.String)">
 <summary>
 Loads the specified ProductGroupField object.
 </summary>
 <param name="query">The SQL query.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupFieldCollection.GetBySystemName(System.String)">
 <summary>
 Gets the ProductGroupField object.
 </summary>
 <param name="systemName">The system name.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductGroupFieldValue">
 <summary>
 This class saves the new values for <see cref="P:Dynamicweb.Ecommerce.Products.ProductGroupFieldValue.ProductGroupField" />
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\ProductGroupCustomFieldsRendererSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupFieldValue.ProductGroupField">
 <summary>
 Gets or sets the ProductGroupField.
 </summary>
 <value>The ProductGroupField object.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupFieldValue.Value">
 <summary>
 Gets or sets the value.
 </summary>
 <value>The value.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupFieldValue.HasValue">
 <summary>
 Gets value indicating whether the product field value has been set.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupFieldValue.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductGroupFieldValue" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupFieldValue.#ctor(Dynamicweb.Ecommerce.Products.ProductGroupField,System.Object)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductGroupFieldValue" /> class.
 </summary>
 <param name="ProductGroupField">The ProductGroupField object.</param>
 <param name="Value">The value.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupFieldValue.Save(System.Data.DataRow)">
 <summary>
 Saves the specified DataRow.
 </summary>
 <param name="dataRow">DataRow.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductGroupFieldValueCollection">
 <summary>
 Represents collection of ProductGroupFieldValue objects.
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\ProductGroupCustomFieldsRendererSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupFieldValueCollection.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductGroupFieldValueCollection" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupFieldValueCollection.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductGroupFieldValueCollection" /> class.
 </summary>
 <param name="DataReader">DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupFieldValueCollection.Save(System.Data.DataRow)">
 <summary>
 Saves the specified data row.
 </summary>
 <param name="DataRow">DataRow.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupFieldValueCollection.GetProductGroupFieldValue(System.String)">
 <summary>
 Gets the ProductGroupFieldValue.
 </summary>
 <param name="SystemName">System name.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductGroupRelation">
 <summary>
 Represents information about related groups.
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\ProductGroupRelationSaveHandlerSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupRelation.GroupId">
 <summary>
 Gets or sets the group ID.
 </summary>
 <value>The group ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupRelation.ProductId">
 <summary>
 Gets or sets the product ID.
 </summary>
 <value>The product ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupRelation.Sorting">
 <summary>
 Gets or sets the sorting.
 </summary>
 <value>The sorting.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupRelation.IsPrimary">
 <summary>
 Is this group primary
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductGroupRelation" /> class.
 </summary>
 <param name="relationProductId">DB field name is GroupProductRelationProductID.</param>
 <param name="groupId">DB field name is GroupProductRelationGroupID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductGroupRelation" /> class.
 </summary>
 <param name="dataReader">DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductGroupRelation" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.Fill(System.Data.IDataReader)">
 <summary>
 Fills the properties from DataReader.
 </summary>
 <param name="dataReader">DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.Save(System.String,System.String)">
 <summary>
 Saves the properties into DB.
 </summary>
 <param name="relationProductId">DB field name is GroupProductRelationProductID.</param>
 <param name="relationGroupId">DB field name is GroupProductRelationGroupID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.Delete">
 <summary>
 Deletes this instance from DB.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.Delete(System.String,System.String)">
 <summary>
 Deletes the instance from DB.
 </summary>
 <param name="relationProductId">DB field name is GroupProductRelationProductID.</param>
 <param name="relationGroupId">DB field name is GroupProductRelationGroupID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.Delete(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Deletes the specified products.
 </summary>
 <param name="products">The products.</param>
 <returns>The SQL query</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.Delete(Dynamicweb.Ecommerce.Products.ProductCollection,Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Deletes the specified products.
 </summary>
 <param name="products">The products.</param>
 <param name="group">The group.</param>
 <returns>The SQL query</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.Delete(Dynamicweb.Ecommerce.Products.ProductCollection,Dynamicweb.Ecommerce.Products.Group,System.Boolean)">
 <summary>
 Deletes the specified products.
 </summary>
 <param name="products">The products.</param>
 <param name="group">The group.</param>
 <param name="run">if set to <c>true</c> to delete.</param>
 <returns>The SQL query</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.Copy">
 <summary>
 Copies this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.Clone">
 <summary>
 Clones this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.GetCachedProductGroupRelations(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Gets a list of cached ProductGroupRelations.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.ClearCache">
 <summary>
 Clears product group relation cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.GetProductGroupRelations(System.String)">
 <summary>
 Gets the product group relations.
 </summary>
 <param name="relationProductId">DB field name is GroupProductRelationProductID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.GetProductGroupRelations(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Gets the product group relations.
 </summary>
 <param name="prod">DB field name is GroupProductRelationProductID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.GetProductGroupRelations(System.String,System.String)">
 <summary>
 Gets the product group relations.
 </summary>
 <param name="relationProductId">DB field name is GroupProductRelationProductID.</param>
 <param name="groupId">DB field name is GroupProductRelationGroupID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.MoveToGroup(Dynamicweb.Ecommerce.Products.ProductCollection,System.String,System.String)">
 <summary>
 Moves to group.
 </summary>
 <param name="products">The products.</param>
 <param name="toGroupId">DB field name is GroupProductRelationGroupID.</param>
 <param name="fromGroupId">DB field name is GroupProductRelationGroupID.</param>
 <returns>The number of rows affected by the command. </returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelation.DetachFromGroup(Dynamicweb.Ecommerce.Products.ProductCollection,System.String)">
 <summary>
 Detach products from group
 </summary>
 <param name="products">The products</param>
 <param name="fromGroupId">DB field name is GroupProductRelationGroupID.</param>
 <returns>The number of rows affected by the command. </returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductGroupRelationCollection">
 <summary>
 Represents a collection of ProductGroupRelation objects.
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\ProductGroupDeleteHandlerSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductGroupRelationCollection.Load(System.String)">
 <summary>
 Loads the ProductGroupRelation objects from DB.
 </summary>
 <param name="query">The sql query.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductGroupRelationCollection.GroupCollection">
 <summary>
 Gets the group collection.
 </summary>
 <value>The group collection.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductItem">
 <summary>
 Represents information about product's item.
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\BomConfiguratorSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductItem.Id">
 <summary>
 Gets or sets the item ID.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductItem.Name">
 <summary>
 Gets or sets the item name.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductItem.Required">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Products.ProductItem" /> is required.
 </summary>
 <value><c>true</c> if required; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductItem.ProductId">
 <summary>
 Gets or sets the product ID.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductItem.BomProductId">
 <summary>
 Gets or sets BOM product ID.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductItem.BomVariantId">
 <summary>
 Gets or sets BOM variant ID.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductItem.BomGroupId">
 <summary>
 Gets or sets BOM group ID.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductItem.BomNoProductText">
 <summary>
 Gets or sets BOM product text.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductItem.DefaultProductId">
 <summary>
 Gets or sets default product ID.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductItem.Quantity">
 <summary>
 Gets or sets the quantity. If quantity = 0 then returns 1.0
 </summary>
 <value>The quantity.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductItem.SortOrder">
 <summary>
 Gets or sets the sort order.
 </summary>
 <value>The sort order.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductItem.Products">
 <summary>
 Gets or sets a collection of products.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductItem" /> class.
 </summary>
 <param name="id">The item ID. DB field name is ProductItemID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.CheckProduct(System.String,System.String)">
 <summary>
 Checks the product item is exist.
 </summary>
 <param name="theProductId">DB field name is ProductItemProductID.</param>
 <param name="itemProductId">DB field name is ProductItemBomProductID.</param>
 <returns><c>true</c> if product exist.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.CheckProduct(System.String,System.String,System.String)">
 <summary>
 Checks the product item is exist.
 </summary>
 <param name="theProductId">DB field name is ProductItemProductID.</param>
 <param name="itemProductId">DB field name is ProductItemBomProductID.</param>
 <param name="itemVariantId">DB field name is ProductItemBomVariantID.</param>
 <returns><c>true</c> if product exist.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.CheckGroup(System.String,System.String)">
 <summary>
 Checks the group is a product part.
 </summary>
 <param name="theProductId">DB field name is ProductItemProductID.</param>
 <param name="itemGroupId">DB field name is ProductItemBomGroupID.</param>
 <returns><c>true</c> if group exist.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductItem" /> class.
 </summary>
 <param name="dataReader">DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductItem" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.Fill(System.Data.IDataReader)">
 <summary>
 Fills the properties from DataReader.
 </summary>
 <param name="dataReader">DataReader.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.Save">
 <summary>
 Saves the current product item.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.Save(System.String,System.String,System.String,System.String)">
 <summary>
 Saves the properties into DB. 
 </summary>
 <param name="theProductId">DB field name is ProductItemProductID</param>
 <param name="itemId">DB field name is ProductItemID</param>
 <param name="theBomProductId">DB field name is ProductItemBomProductID</param>
 <param name="theBomGroupId">DB field name is ProductItemBomGroupID</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.Save(System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Saves the properties into DB. 
 </summary>
 <param name="theProductId">DB field name is ProductItemProductID</param>
 <param name="itemId">DB field name is ProductItemID</param>
 <param name="theBomProductId">DB field name is ProductItemBomProductID</param>
 <param name="bomVarId">DB field name is ProductItemBomProductID</param>
 <param name="theBomGroupId">DB field name is ProductItemBomGroupID</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.Delete">
 <summary>
 Deletes this product from DB.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.Delete(System.String)">
 <summary>
 Deletes the specified product item.
 </summary>
 <param name="itemId">DB field name is ProductItemID.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.Delete(System.String,System.String)">
 <summary>
 Deletes the specified product item.
 </summary>
 <param name="itemId">DB field name is ProductItemID</param>
 <param name="theProductId">DB field name is ProductItemProductID</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.Delete(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Deletes the specified products.
 </summary>
 <param name="productCollection">The products.</param>
 <returns>SQL query</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.Delete(Dynamicweb.Ecommerce.Products.ProductCollection,System.Boolean)">
 <summary>
 Deletes the specified products.
 </summary>
 <param name="productCollection">The products.</param>
 <param name="run">if set to <c>true</c> to delete.</param>
 <returns>The SQL query.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.DeleteBom(System.String,System.String)">
 <summary>
 Deletes the specified item by BOM product.
 </summary>
 <param name="itemProductId">The BOM product id.</param>
 <param name="itemVariantId">The BOM variant id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.Delete(Dynamicweb.Ecommerce.Products.GroupCollection)">
 <summary>
 Deletes the specified groups.
 </summary>
 <param name="groups">The groups.</param>
 <returns>The SQL query.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.Delete(Dynamicweb.Ecommerce.Products.GroupCollection,System.Boolean)">
 <summary>
 Deletes the specified groups.
 </summary>
 <param name="groups">The groups.</param>
 <param name="run">if set to <c>true</c> to delete.</param>
 <returns>The SQL query.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.Copy">
 <summary>
 Copies this instance. ID is empty.
 </summary>
 <returns>ProductItem object.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.Clone">
 <summary>
 Clones this instance.
 </summary>
 <returns>ProductItem object.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.GetProductItems(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Gets the product items.
 </summary>
 <param name="product">The product.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.LoadProductItems(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Loads the product items.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.LoadItemProducts(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Loads the product items.
 </summary>
 <param name="Products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.LoadItemProducts(Dynamicweb.Ecommerce.Products.ProductCollection,System.String)">
 <summary>
 Loads the item products.
 </summary>
 <param name="Products">The products.</param>
 <param name="ids">The IDs.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.LoadItemGroupProducts(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Loads the item products.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItem.LoadItemGroupProducts(Dynamicweb.Ecommerce.Products.ProductCollection,System.String)">
 <summary>
 Loads the item products.
 </summary>
 <param name="products">The products.</param>
 <param name="ids">The IDs.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductItemCollection">
 <summary>
 Represents a collection of ProductItem objects.
 </summary>
 <remarks>Add, Remove, Get an item; Load items from database.</remarks>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\BomConfiguratorSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItemCollection.Remove(System.String)">
 <summary>
 Removes the item from collection by ID.
 </summary>
 <param name="itemId">The item ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductItemCollection.Load(System.String)">
 <summary>
 Fills a collection of ProductItem objects from database.
 </summary>
 <param name="query">The SQL query.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductListTemplateExtender">
 <summary>
 Product list template extender. Extends the rendering of a <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection"></see>.
 </summary>
 <example>
 <code description="Extending the product list template" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\ProductListTemplateExtenderSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductListTemplateExtender.ProductList">
 <summary>
 Gets or sets the product list.
 </summary>
 <value>The product list.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductListTemplateExtender.Order">
 <summary>
 Gets or sets the order.
 </summary>
 <value>The order.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductPriceType">
 <summary>
 Type of price.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductPriceType.Calculated">
 <summary>
 Calculated
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductPriceType.FixedPrice">
 <summary>
 Fixed price
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductPriceType.CalculatedWithBase">
 <summary>
 Calculated
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductQuantification">
 <summary>
 The enum ProductQuantification represents product quantification types enumeration.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductQuantification.Any">
 <summary>
 This quantification means that the order or the order line must have a quantity of any product matching the product quantity condition on the discount for it to apply.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductQuantification.Same">
 <summary>
 The order or the order line must have a quantity of the same product match the product quantity condition on this discount for it to apply.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductRelated">
 <summary>
 Represents information about related products.
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\RelatedProductSaveHandlerSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductRelated.Product">
 <summary>
 Gets the product.
 </summary>
 <value>The product.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductRelated.ProductId">
 <summary>
 Gets or sets the product ID.
 </summary>
 <value>The product ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductRelated.RelatedProductId">
 <summary>
 Gets or sets the related product ID.
 </summary>
 <value>The related product ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductRelated.RelatedProductVariantId">
 <summary>
 Gets or sets the related product variant ID.
 </summary>
 <value>The related product variant ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductRelated.RelatedGroupId">
 <summary>
 Gets or sets the related group ID.
 </summary>
 <value>The related group ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductRelated.SortOrder">
 <summary>
 Gets or sets the sort order.
 </summary>
 <value>The sort order.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductRelated.Languages">
 <summary>
 Gets or sets the languages collection.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductRelated.Countries">
 <summary>
 Gets or sets the countries collection.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductRelated.Shops">
 <summary>
 Gets or sets the shops collection.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductRelated.VariantOptions">
 <summary>
 Gets or sets the variant options collection.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductRelated" /> class.
 </summary>
 <param name="theProductId">DB field name is ProductRelatedProductID.</param>
 <param name="theRelatedProductId">DB field name is ProductRelatedProductRelID.</param>
 <param name="relatedProductGroupId">DB field name is ProductRelatedGroupID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.#ctor(System.String,System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductRelated" /> class.
 </summary>
 <param name="theProductId">DB field name is ProductRelatedProductID.</param>
 <param name="theRelatedProductId">DB field name is ProductRelatedProductRelID.</param>
 <param name="prodRelVariantIdStr">DB field name is ProductRelatedProductRelVariantID.</param>
 <param name="relatedProductGroupId">DB field name is ProductRelatedGroupID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductRelated" /> class.
 </summary>
 <param name="dataReader">DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductRelated" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.SetProperties">
 <summary>
 Sets empty string for the properties ProdID, ProdRelID, RelGroupID.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.Fill(System.Data.IDataReader)">
 <summary>
 Fills the properties from the DataReader.
 </summary>
 <param name="dataReader">DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.Save(System.String,System.String)">
 <summary>
 Saves the properties into DB.
 </summary>
 <param name="theProductId">DB field name is ProductRelatedProductID.</param>
 <param name="theRelatedProductId">DB field name is ProductRelatedProductRelID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.Save(System.String,System.String,System.String)">
 <summary>
 Saves the properties into DB.
 </summary>
 <param name="theProductId">DB field name is ProductRelatedProductID.</param>
 <param name="theRelatedProductId">DB field name is ProductRelatedProductRelID.</param>
 <param name="relatedProductGroupId">DB field name is ProductRelatedGroupID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.Delete">
 <summary>
 Deletes this instance from DB.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.Delete(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Deletes the instance from DB.
 </summary>
 <param name="products">The products.</param>
 <returns>The SQL query</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.Delete(Dynamicweb.Ecommerce.Products.ProductCollection,System.Boolean)">
 <summary>
 Deletes the instance from DB.
 </summary>
 <param name="products">The products.</param>
 <param name="run">if set to <c>true</c> to delete.</param>
 <returns>The SQL query</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.Delete(System.String)">
 <summary>
 Deletes the instance from DB.
 </summary>
 <param name="theProductId">The ProductRelatedProductID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.Delete(System.String,System.String)">
 <summary>
 Deletes the instance from DB.
 </summary>
 <param name="theProductId">The ProductRelatedProductID.</param>
 <param name="theRelatedProductId">The ProductRelatedProductRelID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.Delete(System.String,System.String,System.String)">
 <summary>
 Deletes the instance from DB.
 </summary>
 <param name="theProductId">The ProductRelatedProductID.</param>
 <param name="theRelatedProductId">The ProductRelatedProductRelID.</param>
 <param name="relatedProductGroupId">The ProductRelatedGroupID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.Delete(System.String,System.String,System.String,System.String)">
 <summary>
 Deletes the instance from DB.
 </summary>
 <param name="theProductId">The ProductRelatedProductID.</param>
 <param name="theRelatedProductId">The ProductRelatedProductRelID.</param>
 <param name="prodRelVariantIdStr">The ProductRelatedProductRelVariantID.</param>
 <param name="relatedProductGroupId">The ProductRelatedGroupID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.GetRelatedCollection(System.String)">
 <summary>
 Gets the related collection.
 </summary>
 <param name="query">The SQL query.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.GetRelatedProducts(System.String)">
 <summary>
 Gets the related products.
 </summary>
 <param name="productId">DB field name is ProductRelatedProductID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.GetRelatedProducts(System.String,System.String)">
 <summary>
 Gets the related products.
 </summary>
 <param name="productId">DB field name is ProductRelatedProductID.</param>
 <param name="relatedGroupId">DB field name is ProductRelatedGroupID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.ProductRelationCheck(System.String,System.String)">
 <summary>
 Gets the ProductRelatedCollection object.
 </summary>
 <param name="productId">DB field name is ProductRelatedProductID.</param>
 <param name="relatedProductId">DB field name is ProductRelatedProductRelID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.ProductRelationCheck(System.String,System.String,System.String)">
 <summary>
 Gets the ProductRelatedCollection object.
 </summary>
 <param name="productId">DB field name is ProductRelatedProductID.</param>
 <param name="relatedProductId">DB field name is ProductRelatedProductRelID.</param>
 <param name="relatedProductGroupId">DB field name is ProductRelatedGroupID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.ProductRelationCheck(System.String,System.String,System.String,System.String)">
 <summary>
 Gets the ProductRelatedCollection object.
 </summary>
 <param name="productId">DB field name is ProductRelatedProductID.</param>
 <param name="relatedProductId">DB field name is ProductRelatedProductRelID.</param>
 <param name="prodRelVariantId">DB field name is ProductRelatedRelVariantID.</param>
 <param name="relatedProductGroupId">DB field name is ProductRelatedGroupID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelated.ClearCache">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductRelatedGroup">
 <summary>
 Represents information about the product related groups.
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\ProductRelatedGroupInformationPageSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.Products">
 <summary>
 Gets or sets the products.
 </summary>
 <value>The products.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.GroupId">
 <summary>
 Gets or sets the group ID.
 </summary>
 <value>The group ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.LanguageId">
 <summary>
 Gets or sets the language ID.
 </summary>
 <value>The language ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.SortOrder">
 <summary>
 Gets or sets the sort order.
 </summary>
 <value>The sort order.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductRelatedGroup" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.Clone">
 <summary>
 Clones the related group.
 </summary>
 <returns>A new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductRelatedGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductRelatedGroup" /> class.
 </summary>
 <param name="id">DB field name is RelatedGroupID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.#ctor(System.String,Dynamicweb.Ecommerce.International.Language)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductRelatedGroup" /> class.
 </summary>
 <param name="id">DB field name is RelatedGroupID.</param>
 <param name="language">DB field name is RelatedGroupLanguageID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductRelatedGroup" /> class.
 </summary>
 <param name="dataReader">DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.SetProperties">
 <summary>
 Sets empty string for the properties GroupID and Name.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.Save(System.String)">
 <summary>
 Saves the properties into DB.
 </summary>
 <param name="id">DB field name is RelatedGroupID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.Delete">
 <summary>
 Deletes this instance from DB.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.Delete(System.String)">
 <summary>
 Deletes the instance from DB.
 </summary>
 <param name="id">DB field name is RelatedGroupID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.Delete(System.String,System.String)">
 <summary>
 Deletes the instance from DB.
 </summary>
 <param name="id">DB field name is RelatedGroupID.</param>
 <param name="langId">DB field name is RelatedGroupLanguageID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.Lock">
 <summary>
 Locks this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.GetAllRelatedGroups">
 <summary>
 Gets all related groups.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.GetRelatedGroupsByLanguage">
 <summary>
 Gets the related groups by language.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.GetRelatedGroups">
 <summary>
 Gets the related groups.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.GetRelatedGroupsWithProducts(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Gets the related groups with products.
 </summary>
 <param name="product">The product.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductRelatedGroup.GetRelatedGroupsWithProducts(Dynamicweb.Ecommerce.Products.Product,System.Boolean)">
 <summary>
 Gets the related groups with products.
 </summary>
 <param name="product">The product.</param>
 <param name="isFrontend">if set to <c>true</c> removes not used items from collection.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductTemplateExtender">
 <summary>
 Product template extender. Extends the rendering of a <see cref="P:Dynamicweb.Ecommerce.Products.ProductTemplateExtender.Product"></see>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductTemplateExtender.IsDetailView">
 <summary>
 Gets a value indicating whether this instance is in product detail view.
 </summary>
 <value><c>true</c> if this instance is in product detail view; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductTemplateExtender.Product">
 <summary>
 Gets or sets the product.
 </summary>
 <value>The product.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductTemplateExtender.Order">
 <summary>
 Gets or sets the order.
 </summary>
 <value>The order.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductType">
 <summary>
 Type of product.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductType.Stock">
 <summary>
 Stock
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductType.Service">
 <summary>
 Service
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductType.Bom">
 <summary>
 BOM
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.ProductType.GiftCard">
 <summary>
 Gift card
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.ProductVatGroup">
 <summary>
 Represents VAT groups on product for each country
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductVatGroup.ProductId">
 <summary>
 Gets or sets the product ID.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductVatGroup.ProductVariantId">
 <summary>
 Gets or sets the product variant ID.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductVatGroup.VatGroupId">
 <summary>
 Gets or sets the product VAT group ID.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.ProductVatGroup.CountryId">
 <summary>
 Gets or sets the country ID.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductVatGroup.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductVatGroup" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductVatGroup.FillRow(System.Data.DataRow)">
 <summary>
 Fills the row with the values of the properties.
 </summary>
 <param name="row">The row.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductVatGroup.Fill(System.Data.IDataReader)">
 <summary>
 Fills the object with data from the specified data reader.
 </summary>
 <param name="dr">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductVatGroup.Save">
 <summary>
 Saves current data to the data base.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductVatGroup.Save(System.Boolean)">
 <summary>
 Saves current data to the data base.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductVatGroup.Delete(System.Int32)">
 <summary>
 Deletes the product VAT group with specified ID.
 </summary>
 <param name="id">Product VAT group to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductVatGroup.Delete(System.Int32,System.Boolean)">
 <summary>
 Deletes the product VAT group with specified ID.
 </summary>
 <param name="id">Product VAT group to delete.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductVatGroup.GetVatGroupsByProduct(System.String,System.String)">
 <summary>
 Gets the VAT groups by product.
 </summary>
 <param name="productId">Product id</param>
 <param name="variantId">Variant id</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductVatGroup.ClearCache">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.ProductVatGroup.ClearCache(System.String,System.String)">
 <summary>
 Clears the cache for specified product.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.RelatedSmartSearch">
 <summary>
 The class RelatedSmartSearch represents product related smart searches.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.RelatedSmartSearch.GroupId">
 <summary>
 Gets or sets the group ID.
 </summary>
 <value>The group ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.RelatedSmartSearch.ProductId">
 <summary>
 Gets or sets the product ID.
 </summary>
 <value>The product ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.RelatedSmartSearch.LanguageId">
 <summary>
 Gets or sets the language ID.
 </summary>
 <value>The language ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.RelatedSmartSearch.SmartSearchId">
 <summary>
 Gets or sets the smart search ID.
 </summary>
 <value>The smart search ID.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.RelatedSmartSearch.SmartSearch">
 <summary>
 Gets the smart search.
 </summary>
 <value>The smart search entity.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.RelatedSmartSearch.#ctor">
 <summary>
 Empty constructor
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.RelatedSmartSearch.#ctor(Dynamicweb.Ecommerce.Products.Product,System.Guid)">
 <summary>
 Initializes a new instance of the product related smart search.
 </summary>
 <param name="product">Product entity.</param>
 <param name="smartSearchId">Smart search ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.RelatedSmartSearch.#ctor(Dynamicweb.Ecommerce.Products.Group,System.Guid)">
 <summary>
 Initializes a new instance of the group related smart search.
 </summary>
 <param name="Group">Group entity.</param>
 <param name="smartSearchId">Smart search ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.RelatedSmartSearch.#ctor(System.String,System.String,System.String,System.Guid)">
 <summary>
 Initializes a new instance of the product or group related smart search.
 </summary>
 <param name="groupId">Group ID.</param>
 <param name="productId">Product ID.</param>
 <param name="languageId">Lang ID.</param>
 <param name="smartSearchId">Smart search ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.RelatedSmartSearch.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductRelatedGroup" /> class.
 </summary>
 <param name="dataReader">DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.RelatedSmartSearch.SetProperties">
 <summary>
 Sets empty data.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.RelatedSmartSearch.Fill(System.Data.IDataReader)">
 <summary>
 Fills the properties from DataReader.
 </summary>
 <param name="dataReader">DataReader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.RelatedSmartSearch.Save">
 <summary>
 Saves the properties into DB.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.RelatedSmartSearch.Delete">
 <summary>
 Deletes this instance from DB.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.RelatedSmartSearch.GetRelatedSmartSearchesByGroup(System.String,System.String)">
 <summary>
 Gets the related mart search collection by group.
 </summary>
 <param name="groupId">The group ID.</param>
 <param name="languageId">The language ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.RelatedSmartSearch.GetRelatedSmartSearchesByProduct(System.String)">
 <summary>
 Gets the related mart search collection by product.
 </summary>
 <param name="productId">The product ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.RelatedSmartSearch.Save(Dynamicweb.Ecommerce.Products.RelatedSmartSearchCollection,Dynamicweb.Ecommerce.Products.RelatedSmartSearchCollection)">
 <summary>
 Save data in database
 </summary>
 <param name="previousSearches">Previous related smart searches</param>
 <param name="newSearches">New related smart searches</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.RelatedSmartSearch.ClearCache">
 <summary>
 Clears related smart searches cache.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.RelatedSmartSearchCollection">
 <summary>
 Represents a collection of RelatedSmartSearch objects.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.RelatedSmartSearchCollection.SmartSearches">
 <summary>
 Gets the smart searches.
 </summary>
 <value></value>
 <returns>
 The smart searches collection.
 </returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.RelatedSmartSearchCollection.Exist(Dynamicweb.Ecommerce.Products.RelatedSmartSearch)">
 <summary>
 Check is exist element.
 </summary>
 <param name="value">The related smart search.</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.SaveMethodCombo">
 <summary>
 Represents properties for saving.
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\ProductSaveMethodCombosHandlerSample.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.SaveMethodCombo.ProductDataBaseField">
 <summary>
 Gets or sets the product DB field.
 </summary>
 <value>The product DB field.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.SaveMethodCombo.UpdateType">
 <summary>
 Gets or sets the type of the update.
 </summary>
 <value>The type of update.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.SaveMethodComboCollection">
 <summary>
 Represents methods for adding and loading SaveMethodCombo objects.
 </summary>
 <example>
 <code description="" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Products\ProductSaveMethodCombosHandlerSample.cs" lang="CS"></code>
 </example>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.SaveMethodComboCollection.LoadCombos">
 <summary>
 Loads the method combos.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Taxes.Tax">
 <summary>
 The class Tax represents product tax.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Taxes.Tax.Name">
 <summary>
 Gets or sets the tax name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Taxes.Tax.CalculateVat">
 <summary>
 Gets or sets the value indicating whether to calculate the tax vat.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Taxes.Tax.Amount">
 <summary>
 Gets or sets the tax amount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Taxes.Tax.Product">
 <summary>
 Gets or sets the tax product.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Taxes.Tax.Price">
 <summary>
 Gets the tax price.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Taxes.TaxAmountType">
 <summary>
 The enum TaxAmountType represents product tax amount types enumeration.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Taxes.TaxCollection">
 <summary>
 The class TaxCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Products.Taxes.Tax"/>.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Taxes.TaxProvider">
 <summary>
 The class TaxProvider represents provider for product tax.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.Taxes.TaxProvider.ShippingCode">
 <summary>
 The tax shipping code literal.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Taxes.TaxProvider.Name">
 <summary>
 Gets or sets the provider name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Taxes.TaxProvider.SystemName">
 <summary>
 Gets or sets the provider system name.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxProvider.OnAfterSettingsSaved">
 <summary>
 On after settings saved handler.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxProvider.AddTaxesToProducts(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Adds taxes for given products.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxProvider.AddTaxOrderLinesToOrder(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Adds taxes for a order.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxProvider.CommitTaxes(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Commits the order taxes.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxProvider.CancelTaxes(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Cancels the order taxes.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxProvider.AdjustTaxes(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Adjusts the order taxes.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxProvider.HandleProductReturns(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Handles the order product returns.
 </summary>
 <param name="order">The order.</param>
 <param name="originalOrder">The original order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxProvider.IsTaxableType(Dynamicweb.Ecommerce.Orders.OrderLine)">
 <summary>
 Checks whether given order line is taxable.
 </summary>
 <param name="orderLine">The order line.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxProvider.CreateTaxOrderLine(Dynamicweb.Ecommerce.Orders.OrderLine,Dynamicweb.Ecommerce.Products.Taxes.Tax)">
 <summary>
 Creates tax order line for given order line.
 </summary>
 <param name="parentOrderLine">The order line.</param>
 <param name="tax">The tax.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxProvider.GetProductPriceWithoutDiscounts(Dynamicweb.Ecommerce.Orders.OrderLine)">
 <summary>
 Gets product price without discounts.
 </summary>
 <param name="orderLine">The order line.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxProvider.SaveLog(System.String)">
 <summary>
 Saves the provider logs.
 </summary>
 <param name="message">The log entry message.</param>
 <remarks>The logs are saved to /*Logs root*/eCom/TaxProvider/*provider name*</remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting">
 <summary>
 The class TaxSetting represents <seealso cref="T:Dynamicweb.Ecommerce.Products.Taxes.Tax"/> settings.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.Id">
 <summary>
 Gets the tax settings id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.Name">
 <summary>
 Gets or sets the tax settings name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.TaxProviderSettings">
 <summary>
 Gets or sets the tax provider settings name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.TaxProvider">
 <summary>
 Gets or sets the tax provider.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.IsNew">
 <summary>
 Gets value indicating whether settings instance is new.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.Active">
 <summary>
 Gets value indicating whether settings instance is active.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.Save">
 <summary>
 Saves this settings instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.GetTaxSettingById(System.Int32)">
 <summary>
 Gets the TaxSetting by ID.
 </summary>
 <param name="settingsId">The ID.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.GetActiveTaxSettings">
 <summary>
 Gets all active TaxSettings. Limited by the relations to the current <see cref="T:Dynamicweb.Ecommerce.International.Country" />.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.GetActiveTaxSettings(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Gets active TaxSettings for an order.
 </summary>
 <param name="order">The order.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.GetAllTaxSettings">
 <summary>
 Gets all TaxSettings.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.ClearCache">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.AddTaxesToProducts(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Gets the taxes.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.AddTaxesToOrder(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Recalculates the taxes.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.CommitTaxesToOrder(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Commit the taxes.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.CancelTaxes(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Cancel the taxes.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.AdjustTaxes(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Adjust the taxes.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting.HandleProductReturns(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Handle product returns.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Taxes.TaxSettingCollection">
 <summary>
 The class TaxSettingCollection represents collection of <seealso cref="T:Dynamicweb.Ecommerce.Products.Taxes.TaxSetting"/>
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSettingCollection.AddTaxesToProducts(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Adds taxes to products.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSettingCollection.AddTaxesToOrder(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Adds taxes to order.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSettingCollection.AddTaxesToOrder(Dynamicweb.Ecommerce.Orders.Order,System.Boolean)">
 <summary>
 Adds taxes to order.
 </summary>
 <param name="order">The order.</param>
 <param name="fromBackend">Is from backend.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSettingCollection.CommitTaxesToOrder(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Commit the taxes.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSettingCollection.CancelTaxes(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Cancel the taxes.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSettingCollection.AdjustTaxes(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Adjust the taxes.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Products.Taxes.TaxSettingCollection.HandleProductReturns(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Handle product returns.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.Taxes.TaxType">
 <summary>
 The enum TaxType represents tax types enumeration.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Products.UpdateType">
 <summary>
 Update type.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.UpdateType.LanguageDependent">
 <summary>
 Depend on language
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.UpdateType.VariantDependent">
 <summary>
 Depend on variant
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.UpdateType.NoDependencies">
 <summary>
 No dependencies
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Products.UpdateType.AllDependencies">
 <summary>
 All dependencies
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldRepository.SaveProductValues(Dynamicweb.Ecommerce.Products.Product,System.Collections.Hashtable)">
 <summary>
 Extended saving categories of this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.GetCategoryValue(Dynamicweb.Ecommerce.Products.Product,System.String,System.String)">
 <summary>
 Retrieves the value of the given category field.
 </summary>
 <param name="product">The product.</param>
 <param name="categoryId">An ID (system name) of the category.</param>
 <param name="fieldId">An ID of the target category field.</param>
 <returns>Category field value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.GetCategoryValue(Dynamicweb.Ecommerce.Products.Product,System.String,System.String,System.Boolean)">
 <summary>
 Retrieves the value of the given category field.
 </summary>
 <param name="product">The product.</param>
 <param name="categoryId">An ID (system name) of the category.</param>
 <param name="fieldId">An ID of the target category field.</param>
 <returns>Category field value.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.GetDefaultCategoryValue(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Products.Categories.Field)">
 <summary>
 Gets default product category field value
 </summary>
 <param name="product">The product.</param>
 <param name="field"></param>
 <returns>Field value</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.SetCategoryValue(Dynamicweb.Ecommerce.Products.Product,System.String,System.String,System.Object)">
 <summary>
 Assigns category field value to the current product.
 </summary>
 <param name="product">The product.</param>
 <param name="categoryId">An ID (system name) of the category.</param>
 <param name="fieldId">An ID of the target category field.</param>
 <param name="value">Category field value.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.SetCategoryValue(Dynamicweb.Ecommerce.Products.Product,System.String,Dynamicweb.Ecommerce.Products.Categories.Field,System.Object)">
 <summary>
 Assigns category field value to the current product.
 </summary>
 <param name="product">The product.</param>
 <param name="categoryId">An ID (system name) of the category.</param>
 <param name="field">An instance of the target category field.</param>
 <param name="value">Category field value.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.SaveProductValues(Dynamicweb.Ecommerce.Products.Product,System.Boolean)">
 <summary>
 Extended saving categories of this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.SaveProductValues(Dynamicweb.Ecommerce.Products.Product,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Dynamicweb.Ecommerce.Products.Categories.FieldSortingInfo}})">
 <summary>
 Extended saving categories of this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.GetProductCategoriesLanguageControl(System.Collections.Generic.Dictionary{System.String,Dynamicweb.Ecommerce.Products.Categories.FieldValueCollection})">
 <summary>
 Read global settings for categories language and variant differentiation
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.GetCategories(Dynamicweb.Ecommerce.Products.Product,System.Boolean)">
 <summary>
 Get the Dynamicweb.eCommerce.Products.Categories.Category objects for each of the Dynamicweb.eCommerce.Products.Group this belongs
 </summary>
 <param name="product">The product.</param>
 <returns>Dynamicweb.eCommerce.Products.Categories.List(Of Category)</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.ShowField(Dynamicweb.Ecommerce.Products.Categories.Field,Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Return a boolean, which indicates whether or not the field should be shown. This is calculated based on the 'HideIfFieldHasNoValue' and the value of the field.
 </summary>
 <param name="product">The product we check for</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.ShowField(Dynamicweb.Ecommerce.Products.Categories.Field,Dynamicweb.Ecommerce.Products.Product,System.Boolean)">
 <summary>
 Return a boolean, which indicates whether or not the field should be shown. This is calculated based on the 'HideIfFieldHasNoValue' and the value of the field.
 </summary>
 <param name="product">The product we check for</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.GetValuesByProductVersionId(Dynamicweb.Ecommerce.Products.Product,System.Int32)">
 <summary>
 Gets a specific product category field version for the product.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Products.Product"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.GetGroupCategoryFieldValue(Dynamicweb.Ecommerce.Products.Categories.GroupInformation,System.String,Dynamicweb.Ecommerce.Products.Categories.Field,System.Boolean)">
 <summary>
 Gets the category field value.
 </summary>
 <param name="group">The group information.</param>
 <param name="field">The field.</param>
 <param name="allowFallback">Specifies if fallback values should be used, when the group does not yield a value.</param>        
 <returns>category field value</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.SearchForGroupFieldValue(Dynamicweb.Ecommerce.Products.Categories.GroupInformation,System.String,Dynamicweb.Ecommerce.Products.Categories.Field,System.Boolean)">
 <summary>
 Searches for the field value.
 </summary>
 <param name="group">The group information.</param>
 <param name="categoryField">The field.</param>
 <param name="allowFallback">Specifies if fallback values should be used, when the group does not yield a value.</param>
 <returns>field value</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.GetGroupFieldValue(System.String,Dynamicweb.Ecommerce.Products.Categories.Field,System.String,System.String,System.Boolean)">
 <summary>
 Gets the field value based upon the language, and falls back to try for the defaultlanguage if no value was found.
 </summary>
 <param name="groupId">The group identifier.</param>
 <param name="languageId">The language identifier.</param>
 <param name="categoryField">The field.</param>
 <param name="defaultLanguageId">The default language identifier.</param>
 <returns>field value</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.GetGroupFieldValueByLanguage(System.String,Dynamicweb.Ecommerce.Products.Categories.Field,System.String,System.Boolean)">
 <summary>
 Gets the field value by language.
 </summary>
 <param name="groupId">The group identifier.</param>
 <param name="languageId">The language identifier.</param>
 <param name="categoryField">The field.</param>
 <param name="isInheritedValue">if set to <c>true</c> [is inherited value].</param>
 <returns>field value</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.RecursivelySearchForFieldValue(Dynamicweb.Ecommerce.Products.Categories.GroupInformation,System.String,Dynamicweb.Ecommerce.Products.Categories.Field)">
 <summary>
 Recursively the searches for the field value, by moving though the parent relations.
 </summary>
 <param name="group">The group information.</param>
 <param name="categoryField">The field.</param>
 <returns>field value</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.GetOrderedInheritableParentIds(Dynamicweb.Ecommerce.Products.Categories.GroupInformation)">
 <summary>
 Looks up all parent group relations, finds all inheritable relations with a parentId, sorts them and returns the parentIds.
 </summary>
 <param name="group"></param>
 <returns>parentIds</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.GetCategoryFieldValue(Dynamicweb.Ecommerce.Products.Categories.GroupInformation,System.String,Dynamicweb.Ecommerce.Products.Categories.Field,System.Boolean)">
 <summary>
 Gets the category field value.
 </summary>
 <param name="group">The group information.</param>
 <param name="field">The field.</param>
 <param name="allowFallback">Specifies if fallback values should be used, when the group does not yield a value.</param>        
 <returns>category field value</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.GetCategoryFieldValue(Dynamicweb.Ecommerce.Products.Categories.GroupInformation,System.String,Dynamicweb.Ecommerce.Products.Categories.Field,System.Func{System.String,System.String,Dynamicweb.Ecommerce.Products.Categories.GroupInformation},System.Func{System.String,System.String,Dynamicweb.Ecommerce.Products.Categories.Field,System.Object},System.Boolean)">
 <summary>
 Gets the category field value.
 </summary>
 <param name="group">The group information.</param>
 <param name="getGroupFieldValue">The get group field value.</param>
 <param name="field">The field.</param>
 <param name="allowFallback">Specifies if fallback values should be used, when the group does not yield a value.</param>        
 <returns>category field value</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldDraftRepository.GetProductValues(Dynamicweb.Ecommerce.Products.Product,System.String[])">
 <summary>
 Gets dictionary of values as <seealso cref="T:Dynamicweb.Ecommerce.Products.Categories.FieldValueCollection"/> groupped by category Id 
 from Version Data table if product is in draft state,
 otherwise values gotten by <seealso cref="T:Dynamicweb.Ecommerce.ProductCategoryFieldRepository"/>
 </summary>
 <param name="product">The product for which values are obtained</param>
 <param name="categoryIds">The categoryIds for which values are obtained</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldDraftRepository.SaveProductValues(Dynamicweb.Ecommerce.Products.Product,System.Collections.Hashtable)">
 <summary>
 Saves product category fields values into Version Data table if product is in draft state, otherwise saved by <seealso cref="T:Dynamicweb.Ecommerce.ProductCategoryFieldRepository"/>
 </summary>
 <param name="product">The product with categoryfield value.</param>
 <param name="categoryFieldSettings">The field settins(readonly, hidden, allower to edit etc.) <seealso cref="M:Dynamicweb.Ecommerce.ProductCategoryFieldService.GetProductCategoriesLanguageControl(System.Collections.Generic.Dictionary{System.String,Dynamicweb.Ecommerce.Products.Categories.FieldValueCollection})"/></param>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldDraftRepository.DeleteCategoryFieldValues(Dynamicweb.Ecommerce.Products.Product,System.String,System.String)">
 <summary>
 Deletes category fields values from Version Data table if product is in draft state, otherwise deleted by <seealso cref="T:Dynamicweb.Ecommerce.ProductCategoryFieldRepository"/>
 </summary>
 <param name="product"></param>
 <param name="fieldId"></param>
 <param name="fieldCategoryId"></param>
</member>
<member name="M:Dynamicweb.Ecommerce.ProductCategoryFieldDraftRepository.IsWithinSameSecond(System.DateTime,System.DateTime)">
 <summary>
 Removes the millisecond part from the two datetimes, and then test if they are equal
 </summary>
 <param name="dateTime1"></param>
 <param name="dateTime2"></param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.UserSmartSearchRuleEcommerce.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Searching.AssortmentCriterion">
 <summary>
 Represents an assortment criterion.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.AssortmentCriterion.AssortmentIds">
 <summary>
 Gets or sets the assortiment ids.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.AssortmentCriterion.GetJoinClause">
 <summary>
 Gets a "JOIN" clause.
 </summary>
 <returns>The "JOIN" clause.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.AssortmentCriterion.GetWhereClause">
 <summary>
 Gets a "WHERE" clause.
 </summary>
 <returns>The "WHERE" clause.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Searching.BooleanCriterion">
 <summary>
 Represents a boolean creterion.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.BooleanCriterion.FieldName">
 <summary>
 Gets or sets the field name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.BooleanCriterion.Value">
 <summary>
 Gets or sets the field value.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.BooleanCriterion.GetWhereClause">
 <summary>
 Gets a "WHERE" clause.
 </summary>
 <returns>The "WHERE" clause.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Searching.DateCriterion">
 <summary>
 Represents a date criterion.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.DateCriterion.GetJoinClause">
 <summary>
 Gets a "JOIN" clause.
 </summary>
 <returns>The "JOIN" clause.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.DateCriterion.GetWhereClause">
 <summary>
 Gets a "WHERE" clause.
 </summary>
 <returns>The "WHERE" clause.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Searching.FieldCriterion">
 <summary>
 Represents a field criterion.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.FieldCriterion.FieldName">
 <summary>
 Gets or sets the field name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.FieldCriterion.CustomFieldName">
 <summary>
 Gets or sets the custom field name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.FieldCriterion.SearchType">
 <summary>
 Gets or sets the search type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.FieldCriterion.SearchKey">
 <summary>
 Gets or sets the search key.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.FieldCriterion.GetWhereClause">
 <summary>
 Gets a "WHERE" clause.
 </summary>
 <returns>The "WHERE" clause.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Searching.FreeTextCriterion">
 <summary>
 Represents a free text criterion.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.FreeTextCriterion.SearchKey">
 <summary>
 Gets or sets the search key.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.FreeTextCriterion.SearchProductFields">
 <summary>
 Gets or sets the value indicating whether to search in the product fields.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.FreeTextCriterion.UseAllProductFields">
 <summary>
 Gets or sets the value indicating whether to use all product fields.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.FreeTextCriterion.LookInProductFields">
 <summary>
 Gets or sets the product fields names.
 </summary>
 <remarks>This property used if the <see cref="P:Dynamicweb.Ecommerce.Searching.FreeTextCriterion.UseAllProductFields"/> property is <c>False</c>.</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.FreeTextCriterion.GetProductFieldClause">
 <summary>
 Gets the product fields names.
 </summary>
 <returns>The product fields names.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.FreeTextCriterion.GetWhereClause">
 <summary>
 Gets a "WHERE" clause.
 </summary>
 <returns>The "WHERE" clause.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Searching.GroupCriterion">
 <summary>
 Represents a group criterion.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.GroupCriterion.GroupId">
 <summary>
 Gets or sets the group id.
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.GroupCriterion.ShopId">
 <summary>
 Gets or sets the shop id.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.GroupCriterion.GetJoinClause">
 <summary>
 Gets a "JOIN" clause.
 </summary>
 <returns>The "JOIN" clause.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.GroupCriterion.GetWhereClause">
 <summary>
 Gets a "WHERE" clause.
 </summary>
 <returns>The "WHERE" clause.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Searching.GroupFieldQuery">
 <summary>
 Represents a group field query.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.GroupFieldQuery.QueryCriteria">
 <summary>
 Gets or sets the query criterions.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.GroupFieldQuery.Run">
 <summary>
 Runs the query.
 </summary>
 <returns>An instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.GroupFieldQuery.Run(System.Boolean)">
 <summary>
 Runs the query.
 </summary>
 <param name="isFrontEnd">Indicates whether is frontend.</param>
 <returns>An instance of the <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection"/>.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Searching.LanguageCriterion">
 <summary>
 Represents a language criterion.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.LanguageCriterion.LanguageId">
 <summary>
 Gets or sets the language id.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.LanguageCriterion.GetWhereClause">
 <summary>
 Gets a "WHERE" clause.
 </summary>
 <returns>The "WHERE" clause.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Searching.ManufacturerCriterion">
 <summary>
 Represents a manufacturer criterion.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.ManufacturerCriterion.SearchKey">
 <summary>
 Gets or sets the search key.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.ManufacturerCriterion.SearchType">
 <summary>
 Gets or sets the search type.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.ManufacturerCriterion.GetJoinClause">
 <summary>
 Gets a "JOIN" clause.
 </summary>
 <returns>The "JOIN" clause.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.ManufacturerCriterion.GetWhereClause">
 <summary>
 Gets a "WHERE" clause.
 </summary>
 <returns>The "WHERE" clause.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Searching.NumericCriterion">
 <summary>
 Represents a numeric criterion.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.NumericCriterion.AllowDecimals">
 <summary>
 Gets or sets the value indicating whether the decimals is allowed.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.NumericCriterion.FieldName">
 <summary>
 Gets or sets the field name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.NumericCriterion.SearchType">
 <summary>
 Gets or sets the search type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.NumericCriterion.SearchKey">
 <summary>
 Gets or sets the search key.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.NumericCriterion.GetWhereClause">
 <summary>
 Gets a "WHERE" clause.
 </summary>
 <returns>The "WHERE" clause.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Searching.PriceCritirion">
 <summary>
 Represents a price criterion.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.PriceCritirion.FromPrice">
 <summary>
 Gets or sets the lower limit price.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.PriceCritirion.ToPrice">
 <summary>
 Gets or sets the upper limit price.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.PriceCritirion.GetWhereClause">
 <summary>
 Gets a "WHERE" clause.
 </summary>
 <returns>The "WHERE" clause.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Searching.Query">
 <summary>
 Represents a query.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.Query.QueryCriteria">
 <summary>
 Gets or sets the criteria.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.Query.IncludeExtendedVariants">
 <summary>
 Gets or sets a value indicating whether extended variants are included in result.
 </summary>
 <remarks><c>true</c> if extended variants are included in result; otherwise, <c>false</c>.</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.Query.Run">
 <summary>
 Runs the query against the database.
 </summary>
 <returns>Returns a <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection"></see> containing the products matching the query.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.Query.Run(System.Boolean)">
 <summary>
 Runs the specified is frontend.
 </summary>
 <param name="isFrontend">if set to <c>true</c> query is run as in a frontend context.</param>
 <returns>Returns a <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection"></see> containing the products matching the query.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.Query.Run(System.Boolean,System.Boolean)">
 <summary>
 Runs the specified is front end.
 </summary>
 <param name="isFrontEnd">if set to <c>true</c> query is run as in a frontend context.</param>
 <param name="useAssortments">if set to <c>true</c> assortments are used to filter the product collection.</param>
 <returns>Returns a <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection"></see> containing the products matching the query.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Searching.QueryCriterion">
 <summary>
 Represents a query criterion.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.QueryCriterion.AddJoinClause">
 <summary>
 Gets or sets the value indicating whether to add "JOIN" clause.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.QueryCriterion.GetWhereClause">
 <summary>
 Gets a "WHERE" clause.
 </summary>
 <returns>The "WHERE" clause.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.QueryCriterion.GetJoinClause">
 <summary>
 Gets a "JOIN" clause.
 </summary>
 <returns>The "JOIN" clause.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Searching.SearchTypes">
 <summary>
 Specifies the search type.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Searching.StringCriterion">
 <summary>
 Represents a string criterion.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.StringCriterion.SearchType">
 <summary>
 Gets or sets the search type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.StringCriterion.FieldName">
 <summary>
 Gets or sets the field name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Searching.StringCriterion.SearchKey">
 <summary>
 Gets or sets the search key.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Searching.StringCriterion.GetWhereClause">
 <summary>
 Gets a "WHERE" clause.
 </summary>
 <returns>The "WHERE" clause.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.My_Project.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Dynamicweb.Ecommerce.My_Project.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Dynamicweb.Ecommerce.My_Project.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Dynamicweb.Ecommerce.NamespaceDoc">
 <summary>
 The Dynamicweb.Ecommerce namespace contains fundamental classes and basic infrastucture of Dynamicweb application. The sub namespaces to Dynamicweb.Ecommerce contains all the functionality of the Ecommerce application
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce">
 <summary>
 Provides information about Ecommerce module notifications.
 Find the various notifications in the list:
 <list><item><see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart"></see></item><item><see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group"></see></item><item><see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order"></see></item><item><see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product"></see></item><item><see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList"></see></item><item><see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Stock"></see></item><item><see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.VariantList"></see></item></list>
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomCartLoadedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Stock">
 <summary>
 Provides notification names for product stocks.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomStatusChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Stock.StatusChangedArgs"></see></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Stock.StatusChanged">
 <summary>
 Occurs after the stock status has been changed.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomStatusChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Stock.StatusChangedArgs">
 <summary>
 Class StatusChangedArgs.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Stock.StatusChangedArgs.Product">
 <summary>
 Gets the product.
 </summary>
 <value>The product.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Stock.StatusChangedArgs.OldStockStatus">
 <summary>
 Gets the old stock status.
 </summary>
 <value>The old stock status.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Stock.StatusChangedArgs.NewStockStatus">
 <summary>
 Gets the new stock status.
 </summary>
 <value>The new stock status.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Stock.StatusChangedArgs.#ctor(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Stocks.StockStatus,Dynamicweb.Ecommerce.Stocks.StockStatus)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Stock.StatusChangedArgs"/> class.
 </summary>
 <param name="product">The product.</param>
 <param name="oldStockStatus">The old stock status.</param>
 <param name="newStockStatus">The new stock status.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart">
 <summary>
 Provides notification names for Ecommerce cart.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomCartCreatedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.CreatedArgs"></see></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Created">
 <summary>
 This notification is thrown every time a cart is created. The notification appears when user adds first product to the cart.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomCartCreatedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.CreatedArgs">
 <summary>
 Provides information about the created cart.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomCartLoadedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Loaded"></see></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.CreatedArgs.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.CreatedArgs" /> class.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.CreatedArgs.Order">
 <summary>
 Gets or sets the order.
 </summary>
 <value>The order.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Deleted">
 <summary>
 Occurs after the cart has been deleted.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomCartDeletedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.DeletedArgs">
 <summary>
 Provides information about the deleted cart.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomCartDeletedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.DeletedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.DeletedArgs.Cart">
 <summary>
 Gets the cart.
 </summary>
 <value>The cart.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.DeletedArgs.#ctor(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.DeletedArgs"/> class.
 </summary>
 <param name="cart">The cart.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Loaded">
 <summary>
 Occurs after the cart has been loaded.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomCartLoadedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.LoadedArgs">
 <summary>
 Class LoadedArgs.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.LoadedArgs.Cart">
 <summary>
 Gets the cart.
 </summary>
 <value>The cart.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.LoadedArgs.#ctor(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.LoadedArgs"/> class.
 </summary>
 <param name="cart">The cart.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.InitiallyLoaded">
 <summary>
 Occurs when a cart is loaded into session, and an existing cart doesn't already exist.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomCartLoadedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.InitiallyLoadedArgs">
 <summary>
 Class InitiallyLoadedArgs.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.InitiallyLoadedArgs.Cart">
 <summary>
 Gets the cart.
 </summary>
 <value>The cart.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.InitiallyLoadedArgs.#ctor(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.InitiallyLoadedArgs"/> class.
 </summary>
 <param name="cart">The cart.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line">
 <summary>
 Provides notification names for Ecommerce cart.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\CartV2\EcomCartLineAddedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.AddedArgs"></see></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.Added">
 <summary>
 Occurs when the user added product to the cart.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\CartV2\EcomCartLineAddedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.AddedArgs">
 <summary>
 Provides information about the added product.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\CartV2\EcomCartLineAddedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.AddedArgs"></see></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.AddedArgs.#ctor(Dynamicweb.Ecommerce.Orders.OrderLine,Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.AddedArgs" /> class.
 </summary>
 <param name="addedLine">The added product.</param>
 <param name="cart">The cart.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.AddedArgs.AddedLine">
 <summary>
 Gets the added product.
 </summary>
 <value>The added product.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.AddedArgs.Cart">
 <summary>
 Gets the cart.
 </summary>
 <value>The cart.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.Removed">
 <summary>
 Occurs when the user removed product from the cart
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\CartV2\EcomCartLineRemovedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.RemovedArgs">
 <summary>
 Provides information about the removed product.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\CartV2\EcomCartLineRemovedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.RemovedArgs"></see></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.RemovedArgs.#ctor(Dynamicweb.Ecommerce.Orders.OrderLine,Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.RemovedArgs" /> class.
 </summary>
 <param name="removedLine">The removed product.</param>
 <param name="cart">The cart.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.RemovedArgs.RemovedLine">
 <summary>
 Gets the removed product.
 </summary>
 <value>The removed product.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.RemovedArgs.Cart">
 <summary>
 Gets or sets the cart.
 </summary>
 <value>The cart.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.Increased">
 <summary>
 Occurs when product was added to the cart and the amount of products in the cart increased
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\CartV2\EcomCartLineIncreasedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.IncreasedArgs">
 <summary>
 Provides information about the product the amount of which was increased in the cart
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\CartV2\EcomCartLineIncreasedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.IncreasedArgs"></see></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.IncreasedArgs.#ctor(Dynamicweb.Ecommerce.Orders.OrderLine,Dynamicweb.Ecommerce.Orders.Order,System.Double)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.IncreasedArgs" /> class.
 </summary>
 <param name="increasedLine">The increased product.</param>
 <param name="cart">The cart.</param>
 <param name="amountIncreased">The amount increased.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.IncreasedArgs.IncreasedLine">
 <summary>
 Gets the increased product.
 </summary>
 <value>The increased product.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.IncreasedArgs.Cart">
 <summary>
 Gets the cart.
 </summary>
 <value>The cart.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.IncreasedArgs.AmountIncreased">
 <summary>
 Gets the amount increased.
 </summary>
 <value>The amount increased.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.Decreased">
 <summary>
 Occurs when product was added to the cart and its amount decreased
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\CartV2\EcomCartLineDecreasedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.DecreasedArgs">
 <summary>
 Provides information about the product the amount of which was decreased in the cart.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\CartV2\EcomCartLineDecreasedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.DecreasedArgs"></see></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.DecreasedArgs.#ctor(Dynamicweb.Ecommerce.Orders.OrderLine,Dynamicweb.Ecommerce.Orders.Order,System.Double)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.DecreasedArgs" /> class.
 </summary>
 <param name="decreasedLine">The decreased product.</param>
 <param name="cart">The cart.</param>
 <param name="amountDecreased">The amount decreased.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.DecreasedArgs.DecreasedLine">
 <summary>
 Gets or sets the decreased product.
 </summary>
 <value>The decreased product.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.DecreasedArgs.Cart">
 <summary>
 Gets or sets the cart.
 </summary>
 <value>The cart.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.Line.DecreasedArgs.AmountDecreased">
 <summary>
 Gets or sets the amount decreased.
 </summary>
 <value>The amount decreased.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SavedForLater">
 <summary>
 Provides notification names for Ecommerce saved for later.
 </summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SavedForLater.RemovedArgs"></see></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SavedForLater.Removed">
 <summary>
 Occurs when the user delete product from saved for later list.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SavedForLater.RemovedArgs">
 <summary>
 Provides information about the removed product.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SavedForLater.RemovedArgs"></see></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SavedForLater.RemovedArgs.#ctor(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SavedForLater.RemovedArgs" /> class.
 </summary>
 <param name="removedProduct">The removed product.</param>
 <param name="cart">The cart.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SavedForLater.RemovedArgs.RemovedProduct">
 <summary>
 Gets the removed product.
 </summary>
 <value>The removed product.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SavedForLater.RemovedArgs.Cart">
 <summary>
 Gets or sets the cart.
 </summary>
 <value>The cart.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeRenderingEmptyCart">
 <summary>
 This notification is broadcast just before an empty cart is rendered.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeRenderingEmptyCartObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeRenderingEmptyCartArgs">
 <summary>
 Provides information about cart that is going to be empty.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeRenderingEmptyCartObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeRenderingEmptyCartArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeRenderingEmptyCartArgs.EmptyAction">
 <summary>
 Gets or sets the CartEmptyAction.
 </summary>
 <value>CartEmptyAction. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeRenderingNewStep">
 <summary>
 This notification is broadcast just before a new step is rendered.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeRenderingNewStepObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeRenderingNewStepArgs">
 <summary>
 Provides information about order before a new step is rendered.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeRenderingNewStepObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeRenderingNewStepArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeRenderingNewStepArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeRenderingNewStepArgs.StepIndex">
 <summary>
 Gets or sets the index of the new step. The index is 0 (zero) based.
 </summary>
 <value>Step index. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeRenderingNewStepArgs.RedirectToStepIndex">
 <summary>
 Gets or sets a flag that indicates whether the Cart should redirect to the value of the StepIndex property.
 If true the Cart will redirect to the step specified in the StepIndex property; if false the Cart will redirect to the pre-determined step.
 </summary>
 <value>Boolean indicating whether to redirect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeRemovingNonExistingProducts">
 <summary>
 This notification is broadcast just before Non-existing products are removed.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeRemovingNonExistingProductsObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeRemovingNonExistingProductsArgs">
 <summary>
 Provides information about order and order lines just before Non-existing products are removed.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeRemovingNonExistingProductsObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeRemovingNonExistingProductsArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeRemovingNonExistingProductsArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeRemovingNonExistingProductsArgs.OrderLinesToRemove">
 <summary>
 Gets or sets a list of OrderLines that will be removed from the order.
 </summary>
 <value>List of OrderLines.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforePaymentMethodIsSet">
 <summary>
 This notification is broadcast before payment method is set. This notification is always broadcast when a PaymentMethod is set by the user.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforePaymentMethodIsSetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforePaymentMethodIsSetArgs">
 <summary>
 Provides information about order and payment method just before PaymentMethod is set.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforePaymentMethodIsSetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforePaymentMethodIsSetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforePaymentMethodIsSetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforePaymentMethodIsSetArgs.Payment">
 <summary>
 Gets or sets the payment.
 </summary>
 <value>Payment. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterPaymentMethodIsSet">
 <summary>
 This notification is broadcast after payment method is set. This notification is always broadcast when a PaymentMethod is set by the user.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterPaymentMethodIsSetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterPaymentMethodIsSetArgs">
 <summary>
 Provides information about order and payment method just after PaymentMethod is set.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterPaymentMethodIsSetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterPaymentMethodIsSetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterPaymentMethodIsSetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterPaymentMethodIsSetArgs.Payment">
 <summary>
 Gets or sets the payment.
 </summary>
 <value>Payment. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforePaymentMethodIsChanged">
 <summary>
 This notification is broadcast before PaymentMethod is set. This notification is only broadcast if PaymentMethod has been changed by the user.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforePaymentMethodIsChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforePaymentMethodIsChangedArgs">
 <summary>
 Provides information about order and payment method just before PaymentMethod is changed.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforePaymentMethodIsChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforePaymentMethodIsChangedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforePaymentMethodIsChangedArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforePaymentMethodIsChangedArgs.Payment">
 <summary>
 Gets or sets the payment.
 </summary>
 <value>Payment. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterPaymentMethodIsChanged">
 <summary>
 This notification is broadcast after PaymentMethod is set. This notification is only broadcast if PaymentMethod has been changed by the user.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterPaymentMethodIsChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterPaymentMethodIsChangedArgs">
 <summary>
 Provides information about order and payment method just after PaymentMethod is changed.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterPaymentMethodIsChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterPaymentMethodIsChangedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterPaymentMethodIsChangedArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterPaymentMethodIsChangedArgs.Payment">
 <summary>
 Gets or sets the payment.
 </summary>
 <value>Payment. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeShippingMethodIsSet">
 <summary>
 This notification is broadcast before ShippingMethod is set. This notification is always broadcast when a ShippingMethod is set by the user.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeShippingMethodIsSetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeShippingMethodIsSetArgs">
 <summary>
 Provides information about order and shipping method just before shipping method is set.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeShippingMethodIsSetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeShippingMethodIsSetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeShippingMethodIsSetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeShippingMethodIsSetArgs.Shipping">
 <summary>
 Gets or sets the shipping.
 </summary>
 <value>Shipping. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterShippingMethodIsSet">
 <summary>
 This notification is broadcast after ShippingMethod is set. This notification is always broadcast when a ShippingMethod is set by the user.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterShippingMethodIsSetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterShippingMethodIsSetArgs">
 <summary>
 Provides information about order and shipping method just after shipping method is set.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterShippingMethodIsSetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterShippingMethodIsSetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterShippingMethodIsSetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterShippingMethodIsSetArgs.Shipping">
 <summary>
 Gets or sets the shipping.
 </summary>
 <value>Shipping. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeShippingMethodIsChanged">
 <summary>
 This notification is broadcast before ShippingMethod is changed. This notification is only broadcast if ShippingMethod has been changed by the user.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeShippingMethodIsChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeShippingMethodIsChangedArgs">
 <summary>
 Provides information about order and shipping method just before shipping method is changed.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeShippingMethodIsChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeShippingMethodIsChangedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeShippingMethodIsChangedArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeShippingMethodIsChangedArgs.Shipping">
 <summary>
 Gets or sets the shipping.
 </summary>
 <value>Shipping. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterShippingMethodIsChanged">
 <summary>
 This notification is broadcast after ShippingMethod is set. This notification is only broadcast if ShippingMethod has been changed by the user.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterShippingMethodIsChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterShippingMethodIsChangedArgs">
 <summary>
 Provides information about order and shipping method just after shipping method is changed.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterShippingMethodIsChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterShippingMethodIsChangedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterShippingMethodIsChangedArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterShippingMethodIsChangedArgs.Shipping">
 <summary>
 Gets or sets the shipping.
 </summary>
 <value>Shipping. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerCountryIsSet">
 <summary>
 This notification is broadcast before Country is set. This notification is always broadcast when a Country is set by the user.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeCustomerCountryIsSetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerCountryIsSetArgs">
 <summary>
 Provides information about order and country just before customer country is set.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeCustomerCountryIsSetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerCountryIsSetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerCountryIsSetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerCountryIsSetArgs.Country">
 <summary>
 Gets or sets the country.
 </summary>
 <value>Country. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerCountryIsSet">
 <summary>
 This notification is broadcast after Country is set. This notification is always broadcast when a Country is set by the user.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterCustomerCountryIsSetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerCountryIsSetArgs">
 <summary>
 Provides information about order and country just after customer country is set.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterCustomerCountryIsSetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerCountryIsSetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerCountryIsSetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerCountryIsSetArgs.Country">
 <summary>
 Gets or sets the country.
 </summary>
 <value>Country. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerCountryIsChanged">
 <summary>
 This notification is broadcast before Country is set. This notification is only broadcast if Country has been changed by the user.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeCustomerCountryIsChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerCountryIsChangedArgs">
 <summary>
 Provides information about order and country just before customer country is changed by the user.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeCustomerCountryIsChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerCountryIsChangedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerCountryIsChangedArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerCountryIsChangedArgs.Country">
 <summary>
 Gets or sets the country.
 </summary>
 <value>Country. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerCountryIsChanged">
 <summary>
 This notification is broadcast after Country is set. This notification is only broadcast if Country has been changed by the user.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterCustomerCountryIsChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerCountryIsChangedArgs">
 <summary>
 Provides information about order and country just after customer country is changed by the user.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterCustomerCountryIsChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerCountryIsChangedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerCountryIsChangedArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerCountryIsChangedArgs.Country">
 <summary>
 Gets or sets the country.
 </summary>
 <value>Country. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDeliveryCountryIsSet">
 <summary>
 This notification is broadcast before Delivery Country is set. This notification is always broadcast when a Delivery Country is set by the user.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeDeliveryCountryIsSetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDeliveryCountryIsSetArgs">
 <summary>
 Provides information about order and delivery country just before delivery country is set.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeDeliveryCountryIsSetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDeliveryCountryIsSetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDeliveryCountryIsSetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDeliveryCountryIsSetArgs.Country">
 <summary>
 Gets or sets the country.
 </summary>
 <value>Country. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDeliveryCountryIsSet">
 <summary>
 This notification is broadcast after Delivery Country is set. This notification is always broadcast when a Delivery Country is set by the user.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterDeliveryCountryIsSetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDeliveryCountryIsSetArgs">
 <summary>
 Provides information about order and delivery country just after delivery country is set.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterDeliveryCountryIsSetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDeliveryCountryIsSetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDeliveryCountryIsSetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDeliveryCountryIsSetArgs.Country">
 <summary>
 Gets or sets the country.
 </summary>
 <value>Country. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDeliveryCountryIsChanged">
 <summary>
 This notification is broadcast before Delivery Country is set. This notification is only broadcast if Delivery Country has been changed by the user.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeDeliveryCountryIsChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDeliveryCountryIsChangedArgs">
 <summary>
 Provides information about order and delivery country just before it is changed by user.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeDeliveryCountryIsChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDeliveryCountryIsChangedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDeliveryCountryIsChangedArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDeliveryCountryIsChangedArgs.Country">
 <summary>
 Gets or sets the country.
 </summary>
 <value>Country. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDeliveryCountryIsChanged">
 <summary>
 This notification is broadcast after Delivery Country is set. This notification is only broadcast if Delivery Country has been changed by the user.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterDeliveryCountryIsChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDeliveryCountryIsChangedArgs">
 <summary>
 Provides information about order and delivery country just after it is changed by user.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterDeliveryCountryIsChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDeliveryCountryIsChangedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDeliveryCountryIsChangedArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDeliveryCountryIsChangedArgs.Country">
 <summary>
 Gets or sets the country.
 </summary>
 <value>Country. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDefaultPropertiesValueIsSet">
 <summary>
 This notification is broadcast before a Default Order Property is set. This notification is always broadcast when a Default Order Property is set.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeDefaultPropertiesValueIsSetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDefaultPropertiesValueIsSetArgs">
 <summary>
 Provides information about order and it's default properties just before it is set.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeDefaultPropertiesValueIsSetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDefaultPropertiesValueIsSetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDefaultPropertiesValueIsSetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDefaultPropertiesValueIsSetArgs.PropertyName">
 <summary>
 Gets or sets the property name.
 </summary>
 <value>String. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDefaultPropertiesValueIsSetArgs.Value">
 <summary>
 Gets or sets the value of the Default Property.
 </summary>
 <value>Object. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDefaultPropertiesValueIsSet">
 <summary>
 This notification is broadcast after a Default Order Property is set. This notification is always broadcast when a Default Order Property is set.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterDefaultPropertiesValueIsSetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDefaultPropertiesValueIsSetArgs">
 <summary>
 Provides information about order and it's default properties just after it is set by user.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterDefaultPropertiesValueIsSetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDefaultPropertiesValueIsSetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDefaultPropertiesValueIsSetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDefaultPropertiesValueIsSetArgs.PropertyName">
 <summary>
 Gets or sets the property name.
 </summary>
 <value>String. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDefaultPropertiesValueIsSetArgs.Value">
 <summary>
 Gets or sets the value of the Default Property.
 </summary>
 <value>Object. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDefaultPropertiesValueIsChanged">
 <summary>
 This notification is broadcast before a Default Order Property is set. This notification is only broadcast if the Default Order Property value has changed.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeDefaultPropertiesValueIsChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDefaultPropertiesValueIsChangedArgs">
 <summary>
 Provides information about order and it's default properties just before it is changed.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeDefaultPropertiesValueIsChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDefaultPropertiesValueIsChangedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDefaultPropertiesValueIsChangedArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDefaultPropertiesValueIsChangedArgs.PropertyName">
 <summary>
 Gets or sets the property name.
 </summary>
 <value>String. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeDefaultPropertiesValueIsChangedArgs.Value">
 <summary>
 Gets or sets the value of the Default Property.
 </summary>
 <value>Object. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDefaultPropertiesValueIsChanged">
 <summary>
 This notification is broadcast after a Default Order Property is set. This notification is only broadcast if the Default Order Property value has changed.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterDefaultPropertiesValueIsChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDefaultPropertiesValueIsChangedArgs">
 <summary>
 Provides information about order and it's default properties just after it is changed.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterDefaultPropertiesValueIsChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDefaultPropertiesValueIsChangedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDefaultPropertiesValueIsChangedArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDefaultPropertiesValueIsChangedArgs.PropertyName">
 <summary>
 Gets or sets the property name.
 </summary>
 <value>String. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterDefaultPropertiesValueIsChangedArgs.Value">
 <summary>
 Gets or sets the value of the Default Property.
 </summary>
 <value>Object. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomFieldValueIsSet">
 <summary>
 This notification is broadcast before a Custom Order Field is set. This notification is always broadcast when a Custom Order Field value is set.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeCustomFieldValueIsSetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomFieldValueIsSetArgs">
 <summary>
 Provides information about order and it's custom field just before it is set.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeCustomFieldValueIsSetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomFieldValueIsSetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomFieldValueIsSetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomFieldValueIsSetArgs.CustomFieldName">
 <summary>
 Gets or sets the Custom Field name.
 </summary>
 <value>String. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomFieldValueIsSetArgs.Value">
 <summary>
 Gets or sets the value of the Custom Field.
 </summary>
 <value>Object. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomFieldValueIsSet">
 <summary>
 This notification is broadcast after a Custom Order Field is set. This notification is always broadcast when a Custom Order Field value is set.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterCustomFieldValueIsSetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomFieldValueIsSetArgs">
 <summary>
 Provides information about order and it's custom field just after it is set.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterCustomFieldValueIsSetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomFieldValueIsSetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomFieldValueIsSetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomFieldValueIsSetArgs.CustomFieldName">
 <summary>
 Gets or sets the Custom Field name.
 </summary>
 <value>String. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomFieldValueIsSetArgs.Value">
 <summary>
 Gets or sets the value of the Custom Field.
 </summary>
 <value>Object. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomFieldValueIsChanged">
 <summary>
 This notification is broadcast before a Custom Order Field is set. This notification is only broadcast if the Custom Order Field value has been changed.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeCustomFieldValueIsChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomFieldValueIsChangedArgs">
 <summary>
 Provides information about order and it's custom field just before it is changed.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeCustomFieldValueIsChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomFieldValueIsChangedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomFieldValueIsChangedArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomFieldValueIsChangedArgs.CustomFieldName">
 <summary>
 Gets or sets the Custom Field name.
 </summary>
 <value>String. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomFieldValueIsChangedArgs.Value">
 <summary>
 Gets or sets the value of the Custom Field.
 </summary>
 <value>Object. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomFieldValueIsChanged">
 <summary>
 This notification is broadcast after a Custom Order Field is set. This notification is only broadcast if the Custom Order Field value has been changed.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterCustomFieldValueIsChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomFieldValueIsChangedArgs">
 <summary>
 Provides information about order and it's custom field just after it is changed.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterCustomFieldValueIsChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomFieldValueIsChangedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomFieldValueIsChangedArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomFieldValueIsChangedArgs.CustomFieldName">
 <summary>
 Gets or sets the Custom Field name.
 </summary>
 <value>String. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomFieldValueIsChangedArgs.Value">
 <summary>
 Gets or sets the value of the Custom Field.
 </summary>
 <value>Object. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeNewsletterSubscriptionValueIsSet">
 <summary>
 This notification is broadcast before Newsletter Subscription is set. This notification is always broadcast when the Newsletter Subscription value is set.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeNewsletterSubscriptionValueIsSetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeNewsletterSubscriptionValueIsSetArgs">
 <summary>
 Provides information about order just before Newsletter Subscription is set.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeNewsletterSubscriptionValueIsSetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeNewsletterSubscriptionValueIsSetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeNewsletterSubscriptionValueIsSetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeNewsletterSubscriptionValueIsSetArgs.NewsletterSubscription">
 <summary>
 Gets or sets the value of the Newsletter Subscription.
 </summary>
 <value>Boolean. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterNewsletterSubscriptionValueIsSet">
 <summary>
 This notification is broadcast after Newsletter Subscription is set. This notification is always broadcast when the Newsletter Subscription value is set.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterNewsletterSubscriptionValueIsSetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterNewsletterSubscriptionValueIsSetArgs">
 <summary>
 Provides information about order just after Newsletter Subscription is set.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterNewsletterSubscriptionValueIsSetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterNewsletterSubscriptionValueIsSetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterNewsletterSubscriptionValueIsSetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterNewsletterSubscriptionValueIsSetArgs.NewsletterSubscription">
 <summary>
 Gets or sets the value of the Newsletter Subscription.
 </summary>
 <value>Boolean. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeNewsletterSubscriptionValueIsChanged">
 <summary>
 This notification is broadcast before Newsletter Subscription is set. This notification is only broadcast if the Newsletter Subscription value has been changed.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeNewsletterSubscriptionValueIsChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeNewsletterSubscriptionValueIsChangedArgs">
 <summary>
 Provides information about order just before Newsletter Subscription is changed by user.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeNewsletterSubscriptionValueIsChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeNewsletterSubscriptionValueIsChangedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeNewsletterSubscriptionValueIsChangedArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeNewsletterSubscriptionValueIsChangedArgs.NewsletterSubscription">
 <summary>
 Gets or sets the value of the Newsletter Subscription.
 </summary>
 <value>Boolean. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterNewsletterSubscriptionValueIsChanged">
 <summary>
 This notification is broadcast after Newsletter Subscription is set. This notification is only broadcast if the Newsletter Subscription value has been changed.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterNewsletterSubscriptionValueIsChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterNewsletterSubscriptionValueIsChangedArgs">
 <summary>
 Provides information about order just after Newsletter Subscription is changed by user.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterNewsletterSubscriptionValueIsChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterNewsletterSubscriptionValueIsChangedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterNewsletterSubscriptionValueIsChangedArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterNewsletterSubscriptionValueIsChangedArgs.NewsletterSubscription">
 <summary>
 Gets or sets the value of the Newsletter Subscription.
 </summary>
 <value>Boolean. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerAcceptedValueIsSet">
 <summary>
 This notification is broadcast before Customer Accepted value is set. This notification is always broadcast when the Customer Accepted value is set.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeCustomerAcceptedValueIsSetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerAcceptedValueIsSetArgs">
 <summary>
 Provides information about order just before Customer Accepted value is set.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeCustomerAcceptedValueIsSetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerAcceptedValueIsSetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerAcceptedValueIsSetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerAcceptedValueIsSetArgs.CustomerAccepted">
 <summary>
 Gets or sets the value of the Customer Accepted.
 </summary>
 <value>Boolean. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerAcceptedValueIsSet">
 <summary>
 This notification is broadcast after Customer Accepted value is set. This notification is always broadcast when the Customer Accepted value is set.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterCustomerAcceptedValueIsSetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerAcceptedValueIsSetArgs">
 <summary>
 Provides information about order just after Customer Accepted value is set.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterCustomerAcceptedValueIsSetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerAcceptedValueIsSetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerAcceptedValueIsSetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerAcceptedValueIsSetArgs.CustomerAccepted">
 <summary>
 Gets or sets the value of the Customer Accepted.
 </summary>
 <value>Boolean. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerAcceptedValueIsChanged">
 <summary>
 This notification is broadcast before Customer Accepted value is set. This notification is only broadcast if the Customer Accepted value has been changed.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeCustomerAcceptedValueIsChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerAcceptedValueIsChangedArgs">
 <summary>
 Provides information about order just before Customer Accepted value is changed.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeCustomerAcceptedValueIsChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerAcceptedValueIsChangedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerAcceptedValueIsChangedArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeCustomerAcceptedValueIsChangedArgs.CustomerAccepted">
 <summary>
 Gets or sets the value of the Customer Accepted.
 </summary>
 <value>Boolean. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerAcceptedValueIsChanged">
 <summary>
 This notification is broadcast after Customer Accepted value is set. This notification is only broadcast if the Customer Accepted value has been changed.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterCustomerAcceptedValueIsChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerAcceptedValueIsChangedArgs">
 <summary>
 Provides information about order just after Customer Accepted value is changed.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterCustomerAcceptedValueIsChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerAcceptedValueIsChangedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerAcceptedValueIsChangedArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterCustomerAcceptedValueIsChangedArgs.CustomerAccepted">
 <summary>
 Gets or sets the value of the Customer Accepted.
 </summary>
 <value>Boolean. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeShippingIsReset">
 <summary>
 This notification is broadcast before ShippingMethod is reset. This notification is only broadcast if the current ShippingMethod is not available for the current Country/DeliveryCountry.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeShippingIsResetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeShippingIsResetArgs">
 <summary>
 Provides information about order just before ShippingMethod is reset.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforeShippingIsResetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeShippingIsResetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeShippingIsResetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterShippingIsReset">
 <summary>
 This notification is broadcast after ShippingMethod is reset. This notification is only broadcast if the current ShippingMethod is not available for the current Country/DeliveryCountry.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterShippingIsResetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterShippingIsResetArgs">
 <summary>
 Provides information about order just after ShippingMethod is reset.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterShippingIsResetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterShippingIsResetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterShippingIsResetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforePaymentIsReset">
 <summary>
 This notification is broadcast before PaymentMethod is reset. This notification is only broadcast if the current PaymentMethod is not available for the current Country/DeliveryCountry.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforePaymentIsResetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforePaymentIsResetArgs">
 <summary>
 Provides information about order just before PaymentMethod is reset.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforePaymentIsResetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforePaymentIsResetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforePaymentIsResetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterPaymentIsReset">
 <summary>
 This notification is broadcast after PaymentMethod is reset. This notification is only broadcast if the current PaymentMethod is not available for the current Country/DeliveryCountry.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterPaymentIsResetObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterPaymentIsResetArgs">
 <summary>
 Provides information about order just after PaymentMethod is reset.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterPaymentIsResetObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterPaymentIsResetArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterPaymentIsResetArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.OrderValuesSaved">
 <summary>
 This notification is broadcast after posted Order values have been saved.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.OrderValuesSavedArgs">
 <summary>
 Class OrderValuesSavedArgs.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.OrderValuesSavedArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.OrderValuesSavedArgs.SaveCount">
 <summary>
 Gets the number of fields saved.
 </summary>
 <value>The save count.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.OrderIsPassedToCheckoutHandler">
 <summary>
 This notification is broadcast just before the Order is passed to CheckoutHandler.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartOrderIsPassedToCheckoutHandlerObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.OrderIsPassedToCheckoutHandlerArgs">
 <summary>
 Provides information about order just when the order is passed to checkout handler.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartOrderIsPassedToCheckoutHandlerObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.OrderIsPassedToCheckoutHandlerArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.OrderIsPassedToCheckoutHandlerArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.OrderIsPassedToCheckoutHandlerArgs.CheckoutHandler">
 <summary>
 Gets or sets the CheckoutHandler.
 </summary>
 <value>CheckoutHandler. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.CheckoutDone">
 <summary>
 This notification is broadcast when the Order is passed back from the CheckoutHandler.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.CheckoutDoneArgs">
 <summary>
 Class CheckoutDoneArgs.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.CheckoutDoneArgs.Order">
 <summary>
 The <see cref="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.CheckoutDoneArgs.Order" /> being handled.
 </summary>
 <value>The order.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.CheckoutDoneArgs.CancelExecution">
 <summary>
 Property indicating whether to cancel the rest of the execution of the checkout flow.
 Default value is <c>false</c>.
 </summary>
 <value><c>true</c> if [cancel execution]; otherwise, <c>false</c>.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.CheckoutDoneOrderIsComplete">
 <summary>
 This notification is broadcast when the Order is passed back from CheckoutHandler and is complete.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartCheckoutDoneOrderIsCompleteObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.CheckoutDoneOrderIsCompleteArgs">
 <summary>
 Provides information about order just when the Order is passed back from CheckoutHandler and is complete.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartCheckoutDoneOrderIsCompleteObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.CheckoutDoneOrderIsCompleteArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.CheckoutDoneOrderIsCompleteArgs.Order">
 <summary>
 Gets or sets the order.
 </summary>
 <value>Order. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.CheckoutDoneOrderIsNotComplete">
 <summary>
 This notification is broadcast when the Order is passed back from CheckoutHandler and is not complete.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartCheckoutDoneOrderIsNotCompleteObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.CheckoutDoneOrderIsNotCompleteArgs">
 <summary>
 Provides information about order when the Order is passed back from CheckoutHandler and is not complete.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartCheckoutDoneOrderIsNotCompleteObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.CheckoutDoneOrderIsNotCompleteArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.CheckoutDoneOrderIsNotCompleteArgs.Order">
 <summary>
 Gets or sets the order.
 </summary>
 <value>Order. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforePlaceRecurringOrder">
 <summary>
 This notification is broadcast when new recurring is about to be placed.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforePlaceRecurringOrderObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforePlaceRecurringOrderArgs">
 <summary>
 Provides information about order just before placing new recurring order.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartBeforePlaceRecurringOrderObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforePlaceRecurringOrderArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforePlaceRecurringOrderArgs.Order">
 <summary>
 Gets or sets the order.
 </summary>
 <value>Order. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterRecurringOrderPlaced">
 <summary>
 This notification is broadcast when new recurring order is just placed.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterRecurringOrderPlacedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterRecurringOrderPlacedArgs">
 <summary>
 Provides information about order just after new recurring order is placed.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartAfterRecurringOrderPlacedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterRecurringOrderPlacedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterRecurringOrderPlacedArgs.Order">
 <summary>
 Gets or sets the order.
 </summary>
 <value>Order. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.AfterRecurringOrderPlacedArgs.RecurringOrder">
 <summary>
 Gets or sets the <see cref="T:Dynamicweb.Ecommerce.Orders.RecurringOrder">RecurringOrder</see>.
 </summary>
 <value>Order. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SendMails">
 <summary>
 This notification is broadcast just before Order Emails are sent.
 </summary>
 <example></example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SendMailsArgs">
 <summary>
 Provides information about order just before Order Emails are sent.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example></example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SendMailsArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SendMailsArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SendMailsArgs.CartModuleSettings">
 <summary>
 Gets or sets the Dynamicweb.Ecommerce.Cart.ModuleSettings for the current cart.
 </summary>
 <value>ModuleSettings. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SendingConfirmationMail">
 <summary>
 This notification is broadcast just before each individual Order Email is sent.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartSendingConfirmationMailObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SendingConfirmationMailArgs">
 <summary>
 Provides information about order and confirmation mail just before each individual Order Email is sent.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartSendingConfirmationMailObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SendingConfirmationMailArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SendingConfirmationMailArgs.SkipThisMail">
 <summary>
 Gets or sets a value indicating whether to skip the current email, preventing it from being sent.
 </summary>
 <value><c>true</c> if the mail is skipped; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SendingConfirmationMailArgs.StopSendingMoreMails">
 <summary>
 Gets or sets a value indicating whether to skip the current email and all subsequent emails from being sent.
 </summary>
 <value><c>true</c> if no more mails should be sent; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SendingConfirmationMailArgs.MailMessage">
 <summary>
 Gets the mail message.
 </summary>
 <value>The mail message.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SendingConfirmationMailArgs.Recipient">
 <summary>
 Gets the recipient.
 </summary>
 <value>The recipient.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SendingConfirmationMailArgs.Order">
 <summary>
 Gets the order.
 </summary>
 <value>The order.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SendingConfirmationMailArgs.CartModuleSettings">
 <summary>
 Gets the module settings.
 </summary>
 <value>The module settings.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SendingConfirmationMailArgs.#ctor(System.Net.Mail.MailMessage,System.Net.Mail.MailAddress,Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Ecommerce.Cart.ModuleSettings)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.SendingConfirmationMailArgs"/> class.
 </summary>
 <param name="mailMessage">The mail message.</param>
 <param name="recipient">The recipient.</param>
 <param name="order">The order.</param>
 <param name="cartModuleSettings">The module settings.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.OnNewsletterSubscribe">
 <summary>
 This notification is broadcast if user checks the signup for newsletter checkbox.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartOnNewsletterSubscribeObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.OnNewsletterSubscribeArgs">
 <summary>
 Provides information about order if user checks the signup for newsletter checkbox.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartOnNewsletterSubscribeObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.OnNewsletterSubscribeArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.OnNewsletterSubscribeArgs.Order">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.OnNewsletterSubscribeArgs.CartModuleSettings">
 <summary>
 Gets or sets the Dynamicweb.Ecommerce.Cart.ModuleSettings for the current cart.
 </summary>
 <value>ModuleSettings. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeAddressValidation">
 <summary>
 Occurs just before address validation is executed.
 </summary>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartOnBeforeAddressValidationObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeAddressValidationArgs">
 <summary>
 Provides information about order before address validation is executed.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Cartv2\EcomCartOnBeforeAddressValidationObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeAddressValidationArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeAddressValidationArgs.Order">
 <summary>
 The <see cref="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeAddressValidationArgs.Order" /> being handled.
 </summary>
 <value>The order.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeAddressValidationArgs.AddressValidator">
 <summary>
 The <see cref="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeAddressValidationArgs.AddressValidator" /> being executed.
 </summary>
 <value>The address validator.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Cart.BeforeAddressValidationArgs.Cancel">
 <summary>
 Property indicating whether to cancel the execution of the address validation.
 Default value is <c>false</c>.
 </summary>
 <value><c>true</c> if [cancel]; otherwise, <c>false</c>.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order">
 <summary>
 Provides notification names for order.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderGatewayStatusChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.GatewayStatusChangedArgs"></see></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.State">
 <summary>
 Provides notification names for order state.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderStateChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.State.ChangedArgs"></see></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.State.Changed">
 <summary>
 Occurs when order status was changed.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderStateChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.State.ChangedArgs">
 <summary>
 Provides information about order when it's status was changed.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderStateChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.State.ChangedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.State.ChangedArgs.Order">
 <summary>
 Gets the order.
 </summary>
 <value>The order.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.State.ChangedArgs.#ctor(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.State.ChangedArgs"/> class.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.GatewayStatusChanged">
 <summary>
 Occurs when order Gateway Status changed.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderGatewayStatusChangedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.GatewayStatusChangedArgs">
 <summary>
 Provides information about the order which  gateway status changed.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderGatewayStatusChangedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.GatewayStatusChangedArgs"></see></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.GatewayStatusChangedArgs.#ctor(Dynamicweb.Ecommerce.Orders.Order,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.GatewayStatusChangedArgs" /> class.
 </summary>
 <param name="order">The order.</param>
 <param name="status">The status.</param>
 <param name="previousStatus">The previous status.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.GatewayStatusChangedArgs.Order">
 <summary>
 Gets the order.
 </summary>
 <value>The order.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.GatewayStatusChangedArgs.Status">
 <summary>
 Gets the status.
 </summary>
 <value>The status.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.GatewayStatusChangedArgs.PreviousStatus">
 <summary>
 Gets the previous status.
 </summary>
 <value>The previous status.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeSave">
 <summary>
 Occurs just before saving the order information.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderBeforeSaveObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeSaveArgs">
 <summary>
 Provides information about the order which  is going to be saved.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderBeforeSaveObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeSaveArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeSaveArgs.Order">
 <summary>
 Gets the order.
 </summary>
 <value>The order.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeSaveArgs.StopExecution">
 <summary>
 Gets or sets a value indicating whether [stop execution].
 </summary>
 <value><c>true</c> if [stop execution]; otherwise, <c>false</c>.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeSaveArgs.#ctor(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeSaveArgs"/> class.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.AfterSave">
 <summary>
 Occurs just after saving the order information.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderAfterSaveObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.AfterSaveArgs">
 <summary>
 Provides information about the order which was saved.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderAfterSaveObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.AfterSaveArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.AfterSaveArgs.Order">
 <summary>
 Gets the order.
 </summary>
 <value>The order.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.AfterSaveArgs.#ctor(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.AfterSaveArgs"/> class.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeDelete">
 <summary>
 Occurs just before deleting the order.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderBeforeDeleteObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeDeleteArgs">
 <summary>
 Provides information about the order that's going to be deleted.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderBeforeDeleteObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeDeleteArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeDeleteArgs.Order">
 <summary>
 Gets the order.
 </summary>
 <value>The order.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeDeleteArgs.OrderId">
 <summary>
 Gets the order identifier.
 </summary>
 <value>The order identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeDeleteArgs.StopExecution">
 <summary>
 Gets or sets a value indicating whether [stop execution].
 </summary>
 <value><c>true</c> if [stop execution]; otherwise, <c>false</c>.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeDeleteArgs.#ctor(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeDeleteArgs"/> class.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeDeleteArgs.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeDeleteArgs"/> class.
 </summary>
 <param name="orderId">The order identifier.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.AfterDelete">
 <summary>
 Occurs just after deleting the order.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderAfterDeleteObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.AfterDeleteArgs">
 <summary>
 Provides information about the order that was deleted.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderAfterDeleteObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.AfterDeleteArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.AfterDeleteArgs.Order">
 <summary>
 Gets the order.
 </summary>
 <value>The order.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.AfterDeleteArgs.OrderId">
 <summary>
 Gets the order identifier.
 </summary>
 <value>The order identifier.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.AfterDeleteArgs.#ctor(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.AfterDeleteArgs"/> class.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.AfterDeleteArgs.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.AfterDeleteArgs"/> class.
 </summary>
 <param name="orderId">The order identifier.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforePriceCalculation">
 <summary>
 Occurs just before price calculation.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderBeforePriceCalculationObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforePriceCalculationArgs">
 <summary>
 Provides information about order which price is going to be calculated.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderBeforePriceCalculationObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforePriceCalculationArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforePriceCalculationArgs.ForceRecalculation">
 <summary>
 Gets or sets a boolean indicating whether the price should be recalculated or not. This is relevant if internal price caching prevents the correct price from being shown.
 The price may be recalculated anyway as this property does not offer the option to skip recalculation of a recalculation is needed.
 </summary>
 <value><c>true</c> if recalculation should be forced; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforePriceCalculationArgs.Order">
 <summary>
 Gets the order.
 </summary>
 <value>The order.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforePriceCalculationArgs.#ctor(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforePriceCalculationArgs"/> class.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforePaymentFeeCalculation">
 <summary>
 Occurs just before payment fee calculation for some order.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderBeforePaymentFeeCalculationObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforePaymentFeeCalculationArgs">
 <summary>
 Provides information about order before payment fee calculation.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderBeforePaymentFeeCalculationObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforePaymentFeeCalculationArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforePaymentFeeCalculationArgs.Order">
 <summary>
 Gets the order.
 </summary>
 <value>The order.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforePaymentFeeCalculationArgs.PaymentFee">
 <summary>
 Gets the payment fee.
 </summary>
 <value>The payment fee.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforePaymentFeeCalculationArgs.#ctor(Dynamicweb.Ecommerce.Orders.Order,Dynamicweb.Ecommerce.Prices.PriceInfo)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforePaymentFeeCalculationArgs"/> class.
 </summary>
 <param name="order">The order.</param>
 <param name="paymentfee">The paymentfee.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeShippingFeeCalculation">
 <summary>
 Occurs just before shipping fee calculation for some order.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderBeforeShippingFeeCalculationObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeShippingFeeCalculationArgs">
 <summary>
 Provides information about order before shipping fee calculation.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderBeforeShippingFeeCalculationObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeShippingFeeCalculationArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeShippingFeeCalculationArgs.Order">
 <summary>
 Gets the order.
 </summary>
 <value>The order.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeShippingFeeCalculationArgs.#ctor(Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeShippingFeeCalculationArgs"/> class.
 </summary>
 <param name="order">The order.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeSendingOrderFlowEmail">
 <summary>
 Occurs just before sending an order flow email.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderBeforeSendingOrderFlowEmailObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeSendingOrderFlowEmailArgs">
 <summary>
 Provides information about order before sending an order flow email.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderBeforeSendingOrderFlowEmailObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeSendingOrderFlowEmailArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeSendingOrderFlowEmailArgs.Order">
 <summary>
 Gets the order.
 </summary>
 <value>The order.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeSendingOrderFlowEmailArgs.Subject">
 <summary>
 Gets the subject.
 </summary>
 <value>The subject.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeSendingOrderFlowEmailArgs.ToMailAddresses">
 <summary>
 Gets the recipients email addresses.
 </summary>
 <value>To mail addresses.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeSendingOrderFlowEmailArgs.FromMailAddress">
 <summary>
 Gets the sender email address.
 </summary>
 <value>From mail address.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeSendingOrderFlowEmailArgs.FromMailName">
 <summary>
 Gets the sender email name.
 </summary>
 <value>The name of from mail.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeSendingOrderFlowEmailArgs.HtmlBody">
 <summary>
 Gets the html body of email.
 </summary>
 <value>The HTML body.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeSendingOrderFlowEmailArgs.#ctor(Dynamicweb.Ecommerce.Orders.Order,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.BeforeSendingOrderFlowEmailArgs"/> class.
 </summary>
 <param name="order">The order.</param>
 <param name="subject">The subject.</param>
 <param name="toMailAddresses">To mail addresses.</param>
 <param name="fromMailAddress">From mail address.</param>
 <param name="fromMailName">Name of from mail.</param>
 <param name="htmlBody">The HTML body.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.AfterOrderCaptured">
 <summary>This notification is broadcast when the Order is captured.</summary>
<remarks>The passed NotificationArgs is <see cref="!:Dynamicweb.Notifications.eCommerce.Order.AfterOrderCapturedArgs"></see></remarks>
 <example>
 <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderTaxCommitAfterCaptureObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.AfterOrderCapturedArgs">
 <summary>Provides information about order just when the Order is captured.</summary>
<remarks>The passed NotificationArgs is <see cref="!:Dynamicweb.Notifications.eCommerce.Order.AfterOrderCapturedArgs"></see></remarks>
 <example>
 <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderTaxCommitAfterCaptureObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Order.AfterOrderCapturedArgs.Order">
 <summary>
 Gets or sets the order.
 </summary>
 <value>Order. Setting this from a notification subscriber will have no effect.</value>
 <returns>Order</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma">
 <summary>
 Class Rma. This class cannot be inherited.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.Created">
 <summary>
 This notification is fired when a new <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> is created.            
 </summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.CreatedArgs"></see></remarks>            
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.CreatedArgs">
 <summary>
 This is the NotificationArgs object for <see cref="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.Created" />.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.CreatedArgs.Rma">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.                
 </summary>                
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.CreatedArgs.#ctor(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.CreatedArgs"/>
 </summary>
 <param name="rma">The RMA</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeDelete">
 <summary>This notification is fired before a <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> is deleted.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeDeleteArgs"></see></remarks>            
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeDeleteArgs">
 <summary>
 This is the NotificationArgs object for <see cref="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeDelete" />.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeDeleteArgs.Rma">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.                
 </summary>                
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeDeleteArgs.#ctor(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeDeleteArgs"/>
 </summary>
 <param name="rma">The RMA</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterDelete">
 <summary>This notification is fired after a <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> is deleted.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterDeleteArgs"></see></remarks>            
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterDeleteArgs">
 <summary>
 This is the NotificationArgs object for <see cref="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterDelete" />.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterDeleteArgs.Rma">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.                
 </summary>                
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterDeleteArgs.#ctor(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterDeleteArgs"/>
 </summary>
 <param name="rma">The RMA</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeSave">
 <summary>This notification is fired before a <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> is saved.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeSaveArgs"></see></remarks>            
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeSaveArgs.Rma">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.                
 </summary>                
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeSaveArgs.#ctor(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeSaveArgs"/>
 </summary>
 <param name="rma">The RMA</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterSave">
 <summary>This notification is fired after a <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> is saved.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterSaveArgs"></see></remarks>            
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterSaveArgs.Rma">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.                
 </summary>                
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterSaveArgs.#ctor(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterSaveArgs"/>
 </summary>
 <param name="rma">The RMA</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterCommentAdded">
 <summary>This notification is fired after a commnet has been added to a <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterCommentAddedArgs"></see></remarks>            
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterCommentAddedArgs.Comment">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment" />.                
 </summary>                
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterCommentAddedArgs.#ctor(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationComment)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterCommentAddedArgs"/>
 </summary>
 <param name="comment">The RMA comment</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.DeletedSetToTrue">
 <summary>This notification is fired after a Deleted property of the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> is set to true.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.DeletedSetToTrueArgs"></see></remarks>            
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.DeletedSetToTrueArgs">
 <summary>
 This is the NotificationArgs object for <see cref="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.DeletedSetToTrue" />.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.DeletedSetToTrueArgs.Rma">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.                
 </summary>                
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.DeletedSetToTrueArgs.#ctor(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.DeletedSetToTrueArgs"/>
 </summary>
 <param name="rma">The RMA</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.ClosedSetToTrue">
 <summary>This notification is fired after a Closed property of the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> is set to true.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.ClosedSetToTrueArgs"></see></remarks>            
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.ClosedSetToTrueArgs">
 <summary>
 This is the NotificationArgs object for <see cref="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.ClosedSetToTrue" />.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.ClosedSetToTrueArgs.Rma">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.                
 </summary>                
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.ClosedSetToTrueArgs.#ctor(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.ClosedSetToTrueArgs"/>
 </summary>
 <param name="rma">The RMA</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.ReplacementOrderSet">
 <summary>This notification is fired when a replacement <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> is set</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.ReplacementOrderSetArgs"></see></remarks>            
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.ReplacementOrderSetArgs">
 <summary>
 This is the NotificationArgs object for <see cref="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.ReplacementOrderSet" />.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.ReplacementOrderSetArgs.ReplacementOrder">
 <summary>
 Gets or sets the replacement <see cref="T:Dynamicweb.Ecommerce.Orders.Order" />.
 NB. It's possible to manipulate the <see cref="T:Dynamicweb.Ecommerce.Orders.Order" /> object,
 but it's not possible to replace the object reference.
 </summary>
 <value>
 The replacement order.
 </value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.ReplacementOrderSetArgs.Rma">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.                
 </summary>                
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.ReplacementOrderSetArgs.#ctor(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization,Dynamicweb.Ecommerce.Orders.Order)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.ReplacementOrderSetArgs"/>
 </summary>
 <param name="rma">The RMA</param>
 <param name="replacementOrder">The replacment order</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.StateChanged">
 <summary>This notification is fired when a State property of the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> is changed.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.StateChangedArgs"></see></remarks>            
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.StateChangedArgs">
 <summary>
 This is the NotificationArgs object for <see cref="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.StateChanged" />.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.StateChangedArgs.Rma">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.                
 </summary>                
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.StateChangedArgs.PreviousStateId">
 <summary>
 Gets the previous state id.               
 </summary>                
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.StateChangedArgs.#ctor(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.StateChangedArgs" />
 </summary>
 <param name="rma">The RMA</param>
 <param name="previousStateId">A previous state id</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.UserInfoChanged">
 <summary>This notification is fired when any of the user info property from the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> has been changed.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.UserInfoChangedArgs"></see></remarks>            
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.UserInfoChangedArgs">
 <summary>
 This is the NotificationArgs object for <see cref="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.UserInfoChanged" />.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.UserInfoChangedArgs.Rma">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.                
 </summary>                
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.UserInfoChangedArgs.#ctor(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.UserInfoChangedArgs"/>
 </summary>
 <param name="rma">The RMA</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeRendered">
 <summary>This notification is fired before a <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> is rendered.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeRenderedArgs"></see></remarks>            
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeRenderedArgs.Rma">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.                
 </summary>                
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeRenderedArgs.#ctor(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeRenderedArgs"/>
 </summary>
 <param name="rma">The RMA</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterRendered">
 <summary>This notification is fired after a <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" /> is rendered.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterRenderedArgs"></see></remarks>            
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterRenderedArgs.Rma">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.                
 </summary>                
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterRenderedArgs.#ctor(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.AfterRenderedArgs"/>
 </summary>
 <param name="rma">The RMA</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeRmaEmailSend">
 <summary>This notification is fired before an email is send from <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorizationEmailConfiguration" />.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeRmaEmailSendArgs"></see></remarks>            
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeRmaEmailSendArgs.Rma">
 <summary>
 Gets the <see cref="T:Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization" />.                
 </summary>                
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeRmaEmailSendArgs.MailMessage">
 <summary>
 Gets the <see cref="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeRmaEmailSendArgs.MailMessage" />.                
 </summary>                
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeRmaEmailSendArgs.#ctor(Dynamicweb.Ecommerce.Orders.ReturnMerchandiseAuthorization.ReturnMerchandiseAuthorization,System.Net.Mail.MailMessage)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Rma.BeforeRmaEmailSendArgs"/>
 </summary>
 <param name="rma">The RMA</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList">
 <summary>
 Provides information about the product lists on the frontend.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Order\EcomOrderBeforeShippingFeeCalculationObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforeSortArgs"></see></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforeSort">
 <summary>
 Event occurs before products sorting.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\ProductList\EcomProductListBeforeSortObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforeSortArgs">
 <summary>
 Provides information about the products that will be sorted.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\ProductList\EcomProductListBeforeSortObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforeSortArgs"></see></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforeSortArgs.#ctor(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforeSortArgs" /> class.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforeSortArgs.Products">
 <summary>
 Gets the products.
 </summary>
 <value>The products.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforePaging">
 <summary>
 Event occurs before product paging change
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\ProductList\EcomProductLisBeforePagingObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforePagingArgs">
 <summary>
 Provides information about products before paging change
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\ProductList\EcomProductLisBeforePagingObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforePagingArgs"></see></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforePagingArgs.#ctor(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforePagingArgs" /> class.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforePagingArgs.Products">
 <summary>
 Gets the products.
 </summary>
 <value>The products.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforeRender">
 <summary>
 Event occurs before product list rendering on the front end.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\ProductList\EcomProductListBeforeRenderObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforeRenderArgs">
 <summary>
 Provides information about products before their rendering on the front end.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\ProductList\EcomProductListBeforeRenderObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforeRenderArgs"></see></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforeRenderArgs.#ctor(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforeRenderArgs" /> class.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforeRenderArgs.#ctor(Dynamicweb.Ecommerce.Products.ProductCollection,Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforeRenderArgs" /> class.
 </summary>
 <param name="products">The products.</param>
 <param name="pageProducts">The page products.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforeRenderArgs.Products">
 <summary>
 Gets the products.
 </summary>
 <value>The products.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.BeforeRenderArgs.PageProducts">
 <summary>
 Gets the page products.
 </summary>
 <value>The page products.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.AfterCustomOrderChange">
 <summary>
 Event occurs after sort the products in the Product list in the backend UI.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.AfterCustomOrderChangeArgs">
 <summary>
 Provides information about the products that will be sorted.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <remarks>The passed NotificationArgs is <see cref="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.AfterCustomOrderChange"></see></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.AfterCustomOrderChangeArgs.#ctor(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Initializes a new instance of the <see cref="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.AfterCustomOrderChange" /> class.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.ProductList.AfterCustomOrderChangeArgs.Products">
 <summary>
 Gets the products.
 </summary>
 <value>The products.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.VariantList">
 <summary>
 Provides information about the product variants on the frontend.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomVariantListBeforeRenderObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.VariantList.BeforeRenderArgs"></see></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.VariantList.BeforeRender">
 <summary>
 Notification fired before variant combinations is rendered
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomVariantListBeforeRenderObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.VariantList.BeforeRenderArgs">
 <summary>
 Provides information about the product variants just before variant combinations is rendered
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomVariantListBeforeRenderObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.VariantList.BeforeRenderArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.VariantList.BeforeRenderArgs.Product">
 <summary>
 The product to which the VariantCombinations belong. This is merely for information purposes. Overriding this property will have no effect on the actual rendering.
 </summary>
 <value>The product.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.VariantList.BeforeRenderArgs.VariantCombinations">
 <summary>
 The VariantCombinations about to be rendered.
 </summary>
 <value>The variant combinations.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product">
 <summary>
 Provides notification names for product.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Product\EcomProductBeforeRenderObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeRenderArgs"></see></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeRender">
 <summary>
 Event occurs before product rendering.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Product\EcomProductBeforeRenderObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeRenderArgs">
 <summary>
 Proovides information about product before rendering.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Product\EcomProductBeforeRenderObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeRenderArgs"></see></remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeRenderArgs.#ctor(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeRenderArgs" /> class.
 </summary>
 <param name="product">The product.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeRenderArgs.Product">
 <summary>
 Gets the product.
 </summary>
 <value>The product.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeSave">
 <summary>
 Event occurs before product rendering.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Product\EcomProductBeforeSaveObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeSaveArgs">
 <summary>
 Proovides information about product before saving.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Product\EcomProductBeforeSaveObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeSaveArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeSaveArgs.Product">
 <summary>
 Gets the product.
 </summary>
 <value>The product.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeSaveArgs.StopExecution">
 <summary>
 Gets or sets a value indicating whether to stop the save process. If true then the save process is interrupted.
 </summary>
 <value><c>true</c> if save process should be interrupted; otherwise, <c>false</c>.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeSaveArgs.#ctor(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeSaveArgs" /> class.
 </summary>
 <param name="product">The product.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterSave">
 <summary>
 Event occurs after product saving.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Product\EcomProductAfterSaveObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterSaveArgs">
 <summary>
 Provides information about product after saving.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Product\EcomProductAfterSaveObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterSaveArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterSaveArgs.Product">
 <summary>
 Gets the product.
 </summary>
 <value>The product.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterSaveArgs.#ctor(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterSaveArgs" /> class.
 </summary>
 <param name="product">The product.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDelete">
 <summary>
 Event occurs before deleting the product.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Product\EcomProductBeforeDeleteObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs">
 <summary>
 Provides information about product before deleting it.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Product\EcomProductBeforeDeleteObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs.Product">
 <summary>
 Gets the product. Will return null is ExecutingContext is not SingleProduct.
 </summary>
 <value>The product.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs.ProductId">
 <summary>
 Gets the product Id. Will return null if ExecutingContext is not SingleProduct.
 </summary>
 <value>The product identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs.ProductVariantId">
 <summary>
 Gets the product variant Id. Will return null if ExecutingContext is not SingleProduct.
 </summary>
 <value>The product variant identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs.ProductLanguageId">
 <summary>
 Gets the product language Id. Will return null if ExecutingContext is not SingleProduct.
 </summary>
 <value>The product language identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs.ProductCollection">
 <summary>
 Gets the product collection. Will return null if ExecutingContext is not ProductCollection.
 </summary>
 <value>The product collection.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs.ExecutingContext">
 <summary>
 Gets the executing context.
 </summary>
 <value>The executing context.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs.IsCleanUp">
 <summary>
 Gets a value indicating whether all additional information pertaining to the product is deleted.
 </summary>
 <value><c>true</c> if all information is deleted; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs.StopExecution">
 <summary>
 Gets or sets a value indicating whether to stop the delete process. If true then the delete process is interrupted.
 </summary>
 <value><c>true</c> if delete process should be interrupted; otherwise, <c>false</c>.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs.#ctor(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs" /> class.
 </summary>
 <param name="product">The product.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs" /> class.
 </summary>
 <param name="productId">The product Id.</param>
 <param name="productVariantId">The product variant Id.</param>
 <param name="productLanguageId">The product language Id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs.#ctor(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs" /> class.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterDelete">
 <summary>
 Event occurs after deleting the product.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Product\EcomProductAfterDeleteObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterDeleteArgs">
 <summary>
 Provides information about product after deleting it.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\Product\EcomProductAfterDeleteObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterDeleteArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterDeleteArgs.Product">
 <summary>
 Gets the product. Will return null is ExecutingContext is not SingleProduct.
 </summary>
 <value>The product.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterDeleteArgs.ProductId">
 <summary>
 Gets the product Id. Will return null if ExecutingContext is not SingleProduct.
 </summary>
 <value>The product identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterDeleteArgs.ProductVariantId">
 <summary>
 Gets the product variant Id. Will return null if ExecutingContext is not SingleProduct.
 </summary>
 <value>The product variant identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterDeleteArgs.ProductLanguageId">
 <summary>
 Gets the product language Id. Will return null if ExecutingContext is not SingleProduct.
 </summary>
 <value>The product language identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterDeleteArgs.ProductCollection">
 <summary>
 Gets the product collection. Will return null if ExecutingContext is not ProductCollection.
 </summary>
 <value>The product collection.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterDeleteArgs.ExecutingContext">
 <summary>
 Gets the executing context.
 </summary>
 <value>The executing context.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterDeleteArgs.IsCleanUp">
 <summary>
 Gets a value indicating whether all additional information pertaining to the product was deleted.
 </summary>
 <value><c>true</c> if all information was deleted; otherwise, <c>false</c>.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterDeleteArgs.#ctor(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs" /> class.
 </summary>
 <param name="product">The product.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterDeleteArgs.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs" /> class.
 </summary>
 <param name="productId">The product Id.</param>
 <param name="productVariantId">The product variant Id.</param>
 <param name="productLanguageId">The product language Id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterDeleteArgs.#ctor(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.BeforeDeleteArgs" /> class.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.ExecutingContext">
 <summary>
 Enum ExecutingContext
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.ExecutingContext.SingleProduct">
 <summary>
 The single product
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.ExecutingContext.ProductCollection">
 <summary>
 The product collection
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterCreate">
 <summary>
 Event occurs after product creating.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterCreateArgs">
 <summary>
 Provides information about product after creating.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterCreateArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterCreateArgs.Product">
 <summary>
 Gets the product.
 </summary>
 <value>The product.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterCreateArgs.#ctor(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterSaveArgs" /> class.
 </summary>
 <param name="product">The product.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.ProductWorkflowStateChanged">
 <summary>
 Event occurs after product workflow state changed.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.ProductWorkflowStateChangedArgs">
 <summary>
 Provides information about product after workflow state changed.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <remarks>The passed NotificationArgs is <see cref="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.ProductWorkflowStateChanged"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.ProductWorkflowStateChangedArgs.Product">
 <summary>
 Gets the product.
 </summary>
 <value>The product.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.ProductWorkflowStateChangedArgs.#ctor(Dynamicweb.Ecommerce.Products.Product,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Product.AfterSaveArgs" /> class.
 </summary>
 <param name="product">The product.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group">
 <summary>
 Encapsulated group-related notification objects.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomGroup\EcomGroupDeletedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.GroupRelationModifiedEventArgs"></see></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.Deleted">
 <summary>
 Occurs when the product group has been deleted.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomGroup\EcomGroupDeletedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.DeletedArgs">
 <summary>
 Provides information about product group when it has been deleted.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomGroup\EcomGroupDeletedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.DeletedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.DeletedArgs.Group">
 <summary>
 Gets the group. Will return null if ExecutingContext is not SingleGroup.
 </summary>
 <value>The group.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.DeletedArgs.GroupId">
 <summary>
 Gets the group Id. Will return null if ExecutingContext is not SingleGroup.
 </summary>
 <value>The group identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.DeletedArgs.GroupLanguageId">
 <summary>
 Gets the group language Id. Will return null if ExecutingContext is not SingleGroup.
 </summary>
 <value>The group language identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.DeletedArgs.GroupCollection">
 <summary>
 Gets the group collection. Will return null if ExecutingContext is not GroupCollection.
 </summary>
 <value>The group collection.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.DeletedArgs.ExecutingContext">
 <summary>
 Gets the executing context.
 </summary>
 <value>The executing context.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.DeletedArgs.AllRelationsDeleted">
 <summary>
 Gets a value indicating whether all relations for the group(s) are deleted.
 </summary>
 <value><c>true</c> if all relations are deleted; otherwise, <c>false</c>.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.DeletedArgs.#ctor(Dynamicweb.Ecommerce.Products.Group,System.String,System.String,Dynamicweb.Ecommerce.Products.GroupCollection)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeDeleteArgs" /> class.
 </summary>
 <param name="group">The group.</param>
 <param name="id">The id.</param>
 <param name="languageId">The language Id.</param>
 <param name="groups">The groups.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.RelationUpdated">
 <summary>
 Occurs when group relation has been updated.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomGroup\EcomGroupRelationUpdatedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.RelationDeleted">
 <summary>
 Occurs when group relation has been deleted.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomGroup\EcomGroupRelationDeletedObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeSave">
 <summary>
 Occurs before group is going to be saved.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomGroup\EcomGroupBeforeSaveObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeSaveArgs">
 <summary>
 Provides information about group before group is going to be saved.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomGroup\EcomGroupBeforeSaveObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeSaveArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeSaveArgs.Group">
 <summary>
 Gets the group.
 </summary>
 <value>The group.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeSaveArgs.StopExecution">
 <summary>
 Gets or sets a value indicating whether to stop the save process. If true then the save process is interrupted.
 </summary>
 <value><c>true</c> if save process should be interrupted; otherwise, <c>false</c>.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeSaveArgs.#ctor(Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeSaveArgs" /> class.
 </summary>
 <param name="group">The group.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.AfterSave">
 <summary>
 Occurs after group was saved.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomGroup\EcomGroupAfterSaveObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.AfterSaveArgs">
 <summary>
 Provides information about group after group was saved.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomGroup\EcomGroupAfterSaveObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.AfterSaveArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.AfterSaveArgs.Group">
 <summary>
 Gets the group.
 </summary>
 <value>The group.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.AfterSaveArgs.#ctor(Dynamicweb.Ecommerce.Products.Group)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.AfterSaveArgs"/> class.
 </summary>
 <param name="group">The group.</param>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeDelete">
 <summary>
 Occurs when group is going to be saved.
 </summary>
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomGroup\EcomGroupBeforeDeleteObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeDeleteArgs">
 <summary>
 Provides information about group after group which is going to be deleted.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomGroup\EcomGroupBeforeDeleteObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeDeleteArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeDeleteArgs.Group">
 <summary>
 Gets the group. Will return null if ExecutingContext is not SingleGroup.
 </summary>
 <value>The group.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeDeleteArgs.GroupId">
 <summary>
 Gets the group Id. Will return null if ExecutingContext is not SingleGroup.
 </summary>
 <value>The group identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeDeleteArgs.GroupLanguageId">
 <summary>
 Gets the group language Id. Will return null if ExecutingContext is not SingleGroup.
 </summary>
 <value>The group language identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeDeleteArgs.GroupCollection">
 <summary>
 Gets the group collection. Will return null if ExecutingContext is not GroupCollection.
 </summary>
 <value>The group collection.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeDeleteArgs.ExecutingContext">
 <summary>
 Gets the executing context.
 </summary>
 <value>The executing context.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeDeleteArgs.AllRelationsDeleted">
 <summary>
 Gets a value indicating whether all relations for the group(s) are deleted.
 </summary>
 <value><c>true</c> if all relations are deleted; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeDeleteArgs.StopExecution">
 <summary>
 Gets or sets a value indicating whether to stop the save process. If true then the save process is interrupted.
 </summary>
 <value><c>true</c> if save process should be interrupted; otherwise, <c>false</c>.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeDeleteArgs.#ctor(Dynamicweb.Ecommerce.Products.Group,System.String,System.String,Dynamicweb.Ecommerce.Products.GroupCollection)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.BeforeDeleteArgs" /> class.
 </summary>
 <param name="group">The group.</param>
 <param name="id">The id.</param>
 <param name="languageId">The language Id.</param>
 <param name="groups">The groups.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.ExecutingContext">
 <summary>
 Indicating which context the notification was executed in.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.ExecutingContext.SingleGroup">
 <summary>
 Indicates an action on a single group
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.ExecutingContext.GroupCollection">
 <summary>
 Indicates an action on a group collection
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.GroupRelationModifiedEventArgs">
 <summary>
 Provides data for the "RelationUpdated" and "RelationDeleted" notifications.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <example>
   <code description="Overriding the device detection of Dynamicweb" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\EcomGroup\EcomGroupRelationUpdatedObserver.cs" lang="CS"></code>
 </example>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.GroupRelationModifiedEventArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.GroupRelationModifiedEventArgs.ChildId">
 <summary>
 Gets an Id of the child group.
 </summary>
 <value>The child identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.GroupRelationModifiedEventArgs.ParentId">
 <summary>
 Gets an Id of the parent group.
 </summary>
 <value>The parent identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.GroupRelationModifiedEventArgs.OldChildId">
 <summary>
 Gets an original Id of the child group.
 </summary>
 <value>The old child identifier.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.GroupRelationModifiedEventArgs.OldParentId">
 <summary>
 Gets an original Id of the parent group.
 </summary>
 <value>The old parent identifier.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.GroupRelationModifiedEventArgs.#ctor(System.String,System.String)">
 <summary>
 Initializes new instance of an object.
 </summary>
 <param name="childId">An Id of the child group.</param>
 <param name="parentId">An Id of the parent group.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Group.GroupRelationModifiedEventArgs.#ctor(System.String,System.String,System.String,System.String)">
 <summary>
 Initializes new instance of an object.
 </summary>
 <param name="childId">An Id of the child group.</param>
 <param name="parentId">An Id of the parent group.</param>
 <param name="oldChildId">An original Id of the child group.</param>
 <param name="oldParentId">An original Id of the parent group.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Assortment">
 <summary>
 Encapsulated assortment-related notification objects.
 </summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Assortment.AssortmentsBuildFinishedArgs"></see></remarks>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Assortment.AssortmentsBuildFinished">
 <summary>
 Occurs when the assortments build has been finished.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Assortment.AssortmentsBuildFinishedArgs">
 <summary>
 Provides information about assortments that were build.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Assortment.AssortmentsBuildFinishedArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Assortment.AssortmentsBuildFinishedArgs.AssortmentsForBuild">
 <summary>
 Gets the all assortments collection to be build.
 </summary>         
 <value>The assortments for build.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Assortment.AssortmentsBuildFinishedArgs.FailedAssortments">
 <summary>
 Gets the failed assortments collection during build.
 </summary>         
 <value>The failed assortments.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Notifications.Ecommerce.Assortment.AssortmentsBuildFinishedArgs.#ctor(Dynamicweb.Ecommerce.Assortments.AssortmentCollection,Dynamicweb.Ecommerce.Assortments.AssortmentCollection)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Assortment.AssortmentsBuildFinishedArgs" /> class.
 </summary>
 <param name="assortmentsForBuild">The assortments collection to be rebuild.</param>                
 <param name="failedAssortments">The assortments collection that failed during rebuild.</param>                
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Assortment.AssortmentsCalculateUserAssortments">
 <summary>
 Occurs when the assortment IDs for a user is calculated for navigation providers, list of products, indexing assortment macro etc.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Assortment.AssortmentsCalculateUserAssortmentsArgs">
 <summary>
 Contains information on assortment IDs found for the current user by Dynamicweb.
 Manipulate this collection with a list of valid AssortmentIDs (<see cref="P:Dynamicweb.Ecommerce.Assortments.Assortment.ID"/>) to change which products the user can see.
 </summary>            
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Querying">
 <summary>
 Class Querying. This class cannot be inherited.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Querying.BeforeQuery">
 <summary>
 The before query
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Querying.BeforeQueryArgs">
 <summary>
 Class BeforeQueryArgs.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Querying.BeforeQueryArgs.Query">
 <summary>
 Gets or sets the query.
 </summary>
 <value>The query.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Querying.BeforeQueryArgs.Settings">
 <summary>
 Gets or sets the settings.
 </summary>
 <value>The settings.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Querying.AfterQuery">
 <summary>
 The after query
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Querying.AfterQueryArgs">
 <summary>
 Class AfterQueryArgs.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Querying.AfterQueryArgs.Query">
 <summary>
 Gets or sets the query.
 </summary>
 <value>The query.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Querying.AfterQueryArgs.Settings">
 <summary>
 Gets or sets the settings.
 </summary>
 <value>The settings.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Querying.AfterQueryArgs.Result">
 <summary>
 Gets or sets the result.
 </summary>
 <value>The result.</value>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Querying.BeforeQueryDatabase">
 <summary>
 Before query database notification
 </summary>
 <remarks>
 Use this to change the search results after the index query has been done or to change the sorting of the results.
 The args contains a list of autoids (<see cref="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Querying.BeforeQueryDatabaseArgs.AutoIds"/>) that can be used to search further. Return the autoids in the order they should be sorted.
 </remarks>
 <example>
   <code description="Notification observer example" source="..\Dynamicweb\05 - Modules\Dynamicweb.Ecommerce\Head\Dynamicweb.Ecommerce.Examples\Notifications\BeforeQueryDatabaseObserver.cs" lang="CS"></code>
 </example>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Querying.BeforeQueryDatabaseArgs.Query">
 <summary>
 Gets or sets the query.
 </summary>
 <value>The query.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Querying.BeforeQueryDatabaseArgs.Settings">
 <summary>
 Gets or sets the settings.
 </summary>
 <value>The settings.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Querying.BeforeQueryDatabaseArgs.Result">
 <summary>
 Gets or sets the result.
 </summary>
 <value>The result.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Querying.BeforeQueryDatabaseArgs.AutoIds">
 <summary>
 Gets or sets the list of product auto ids found in the search. Change the order or collection of ids to change the search result.
 </summary>
 <value>The result.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.GroupNavigation">
 <summary>
 Class GroupNavigation. This class cannot be inherited.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.GroupNavigation.GroupNavigationCleared">
 <summary>
 The after group navigation cleared
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.GroupNavigation.GroupNavigationArgs">
 <summary>
 Class GroupNavigationArgs.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Variants">
 <summary>
 Class GroupNavigation. This class cannot be inherited.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Variants.VariantGroupCleared">
 <summary>
 The after variant group cleared
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Variants.VariantGroupOptionValueCleared">
 <summary>
 The after variant group option values cleared
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Variants.VariantGroupPropertyCleared">
 <summary>
 The after variant group properties cleared
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Variants.VariantGroupProductRelationCleared">
 <summary>
 The after variant group option values cleared
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Variants.VariantCombinationCleared">
 <summary>
 The after variant group cleared
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Variants.VariantOptionCleared">
 <summary>
 The after variant group cleared
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Variants.VariantArgs">
 <summary>
 Class GroupNavigationArgs.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Countries">
 <summary>
 Class Countries. This class cannot be inherited.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Countries.CountriesCleared">
 <summary>
 The after countries cleared
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Countries.CountryArgs">
 <summary>
 Class CountryArgs.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Currencies">
 <summary>
 Class Currencies. This class cannot be inherited.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Currencies.CurrenciesCleared">
 <summary>
 The after currencies cleared
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Currencies.CurrencyArgs">
 <summary>
 Class CurrencyArgs.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Languages">
 <summary>
 Class Languages. This class cannot be inherited.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Languages.LanguagesCleared">
 <summary>
 The after languages cleared
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Languages.LanguageArgs">
 <summary>
 Class LanguageArgs.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.VatGroups">
 <summary>
 Class VatGroup. This class cannot be inherited.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.VatGroups.VatGroupsCleared">
 <summary>
 The after vatgroups cleared
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.VatGroups.VatGroupArgs">
 <summary>
 Class VatgroupArgs.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Discounts">
 <summary>
 Class Discounts. This class cannot be inherited.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Discounts.DiscountsCleared">
 <summary>
 The after discounts cleared
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Discounts.DiscountTranslationsCleared">
 <summary>
 The after discounts cleared
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Discounts.DiscountArgs">
 <summary>
 Class DiscountArgs.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Discounts.BeforeDiscountCalculation">
 <summary>
 This notification is broadcast just after discounts are cleared and discounts is about to be added - the perfect place to inject :)
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Discounts.BeforeDiscountCalculationsArgs">
 <summary>
 Provides information about order that is about to be discounted! :)
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Discounts.BeforeDiscountCalculationsArgs"></see></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Notifications.Ecommerce.Discounts.BeforeDiscountCalculationsArgs.Cart">
 <summary>
 Gets or sets the order/cart.
 </summary>
 <value>Order/cart. Setting this from a notification subscriber will have no effect.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.SalesDiscounts">
 <summary>
 Class SalesDiscounts. This class cannot be inherited.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.SalesDiscounts.SalesDiscountsCleared">
 <summary>
 The after salesdiscounts cleared
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.SalesDiscounts.SalesDiscountArgs">
 <summary>
 Class SalesDiscountArgs.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Shops">
 <summary>
 Class Shops. This class cannot be inherited.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Shops.ShopsCleared">
 <summary>
 The after shops cleared
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Notifications.Ecommerce.Shops.ShopLanguagesCleared">
 <summary>
 The after shop language relations cleared
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Notifications.Ecommerce.Shops.ShopArgs">
 <summary>
 Class ShopArgs.
 </summary>
 <seealso cref="T:Dynamicweb.Extensibility.Notifications.NotificationArgs" />
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.ConfigurableVatProvider">
 <summary>
 Represents the configurable VAT provider.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.ConfigurableVatProvider.FindVatPercent(Dynamicweb.Ecommerce.Products.Product@)">
 <summary>
 Finds the VAT percent.
 </summary>
 <param name="product">The <see cref="T:Dynamicweb.Ecommerce.Products.Product"/>.</param>
 <returns>The VAT percent.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.Criteria">
 <summary>
 Contains the criteria.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Prices.Criteria.Unit">
 <summary>
 Unit
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Prices.Criteria.Variant">
 <summary>
 Variant
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Prices.Criteria.Quantity">
 <summary>
 Quantity
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Prices.Criteria.Period">
 <summary>
 Period
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.DefaultPriceProvider">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private void CheckProviderTypesInCache()
    {
        // Check if a cache item for PriceResolverTypes is already created
        if (((Context.Current.Cache.Item["PriceProviderTypes"] == null)))
        {
            // Create a new arraylist
            ArrayList PriceProviderTypes = new ArrayList();

            // and fill it with ResolverTypes Types
            foreach (Type t in AddInManager.GetAddInClasses(typeof(Dynamicweb.eCommerce.Prices.PriceProvider)))
            {
                if ((!object.ReferenceEquals(t, typeof(Dynamicweb.eCommerce.Prices.DefaultPriceProvider))))
                {
                    PriceProviderTypes.Add(t);
                }
            }

            PriceProviderTypes.Add(typeof(Dynamicweb.eCommerce.Prices.DefaultPriceProvider));

            // Create a new cache item with for 5 min. expiration.
            // TODO: Change to inherited cache dependency object when switching to .net 2,0. Use Appdomain.OnLoad to flush the dependency.
            Context.Current.Cache.Add("PriceProviderTypes", PriceProviderTypes, null, DateTime.Now.AddSeconds(300), TimeSpan.Zero, System.Web.Caching.CacheItemPriority.High, null);
        }
    }
}
 </code>
 </example>
 <summary>
 Represents a default price provider.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.DefaultPriceProvider.FindPrice(Dynamicweb.Ecommerce.Products.Product,System.Double,System.String,Dynamicweb.Ecommerce.International.Currency,System.String,Dynamicweb.Security.UserManagement.User)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Prices.PriceRawCollection GetPrice(ProductItemCollection items)
    {
        Dynamicweb.eCommerce.Prices.PriceRawCollection col = new Dynamicweb.eCommerce.Prices.PriceRawCollection();
        Dynamicweb.eCommerce.Prices.DefaultPriceProvider dpp = new Dynamicweb.eCommerce.Prices.DefaultPriceProvider();

        foreach (ProductItem Item in items)
        {
            object priceObj = dpp.FindPrice(Item.Products.getProductById(Item.DefaultProductID), Item.Quantity, "", Dynamicweb.eCommerce.Common.Context.Currency,,Dynamicweb.Frontend.Extranet );

            if (priceObj != null)
            {
                if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceRaw)
                {
                    Dynamicweb.eCommerce.Prices.PriceRaw rawPrice = (Dynamicweb.eCommerce.Prices.PriceRaw)priceObj;
                    col.Add(rawPrice);
                }
            }
        }
        return col;
    }
}
 </code>
 </example>
 <summary>
 Finds the price.
 </summary>
 <param name="product">The product.</param>
 <param name="quantity">The quantity.</param>
 <param name="variantId">The variant id.</param>
 <param name="currency">The currency.</param>
 <param name="unitId">The unit id.</param>
 <param name="user">The user.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceRaw"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.DefaultPriceProvider.FindPrice(Dynamicweb.Ecommerce.Products.Product,System.Double,System.String,Dynamicweb.Ecommerce.International.Currency,System.String,Dynamicweb.Security.UserManagement.User,System.Double)">
 <summary>
 Finds the price. 
 </summary>
 <param name="product">The product.</param>
 <param name="quantity">The quantity.</param>
 <param name="variantId">The variant id.</param>
 <param name="currency">The currency.</param>
 <param name="unitId">The unit id.</param>
 <param name="user">The user.</param>
 <param name="quantityAllVariants">The quantity of all variants.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceRaw"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.DefaultPriceProvider.PreparePrices(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Prepares prices for the given <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection" />. The loaded prices are standard Dynamicweb prices, and they are loaded using the internal API.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.DefaultPriceProvider.PreparePrices(System.Collections.Generic.Dictionary{Dynamicweb.Ecommerce.Products.Product,System.Double})">
 <summary>
 Prepares prices for the given <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection" />. The loaded prices are standard Dynamicweb prices, and they are loaded using the internal API.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.DefaultPriceProvider.FindInformativePrice(Dynamicweb.Ecommerce.Products.Product,System.Double,System.String,Dynamicweb.Ecommerce.International.Currency,System.String,Dynamicweb.Security.UserManagement.User)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Prices.PriceRawCollection GetPrice(ProductItemCollection items)
    {
        Dynamicweb.eCommerce.Prices.PriceRawCollection col = new Dynamicweb.eCommerce.Prices.PriceRawCollection();
        Dynamicweb.eCommerce.Prices.DefaultPriceProvider dpp = new Dynamicweb.eCommerce.Prices.DefaultPriceProvider();

        foreach (ProductItem Item in items)
        {
            object priceObj = dpp.FindInformativePrice(Item.Products.getProductById(Item.DefaultProductID), Item.Quantity, "", Dynamicweb.eCommerce.Common.Context.Currency,,Dynamicweb.Frontend.Extranet );

            if (priceObj != null)
            {
                if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceRaw)
                {
                    Dynamicweb.eCommerce.Prices.PriceRaw rawPrice = (Dynamicweb.eCommerce.Prices.PriceRaw)priceObj;
                    col.Add(rawPrice);
                }
            }
        }
        return col;
    }
}
 </code>
 </example>
 <summary>
 Finds the informative price.
 </summary>
 <param name="product">The product.</param>
 <param name="quantity">The quantity.</param>
 <param name="variantId">The variant ID.</param>
 <param name="currency">The currency.</param>
 <param name="unitId">The unit ID.</param>
 <param name="user">The user.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceRaw"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.DefaultPriceProvider.ShowPrice(Dynamicweb.Ecommerce.Prices.Price,Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.International.Currency,Dynamicweb.Security.UserManagement.User,System.Boolean)">
 <summary>
 Check if a price should be shown in a list of prices in a given context. Same as Findprice that finds the right price, except it does not check for quantity, units and stocklocation.
 </summary>
 <param name="price">The price.</param>
 <param name="Product">The product.</param>
 <param name="Currency">The currency.</param>
 <param name="User">The user.</param>
 <param name="IsInformative">if set to <c>true</c> [is informative].</param>
 <returns><c>true</c> if the price should be shown, <c>false</c> otherwise.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.IInformativePriceInfo">
 <summary>
 Represents the interface of the informative price.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.IInformativePriceInfo.IsInformative">
 <summary>
 Gets or sets the value indicating whether price is informative.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.IPriceInfo">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private double _VAT;
   private double _VATPercent = 0.0;
   private double _PriceWithVAT = 0.0;
   private double _PriceWithoutVAT = 0.0;
   private Dynamicweb.eCommerce.International.Currency _Currency = Dynamicweb.eCommerce.Common.Context.Currency;

   public virtual double VAT
   {
       get { return _VAT; }
       set { _VAT = value; }
   }

   public virtual double PriceWithoutVAT
   {
       get { return _PriceWithoutVAT; }
       set { _PriceWithoutVAT = value; }
   }

   public virtual double PriceWithVAT
   {
       get { return _PriceWithVAT; }
       set { _PriceWithVAT = value; }
   }

   public Dynamicweb.eCommerce.International.Currency Currency
   {
       get { return _Currency; }
       set { _Currency = value; }
   }

   public Dynamicweb.eCommerce.Prices.PriceInfo Substract(Dynamicweb.eCommerce.Prices.IPriceInfo info)
   {
       if (Currency.Code != info.Currency.Code)
       {
           throw new Dynamicweb.eCommerce.Prices.PriceInfoCurrencyException();
       }
       Dynamicweb.eCommerce.Prices.PriceInfo resinfo = new Dynamicweb.eCommerce.Prices.PriceInfo();
       resinfo.PriceWithVAT = _PriceWithVAT - info.PriceWithVAT;
       resinfo.PriceWithoutVAT = _PriceWithoutVAT - info.PriceWithoutVAT;
       resinfo.VAT = _VAT - info.VAT;
       resinfo.VATPercent = (resinfo.VAT / resinfo.PriceWithoutVAT) * 100;
       resinfo.Currency = Currency;
       return resinfo;
   }
}
 </code>
 </example>
 <summary>
 PriceInfo interface.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.IPriceReferenceInfo">
 <summary>
 Represents the interface of the price reference.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.ISupportInformativePriceInfo">
 <example>
 <code description="Take over price calculation of a product." lang="CS">
using Dynamicweb.eCommerce.Common;
using Dynamicweb.eCommerce.International;
using Dynamicweb.eCommerce.Products;
using Dynamicweb.Frontend;

Namespace Prices
{
       public class NettoPriceProvider : PriceProvider, ISupportInformativePriceInfo
       {
              public PriceInfo FindInformativePriceInfo(Product Product, double Quantity, string VariantID, Currency Currency, string UnitID, Extranet User)
              {
                     if ((Product.ID.Equals("PROD2"))) {
                           Prices.PriceInfo info = new Prices.PriceInfo();
                           info.Currency = Context.Currency;
                           info.PriceWithoutVAT = 1;
                           info.PriceWithVAT = 1.25;
                           info.VAT = 0.25;
                           info.VATPercent = 25;
                           info.IsInformative = True

                           return info;
                     } else {
                           return null;
                     }
              }
       }
}
 </code>
 </example>
 <summary>
 To completely take over informative price calculation from eCommerce, create a class that implements this interface and overwrites FindInformativePriceInfo
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.ISupportInformativePriceInfo.FindInformativePriceInfo(Dynamicweb.Ecommerce.Products.Product,System.Double,System.String,Dynamicweb.Ecommerce.International.Currency,System.String,Dynamicweb.Security.UserManagement.User)">
 <summary>
 Finds the informative price info.
 </summary>
 <param name="product">The product.</param>
 <param name="quantity">The quantity.</param>
 <param name="variantId">The variant ID.</param>
 <param name="currency">The currency.</param>
 <param name="unitId">The unit ID.</param>
 <param name="user">The user.</param>
 <returns>A <see cref="T:Dynamicweb.Ecommerce.Prices.PriceInfo"></see> object.</returns>
 <remarks>See the interface description of <see cref="T:Dynamicweb.Ecommerce.Prices.ISupportInformativePriceInfo"></see> for example of implementation.</remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.ISupportPriceInfo">
 <example>
 <code description="Take over price calculation of a product." lang="CS">
using Dynamicweb.eCommerce.Common;
using Dynamicweb.eCommerce.International;
using Dynamicweb.eCommerce.Products;
using Dynamicweb.Frontend;

Namespace Prices
{
       public class NettoPriceProvider : PriceProvider, ISupportPriceInfo
       {
              public PriceInfo FindPriceInfo(Product Product, double Quantity, string VariantID, Currency Currency, string UnitID, Extranet User)
              {
                     if ((Product.ID.Equals("PROD2"))) {
                           Prices.PriceInfo info = new Prices.PriceInfo();
                           info.Currency = Context.Currency;
                           info.PriceWithoutVAT = 1;
                           info.PriceWithVAT = 1.25;
                           info.VAT = 0.25;
                           info.VATPercent = 25;

                           return info;
                     } else {
                           return null;
                     }
              }
       }
}
 </code>
 </example>
 <summary>
 To completely take over price calculation from eCommerce, create a class that implements this interface and overwrites FindPriceInfo
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.ISupportPriceInfo.FindPriceInfo(Dynamicweb.Ecommerce.Products.Product,System.Double,System.String,Dynamicweb.Ecommerce.International.Currency,System.String,Dynamicweb.Security.UserManagement.User)">
 <summary>
 Finds the price info.
 </summary>
 <param name="product">The product.</param>
 <param name="quantity">The quantity.</param>
 <param name="variantId">The variant ID.</param>
 <param name="currency">The currency.</param>
 <param name="unitId">The unit ID.</param>
 <param name="user">The user.</param>
 <returns>A <see cref="T:Dynamicweb.Ecommerce.Prices.PriceInfo"></see> object.</returns>
 <remarks>See the interface description of <see cref="T:Dynamicweb.Ecommerce.Prices.ISupportPriceInfo"></see> for example of implementation.</remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.IWithPrice">
 <example>
 <code title="C#" description="" lang="CS">
public class MyDiscountProvider : Dynamicweb.eCommerce.Orders.SalesDiscounts.SalesDiscountProvider
{
    private OrderLine CreateOrderLine(Order order)
    {
        Dynamicweb.eCommerce.Prices.PriceInfo priceInfo = ((Dynamicweb.eCommerce.Prices.IWithPrice)order.OrderLines).Price;

        ////Add a new order line
        OrderLine line = new OrderLine();
        line.Order = order;
        line.Quantity = 1;
        line.ProductName = this.DiscountName;
        line.SetUnitPrice(priceInfo);
        line.ParentLineID = null;
        line.DiscountId = DiscountId;

        if (IsProductDiscount)
            line.Type = Converter.ToString(Converter.ToInt32(OrderLineType.ProductDiscount));
        else
            line.Type = Converter.ToString(Converter.ToInt32(OrderLineType.Discount));

        return line;
    }
}
 </code>
 </example>
 <summary>
 Represents an interface with one property that gives information about price.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.MultiplePrice">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{ 
    private Dynamicweb.eCommerce.Products.Product product;
    private SortedList _objectList;

    private void Page_Load(System.Object sender, System.EventArgs e)
    {
        product = (Dynamicweb.eCommerce.Products.Product)Session["Ecom.Backend.Product"];
    }

    public SortedList objectList
    {
        get { return _objectList; }
        set { _objectList = value; }
    }

    public void addObjeckList(int level)
    {
        if (!string.IsNullOrEmpty(Converter.ToString(product.PriceMatrixQuantitySpecification)))
        {
            string multiSpecs = product.PriceMatrixQuantitySpecification.Replace(":", ";");
            Dynamicweb.eCommerce.Prices.MultiplePriceCollection multipleprices = new Dynamicweb.eCommerce.Prices.MultiplePriceCollection();
            string[] QuantitySpecArr = multiSpecs.Split(';');
            System.Collections.DictionaryEntry Item = default(System.Collections.DictionaryEntry);
            SortedList sortedList = new SortedList();

            foreach (string quantity in QuantitySpecArr)
            {
                if (Converter.ToDouble(quantity) > 0)
                {
                    sortedList.Add(quantity, quantity);
                }
            }

            foreach (DictionaryEntry Item_loopVariable in sortedList)
            {
                Item = Item_loopVariable;
                Dynamicweb.eCommerce.Prices.MultiplePrice multiplePrice = new Dynamicweb.eCommerce.Prices.MultiplePrice();
                multiplePrice.Quantity = Converter.ToDouble(Item.Key);
                multipleprices.Add(multiplePrice);
            }
            if (multipleprices.Count > 0)
            {
                objectList.Add(level, multipleprices);
            }
        }
    }
}
 </code>
 </example>
 <summary>
 Represents quantity of prices.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.MultiplePrice.Quantity">
 <summary>
 Gets or sets the quantity.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.MultiplePriceCollection">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Products.Product product;
    private SortedList _objectList;
 
    private void Page_Load(System.Object sender, System.EventArgs e)
    {
        product = (Dynamicweb.eCommerce.Products.Product)Session["Ecom.Backend.Product"];
    }

    public SortedList objectList
    {
        get { return _objectList; }
        set { _objectList = value; }
    }

    public void addObjeckList(int level)
    {
        if (!string.IsNullOrEmpty(Converter.ToString(product.PriceMatrixQuantitySpecification)))
        {
            string multiSpecs = product.PriceMatrixQuantitySpecification.Replace(":", ";");
            Dynamicweb.eCommerce.Prices.MultiplePriceCollection multipleprices = new Dynamicweb.eCommerce.Prices.MultiplePriceCollection();
            string[] QuantitySpecArr = multiSpecs.Split(';');
            System.Collections.DictionaryEntry Item = default(System.Collections.DictionaryEntry);
            SortedList sortedList = new SortedList();

            foreach (string quantity in QuantitySpecArr)
            {
                if (Converter.ToDouble(quantity) > 0)
                {
                    sortedList.Add(quantity, quantity);
                }
            }

            foreach (DictionaryEntry Item_loopVariable in sortedList)
            {
                Item = Item_loopVariable;
                Dynamicweb.eCommerce.Prices.MultiplePrice multiplePrice = new Dynamicweb.eCommerce.Prices.MultiplePrice();
                multiplePrice.Quantity = Converter.ToDouble(Item.Key);
                multipleprices.Add(multiplePrice);
            }
            if (multipleprices.Count > 0)
            {
                objectList.Add(level, multipleprices);
            }
        }
    }
}
 </code>
 </example>
 <summary>
 Represents a collection of the <see cref="T:Dynamicweb.Ecommerce.Prices.MultiplePrice"/>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.MultiplePriceCollection.Item(System.Int32)">
 <summary>
 Gets the element at the specified index.
 </summary>
 <returns>The element at the specified index.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.Price">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public Dynamicweb.eCommerce.Variants.VariantOptionCollection getVariantOptions(Dynamicweb.eCommerce.Prices.Price price)
   {
       string SQL = "SELECT EcomVariantsOptions.* FROM EcomVariantsOptions ";
       SQL += "INNER JOIN EcomVariantGroups ON EcomVariantGroups.VariantGroupID = EcomVariantsOptions.VariantOptionGroupID ";
       SQL += "WHERE EcomVariantsOptions.VariantOptionLanguageID = '" + price.LanguageID + "' ";
       SQL += "AND EcomVariantsOptions.VariantOptionID = '" + price.UnitID + "' ";
       SQL += "AND EcomVariantGroups.VariantGroupUnit = " + Database.SqlBool(true) + " ";
       SQL += "ORDER BY VariantOptionSortOrder, VariantOptionId";

       return GetVariantOptionCollection(SQL);
   }

   private Dynamicweb.eCommerce.Variants.VariantOptionCollection GetVariantOptionCollection(string sql)
   {
       Dynamicweb.eCommerce.Variants.VariantOptionCollection col = default(Dynamicweb.eCommerce.Variants.VariantOptionCollection);
       string CacheKey = "Variant.Option.Collection." + sql;

       if (HttpContext.Current.Items.Contains(CacheKey))
       {
           col = (Dynamicweb.eCommerce.Variants.VariantOptionCollection)HttpContext.Current.Items[CacheKey];
       }
       else
       {
           col = new Dynamicweb.eCommerce.Variants.VariantOptionCollection();
           col.Load(sql);
           HttpContext.Current.Items.Add(CacheKey, col);
       }
       return col;
   }
}
 </code>
 </example>
 <summary>
 Represents information about the price.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.CurrencyPrices">
 <summary>
 Gets or sets the currency prices.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.Units">
 <summary>
 Gets or sets the units.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.Currency">
 <summary>
 Gets the currency.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.Periods">
 <summary>
 Gets or sets the periods.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.VariantOptions">
 <summary>
 Gets or sets the variant options.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.Country">
 <summary>
 Gets the country.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.Shop">
 <summary>
 Gets the shop.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.User">
 <summary>
 Gets the user.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.UserGroup">
 <summary>
 Gets the user group.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.Id">
 <summary>
 Gets or sets the price id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.ProductId">
 <summary>
 Gets or sets the product id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.VariantId">
 <summary>
 Gets or sets the variant id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.LanguageId">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public Dynamicweb.eCommerce.Variants.VariantOptionCollection getVariantOptions(Dynamicweb.eCommerce.Prices.Price price)
   {
       string SQL = "SELECT EcomVariantsOptions.* FROM EcomVariantsOptions ";
       SQL += "INNER JOIN EcomVariantGroups ON EcomVariantGroups.VariantGroupID = EcomVariantsOptions.VariantOptionGroupID ";
       SQL += "WHERE EcomVariantsOptions.VariantOptionLanguageID = '" + price.LanguageID + "' ";
       SQL += "AND EcomVariantsOptions.VariantOptionID = '" + price.UnitID + "' ";
       SQL += "AND EcomVariantGroups.VariantGroupUnit = " + Database.SqlBool(true) + " ";
       SQL += "ORDER BY VariantOptionSortOrder, VariantOptionId";

       return GetVariantOptionCollection(SQL);
   }

   private Dynamicweb.eCommerce.Variants.VariantOptionCollection GetVariantOptionCollection(string sql)
   {
       Dynamicweb.eCommerce.Variants.VariantOptionCollection col = default(Dynamicweb.eCommerce.Variants.VariantOptionCollection);
       string CacheKey = "Variant.Option.Collection." + sql;

       if (HttpContext.Current.Items.Contains(CacheKey))
       {
           col = (Dynamicweb.eCommerce.Variants.VariantOptionCollection)HttpContext.Current.Items[CacheKey];
       }
       else
       {
           col = new Dynamicweb.eCommerce.Variants.VariantOptionCollection();
           col.Load(sql);
           HttpContext.Current.Items.Add(CacheKey, col);
       }
       return col;
   }
}
 </code>
 </example>
 <summary>
 Gets or sets the language id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.UnitId">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public Dynamicweb.eCommerce.Variants.VariantOptionCollection getVariantOptions(Dynamicweb.eCommerce.Prices.Price price)
   {
       string SQL = "SELECT EcomVariantsOptions.* FROM EcomVariantsOptions ";
       SQL += "INNER JOIN EcomVariantGroups ON EcomVariantGroups.VariantGroupID = EcomVariantsOptions.VariantOptionGroupID ";
       SQL += "WHERE EcomVariantsOptions.VariantOptionLanguageID = '" + price.LanguageID + "' ";
       SQL += "AND EcomVariantsOptions.VariantOptionID = '" + price.UnitID + "' ";
       SQL += "AND EcomVariantGroups.VariantGroupUnit = " + Database.SqlBool(true) + " ";
       SQL += "ORDER BY VariantOptionSortOrder, VariantOptionId";

       return GetVariantOptionCollection(SQL);
   }

   private Dynamicweb.eCommerce.Variants.VariantOptionCollection GetVariantOptionCollection(string sql)
   {
       Dynamicweb.eCommerce.Variants.VariantOptionCollection col = default(Dynamicweb.eCommerce.Variants.VariantOptionCollection);
       string CacheKey = "Variant.Option.Collection." + sql;

       if (HttpContext.Current.Items.Contains(CacheKey))
       {
           col = (Dynamicweb.eCommerce.Variants.VariantOptionCollection)HttpContext.Current.Items[CacheKey];
       }
       else
       {
           col = new Dynamicweb.eCommerce.Variants.VariantOptionCollection();
           col.Load(sql);
           HttpContext.Current.Items.Add(CacheKey, col);
       }
       return col;
   }
}
 </code>
 </example>
 <summary>
 Gets or sets the unit id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.CurrencyCode">
 <summary>
 Gets or sets the currency code.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.Quantity">
 <summary>
 Gets or sets the quantity.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.PeriodId">
 <summary>
 Gets or sets the period id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.Amount">
 <summary>
 Gets or sets the amount.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.AmountString">
 <summary>
 Gets or sets the amount string.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.CustomerGroupId">
 <summary>
 Gets or sets the customer group id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.Priority">
 <summary>
 Gets or sets the priority.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.CountryCode">
 <summary>
 Gets or sets the country id.
 </summary>
 <value>id</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.ShopId">
 <summary>
 Gets or sets the shop id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.ValidFrom">
 <summary>
 Gets or sets the start date.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.ValidTo">
 <summary>
 Gets or sets the end date.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.UserId">
 <summary>
 Gets or sets the user id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.UserGroupId">
 <summary>
 Gets or sets the user group id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.UserCustomerNumber">
 <summary>
 Gets or sets the user customer number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.IsInformative">
 <summary>
 Gets or sets the value indicating whether the price is informative.
 </summary>
 <value><c>true</c> if the price is informative; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Price.StockLocationId">
 <summary>
 Gets or sets the stock location id.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Prices.Price" /> class.
 </summary>
 <param name="id">DB field name is PriceID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Prices.Price" /> class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Prices.Price" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.Fill(System.Data.IDataReader)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Prices.Price GetPrice(string priceID)
    {
        Dynamicweb.eCommerce.Prices.Price price = null;
        string SQL = "SELECT * FROM EcomPrices WHERE PriceID = '" + priceID + "'";
        IDataReader objDataReader = Dynamicweb.Data.Database.CreateDataReader(SQL);

        if (objDataReader.Read())
        {
            price = new Dynamicweb.eCommerce.Prices.Price();
            price.Fill(objDataReader);
        }
        objDataReader.Close();
        objDataReader.Dispose();

        return price;
    }
}
 </code>
 </example>
 <summary>
 Fills the properties from the data reader.
 </summary>
 <param name="dataReader">The data reader with data for properties.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.Save(System.String,System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Price price;
   
   private void Page_Load(System.Object sender, System.EventArgs e)
   {
       price = (Price)Session["Ecom.Backend.Price"];
   }
 
   public Price DoSave()
   {
       Price p = new Price();
       p = price.Clone();
       p.Save(p.ID, p.ProductID, "");
       return p;
   }
}
 </code>
 </example>
 <summary>
 Saves the properties into DB.
 </summary>
 <param name="id">DB field name is PriceID.</param>
 <param name="productId">DB field name is PriceProductID.</param>
 <param name="currencyCode">DB field name is PriceCurrency.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.Delete">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    public void DoDelete()
    {
        Product prod = new Product();
        prod = (Product)Session["Ecom.Backend.Product"];

        Dynamicweb.eCommerce.Prices.Price prs = new Dynamicweb.eCommerce.Prices.Price();
        if (!string.IsNullOrEmpty(prs.ID))
        {
            prs.Delete();
        }
    }
}
 </code>
 </example>
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.Delete(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    public void DoDelete()
    {
        Product prod = new Product();
        prod = (Product)Session["Ecom.Backend.Product"];

        Dynamicweb.eCommerce.Prices.Price prs = new Dynamicweb.eCommerce.Prices.Price();
        if (!string.IsNullOrEmpty(prs.ID))
        {
            prs.Delete(prs.ID);
        }
    }
}
 </code>
 </example>
 <summary>
 Deletes the specified instance from DB.
 </summary>
 <param name="id">DB field name is PriceID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.Delete(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    public void DoDelete()
    {
        Product prod = new Product();
        prod = (Product)Session["Ecom.Backend.Product"];

        string priceID = HttpContext.Current.Request.QueryString["priceID"];
        string currID = HttpContext.Current.Request.QueryString["currID"];

        Dynamicweb.eCommerce.Prices.Price prs = new Dynamicweb.eCommerce.Prices.Price();
        if (string.IsNullOrEmpty(currID))
        {
            prs.Delete(priceID, prod.ID);
        }
        else
        {
            prs.Delete(priceID, prod.ID, currID);
        }
    }
}
 </code>
 </example>
 <summary>
 Deletes the specified instance from DB.
 </summary>
 <param name="priceId">DB field name is PriceID.</param>
 <param name="productId">DB field name is PriceProductID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.Delete(System.String,System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    public void DoDelete()
    {
        Product prod = new Product();
        prod = (Product)Session["Ecom.Backend.Product"];

        string priceID = HttpContext.Current.Request.QueryString["priceID"];
        string currID = HttpContext.Current.Request.QueryString["currID"];

        Dynamicweb.eCommerce.Prices.Price prs = new Dynamicweb.eCommerce.Prices.Price();
        if (string.IsNullOrEmpty(currID))
        {
            prs.Delete(priceID, prod.ID);
        }
        else
        {
            prs.Delete(priceID, prod.ID, currID);
        }
    }
}
 </code>
 </example>
 <summary>
 Deletes the specified instance from DB.
 </summary>
 <param name="priceId">DB field name is PriceID.</param>
 <param name="productId">DB field name is PriceProductID.</param>
 <param name="CurrencyId">DB field name is PriceCurrency.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.Delete(System.String,System.String,System.String,System.Double)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    public void DoDelete()
    {
        Product prod = new Product();
        prod = (Product)Session["Ecom.Backend.Product"];

        string priceID = HttpContext.Current.Request.QueryString["priceID"];
        string currID = HttpContext.Current.Request.QueryString["currID"];
        double quantity = Double.Parse(HttpContext.Current.Request.QueryString["quantity"]);

        Dynamicweb.eCommerce.Prices.Price prs = new Dynamicweb.eCommerce.Prices.Price();
        if (string.IsNullOrEmpty(currID))
        {
            prs.Delete(priceID, prod.ID);
        }
        else
        {
            prs.Delete(priceID, prod.ID, currID, quantity);
        }
    }
}
 </code>
 </example>
 <summary>
 Deletes the specified instance from DB.
 </summary>
 <param name="priceId">DB field name is PriceID.</param>
 <param name="productId">DB field name is PriceProductID.</param>
 <param name="currencyId">DB field name is CurrencyID.</param>
 <param name="quantity">DB field name is PriceQuantity.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.Delete(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    public void DoDelete()
    {
        Product prod = new Product();
        prod = (Product)Session["Ecom.Backend.Product"];

        Dynamicweb.eCommerce.Prices.Price prs = new Dynamicweb.eCommerce.Prices.Price();
        prs.Delete(Product.getActiveProducts());
    }
}
 </code>
 </example>
 <summary>
 Deletes the specified instances from DB.
 </summary>
 <param name="products">The products.</param>
 <returns>The SQL query.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.Delete(Dynamicweb.Ecommerce.Products.ProductCollection,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    public void DoDelete()
    {
        Product prod = new Product();
        prod = (Product)Session["Ecom.Backend.Product"];

        Dynamicweb.eCommerce.Prices.Price prs = new Dynamicweb.eCommerce.Prices.Price();
        prs.Delete(Product.getActiveProducts(), true);
    }
}
 </code>
 </example>
 <summary>
 Deletes the specified instances from DB.
 </summary>
 <param name="products">The products.</param>
 <param name="run">If set to <c>true</c> to delete.</param>
 <returns>The SQL query.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.Copy">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Price price;
   
   private void Page_Load(System.Object sender, System.EventArgs e)
   {
       price = (Price)Session["Ecom.Backend.Price"];
   }
 
   public Price DoSave()
   {
       Price p = new Price();
       p = price.Copy();
       return p;
   }
}
 </code>
 </example>
 <summary>
 Copies this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.Clone">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Price price;
   
   private void Page_Load(System.Object sender, System.EventArgs e)
   {
       price = (Price)Session["Ecom.Backend.Price"];
   }
 
   public Price DoSave()
   {
       Price p = new Price();
       p = price.Clone();
       p.Save(p.ID, p.ProductID, "");
       return p;
   }
}
 </code>
 </example>
 <summary>
 Clones this instance.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.GetPrices(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Products.Product product;

    private void Page_Load(System.Object sender, System.EventArgs e)
    {
        product = (Dynamicweb.eCommerce.Products.Product)Session["Ecom.Backend.Product"];
    }

    public void DoDelete()
    {
        foreach(Dynamicweb.eCommerce.Prices.Price price in Dynamicweb.eCommerce.Prices.Price.getPrices(product.ID))
        {
            price.Delete();
        }
    }
}
 </code>
 </example>
 <summary>
 Gets the prices.
 </summary>
 <param name="productId">DB field name is PriceProductID.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.GetPrices(System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Products.Product product;

    private void Page_Load(System.Object sender, System.EventArgs e)
    {
        product = (Dynamicweb.eCommerce.Products.Product)Session["Ecom.Backend.Product"];
    }

    public void DoDelete()
    {
        string currID = HttpContext.Current.Request.QueryString["currID"];
 
        foreach(Dynamicweb.eCommerce.Prices.Price price in Dynamicweb.eCommerce.Prices.Price.getPrices(product.ID, currID))
        {
            price.Delete();
        }
    }
}
 </code>
 </example>
 <summary>
 Gets the prices.
 </summary>
 <param name="productId">DB field name is PriceProductID.</param>
 <param name="currencyId">DB field name is PriceCurrency.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.GetPrices(System.String,System.String,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Products.Product product;

    private void Page_Load(System.Object sender, System.EventArgs e)
    {
        product = (Dynamicweb.eCommerce.Products.Product)Session["Ecom.Backend.Product"];
    }

    public void DoDelete()
    {
        string currID = HttpContext.Current.Request.QueryString["currID"];
        string priceID = HttpContext.Current.Request.QueryString["priceID"];
 
        foreach(Dynamicweb.eCommerce.Prices.Price price in Dynamicweb.eCommerce.Prices.Price.getPrices(product.ID, currID, priceID))
        {
            price.Delete();
        }
    }
}
 </code>
 </example>
 <summary>
 Gets the prices.
 </summary>
 <param name="productId">DB field name is PriceProductID.</param>
 <param name="currencyId">DB field name is PriceCurrency.</param>
 <param name="priceId">DB field name is PriceID.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.GetPrices(System.Boolean,System.String,System.Double,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Products.Product product;

    private void Page_Load(System.Object sender, System.EventArgs e)
    {
        product = (Dynamicweb.eCommerce.Products.Product)Session["Ecom.Backend.Product"];
    }

    public void DoDelete()
    { 
        foreach(Dynamicweb.eCommerce.Prices.Price price in Dynamicweb.eCommerce.Prices.Price.getPrices(false, product.ID, 0, ""))
        {
            price.Delete();
        }
    }
}
 </code>
 </example>
 <summary>
 Gets the prices.
 </summary>
 <param name="isDefault">DB field name is CurrencyIsDefault. If set to <c>true</c> the currency is default.</param>
 <param name="productId">DB field name is PriceProductID.</param>
 <param name="quantity">DB field name is PriceQuantity.</param>
 <param name="currencyCode">DB field name is CurrencyCode.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.LoadPricesOnProducts(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    public void CachePrices()
    {
        Dynamicweb.eCommerce.Products.ProductCollection col = Product.getActiveProducts();
        //Cache prices from all the products
        Dynamicweb.eCommerce.Prices.Price.LoadPricesOnProducts(col);
    }
}
 </code>
 </example>
 <summary>
 Loads the prices on products.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.DeletePrices(Dynamicweb.Ecommerce.Products.Product)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    public void DoDelete()
    { 
        Dynamicweb.eCommerce.Products.Product product = (Dynamicweb.eCommerce.Products.Product)Session["Ecom.Backend.Product"];
        Dynamicweb.eCommerce.Prices.Price.deletePrices(product);
    }
}
 </code>
 </example>
 <summary>
 Deletes the prices.
 </summary>
 <param name="product">DB field name is PriceProductID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.DeletePrices(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Prices.Price})">
 <summary>
 Deletes the prices.
 </summary>
 <param name="prices">A collection of the <see cref="T:Dynamicweb.Ecommerce.Prices.Price"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.SavePrices(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Prices.Price})">
 <summary>
 Saves the prices.
 </summary>
 <param name="prices">A collection of the <see cref="T:Dynamicweb.Ecommerce.Prices.Price"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.NumberOfDecimalPlaces(System.String)">
 <summary>
 Gets the number of decimal places.
 </summary>
 <param name="number">The number.</param>
 <returns>The number of decimal places.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.GetDoublePriceStatement(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Products.Product product;

    private void Page_Load(System.Object sender, System.EventArgs e)
    {
        product = (Dynamicweb.eCommerce.Products.Product)Session["Ecom.Backend.Product"];
    }

    private int UpdateDoublePrice(UpdateType updateType)
    {
         System.Text.StringBuilder SQL = new System.Text.StringBuilder();

         int updCnt = 0;
         string GetPrice = Dynamicweb.eCommerce.Prices.Price.GetDoublePriceStatement(product.ProductPriceString);

         if (!string.IsNullOrEmpty(GetPrice))
         {
             SQL.Append("UPDATE EcomProducts SET ProductPrice = " + GetPrice + " ");

             string whereStatement = null;

             switch (updateType)
             {
                 case Dynamicweb.eCommerce.Products.UpdateType.LanguageDependent:
                     whereStatement = string.Format("ProductID = '{0}' AND ProductLanguageID = '{1}'", product.ID, product.LanguageID);
                     break;
                 case Dynamicweb.eCommerce.Products.UpdateType.VariantDependent:
                     whereStatement = string.Format("ProductID = '{0}' AND ProductVariantID = '{1}'", product.ID, product.VariantID);
                     break;
                 case Dynamicweb.eCommerce.Products.UpdateType.NoDependencies:
                     whereStatement = string.Format("ProductID = '{0}'", product.ID);
                     break;
                 default:
                     whereStatement = string.Format("ProductID = '{0}' AND ProductLanguageID = '{1}' AND ProductVariantID = '{2}'", product.ID, product.LanguageID, product.VariantID);
                     break;
             }

             SQL.Append("WHERE " + whereStatement);

             if (Database.ExecuteNonQuery(SQL.ToString()) > 0)
             {
                 updCnt += 1;
             }
         }
      return updCnt;
   }
}
 </code>
 </example>
 <summary>
 Gets the double price statement.
 </summary>
 <param name="productPrice">The product price.</param>
 <returns>The SQL statement.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.GetDoublePriceFormatted(System.Double,Dynamicweb.Ecommerce.International.Currency,System.Boolean)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private string SQLGlobal(DateTime DateFrom, DateTime DateTo, string Currency, string Shop)
    {
        string SQL = "FROM EcomOrders ";
        SQL += "INNER JOIN EcomOrderStates ON EcomOrderStates.OrderStateID = EcomOrders.OrderStateID ";
        SQL += "WHERE EcomOrderStates.OrderStateDontUseInStatistics = " + Database.SqlBool(false) + " ";
        SQL += "AND EcomOrders.OrderComplete = " + Database.SqlBool(true) + " ";
        SQL += "AND EcomOrders.OrderDeleted = " + Database.SqlBool(false) + " ";
        SQL += "AND EcomOrders.OrderDate Between " + Database.SqlDate(DateFrom) + " AND " + Database.SqlDate(DateTo) + " ";
        if (Currency == Dynamicweb.eCommerce.Common.Application.DefaultCurrency.Code)
        {
            SQL += "AND (EcomOrders.OrderCurrencyCode IS NULL OR EcomOrders.OrderCurrencyCode = '' OR EcomOrders.OrderCurrencyCode = '" + Currency + "') ";
        }
        else
        {
            SQL += "AND EcomOrders.OrderCurrencyCode = '" + Currency + "' ";
        }
        if (!string.IsNullOrEmpty(Shop))
        {
            SQL += "AND EcomOrders.OrderShopID = '" + Shop + "' ";
        }

        return SQL;
    }

    public Hashtable Info(DateTime DateFrom, DateTime DateTo, string Currency, string Shop)
    {
        Hashtable Infos = new Hashtable();

        int orderCnt = Converter.ToInt32(Database.ExecuteScalar("SELECT count(*) " + SQLGlobal(DateFrom, DateTo, Currency, Shop)));
        long periodDays = Math.Abs(DateTime.Compare(DateFrom, DateTo));
        double totalProfit = Converter.ToDouble(Database.ExecuteScalar("SELECT SUM(EcomOrders.OrderPriceWithoutVAT) " + SQLGlobal(DateFrom, DateTo, Currency, Shop)));
        double averageOrderDay = Converter.ToDouble((orderCnt / periodDays));
        double averageProfitDay = Converter.ToDouble((totalProfit / periodDays));
        double highestOrder = Converter.ToDouble(Database.ExecuteScalar("SELECT MAX(EcomOrders.OrderPriceWithoutVAT) " + SQLGlobal(DateFrom, DateTo, Currency, Shop)));

        int highestOrderCntDay = 0;
        IDataReader dr1 = Dynamicweb.Data.Database.CreateDataReader("SELECT COUNT(EcomOrders.OrderID) as max " + SQLGlobal(DateFrom, DateTo, Currency, Shop) + " GROUP BY CONVERT(CHAR(11), EcomOrders.OrderDate, 102)");
        while (dr1.Read())
        {
            if (Converter.ToInt32(dr1["max"]) &gt; highestOrderCntDay)
            {
                highestOrderCntDay = Converter.ToInt32(dr1["max"]);
            }
        }
        dr1.Close();
        dr1.Dispose();

        double highestProfitDay = 0;
        IDataReader dr2 = Dynamicweb.Data.Database.CreateDataReader("SELECT SUM(EcomOrders.OrderPriceWithoutVAT) as sum " + SQLGlobal(DateFrom, DateTo, Currency, Shop) + " GROUP BY CONVERT(CHAR(11), EcomOrders.OrderDate, 102)");
        while (dr2.Read())
        {
            if (Converter.ToDouble(dr2["sum"]) &gt; highestProfitDay)
            {
                highestProfitDay = Converter.ToDouble(dr2["sum"]);
            }
        }
        dr2.Close();
        dr2.Dispose();

        Infos.Add(Dynamicweb.SystemTools.Translate.JsTranslate("Antal ordre i periode"), orderCnt);
        Infos.Add(Dynamicweb.SystemTools.Translate.JsTranslate("Antal dage i periode"), periodDays);
        Infos.Add(Dynamicweb.SystemTools.Translate.JsTranslate("Total omsætning"), Dynamicweb.eCommerce.Prices.Price.GetDoublePriceFormatted(totalProfit, Dynamicweb.eCommerce.Common.Application.DefaultCurrency, true));
        Infos.Add(Dynamicweb.SystemTools.Translate.JsTranslate("Gennemsnit ordre pr. dag"), averageOrderDay);
        Infos.Add(Dynamicweb.SystemTools.Translate.JsTranslate("Gennemsnit omsætning pr. dag"), Dynamicweb.eCommerce.Prices.Price.GetDoublePriceFormatted(averageProfitDay, Dynamicweb.eCommerce.Common.Application.DefaultCurrency, true));
        Infos.Add(Dynamicweb.SystemTools.Translate.JsTranslate("Største ordre i periode"), Dynamicweb.eCommerce.Prices.Price.GetDoublePriceFormatted(highestOrder, Dynamicweb.eCommerce.Common.Application.DefaultCurrency, true));

        Infos.Add(Dynamicweb.SystemTools.Translate.JsTranslate("Højeste antal ordre pr. dag"), highestOrderCntDay);
        Infos.Add(Dynamicweb.SystemTools.Translate.JsTranslate("Højeste omsætning pr. dag"), Dynamicweb.eCommerce.Prices.Price.GetDoublePriceFormatted(highestProfitDay, Dynamicweb.eCommerce.Common.Application.DefaultCurrency, true));

        return Infos;
    }
}
 </code>
 </example>
 <summary>
 Gets the double price formatted.
 </summary>
 <param name="price">The price.</param>
 <param name="currency">The currency.</param>
 <param name="showFormatted">If set to <c>true</c> show with formatted symbol.</param>
 <returns>The formatted price.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.GetDoublePriceInfo(System.Double,Dynamicweb.Ecommerce.International.Currency)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Products.Product product;

    private void Page_Load(System.Object sender, System.EventArgs e)
    {
        product = (Dynamicweb.eCommerce.Products.Product)Session["Ecom.Backend.Product"];
    }

    public Dynamicweb.eCommerce.Prices.PriceInfo GetCachedPrice(Dynamicweb.eCommerce.Discounts.Discount discount)
    {
        bool vatIncludedInDB = Dynamicweb.Ecommerce.Prices.PriceHelper.PricesInDatabaseIncludeVat;

        double productAmount = 0;
        if (vatIncludedInDB)
        {
            productAmount = product.Price.PriceWithVAT;
        }
        else
        {
            productAmount = product.Price.PriceWithoutVAT;
        }
        productAmount -= discount.get_Value(vatIncludedInDB, Discount.DiscountCalculationType.DiscountCalculationAmount, false);

        Dynamicweb.eCommerce.Prices.PriceInfo cachedPrice = Dynamicweb.eCommerce.Prices.Price.GetDoublePriceInfo(productAmount, Dynamicweb.eCommerce.Common.Context.Currency);
        return cachedPrice;
    }
}
 </code>
 </example>
 <summary>
 Gets the double price info.
 </summary>
 <param name="price">The price.</param>
 <param name="currency">The currency.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceInfo"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.GetFieldsList(System.Boolean)">
 <summary>
 For price list control and its settings only
 </summary>
 <returns>The fields list.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Price.GetDisplayedFieldsList">
 <summary>
 For control and it's settings only
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.PriceCalculated">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Prices.PriceInfo GetPriceInfo(double priceWithVAT, double priceWithoutVAT, double VATPercent)
    {
        Dynamicweb.eCommerce.Prices.PriceInfo info = new Dynamicweb.eCommerce.Prices.PriceInfo();
        info.Currency = Dynamicweb.eCommerce.Common.Context.Currency;

        Dynamicweb.eCommerce.Prices.PriceRaw rp = new Dynamicweb.eCommerce.Prices.PriceRaw();
        rp.Price = priceWithoutVAT;
        rp.Currency = Dynamicweb.eCommerce.Common.Context.Currency;

        Dynamicweb.eCommerce.Prices.PriceCalculated cp = new Dynamicweb.eCommerce.Prices.PriceCalculated();
        cp.PriceRaw = rp;

        cp.PriceWithoutVAT = priceWithoutVAT;
        cp.PriceWithVAT = priceWithVAT;
        cp.VATPercent = VATPercent;
        cp.VAT = priceWithVAT - priceWithoutVAT;

        return info.Add(cp);
    }
}
 </code>
 </example>
 <summary>
 Represents information about calculated price.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceCalculated.Product">
 <summary>
 Gets or sets the product.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceCalculated.PriceRaw">
 <summary>
 Gets or sets the <see cref="T:Dynamicweb.Ecommerce.Prices.PriceRaw"/>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceCalculated.VATPercent">
 <summary>
 Gets or sets the VAT percent.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceCalculated.IgnoreVat">
 <summary>
 Gets or sets a value indicating whether to bypass VAT calculations.
 </summary>
 <value><c>true</c> if VAT calculations should be bypassed; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceCalculated.RemoveVat">
 <summary>
 Gets or sets a value indicating whether to remove VAT from the current price. 
 </summary>        ''' 
 <value><c>true</c> if price calculation should remove VAT from the current price; otherwise, <c>false</c>.</value>
 <remarks>
 The VAT is only removed if prices in the database include VAT. 
 Otherwise, price calculation does not change with the value of this property.
 </remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceCalculated.IgnoreRounding">
 <summary>
 Gets or sets a value indicating whether to bypass calculations of a given <see cref="T:Dynamicweb.Ecommerce.Prices.Rounding" />.
 </summary>
 <value><c>true</c> if calculation should be bypassed; otherwise, <c>false</c>.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceCalculated.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Prices.PriceCalculated" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceCalculated.#ctor(Dynamicweb.Ecommerce.Prices.PriceRaw)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Prices.PriceCalculated" /> class.
 </summary>
 <param name="priceRaw">The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceRaw"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceCalculated.#ctor(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Prices.PriceCalculated" /> class.
 </summary>
 <param name="product">The product.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceCalculated.#ctor(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Prices.PriceRaw)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Prices.PriceCalculated" /> class.
 </summary>
 <param name="product">The product.</param>
 <param name="priceRaw">The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceRaw"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceCalculated.#ctor(System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Prices.PriceCalculated"/> class.
 </summary>
 <param name="isInformative">If set to <c>true</c> the price is informative.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceCalculated.#ctor(Dynamicweb.Ecommerce.Prices.PriceRaw,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Prices.PriceCalculated"/> class.
 </summary>
 <param name="priceRaw">The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceRaw"/>.</param>
 <param name="isInformative">If set to <c>true</c> the price is informative.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceCalculated.#ctor(Dynamicweb.Ecommerce.Products.Product,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Prices.PriceCalculated"/> class.
 </summary>
 <param name="product">The product.</param>
 <param name="isInformative">If set to <c>true</c> the price is informative.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceCalculated.#ctor(Dynamicweb.Ecommerce.Products.Product,Dynamicweb.Ecommerce.Prices.PriceRaw,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Prices.PriceCalculated"/> class.
 </summary>
 <param name="product">The product.</param>
 <param name="priceRaw">The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceRaw"/>.</param>
 <param name="isInformative">If set to <c>true</c> the price is informative.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceCalculated.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceCalculated.GetCountryVAT">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Products.Product product;

    private void Page_Load(System.Object sender, System.EventArgs e)
    {
        product = (Dynamicweb.eCommerce.Products.Product)Session["Ecom.Backend.Product"];
    }

    public OrderLine SetUnitPrice(OrderLine orderLine, double amount)
    {
        bool isPricesWithVat = Dynamicweb.Ecommerce.Prices.PriceHelper.PricesInDatabaseIncludeVat;

        double systemVat = 0.0;
        double discountPrice = 0.0;

        if (isPricesWithVat)
        {
            discountPrice = product.Price.PriceWithVAT / 100 * amount;
        }
        else
        {
            discountPrice = product.Price.PriceWithoutVAT / 100 * amount;
        }

        if (double.TryParse(Dynamicweb.Configuration.SystemConfiguration.Instance.GetValue("/Globalsettings/Ecom/Price/PricesInDbVAT"), out systemVat))
        {
            discountPrice *= 1 + (systemVat / 100.0);
        }

        //Remove country VAT
        discountPrice /= 1 + (new Dynamicweb.eCommerce.Prices.PriceCalculated().GetCountryVAT() / 100.0);
        //Set unit price
        orderLine.SetUnitPrice(discountPrice);
        return orderLine;
    }
}
 </code>
 </example>
 <summary>
 Gets the country VAT.
 </summary>
 <returns>The VAT.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.PriceCollection">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Prices.PriceCollection CheckUnit(Dynamicweb.eCommerce.Prices.PriceCollection priceCollection, string UnitID)
    {
        Dynamicweb.eCommerce.Prices.PriceCollection ReturnCollection = new Dynamicweb.eCommerce.Prices.PriceCollection();
        foreach (Dynamicweb.eCommerce.Prices.Price price in priceCollection)
        {
            if (price.UnitID == UnitID)
            {
                ReturnCollection.Add(price);
            }
        }
        return ReturnCollection;
    }
}
 </code>
 </example>
 <summary>
 Represents a collection of the <see cref="T:Dynamicweb.Ecommerce.Prices.Price"/>.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceCollection.Item(System.Int32)">
 <summary>
 Gets or sets the element at the specified index.
 </summary>
 <returns>The element at the specified index.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceCollection.IndexOf(System.Double,System.String)">
 <summary>
 Locates the Price than has matching Quantity and CurrencyCode and return the collection index of the matching Price object.
 </summary>
 <param name="quantity">The quantity.</param>
 <param name="currencyCode">The currency code.</param>
 <returns>Returns index of matching Quantity and CurrencyCode, if not found the function return -1</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceCollection.Load(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private Dynamicweb.eCommerce.Prices.PriceCollection GetPriceCollection(string sql)
   {
       Dynamicweb.eCommerce.Prices.PriceCollection col = default(Dynamicweb.eCommerce.Prices.PriceCollection);
       string CacheKey = "Price.PriceCollection." + sql;

       if (HttpContext.Current.Items.Contains(CacheKey))
       {
           col = (Dynamicweb.eCommerce.Prices.PriceCollection)HttpContext.Current.Items[CacheKey];
       }
       else
       {
           col = new Dynamicweb.eCommerce.Prices.PriceCollection();
           col.Load(sql);
           HttpContext.Current.Items.Add(CacheKey, col);
       }
       return col;
   }
}
 </code>
 </example>
 <summary>
 Loads the specified prices.
 </summary>
 <param name="sql">The SQL query.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.PriceHelper">
 <summary>
 PriceHelper class. This class cannot be inherited.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceHelper.PricesInDatabaseIncludeVat">
 <summary>
 Gets a value indicating whether prices in the database include VAT.
 </summary>
 <value><c>true</c> if prices in the database include VAT; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceHelper.SystemVat">
 <summary>
 Gets the system VAT.
 </summary>
 <remarks>This is the VAT percent on prices in database.</remarks>
 <value>System VAT.</value>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.PriceInfo">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private double _VAT;
   private double _VATPercent = 0.0;
   private double _PriceWithVAT = 0.0;
   private double Me.PriceWithoutVAT = 0.0;
   private Dynamicweb.eCommerce.International.Currency _Currency = Dynamicweb.eCommerce.Common.Context.Currency;

   public double VAT
   {
       get { return _VAT; }
       set { _VAT = value; }
   }

   public double PriceWithoutVAT
   {
       get { return Me.PriceWithoutVAT; }
       set { Me.PriceWithoutVAT = value; }
   }

   public double PriceWithVAT
   {
       get { return _PriceWithVAT; }
       set { _PriceWithVAT = value; }
   }

   public Dynamicweb.eCommerce.International.Currency Currency
   {
       get { return _Currency; }
       set { _Currency = value; }
   }


   public Dynamicweb.eCommerce.Prices.PriceInfo Substract(Dynamicweb.eCommerce.Prices.IPriceInfo info)
   {
       if (Currency.Code != info.Currency.Code)
       {
           throw new Dynamicweb.eCommerce.Prices.PriceInfoCurrencyException();
       }
       Dynamicweb.eCommerce.Prices.PriceInfo resinfo = new Dynamicweb.eCommerce.Prices.PriceInfo();
       resinfo.PriceWithVAT = _PriceWithVAT - info.PriceWithVAT;
       resinfo.PriceWithoutVAT = Me.PriceWithoutVAT - info.PriceWithoutVAT;
       resinfo.VAT = _VAT - info.VAT;
       resinfo.VATPercent = (resinfo.VAT / resinfo.PriceWithoutVAT) * 100;
       resinfo.Currency = Currency;
       return resinfo;
   }
}
 </code>
 </example>
 <summary>
 Gives to work with qualified prices.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.ReverseChargeForVat">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Prices.PriceInfo" /> has reverse charge for VAT.
 </summary>
 <value><c>true</c> if the price has reverse charge for VAT; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.Currency">
 <summary>
 Gets or sets the currency.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.Price">
 <summary>
 Gets the price.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.PriceWithVAT">
 <summary>
 Gets or sets the price with VAT.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.PriceWithoutVAT">
 <summary>
 Gets or sets the price without VAT.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.VAT">
 <summary>
 Gets or sets the VAT.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.VATPercent">
 <summary>
 Gets or sets the VAT percent.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.VATPercentFormatted">
 <summary>
 Gets the VAT percent as string with percent symbol. 
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.VATFormatted">
 <summary>
 Gets the formatted VAT
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.VATFormattedNoSymbol">
 <summary>
 Gets the formatted VAT without symbol.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.PriceFormatted">
 <summary>
 Gets the formatted price.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.PriceFormattedNoSymbol">
 <summary>
 Gets the formatted price without symbol.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.PriceWithVATFormatted">
 <summary>
 Gets the price with formatted VAT.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.PriceWithVATFormattedNoSymbol">
 <summary>
 Gets the price with formatted VAT without symbol.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.PriceWithoutVATFormatted">
 <summary>
 Gets the price without VAT formatted.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.PriceWithoutVATFormattedNoSymbol">
 <summary>
 Gets the price without VAT formatted no symbol.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.PricePIP">
 <summary>
 Minimum fluctuation or smallest increment of price movement.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.PriceReference">
 <summary>
 Gets or sets the price reference.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.IsInformative">
 <summary>
 Gets or sets whether the price is informative.
 </summary>
 <value><c>True</c> if the price is informative; otherwise <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceInfo.PriceSource">
 <summary>
 Gets or sets a value indicating what price provider generate price.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceInfo.Add(Dynamicweb.Ecommerce.Prices.IWithPrice)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public Dynamicweb.eCommerce.Prices.PriceInfo GetPrices(Dynamicweb.eCommerce.Orders.Order order)
   {
       Dynamicweb.eCommerce.Prices.PriceInfo AccPrice = new Dynamicweb.eCommerce.Prices.PriceInfo();
       foreach (OrderLine line in OrderLine.getOrderLines(order)) {
	           AccPrice = AccPrice.Add(line);
       }
       return AccPrice;
   }
}
 </code>
 </example>
 <summary>
 Adds the specified priceholder.
 </summary>
 <param name="priceHolder">The priceholder.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceInfo"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceInfo.Add(Dynamicweb.Ecommerce.Prices.IPriceInfo)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Prices.PriceInfo GetPriceInfo(double priceWithVAT, double priceWithoutVAT, double VATPercent)
    {
        Dynamicweb.eCommerce.Prices.PriceInfo info = new Dynamicweb.eCommerce.Prices.PriceInfo();
        info.Currency = Dynamicweb.eCommerce.Common.Context.Currency;

        Dynamicweb.eCommerce.Prices.PriceRaw rp = new Dynamicweb.eCommerce.Prices.PriceRaw();
        rp.Price = priceWithoutVAT;
        rp.Currency = Dynamicweb.eCommerce.Common.Context.Currency;

        Dynamicweb.eCommerce.Prices.PriceCalculated cp = new Dynamicweb.eCommerce.Prices.PriceCalculated();
        cp.PriceRaw = rp;

        cp.PriceWithoutVAT = priceWithoutVAT;
        cp.PriceWithVAT = priceWithVAT;
        cp.VATPercent = VATPercent;
        cp.VAT = priceWithVAT - priceWithoutVAT;

        return info.Add(cp);
    }
}
 </code>
 </example>
 <summary>
 Adds the specified price information.
 </summary>
 <param name="info">The price information.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceInfo"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceInfo.Add(Dynamicweb.Ecommerce.Prices.IPriceReferenceInfo)">
 <summary>
 Adds the specified price information from IPriceReferenceInfo.
 </summary>
 <param name="info">The price reference information.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceInfo"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceInfo.Substract(Dynamicweb.Ecommerce.Prices.IWithPrice)">
 <example>
 <code title="C#" description="" lang="CS">
    class MyPage : System.Web.UI.Page
    {
        private void RenderOrderLine(Dynamicweb.eCommerce.Orders.OrderLine orderLine, Dynamicweb.Rendering.Template template)
        {
            Dynamicweb.eCommerce.International.Currency temporaryContextCurrency = Dynamicweb.eCommerce.Common.Context.Currency;
            if (orderLine.Price.Currency != null)
            {
                Dynamicweb.eCommerce.Common.Context.Currency = orderLine.Price.Currency;
            }
            Dynamicweb.eCommerce.Prices.IWithPrice totalDiscountPriceInfo = (Dynamicweb.eCommerce.Prices.IWithPrice)orderLine.Product.Discounts.TotalDiscount.Multiply(orderLine.Quantity);
            totalDiscountPriceInfo.Price.Currency = Dynamicweb.eCommerce.Common.Context.Currency;
            Dynamicweb.eCommerce.Prices.PriceInfo netPrice = orderLine.Price.Substract(totalDiscountPriceInfo);
            RenderPriceInfo(netPrice, template, "Ecom:Order:OrderLine.TotalPriceWithProductDiscounts");
            Dynamicweb.eCommerce.Common.Context.Currency = temporaryContextCurrency;
        }

        public static void RenderPriceInfo(Dynamicweb.eCommerce.Prices.IPriceInfo price, Dynamicweb.Rendering.Template template, string tagName)
        {
            if (template.HtmlHasPartialTag(tagName))
            {
                if (template.TagExists(tagName + ""))
                {
                    template.SetTag(tagName + "", price.PriceFormatted);
                }
                if (template.TagExists(tagName + ".Price"))
                {
                    template.SetTag(tagName + ".Price", price.PriceFormattedNoSymbol);
                }
                if (template.TagExists(tagName + ".PricePIP"))
                {
                    template.SetTag(tagName + ".PricePIP", price.PricePIP);
                }
                if (template.TagExists(tagName + ".PriceFormatted"))
                {
                    template.SetTag(tagName + ".PriceFormatted", price.PriceFormatted);
                }
                if (template.TagExists(tagName + ".PriceWithVAT"))
                {
                    template.SetTag(tagName + ".PriceWithVAT", price.PriceWithVATFormattedNoSymbol);
                }
                if (template.TagExists(tagName + ".PriceWithVATFormatted"))
                {
                    template.SetTag(tagName + ".PriceWithVATFormatted", price.PriceWithVATFormatted);
                }
                if (template.TagExists(tagName + ".PriceWithoutVAT"))
                {
                    template.SetTag(tagName + ".PriceWithoutVAT", price.PriceWithoutVATFormattedNoSymbol);
                }
                if (template.TagExists(tagName + ".PriceWithoutVATFormatted"))
                {
                    template.SetTag(tagName + ".PriceWithoutVATFormatted", price.PriceWithoutVATFormatted);
                }
                if (template.TagExists(tagName + ".VAT"))
                {
                    template.SetTag(tagName + ".VAT", price.VATFormattedNoSymbol);
                }
                if (template.TagExists(tagName + ".VATFormatted"))
                {
                    template.SetTag(tagName + ".VATFormatted", price.VATFormatted);
                }
                if (template.TagExists(tagName + ".VATPercent"))
                {
                    template.SetTag(tagName + ".VATPercent", price.VATPercent);
                }
                if (template.TagExists(tagName + ".VATPercentFormatted"))
                {
                    template.SetTag(tagName + ".VATPercentFormatted", price.VATPercentFormatted);
                }
                bool isZero = price.Price == 0;
                template.SetTag(string.Format("{0}.IsZero", tagName), If(ref isZero, "true", ""));
            }
        }
    }
 </code>
 </example>
 <summary>
 Substracts the specified priceholder.
 </summary>
 <param name="priceHolder">The priceholder.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceInfo"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceInfo.Substract(Dynamicweb.Ecommerce.Prices.IPriceInfo)">
 <example>
 <code title="C#" description="" lang="CS">
    class MyPage : System.Web.UI.Page
    {
        private void RenderOrderLine(Dynamicweb.eCommerce.Orders.OrderLine orderLine, Dynamicweb.Rendering.Template template)
        {
            Dynamicweb.eCommerce.International.Currency temporaryContextCurrency = Dynamicweb.eCommerce.Common.Context.Currency;
            if (orderLine.Price.Currency != null)
            {
                Dynamicweb.eCommerce.Common.Context.Currency = orderLine.Price.Currency;
            }
            Dynamicweb.eCommerce.Prices.PriceInfo totalDiscountPriceInfo = orderLine.Product.Discounts.TotalDiscount.Multiply(orderLine.Quantity);
            totalDiscountPriceInfo.Currency = Dynamicweb.eCommerce.Common.Context.Currency;
            Dynamicweb.eCommerce.Prices.PriceInfo netPrice = orderLine.Price.Substract(totalDiscountPriceInfo);
            RenderPriceInfo(netPrice, template, "Ecom:Order:OrderLine.TotalPriceWithProductDiscounts");
            Dynamicweb.eCommerce.Common.Context.Currency = temporaryContextCurrency;
        }

        public static void RenderPriceInfo(Dynamicweb.eCommerce.Prices.IPriceInfo price, Dynamicweb.Rendering.Template template, string tagName)
        {
            if (template.HtmlHasPartialTag(tagName))
            {
                if (template.TagExists(tagName + ""))
                {
                    template.SetTag(tagName + "", price.PriceFormatted);
                }
                if (template.TagExists(tagName + ".Price"))
                {
                    template.SetTag(tagName + ".Price", price.PriceFormattedNoSymbol);
                }
                if (template.TagExists(tagName + ".PricePIP"))
                {
                    template.SetTag(tagName + ".PricePIP", price.PricePIP);
                }
                if (template.TagExists(tagName + ".PriceFormatted"))
                {
                    template.SetTag(tagName + ".PriceFormatted", price.PriceFormatted);
                }
                if (template.TagExists(tagName + ".PriceWithVAT"))
                {
                    template.SetTag(tagName + ".PriceWithVAT", price.PriceWithVATFormattedNoSymbol);
                }
                if (template.TagExists(tagName + ".PriceWithVATFormatted"))
                {
                    template.SetTag(tagName + ".PriceWithVATFormatted", price.PriceWithVATFormatted);
                }
                if (template.TagExists(tagName + ".PriceWithoutVAT"))
                {
                    template.SetTag(tagName + ".PriceWithoutVAT", price.PriceWithoutVATFormattedNoSymbol);
                }
                if (template.TagExists(tagName + ".PriceWithoutVATFormatted"))
                {
                    template.SetTag(tagName + ".PriceWithoutVATFormatted", price.PriceWithoutVATFormatted);
                }
                if (template.TagExists(tagName + ".VAT"))
                {
                    template.SetTag(tagName + ".VAT", price.VATFormattedNoSymbol);
                }
                if (template.TagExists(tagName + ".VATFormatted"))
                {
                    template.SetTag(tagName + ".VATFormatted", price.VATFormatted);
                }
                if (template.TagExists(tagName + ".VATPercent"))
                {
                    template.SetTag(tagName + ".VATPercent", price.VATPercent);
                }
                if (template.TagExists(tagName + ".VATPercentFormatted"))
                {
                    template.SetTag(tagName + ".VATPercentFormatted", price.VATPercentFormatted);
                }
                bool isZero = price.Price == 0;
                template.SetTag(string.Format("{0}.IsZero", tagName), If(ref isZero, "true", ""));
            }
        }
    }
 </code>
 </example>
 <summary>
 Substracts the specified info.
 </summary>
 <param name="info">The price info.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceInfo"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceInfo.Substract(Dynamicweb.Ecommerce.Prices.IPriceReferenceInfo)">
 <summary>
 Substracts the specified info from IPriceReferenceInfo.
 </summary>
 <param name="info">The price reference info.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceInfo"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceInfo.Multiply(System.Double)">
 <example>
 <code title="C#" description="" lang="CS">
    class MyPage : System.Web.UI.Page
    {
        private void RenderOrderLine(Dynamicweb.eCommerce.Orders.OrderLine orderLine, Dynamicweb.Rendering.Template template)
        {
            Dynamicweb.eCommerce.International.Currency temporaryContextCurrency = Dynamicweb.eCommerce.Common.Context.Currency;
            if (orderLine.Price.Currency != null)
            {
                Dynamicweb.eCommerce.Common.Context.Currency = orderLine.Price.Currency;
            }
            Dynamicweb.eCommerce.Prices.PriceInfo totalDiscountPriceInfo = orderLine.Product.Discounts.TotalDiscount.Multiply(orderLine.Quantity);
            totalDiscountPriceInfo.Currency = Dynamicweb.eCommerce.Common.Context.Currency;
            Dynamicweb.eCommerce.Prices.PriceInfo netPrice = orderLine.Price.Substract(totalDiscountPriceInfo);
            RenderPriceInfo(netPrice, template, "Ecom:Order:OrderLine.TotalPriceWithProductDiscounts");
            Dynamicweb.eCommerce.Common.Context.Currency = temporaryContextCurrency;
        }

        public static void RenderPriceInfo(Dynamicweb.eCommerce.Prices.IPriceInfo price, Dynamicweb.Rendering.Template template, string tagName)
        {
            if (template.HtmlHasPartialTag(tagName))
            {
                if (template.TagExists(tagName + ""))
                {
                    template.SetTag(tagName + "", price.PriceFormatted);
                }
                if (template.TagExists(tagName + ".Price"))
                {
                    template.SetTag(tagName + ".Price", price.PriceFormattedNoSymbol);
                }
                if (template.TagExists(tagName + ".PricePIP"))
                {
                    template.SetTag(tagName + ".PricePIP", price.PricePIP);
                }
                if (template.TagExists(tagName + ".PriceFormatted"))
                {
                    template.SetTag(tagName + ".PriceFormatted", price.PriceFormatted);
                }
                if (template.TagExists(tagName + ".PriceWithVAT"))
                {
                    template.SetTag(tagName + ".PriceWithVAT", price.PriceWithVATFormattedNoSymbol);
                }
                if (template.TagExists(tagName + ".PriceWithVATFormatted"))
                {
                    template.SetTag(tagName + ".PriceWithVATFormatted", price.PriceWithVATFormatted);
                }
                if (template.TagExists(tagName + ".PriceWithoutVAT"))
                {
                    template.SetTag(tagName + ".PriceWithoutVAT", price.PriceWithoutVATFormattedNoSymbol);
                }
                if (template.TagExists(tagName + ".PriceWithoutVATFormatted"))
                {
                    template.SetTag(tagName + ".PriceWithoutVATFormatted", price.PriceWithoutVATFormatted);
                }
                if (template.TagExists(tagName + ".VAT"))
                {
                    template.SetTag(tagName + ".VAT", price.VATFormattedNoSymbol);
                }
                if (template.TagExists(tagName + ".VATFormatted"))
                {
                    template.SetTag(tagName + ".VATFormatted", price.VATFormatted);
                }
                if (template.TagExists(tagName + ".VATPercent"))
                {
                    template.SetTag(tagName + ".VATPercent", price.VATPercent);
                }
                if (template.TagExists(tagName + ".VATPercentFormatted"))
                {
                    template.SetTag(tagName + ".VATPercentFormatted", price.VATPercentFormatted);
                }
                bool isZero = price.Price == 0;
                template.SetTag(string.Format("{0}.IsZero", tagName), If(ref isZero, "true", ""));
            }
        }
    }
 </code>
 </example>
 <summary>
 Multiplies the specified factor.
 </summary>
 <param name="factor">The factor.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceInfo"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceInfo.Divide(System.Double)">
 <example>
 <code title="C#" description="" lang="CS">
    class MyPage : System.Web.UI.Page
    {
        private void RenderOrderLine(Dynamicweb.eCommerce.Orders.OrderLine orderLine, Dynamicweb.Rendering.Template template)
        {
            Dynamicweb.eCommerce.International.Currency temporaryContextCurrency = Dynamicweb.eCommerce.Common.Context.Currency;
            if (orderLine.Price.Currency != null)
            {
                Dynamicweb.eCommerce.Common.Context.Currency = orderLine.Price.Currency;
            }
            Dynamicweb.eCommerce.Prices.PriceInfo totalDiscountPriceInfo = orderLine.Product.Discounts.TotalDiscount.Divide(orderLine.Quantity);
            totalDiscountPriceInfo.Currency = Dynamicweb.eCommerce.Common.Context.Currency;
            Dynamicweb.eCommerce.Prices.PriceInfo netPrice = orderLine.Price.Substract(totalDiscountPriceInfo);
            RenderPriceInfo(netPrice, template, "Ecom:Order:OrderLine.TotalPriceWithProductDiscounts");
            Dynamicweb.eCommerce.Common.Context.Currency = temporaryContextCurrency;
        }

        public static void RenderPriceInfo(Dynamicweb.eCommerce.Prices.IPriceInfo price, Dynamicweb.Rendering.Template template, string tagName)
        {
            if (template.HtmlHasPartialTag(tagName))
            {
                if (template.TagExists(tagName + ""))
                {
                    template.SetTag(tagName + "", price.PriceFormatted);
                }
                if (template.TagExists(tagName + ".Price"))
                {
                    template.SetTag(tagName + ".Price", price.PriceFormattedNoSymbol);
                }
                if (template.TagExists(tagName + ".PricePIP"))
                {
                    template.SetTag(tagName + ".PricePIP", price.PricePIP);
                }
                if (template.TagExists(tagName + ".PriceFormatted"))
                {
                    template.SetTag(tagName + ".PriceFormatted", price.PriceFormatted);
                }
                if (template.TagExists(tagName + ".PriceWithVAT"))
                {
                    template.SetTag(tagName + ".PriceWithVAT", price.PriceWithVATFormattedNoSymbol);
                }
                if (template.TagExists(tagName + ".PriceWithVATFormatted"))
                {
                    template.SetTag(tagName + ".PriceWithVATFormatted", price.PriceWithVATFormatted);
                }
                if (template.TagExists(tagName + ".PriceWithoutVAT"))
                {
                    template.SetTag(tagName + ".PriceWithoutVAT", price.PriceWithoutVATFormattedNoSymbol);
                }
                if (template.TagExists(tagName + ".PriceWithoutVATFormatted"))
                {
                    template.SetTag(tagName + ".PriceWithoutVATFormatted", price.PriceWithoutVATFormatted);
                }
                if (template.TagExists(tagName + ".VAT"))
                {
                    template.SetTag(tagName + ".VAT", price.VATFormattedNoSymbol);
                }
                if (template.TagExists(tagName + ".VATFormatted"))
                {
                    template.SetTag(tagName + ".VATFormatted", price.VATFormatted);
                }
                if (template.TagExists(tagName + ".VATPercent"))
                {
                    template.SetTag(tagName + ".VATPercent", price.VATPercent);
                }
                if (template.TagExists(tagName + ".VATPercentFormatted"))
                {
                    template.SetTag(tagName + ".VATPercentFormatted", price.VATPercentFormatted);
                }
                bool isZero = price.Price == 0;
                template.SetTag(string.Format("{0}.IsZero", tagName), If(ref isZero, "true", ""));
            }
        }
    }
 </code>
 </example>
 <summary>
 Divides the specified factor.
 </summary>
 <param name="factor">The factor.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceInfo"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceInfo.HasSamePrice(Dynamicweb.Ecommerce.Prices.PriceInfo)">
 <summary>
 Determines that the prices are same.
 </summary>
 <param name="priceInfo">The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceInfo"/>.</param>
 <returns><c>true</c> if prices are same, otherwise - <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceInfo.ToString">
 <summary>
 Returns a <see cref="T:System.String" /> that represents this instance.
 </summary>
 <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceInfo.ToPrice(Dynamicweb.Ecommerce.International.Currency)">
 <summary>
 Convert current price to price with new currency.
 </summary>
 <param name="toCurrency">New currency.</param>
 <returns>Returns new PriceInfo class if succefull, otherwise Nothing.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceInfo.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Prices.PriceInfo" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceInfo.ConvertToPIP(System.Double)">
 <summary>
 Gets the PIP.
 </summary>
 <param name="amount">The amount.</param>
 <returns>The PIP.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.PriceInfoCurrencyException">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   private double _VAT;
   private double _VATPercent = 0.0;
   private double _PriceWithVAT = 0.0;
   private double _PriceWithoutVAT = 0.0;
   private Dynamicweb.eCommerce.International.Currency _Currency = Dynamicweb.eCommerce.Common.Context.Currency;

   public virtual double VAT
   {
       get { return _VAT; }
       set { _VAT = value; }
   }

   public virtual double PriceWithoutVAT
   {
       get { return _PriceWithoutVAT; }
       set { _PriceWithoutVAT = value; }
   }

   public virtual double PriceWithVAT
   {
       get { return _PriceWithVAT; }
       set { _PriceWithVAT = value; }
   }

   public Dynamicweb.eCommerce.International.Currency Currency
   {
       get { return _Currency; }
       set { _Currency = value; }
   }


   public Dynamicweb.eCommerce.Prices.PriceInfo Substract(Dynamicweb.eCommerce.Prices.IPriceInfo info)
   {
       if (Currency.Code != info.Currency.Code)
       {
           throw new Dynamicweb.eCommerce.Prices.PriceInfoCurrencyException();
       }
       Dynamicweb.eCommerce.Prices.PriceInfo resinfo = new Dynamicweb.eCommerce.Prices.PriceInfo();
       resinfo.PriceWithVAT = _PriceWithVAT - info.PriceWithVAT;
       resinfo.PriceWithoutVAT = _PriceWithoutVAT - info.PriceWithoutVAT;
       resinfo.VAT = _VAT - info.VAT;
       resinfo.VATPercent = (resinfo.VAT / resinfo.PriceWithoutVAT) * 100;
       resinfo.Currency = Currency;
       return resinfo;
   }
}
 </code>
 </example>
 <summary>
 Represents a currency exeption.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceInfoCurrencyException.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Prices.PriceInfoCurrencyException" /> class.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.PriceManager">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Products.Product product;

    private void Page_Load(System.Object sender, System.EventArgs e)
    {
        product = (Dynamicweb.eCommerce.Products.Product)Session["Ecom.Backend.Product"];
    }

    private Dynamicweb.eCommerce.Prices.PriceInfo GetPrice(ProductItemCollection items)
    {
        Dynamicweb.eCommerce.Prices.PriceInfo priceInfo = new Dynamicweb.eCommerce.Prices.PriceInfo();

        if (product.Type == ProductType.Stock &amp; product.PriceType == ProductPriceType.Calculated)
        {
            product.PriceType = ProductPriceType.FixedPrice;
        }

        if (product.Type == ProductType.Service &amp; product.PriceType == ProductPriceType.Calculated)
        {
            product.PriceType = ProductPriceType.FixedPrice;
        }

        if (product.PriceType == ProductPriceType.Calculated | product.PriceType == ProductPriceType.CalculatedWithBase)
        {
            foreach (ProductItem Item in items)
            {
                object priceObj = Dynamicweb.eCommerce.Prices.PriceManager.FindPrice(Item.Products.getProductById(Item.DefaultProductID), Item.Quantity);

                if (priceObj != null)
                {
                    double quantity = 1.0;
                    if (Item.Quantity > 0)
                    {
                        quantity = Item.Quantity;
                    }

                    Dynamicweb.eCommerce.Prices.PriceInfo subPrice = null;

                    if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceInfo)
                    {
                        subPrice = (Dynamicweb.eCommerce.Prices.PriceInfo)priceObj;
                    }
                    else if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceRaw)
                    {
                        Dynamicweb.eCommerce.Prices.PriceRaw rawPrice = (Dynamicweb.eCommerce.Prices.PriceRaw)priceObj;
                        subPrice = new Dynamicweb.eCommerce.Prices.PriceCalculated(Item.Products.getProductById(Item.DefaultProductID), rawPrice);
                    }
                    subPrice = subPrice.Multiply(quantity);
                    priceInfo = priceInfo.Add(subPrice);
                }
            }

            if (product.PriceType == ProductPriceType.CalculatedWithBase)
            {
                priceInfo = priceInfo.Add(new Dynamicweb.eCommerce.Prices.PriceCalculated(product));
            }
        }
        else
        {
            priceInfo = new Dynamicweb.eCommerce.Prices.PriceCalculated(product);
        }

        return priceInfo;
    }
}
 </code>
 </example>
 <summary>
 Represents a price manager. Provides prepares and finds prices.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceManager.PreparePrices(System.Collections.Generic.Dictionary{Dynamicweb.Ecommerce.Products.Product,System.Double})">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private void PreparePrices(Order order)
    {
        //Prepare prices
        Dictionary&lt;Product, double&gt; prods = new Dictionary&lt;Product, double&gt;();
        foreach (OrderLine ol in order.OrderLines)
        {
            if (ol.Type == Converter.ToString(Converter.ToInt32(OrderLineType.Product)) &amp;&amp; !prods.ContainsKey(ol.Product))
            {
                prods.Add(ol.Product, ol.Quantity);
            }
        }
        Dynamicweb.eCommerce.Prices.PriceManager.PreparePrices(prods);

        //Find discounts
        Dynamicweb.eCommerce.Frontend.Cart.CartCatch.FindDiscount();
    }
}
 </code>
 </example>
 <summary>
 Prepares the prices.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceManager.PreparePrices(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    public void RenderProducts(ProductCollection products)
    {
        //Prepare prices
        foreach (Product prod in products)
        {
            if (!prod.IsPriceCached())
            {
                Dynamicweb.eCommerce.Prices.PriceManager.PreparePrices(products);
                break;
            }
        }
        Render(products);
    }
    private void Render(ProductCollection products)
    {
        //TODO: insert your code here
    }
}
 </code>
 </example>
 <summary>
 Prepares the prices.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceManager.FindPrice(Dynamicweb.Ecommerce.Products.Product)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Products.Product product;

    private void Page_Load(System.Object sender, System.EventArgs e)
    {
        product = (Dynamicweb.eCommerce.Products.Product)Session["Ecom.Backend.Product"];
    }

    private Dynamicweb.eCommerce.Prices.PriceInfo GetPrice(ProductItemCollection items)
    {
        Dynamicweb.eCommerce.Prices.PriceInfo priceInfo = new Dynamicweb.eCommerce.Prices.PriceInfo();

        if (product.Type == ProductType.Stock &amp; product.PriceType == ProductPriceType.Calculated)
        {
            product.PriceType = ProductPriceType.FixedPrice;
        }

        if (product.Type == ProductType.Service &amp; product.PriceType == ProductPriceType.Calculated)
        {
            product.PriceType = ProductPriceType.FixedPrice;
        }

        if (product.PriceType == ProductPriceType.Calculated | product.PriceType == ProductPriceType.CalculatedWithBase)
        {
            foreach (ProductItem Item in items)
            {
                object priceObj = Dynamicweb.eCommerce.Prices.PriceManager.FindPrice(Item.Products.getProductById(Item.DefaultProductID));

                if (priceObj != null)
                {
                    double quantity = 1.0;
                    if (Item.Quantity > 0)
                    {
                        quantity = Item.Quantity;
                    }

                    Dynamicweb.eCommerce.Prices.PriceInfo subPrice = null;

                    if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceInfo)
                    {
                        subPrice = (Dynamicweb.eCommerce.Prices.PriceInfo)priceObj;
                    }
                    else if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceRaw)
                    {
                        Dynamicweb.eCommerce.Prices.PriceRaw rawPrice = (Dynamicweb.eCommerce.Prices.PriceRaw)priceObj;
                        subPrice = new Dynamicweb.eCommerce.Prices.PriceCalculated(Item.Products.getProductById(Item.DefaultProductID), rawPrice);
                    }
                    subPrice = subPrice.Multiply(quantity);
                    priceInfo = priceInfo.Add(subPrice);
                }
            }

            if (product.PriceType == ProductPriceType.CalculatedWithBase)
            {
                priceInfo = priceInfo.Add(new Dynamicweb.eCommerce.Prices.PriceCalculated(product));
            }
        }
        else
        {
            priceInfo = new Dynamicweb.eCommerce.Prices.PriceCalculated(product);
        }

        return priceInfo;
    }
}
 </code>
 </example>
 <summary>
 Finds the price.
 </summary>
 <param name="product">The product.</param>
 <returns>The found price.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceManager.FindPrice(Dynamicweb.Ecommerce.Products.Product,System.Double)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Products.Product product;

    private void Page_Load(System.Object sender, System.EventArgs e)
    {
        product = (Dynamicweb.eCommerce.Products.Product)Session["Ecom.Backend.Product"];
    }

    private Dynamicweb.eCommerce.Prices.PriceInfo GetPrice(ProductItemCollection items)
    {
        Dynamicweb.eCommerce.Prices.PriceInfo priceInfo = new Dynamicweb.eCommerce.Prices.PriceInfo();

        if (product.Type == ProductType.Stock &amp; product.PriceType == ProductPriceType.Calculated)
        {
            product.PriceType = ProductPriceType.FixedPrice;
        }

        if (product.Type == ProductType.Service &amp; product.PriceType == ProductPriceType.Calculated)
        {
            product.PriceType = ProductPriceType.FixedPrice;
        }

        if (product.PriceType == ProductPriceType.Calculated | product.PriceType == ProductPriceType.CalculatedWithBase)
        {
            foreach (ProductItem Item in items)
            {
                object priceObj = Dynamicweb.eCommerce.Prices.PriceManager.FindPrice(Item.Products.getProductById(Item.DefaultProductID), Item.Quantity);

                if (priceObj != null)
                {
                    double quantity = 1.0;
                    if (Item.Quantity > 0)
                    {
                        quantity = Item.Quantity;
                    }

                    Dynamicweb.eCommerce.Prices.PriceInfo subPrice = null;

                    if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceInfo)
                    {
                        subPrice = (Dynamicweb.eCommerce.Prices.PriceInfo)priceObj;
                    }
                    else if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceRaw)
                    {
                        Dynamicweb.eCommerce.Prices.PriceRaw rawPrice = (Dynamicweb.eCommerce.Prices.PriceRaw)priceObj;
                        subPrice = new Dynamicweb.eCommerce.Prices.PriceCalculated(Item.Products.getProductById(Item.DefaultProductID), rawPrice);
                    }
                    subPrice = subPrice.Multiply(quantity);
                    priceInfo = priceInfo.Add(subPrice);
                }
            }

            if (product.PriceType == ProductPriceType.CalculatedWithBase)
            {
                priceInfo = priceInfo.Add(new Dynamicweb.eCommerce.Prices.PriceCalculated(product));
            }
        }
        else
        {
            priceInfo = new Dynamicweb.eCommerce.Prices.PriceCalculated(product);
        }

        return priceInfo;
    }
}
 </code>
 </example>
 <summary>
 Finds the price.
 </summary>
 <param name="product">The product.</param>
 <param name="quantity">The quantity.</param>
 <returns>The found price.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceManager.FindPrice(Dynamicweb.Ecommerce.Products.Product,System.Double,System.String,Dynamicweb.Ecommerce.International.Currency)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Products.Product product;

    private void Page_Load(System.Object sender, System.EventArgs e)
    {
        product = (Dynamicweb.eCommerce.Products.Product)Session["Ecom.Backend.Product"];
    }

    private Dynamicweb.eCommerce.Prices.PriceInfo GetPrice(OrderLine orderlLine)
    {
        Dynamicweb.eCommerce.Prices.PriceInfo info = new Dynamicweb.eCommerce.Prices.PriceInfo();
        info.Currency = Dynamicweb.eCommerce.Common.Context.Currency;

        if (orderlLine.BOMOrderLines.Count > 0)
        {
            if (product.PriceType == ProductPriceType.FixedPrice)
            {
                object priceObj = Dynamicweb.eCommerce.Prices.PriceManager.FindPrice(product, orderlLine.Quantity, orderlLine.ProductVariantID, Dynamicweb.eCommerce.Common.Context.Currency, orderlLine.UnitID);
                if (priceObj != null)
                {
                    if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceInfo)
                    {
                        Dynamicweb.eCommerce.Prices.PriceInfo pi = (Dynamicweb.eCommerce.Prices.PriceInfo)priceObj;
                        info = info.Add(pi);
                    }
                    else if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceRaw)
                    {
                        Dynamicweb.eCommerce.Prices.PriceRaw rp = (Dynamicweb.eCommerce.Prices.PriceRaw)priceObj;
                        Dynamicweb.eCommerce.Prices.PriceCalculated cp = new Dynamicweb.eCommerce.Prices.PriceCalculated(product, rp);
                        info = info.Add(cp);
                    }
                }
            }
            else
            {
                //Adding only the BOM Orderlines
                info = info.Add(orderlLine.BOMOrderLines);
            }

            if (product.PriceType == ProductPriceType.CalculatedWithBase)
            {
                object priceObj = Dynamicweb.eCommerce.Prices.PriceManager.FindPrice(product, orderlLine.Quantity, orderlLine.ProductVariantID, Dynamicweb.eCommerce.Common.Context.Currency);
                if (priceObj != null)
                {
                    if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceInfo)
                    {
                        Dynamicweb.eCommerce.Prices.PriceInfo pi = (Dynamicweb.eCommerce.Prices.PriceInfo)priceObj;
                        info = info.Add(pi);
                    }
                    else if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceRaw)
                    {
                        Dynamicweb.eCommerce.Prices.PriceRaw rp = (Dynamicweb.eCommerce.Prices.PriceRaw)priceObj;
                        Dynamicweb.eCommerce.Prices.PriceCalculated cp = new Dynamicweb.eCommerce.Prices.PriceCalculated(product, rp);
                        info = info.Add(cp);
                    }
                }
            }
        }
        else
        {
            object priceObj = Dynamicweb.eCommerce.Prices.PriceManager.FindPrice(product, orderlLine.Quantity, orderlLine.ProductVariantID, Dynamicweb.eCommerce.Common.Context.Currency, orderlLine.UnitID);
            if (priceObj != null)
            {
                if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceInfo)
                {
                    Dynamicweb.eCommerce.Prices.PriceInfo pi = (Dynamicweb.eCommerce.Prices.PriceInfo)priceObj;
                    info = info.Add(pi);
                }
                else if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceRaw)
                {
                    Dynamicweb.eCommerce.Prices.PriceRaw rp = (Dynamicweb.eCommerce.Prices.PriceRaw)priceObj;
                    Dynamicweb.eCommerce.Prices.PriceCalculated cp = new Dynamicweb.eCommerce.Prices.PriceCalculated(product, rp);
                    info = info.Add(cp);
                }
            }
        }
        return info;
    }
}
 </code>
 </example>
 <summary>
 Finds the price.
 </summary>
 <param name="product">The product.</param>
 <param name="quantity">The quantity.</param>
 <param name="variantId">The variant ID.</param>
 <param name="currency">The currency.</param>
 <returns>The found price.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceManager.FindPrice(Dynamicweb.Ecommerce.Products.Product,System.Double,System.String,Dynamicweb.Ecommerce.International.Currency,System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Products.Product product;

    private void Page_Load(System.Object sender, System.EventArgs e)
    {
        product = (Dynamicweb.eCommerce.Products.Product)Session["Ecom.Backend.Product"];
    }

    private Dynamicweb.eCommerce.Prices.PriceInfo GetPrice(OrderLine orderlLine)
    {
        Dynamicweb.eCommerce.Prices.PriceInfo info = new Dynamicweb.eCommerce.Prices.PriceInfo();
        info.Currency = Dynamicweb.eCommerce.Common.Context.Currency;

        if (orderlLine.BOMOrderLines.Count > 0)
        {
            if (product.PriceType == ProductPriceType.FixedPrice)
            {
                object priceObj = Dynamicweb.eCommerce.Prices.PriceManager.FindPrice(product, orderlLine.Quantity, orderlLine.ProductVariantID, Dynamicweb.eCommerce.Common.Context.Currency, orderlLine.UnitID);
                if (priceObj != null)
                {
                    if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceInfo)
                    {
                        Dynamicweb.eCommerce.Prices.PriceInfo pi = (Dynamicweb.eCommerce.Prices.PriceInfo)priceObj;
                        info = info.Add(pi);
                    }
                    else if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceRaw)
                    {
                        Dynamicweb.eCommerce.Prices.PriceRaw rp = (Dynamicweb.eCommerce.Prices.PriceRaw)priceObj;
                        Dynamicweb.eCommerce.Prices.PriceCalculated cp = new Dynamicweb.eCommerce.Prices.PriceCalculated(product, rp);
                        info = info.Add(cp);
                    }
                }
            }
            else
            {
                //Adding only the BOM Orderlines
                info = info.Add(orderlLine.BOMOrderLines);
            }

            if (product.PriceType == ProductPriceType.CalculatedWithBase)
            {
                object priceObj = Dynamicweb.eCommerce.Prices.PriceManager.FindPrice(product, orderlLine.Quantity, orderlLine.ProductVariantID, Dynamicweb.eCommerce.Common.Context.Currency);
                if (priceObj != null)
                {
                    if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceInfo)
                    {
                        Dynamicweb.eCommerce.Prices.PriceInfo pi = (Dynamicweb.eCommerce.Prices.PriceInfo)priceObj;
                        info = info.Add(pi);
                    }
                    else if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceRaw)
                    {
                        Dynamicweb.eCommerce.Prices.PriceRaw rp = (Dynamicweb.eCommerce.Prices.PriceRaw)priceObj;
                        Dynamicweb.eCommerce.Prices.PriceCalculated cp = new Dynamicweb.eCommerce.Prices.PriceCalculated(product, rp);
                        info = info.Add(cp);
                    }
                }
            }
        }
        else
        {
            object priceObj = Dynamicweb.eCommerce.Prices.PriceManager.FindPrice(product, orderlLine.Quantity, orderlLine.ProductVariantID, Dynamicweb.eCommerce.Common.Context.Currency, orderlLine.UnitID);
            if (priceObj != null)
            {
                if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceInfo)
                {
                    Dynamicweb.eCommerce.Prices.PriceInfo pi = (Dynamicweb.eCommerce.Prices.PriceInfo)priceObj;
                    info = info.Add(pi);
                }
                else if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceRaw)
                {
                    Dynamicweb.eCommerce.Prices.PriceRaw rp = (Dynamicweb.eCommerce.Prices.PriceRaw)priceObj;
                    Dynamicweb.eCommerce.Prices.PriceCalculated cp = new Dynamicweb.eCommerce.Prices.PriceCalculated(product, rp);
                    info = info.Add(cp);
                }
            }
        }
        return info;
    }
}
 </code>
 </example>
 <summary>
 Finds the price.
 </summary>
 <param name="product">The product.</param>
 <param name="quantity">The quantity.</param>
 <param name="variantId">The variant ID.</param>
 <param name="currency">The currency.</param>
 <param name="unitId">The unit ID.</param>
 <returns>The found price.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceManager.FindPrice(Dynamicweb.Ecommerce.Products.Product,System.Double,System.String,Dynamicweb.Ecommerce.International.Currency,System.String,System.Double)">
 <summary>
 Finds the price.
 </summary>
 <param name="product">The product.</param>
 <param name="quantity">The quantity.</param>
 <param name="variantId">The variant ID.</param>
 <param name="currency">The currency.</param>
 <param name="unitId">The unit ID.</param>
 <param name="quantityAllVariants">The quantity of all variants.</param>
 <returns>The found price.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceManager.FindInformativePrice(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Finds the informative price.
 </summary>
 <param name="product">The product.</param>
 <returns>The found price.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceManager.FindInformativePrice(Dynamicweb.Ecommerce.Products.Product,System.Double)">
 <summary>
 Finds the informative price.
 </summary>
 <param name="product">The product.</param>
 <param name="quantity">The quantity.</param>
 <returns>The found price.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceManager.FindInformativePrice(Dynamicweb.Ecommerce.Products.Product,System.Double,System.String,Dynamicweb.Ecommerce.International.Currency)">
 <summary>
 Finds the informative price.
 </summary>
 <param name="product">The product.</param>
 <param name="quantity">The quantity.</param>
 <param name="variantId">The variant ID.</param>
 <param name="currency">The currency.</param>
 <returns>The found price.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceManager.FindInformativePrice(Dynamicweb.Ecommerce.Products.Product,System.Double,System.String,Dynamicweb.Ecommerce.International.Currency,System.String)">
 <summary>
 Finds the informative price.
 </summary>
 <param name="product">The product.</param>
 <param name="quantity">The quantity.</param>
 <param name="variantId">The variant ID.</param>
 <param name="currency">The currency.</param>
 <param name="unitId">The unit ID.</param>
 <returns>The found price.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.PriceProvider">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private void CheckProviderTypesInCache()
    {
        // Check if a cache item for PriceResolverTypes is already created
        if (((Context.Current.Cache.Item["PriceProviderTypes"] == null)))
        {
            // Create a new arraylist
            ArrayList PriceProviderTypes = new ArrayList();

            // and fill it with ResolverTypes Types
            foreach (Type t in AddInManager.GetAddInClasses(typeof(Dynamicweb.eCommerce.Prices.PriceProvider)))
            {
                if ((!object.ReferenceEquals(t, typeof(Dynamicweb.eCommerce.Prices.DefaultPriceProvider))))
                {
                    PriceProviderTypes.Add(t);
                }
            }

            PriceProviderTypes.Add(typeof(Dynamicweb.eCommerce.Prices.DefaultPriceProvider));

            // Create a new cache item with for 5 min. expiration.
            // TODO: Change to inherited cache dependency object when switching to .net 2,0. Use Appdomain.OnLoad to flush the dependency.
            Context.Current.Cache.Add("PriceProviderTypes", PriceProviderTypes, null, DateTime.Now.AddSeconds(300), TimeSpan.Zero, System.Web.Caching.CacheItemPriority.High, null);
        }
    }
}
 </code>
 </example>
 <summary>
 Represents a price provider.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceProvider.HandlePricesExclusively">
 <summary>
 Property indicating whether this <see cref="T:Dynamicweb.Ecommerce.Prices.PriceProvider"/> handles all prices.
 </summary>
 <returns>Boolean value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Prices.PriceProvider"/> handles all prices. <see cref="T:Dynamicweb.Ecommerce.Prices.DefaultPriceProvider"/> will become disabled if <c>true</c> is returned.</returns>
 <remarks>
 Returning <c>true</c> will cause <see cref="T:Dynamicweb.Ecommerce.Prices.DefaultPriceProvider"/> to become disabled.
 Default value is <c>false</c>.
 </remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceProvider.PreparePrices(System.Collections.Generic.Dictionary{Dynamicweb.Ecommerce.Products.Product,System.Double})">
 <summary>
 Prepares the prices. Must be overriden.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceProvider.PreparePrices(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Prepares the prices. Must be overriden.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceProvider.FindPrice(Dynamicweb.Ecommerce.Products.Product,System.Double,System.String,Dynamicweb.Ecommerce.International.Currency,System.String,Dynamicweb.Security.UserManagement.User)">
 <summary>
 Finds the price. Must be overriden.
 </summary>
 <param name="product">The product.</param>
 <param name="quantity">The quantity.</param>
 <param name="variantId">The variant id.</param>
 <param name="currency">The currency.</param>
 <param name="unitId">The unit id.</param>
 <param name="user">The user.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceRaw"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceProvider.FindPrice(Dynamicweb.Ecommerce.Products.Product,System.Double,System.String,Dynamicweb.Ecommerce.International.Currency,System.String,Dynamicweb.Security.UserManagement.User,System.Double)">
 <summary>
 Finds the price.
 </summary>
 <param name="product">The product.</param>
 <param name="quantity">The quantity.</param>
 <param name="variantId">The variant id.</param>
 <param name="currency">The currency.</param>
 <param name="unitId">The unit id.</param>
 <param name="user">The user.</param>
 <param name="quantityAllVariants">The quantity of all variants.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceRaw"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceProvider.FindInformativePrice(Dynamicweb.Ecommerce.Products.Product,System.Double,System.String,Dynamicweb.Ecommerce.International.Currency,System.String,Dynamicweb.Security.UserManagement.User)">
 <summary>
 Finds the informative price. Must be overriden.
 </summary>
 <param name="product">The product.</param>
 <param name="quantity">The quantity.</param>
 <param name="variantId">The variant ID.</param>
 <param name="currency">The currency.</param>
 <param name="unitId">The unit ID.</param>
 <param name="user">The user.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.PriceRaw"/>.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.PriceRaw">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Products.Product product;

    private void Page_Load(System.Object sender, System.EventArgs e)
    {
        product = (Dynamicweb.eCommerce.Products.Product)Session["Ecom.Backend.Product"];
    }

    private Dynamicweb.eCommerce.Prices.PriceInfo GetPrice(ProductItemCollection items)
    {
        Dynamicweb.eCommerce.Prices.PriceInfo priceInfo = new Dynamicweb.eCommerce.Prices.PriceInfo();

        if (product.Type == ProductType.Stock &amp; product.PriceType == ProductPriceType.Calculated)
        {
            product.PriceType = ProductPriceType.FixedPrice;
        }

        if (product.Type == ProductType.Service &amp; product.PriceType == ProductPriceType.Calculated)
        {
            product.PriceType = ProductPriceType.FixedPrice;
        }

        if (product.PriceType == ProductPriceType.Calculated | product.PriceType == ProductPriceType.CalculatedWithBase)
        {
            foreach (ProductItem Item in items)
            {
                object priceObj = Dynamicweb.eCommerce.Prices.PriceManager.FindPrice(Item.Products.getProductById(Item.DefaultProductID), Item.Quantity);

                if (priceObj != null)
                {
                    double quantity = 1.0;
                    if (Item.Quantity > 0)
                    {
                        quantity = Item.Quantity;
                    }

                    Dynamicweb.eCommerce.Prices.PriceInfo subPrice = null;

                    if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceInfo)
                    {
                        subPrice = (Dynamicweb.eCommerce.Prices.PriceInfo)priceObj;
                    }
                    else if ((priceObj) is Dynamicweb.eCommerce.Prices.PriceRaw)
                    {
                        Dynamicweb.eCommerce.Prices.PriceRaw rawPrice = (Dynamicweb.eCommerce.Prices.PriceRaw)priceObj;
                        subPrice = new Dynamicweb.eCommerce.Prices.PriceCalculated(Item.Products.getProductById(Item.DefaultProductID), rawPrice);
                    }
                    subPrice = subPrice.Multiply(quantity);
                    priceInfo = priceInfo.Add(subPrice);
                }
            }

            if (product.PriceType == ProductPriceType.CalculatedWithBase)
            {
                priceInfo = priceInfo.Add(new Dynamicweb.eCommerce.Prices.PriceCalculated(product));
            }
        }
        else
        {
            priceInfo = new Dynamicweb.eCommerce.Prices.PriceCalculated(product);
        }

        return priceInfo;
    }
}
 </code>
 </example>
 <summary>
 Represents a placeholder for an amount and a currency. PriceRaw is a simple unqualified price, that's mostly used internally by the PriceManager or by PriceProviders.
 </summary>
 <remarks>A PriceRaw have no indicators to tell if VAT is included or if rounding have been perfomed. If you need to work with qualified prices, use PriceInfo.</remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceRaw.Price">
 <summary>
 The Amount of the PriceRaw
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceRaw.Currency">
 <summary>
 The Currency of the PriceRaw
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceRaw.#ctor">
 <summary>
 Initializes a new instance of the PriceRaw class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.PriceRaw.#ctor(System.Double,Dynamicweb.Ecommerce.International.Currency)">
 <summary>
 Initializes a new instance of the PriceRaw class with a Price and a Currency.
 </summary>
 <param name="price">The amount of the Currency.</param>
 <param name="currency">The Currency of the Amount.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.PriceRaw.PriceSource">
 <summary>
 Gets or sets a value indicating what price provider generate price.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.Rounding">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    public Dynamicweb.eCommerce.Prices.RoundingCollection GetRoundings(string RoundingID)
    {
        string SQL = "SELECT * FROM EcomRoundings WHERE RoundingID = '" + RoundingID + "'";
        Dynamicweb.eCommerce.Prices.Rounding objRounding = default(Dynamicweb.eCommerce.Prices.Rounding);
        IDataReader objDataReader = Dynamicweb.Data.Database.CreateDataReader(SQL);
        Dynamicweb.eCommerce.Prices.RoundingCollection col = new Dynamicweb.eCommerce.Prices.RoundingCollection();

        while (objDataReader.Read())
        {
            objRounding = new Dynamicweb.eCommerce.Prices.Rounding(objDataReader);
            col.Add(objRounding);
        }

        objDataReader.Close();
        objDataReader.Dispose();

        return col;
    }
}
 </code>
 </example>
 <summary>
 Represents the methods for rounding of sums.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Rounding.Id">
 <summary>
 Gets or sets the id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Rounding.Name">
 <summary>
 Gets or sets the name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Rounding.ModIntegerPart">
 <summary>
 Gets or sets the mod integer part.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Rounding.ModDecimalPart">
 <summary>
 Gets or sets the mod decimal part.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Rounding.ModIntegerCorrection">
 <summary>
 Gets or sets the mod integer correction.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Rounding.ModDecimalCorrection">
 <summary>
 Gets or sets the mod decimal correction.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Rounding.Method">
 <summary>
 Gets or sets the method.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Prices.Rounding.Decimals">
 <summary>
 Gets or sets the decimals.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Rounding.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Prices.Rounding" /> class.
 </summary>
 <param name="DataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Rounding.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Prices.Rounding" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Rounding.Save(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    public void DoSave(string roundId)
    {
        Dynamicweb.eCommerce.Prices.Rounding r = new Dynamicweb.eCommerce.Prices.Rounding(roundId);
        r.Save(roundId);
        Dynamicweb.eCommerce.Common.Application.KillCurrencies();
        Response.Redirect("../Lists/EcomList.aspx?type=ROUNDING");
        Response.End();
    }
}
 </code>
 </example>
 <summary>
 Saves the specified Rounding object into DB.
 </summary>
 <param name="id">DB field name is RoundingID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Rounding.Delete">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private string roundId;
    private Dynamicweb.eCommerce.Prices.Rounding rounding;

    private void Page_Load(System.Object sender, System.EventArgs e)
    {
        roundId = HttpContext.Current.Request.QueryString["roundID"];
        rounding = new Dynamicweb.eCommerce.Prices.Rounding(roundId);
    }

    private void DeleteButton_Click(System.Object sender, System.EventArgs e)
    {
        rounding.Delete();
 
        Response.Redirect("../Lists/EcomList.aspx?type=ROUNDING");
        Response.End();
    }
}
 </code>
 </example>
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Rounding.Delete(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private string roundId;
    private Dynamicweb.eCommerce.Prices.Rounding rounding;

    private void Page_Load(System.Object sender, System.EventArgs e)
    {
        roundId = HttpContext.Current.Request.QueryString["roundID"];
        rounding = new Dynamicweb.eCommerce.Prices.Rounding(roundId);
    }

    private void DeleteButton_Click(System.Object sender, System.EventArgs e)
    {
        if (!string.IsNullOrEmpty(roundId))
        {
            rounding.Delete(roundId);
        }

        Response.Redirect("../Lists/EcomList.aspx?type=ROUNDING");
        Response.End();
    }
}
 </code>
 </example>
 <summary>
 Deletes the specified Rounding object from DB.
 </summary>
 <param name="id">DB field name is RoundingID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Rounding.Round(System.Double)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    private Dynamicweb.eCommerce.Products.Product product;

    private void Page_Load(System.Object sender, System.EventArgs e)
    {
        product = (Dynamicweb.eCommerce.Products.Product)Session["Ecom.Backend.Product"];
    }

    public double Total(bool IncludeVAT, Dynamicweb.eCommerce.Discounts.Discount.DiscountCalculationType CalculateAs)
    {
        double discountTotal = 0.0;
        double productPrice = 0.0;

        if (IncludeVAT)
        {
            productPrice = product.Price.PriceWithVAT;
        }
        else
        {
            productPrice = product.Price.PriceWithoutVAT;
        }

        if (productPrice &lt;= 0)
        {
            return 0;
        }

        foreach (Discount d in product.Discounts)
        {
            discountTotal += d.get_Value(IncludeVAT, Discount.DiscountCalculationType.DiscountCalculationAmount, false);
        }

        switch (CalculateAs)
        {
            case Discount.DiscountCalculationType.DiscountCalculationAmount:
                return Dynamicweb.eCommerce.Common.Context.Currency.Round(discountTotal);

            case Discount.DiscountCalculationType.DiscountCalculationPercent:
                string tmp = Dynamicweb.eCommerce.Common.Context.Currency.Format((discountTotal / productPrice) * 100, false);
                double ret = 0;
                double.TryParse(tmp, out ret);
                return ret;

            default:
                return discountTotal/productPrice;
        }
    }
}
 </code>
 </example>
 <summary>
 Rounds the specified value. If Method = 0 return the value.
 </summary>
 <param name="value">The value.</param>
 <returns>The rounded value.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Rounding.GetRoundings">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
   public void DoSome()
   {
       Dynamicweb.eCommerce.Prices.Rounding rounding = new Dynamicweb.eCommerce.Prices.Rounding();
       foreach (Dynamicweb.eCommerce.Prices.Rounding r in Dynamicweb.eCommerce.Prices.Rounding.getRoundings())
       {
           //TODO: insert your code here            
       }
   }
}
 </code>
 </example>
 <summary>
 Gets the collection of Rounding objects.
 </summary>
 <remarks>This method does not use caching. Consider using <see cref="M:Dynamicweb.Ecommerce.Prices.Rounding.GetRoundingById(System.String)" /> instead.</remarks>
 <returns>The collection of Rounding objects</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Rounding.GetRoundingById(System.String)">
 <summary>
 Gets the rounding by identifier.
 </summary>
 <param name="id">The identifier.</param>
 <remarks>This method uses caching.</remarks>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Prices.Rounding"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.Rounding.ClearCache">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Prices.RoundingCollection">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    public Dynamicweb.eCommerce.Prices.RoundingCollection GetRoundings(string RoundingID)
    {
        string SQL = "SELECT * FROM EcomRoundings WHERE RoundingID = '" + RoundingID + "'";
        Dynamicweb.eCommerce.Prices.Rounding objRounding = default(Dynamicweb.eCommerce.Prices.Rounding);
        IDataReader objDataReader = Dynamicweb.Data.Database.CreateDataReader(SQL);
        Dynamicweb.eCommerce.Prices.RoundingCollection col = new Dynamicweb.eCommerce.Prices.RoundingCollection();

        while (objDataReader.Read())
        {
            objRounding = new Dynamicweb.eCommerce.Prices.Rounding(objDataReader);
            col.Add(objRounding);
        }
 
        objDataReader.Close();
        objDataReader.Dispose();

        return col;
    }
}
 </code>
 </example>
 <summary>
 Represents a collection of <see cref="T:Dynamicweb.Ecommerce.Prices.Rounding"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Prices.RoundingCollection.Load(System.String)">
 <example>
 <code title="C#" description="" lang="CS">
class MyPage : System.Web.UI.Page
{
    public static Dynamicweb.eCommerce.Prices.RoundingCollection getRoundings()
    {
        string SQL = "SELECT * FROM EcomRoundings ORDER BY RoundingID";

        Dynamicweb.eCommerce.Prices.RoundingCollection col = new Dynamicweb.eCommerce.Prices.RoundingCollection();
        col.Load(SQL);
        return col;
    }
}
 </code>
 </example>
 <summary>
 Loads the specified Rounding objects.
 </summary>
 <param name="sql">The SQL query.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Shops.Shop">
 <summary>
 Represents the Ecommerce shop.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.Languages">
 <summary>
 Gets or sets the languages collection.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.DefaultLanguageId">
 <summary>
 Gets or sets the ID of the default language.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.Granted(Dynamicweb.Ecommerce.UserPermissions.UserPermissionRights)">
 <summary>
 Checks if the specified permission is granted.
 </summary>
 <param name="permission">The <see cref="T:Dynamicweb.Ecommerce.UserPermissions.UserPermissionRights"/> enumeration member.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.Id">
 <summary>
 Gets or sets the ID of the shop.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.Name">
 <summary>
 Gets or sets the name of the shop.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.OrderFlowId">
 <summary>
 Gets or sets the ID of the order flow.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.StockStateId">
 <summary>
 Gets or sets the ID of the stock state.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.StockLocations">
 <summary>
 Gets the collection of the stock locations.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.OrderContextId">
 <summary>
 Gets or sets the ID of the order context.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.Created">
 <summary>
 Gets or sets creation date.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.IsDefault">
 <summary>
 Gets or sets the value indicating whether shop is used as default.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.IsProductWarehouse">
 <summary>
 Gets or sets the value indicating whether shop or PIM Product Warehouse.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.UsageType">
 <summary>
 Gets or sets <seealso cref="T:Dynamicweb.Ecommerce.ShopType"/> for the shop
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.Icon">
 <summary>
 Gets or sets the icon.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.HasGroups">
 <summary>
 Gets the value indicating whether shop has groups.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.TopLevelGroups">
 <summary>
 Gets the collection of the top level groups.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.TopLevelGroups(System.String)">
 <summary>
 Gets the collection of the top level groups.
 </summary>
 <param name="languageId">The language ID.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.Groups">
 <summary>
 Gets the collection of the groups.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.Groups(System.String)">
 <summary>
 Gets the collection of the groups.
 </summary>
 <param name="languageId">The language ID.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.TopLevelGroupsDefaultLanguage">
 <summary>
 Get top level groups, including groups in default language.
 If group exists in current language, group's language ID is current language, otherwise language ID is default lanugage ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.GroupsDefaultLanguage">
 <summary>
 Get groups, including groups in default language.
 If group exists in current language, group's language ID is current language, otherwise language ID is default lanugage ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.StockLocationID">
 <summary>
 Gets or sets the stock location ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.OrderLineFields">
 <summary>
 Gets order line fields collection.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.UseAlternativeImages">
 <summary>
 Gets or sets the value indicating whether shop has alternative images.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.ImageFolder">
 <summary>
 Gets or sets the image folder.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.ImageSearchInSubfolders">
 <summary>
 Gets or sets the image folder.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.ImagePatternSmall">
 <summary>
 Gets or sets the pattern for the names of the small images.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.ImagePatternMedium">
 <summary>
 Gets or sets the pattern for the names of the medium images.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.ImagePatternLarge">
 <summary>
 Gets or sets the pattern for the names of the large images.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.AlternativeImagePatterns">
 <summary>
 Gets or sets the alternative patterns for images.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.DefaultPrintTemplate">
 <summary>
 Gets or sets the path for the default print template.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.ProductPrimaryPageId">
 <summary>
 Gets or sets the product primary page ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.AutoBuildIndex">
 <summary>
 Gets or sets the possibility automaticaly build index during shop products update.
 </summary>
 <seealso cref="P:Dynamicweb.Ecommerce.Shops.Shop.IndexRepository"/>
 <seealso cref="P:Dynamicweb.Ecommerce.Shops.Shop.IndexName"/>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.IndexRepository">
 <summary>
  Gets or sets the index repository.
 </summary>
 <seealso cref="P:Dynamicweb.Ecommerce.Shops.Shop.AutoBuildIndex"/>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.IndexName">
 <summary>
  Gets or sets the index name.
 </summary>
 <seealso cref="P:Dynamicweb.Ecommerce.Shops.Shop.AutoBuildIndex"/>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.ImageUploadFolder">
 <summary>
 Products images upload folder.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.AutoCreateUploadFolderPerProduct">
 <summary>
 If true then new subfolder of the <see cref="P:Dynamicweb.Ecommerce.Shops.Shop.ImageUploadFolder"/> folder will create  with Product Number as name  and uploaded file will put there.
 </summary>
 <seealso cref="P:Dynamicweb.Ecommerce.Shops.Shop.ImageUploadFolder"/>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.Clone">
 <summary>
 Clones the shop.
 </summary>
 <returns>A new instance of the <see cref="T:Dynamicweb.Ecommerce.Shops.Shop"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.GetNotificationRelations">
 <summary>
 Gets all <see cref="T:Dynamicweb.Ecommerce.Shops.ShopOrderNotificationRelation"/>.
 </summary>
 <returns>An instance of IEnumerable of <see cref="T:Dynamicweb.Ecommerce.Shops.ShopOrderNotificationRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.ClearOrderLineFieldCache">
 <summary>
 Reset order line fields cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.#ctor(System.String)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="shopId">The shop ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="dataReader">The <see cref="T:System.Data.IDataReader"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.Fill(System.Data.IDataReader)">
 <summary>
 Initializes class properties.
 </summary>
 <param name="dataReader">The <see cref="T:System.Data.IDataReader"/>.</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.Shop.ProductCountForBackendTree">
 <summary>
 Gets product count in shop for current language, without variants.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.Copy">
 <summary>
 Copies the shop.
 </summary>
 <returns>A new instance of the <see cref="T:Dynamicweb.Ecommerce.Shops.Shop"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.Copy(System.String)">
 <summary>
 Copies the shop.
 </summary>
 <param name="newName">The new name.</param>
 <returns>A new instance of the <see cref="T:Dynamicweb.Ecommerce.Shops.Shop"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.Save">
 <summary>
 Saves the shop.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.Save(System.String)">
 <summary>
 Saves the shop.
 </summary>
 <param name="shopId">The shop ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.Delete(System.String)">
 <summary>
 Deletes the shop.
 </summary>
 <param name="shopId">The ID of the shop.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.Delete">
 <summary>
 Deletes the shop.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.Delete(Dynamicweb.Ecommerce.Shops.Shop,System.Boolean)">
 <summary>
 Deletes the shop.
 </summary>
 <param name="shop">The shop ID.</param>
 <param name="deleteGroups">Indicates if groups should be deleted.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.Delete(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Shops.Shop})">
 <summary>
 Deletes specified shops.
 </summary>
 <param name="shops">The instance of IEnumerable of <see cref="T:Dynamicweb.Ecommerce.Shops.Shop"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.Delete(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Shops.Shop},System.Boolean)">
 <summary>
 Deletes the specified shops if <para>executeQuery</para> set as <c>True</c>.
 </summary>
 <param name="shops">The instance of IEnumerable of <see cref="T:Dynamicweb.Ecommerce.Shops.Shop"/>.</param>
 <param name="executeQuery">Indicates whether to execute the query.</param>
 <returns>An inctance of the <see cref="T:Dynamicweb.Data.CommandBuilder"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.UpdateDefault(System.Boolean,System.String)">
 <summary>
 Changes the value indicating whether shop is used as default.
 </summary>
 <param name="setDefaultTo">The new value for the IsDefault for the specified shop.</param>
 <param name="shopId">The shop ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.UpdateName(Dynamicweb.Ecommerce.Shops.Shop,System.String)">
 <summary>
 Renames the shop.
 </summary>
 <param name="shop">The instance of the <see cref="T:Dynamicweb.Ecommerce.Shops.Shop"/>.</param>
 <param name="newName">The new name.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.GetShops">
 <summary>
 Gets all the shops.
 </summary>
 <returns>An instance of the IEnumerable of <see cref="T:Dynamicweb.Ecommerce.Shops.Shop"/>, sorted by name ascending.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.GetShops(System.String)">
 <summary>
 Gets the sorted list of shops.
 </summary>
 <param name="shopId">The shop ID.</param>
 <returns>An instance of the IEnumerable of <see cref="T:Dynamicweb.Ecommerce.Shops.Shop"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.GetShops(System.Boolean)">
 <summary>
 Gets the sorted list of shops filtered by the <see cref="P:Dynamicweb.Ecommerce.Shops.Shop.IsDefault"/>.
 </summary>
 <param name="defaultShop">Include or exclude default shops.</param>
 <returns>An instance of the IEnumerable of <see cref="T:Dynamicweb.Ecommerce.Shops.Shop"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.GetShopsExcludeShop(Dynamicweb.Ecommerce.Shops.Shop)">
 <summary>
 Gets the sorted list of shops exclude specified shop.
 </summary>
 <param name="excludedShop">The <see cref="T:Dynamicweb.Ecommerce.Shops.Shop"/> to exclude.</param>
 <returns>An instance of the IEnumerable of <see cref="T:Dynamicweb.Ecommerce.Shops.Shop"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.ClearCache">
 <summary>
 Clears the cache of the shops.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.Shop.Lock">
 <summary>
 Puts the shop to the read only mode.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Shops.ShopGroupRelation">
 <summary>
 Class represents relation object between the shop and the group
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.ShopGroupRelation.ShopId">
 <summary>
 Gets or sets the id of the shop
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.ShopGroupRelation.GroupId">
 <summary>
 Gets or sets the id of the group
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.ShopGroupRelation.Sorting">
 <summary>
 Sort order for related shops
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopGroupRelation.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the class
 </summary>
 <param name="shopId">The id of the shop</param>
 <param name="groupId">The id of the group</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopGroupRelation.#ctor">
 <summary>
 Initializes a new instance of the class
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopGroupRelation.Save(System.String,System.String)">
 <summary>
 Saves the relation
 </summary>
 <param name="shopId">The id of the shop</param>
 <param name="groupId">The id of the group</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopGroupRelation.Delete">
 <summary>
 Removes all relations
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopGroupRelation.Delete(System.String,System.String)">
 <summary>
 Removes relations for the given group
 </summary>
 <param name="shopId">The id of the shop</param>
 <param name="groupId">The id of the group</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Shops.ShopOrderNotificationRelation">
 <summary>
 Class represents relation object between the shop and the user
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.ShopOrderNotificationRelation.ShopId">
 <summary>
 Gets or sets the id of the shop
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Shops.ShopOrderNotificationRelation.AccessUserId">
 <summary>
 Gets or sets the id of the user access
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopOrderNotificationRelation.#ctor(System.String,System.Int32)">
 <summary>
 Initializes a new instance of the class
 </summary>
 <param name="shopId">The id of the shop</param>
 <param name="accessUserId">The id of the user access</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopOrderNotificationRelation.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the class
 </summary>
 <param name="dataReader">An <see cref="T:System.Data.IDataReader"/></param>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopOrderNotificationRelation.Save">
 <summary>
 Saves the relation
 </summary>
 <returns><c>True</c> if it successfully saved</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopOrderNotificationRelation.DeleteAllFromShop(System.String)">
 <summary>
 Removes all relations
 </summary>
 <param name="shopId">The id of the shop</param>
 <returns><c>True</c> if it successfully deleted</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopOrderNotificationRelation.GetFromShopId(System.String)">
 <summary>
 Gets all relations
 </summary>
 <param name="shopId">The id of the shop</param>
 <returns>An instance of IEnumerable Of <see cref="T:Dynamicweb.Ecommerce.Shops.ShopOrderNotificationRelation"/></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Shops.ShopRepository">
 <summary>
 The ShopRepository providing persistence operations for the Shop Aggregate.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopRepository.Delete(System.String)">
 <summary>
 Deletes the shop and its language relations.
 </summary>
 <param name="shopId">The shop ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopRepository.Save(Dynamicweb.Ecommerce.Shops.Shop)">
 <summary>
 Saves the shop.
 </summary>
 <param name="shop">The shop.</param>
 <returns>The shop after saving.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopRepository.CleanDefault">
 <summary>
 Sets <see cref="P:Dynamicweb.Ecommerce.Shops.Shop.IsDefault"/> to <c>False</c> for all shops in solution.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopRepository.GetProductCountByShopsForBackendTree">
 <summary>
 Gets product count in all shops for current language, without variants.
 </summary>
 <returns>The count of products in all shops for current language, without variants.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopRepository.GetProductCountForBackendTree(System.String)">
 <summary>
 Gets product count in shop for current language, without variants.
 </summary>
 <param name="shopId">The shop ID.</param>
 <returns>The count of products in shop for current language, without variants.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopRepository.GetShops">
 <summary>
 Gets all shops in solution.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Shops.Shop"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopRepository.IsNewShop(Dynamicweb.Ecommerce.Shops.Shop)">
 <summary>
 Determines whether the shop is new.
 </summary>
 <param name="shop">The shop.</param>
 <returns><c>True</c>, if shop is new, otherwise <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopRepository.GetAllShopLanguageRelations">
 <summary>
 Gets language relations for all shops, grouped by shop ID.
 </summary>
 <returns>The dictionary with language relations.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Shops.ShopService">
 <summary>
 The ShopService class providing methods for querying and saving The Shop Aggregate to and from persistence.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopService.Delete(System.String)">
 <summary>
 Deletes the shop.
 </summary>
 <param name="shopId">The shop ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopService.Save(Dynamicweb.Ecommerce.Shops.Shop)">
 <summary>
 Saves the shop.
 </summary>
 <param name="shop">The shop.</param>
 <returns>The shop after saving.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopService.CleanDefault">
 <summary>
 Sets <see cref="P:Dynamicweb.Ecommerce.Shops.Shop.IsDefault"/> to <c>False</c> for all shops in solution.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopService.CanDeleteShop(Dynamicweb.Ecommerce.Shops.Shop)">
 <summary>
 Determines whether the shop can be deleted.
 </summary>
 <param name="shop">The shop.</param>
 <returns><c>True</c>, if the shop and its groups could be deleted, otherwise <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopService.GetProductCountByShopsForBackendTree">
 <summary>
 Gets product count in all shops for current language, without variants.
 </summary>
 <returns>The count of products in all shops for current language, without variants.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopService.GetProductCountForBackendTree(System.String)">
 <summary>
 Gets product count in shop for current language, without variants.
 </summary>
 <param name="shopId">The shop ID.</param>
 <returns>The count of products in shop for current language, without variants.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopService.GetShops">
 <summary>
 Gets all shops in solution.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Shops.Shop"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopService.GetShop(System.String)">
 <summary>
 Gets the shop.
 </summary>
 <param name="shopId">The shop ID.</param>
 <returns>The instance of the <see cref="T:Dynamicweb.Ecommerce.Shops.Shop"/>, or <c>null</c> if the shop was not found.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopService.GetDefaultLanguageId(System.String)">
 <summary>
 Gets the default shop.
 </summary>
 <param name="shopId">The shop ID.</param>
 <returns>The instance of the <see cref="T:Dynamicweb.Ecommerce.Shops.Shop"/>, or <c>null</c> if the shop was not found.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopService.GetShopLanguages(System.String)">
 <summary>
 Gets the shop languages.
 </summary>
 <param name="shopId">The shop ID.</param>
 <returns>The instance of the <see cref="T:Dynamicweb.Ecommerce.International.LanguageCollection"/>, that contains all languages for the shop.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopService.ClearCache">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Shops.ShopService.DeleteShopRelations(Dynamicweb.Ecommerce.Shops.Shop)">
 <summary>
 Deletes related groups and stock locations.
 </summary>
 <param name="shop">The shop.</param>
 <returns><c>True</c>, if all groups were removed.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.ShopType">
 <summary>
 The shop types enumeration
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Statistics.Country">
 <summary>
 Represents the country statistics.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Country.DateFrom">
 <summary>
 Gets or sets start date value for statistics viewing period.
 </summary> 
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Country.DateTo">
 <summary>
 Gets or sets end date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Country.Currency">
 <summary>
 Gets or sets current currency value.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Country.Language">
 <summary>
 Gets or sets the language value for statistic filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Country.Shop">
 <summary>
 Gets or sets shop value for statistics filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Country.XAxisColumn">
 <summary>
 Gets the X-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Country.YAxisColumn">
 <summary>
 Gets the Y-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Country.ColorColumn">
 <summary>
 Gets the color column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Country.Prefix">
 <summary>
 Gets the prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Country.DefaultGraph">
 <summary>
 Gets the default graph type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Country.Data">
 <summary>
 Gets the data table.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.Country.GetOptions(System.String)">
 <summary>
 Implements <see cref="M:Dynamicweb.Extensibility.Editors.IDropDownOptions.GetOptions(System.String)">IDropDownOptions.GetOptions</see> method, and used for DropDownLists control.
 </summary>
 <param name="Name">Specified current control name.</param>
 <returns>Hashtable with specified control options.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Statistics.Currency">
 <summary>
 Represents the currency statistic.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Currency.DateFrom">
 <summary>
 Gets or sets start date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Currency.DateTo">
 <summary>
 Gets or sets end date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Currency.Shop">
 <summary>
 Gets or sets shop value for statistics filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Currency.XAxisColumn">
 <summary>
 Gets the X-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Currency.YAxisColumn">
 <summary>
 Gets the Y-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Currency.ColorColumn">
 <summary>
 Gets the color column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Currency.Prefix">
 <summary>
 Gets the prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Currency.DefaultGraph">
 <summary>
 Gets the default graph type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Currency.Data">
 <summary>
 Gets the data table.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.Currency.GetOptions(System.String)">
 <summary>
 Implements <see cref="M:Dynamicweb.Extensibility.Editors.IDropDownOptions.GetOptions(System.String)">IDropDownOptions.GetOptions</see> method, and used for DropDownLists control.
 </summary>
 <param name="Name">Specified current control name.</param>
 <returns>Hashtable with specified control options.</returns> 
</member>
<member name="T:Dynamicweb.Ecommerce.Statistics.DefaultMyPage">
 <summary>
 Class contains functions for Order profit statistics handling.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.DefaultMyPage.DateFrom">
 <summary>
 Gets or sets start date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.DefaultMyPage.DateTo">
 <summary>
 Gets or sets end date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.DefaultMyPage.Currency">
 <summary>
 Gets or sets current currency value.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.DefaultMyPage.Shop">
 <summary>
 Gets or sets shop value for statistics filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.DefaultMyPage.XAxisColumn">
 <summary>
 Gets the X-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.DefaultMyPage.YAxisColumn">
 <summary>
 Gets the Y-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.DefaultMyPage.ColorColumn">
 <summary>
 Gets the color column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.DefaultMyPage.Url">
 <summary>
 
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.DefaultMyPage.StatisticCurrency">
 <summary>
 Gets or sets the statistic currency.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.DefaultMyPage.Data">
 <summary>
 Gets the data table.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.DefaultMyPage.DataList">
 <summary>
 Gets the data list.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.DefaultMyPage.GetOptions(System.String)">
 <summary>
 Implements <see cref="M:Dynamicweb.Extensibility.Editors.IDropDownOptions.GetOptions(System.String)">IDropDownOptions.GetOptions</see> method, and used for DropDownLists control.
 </summary>
 <param name="Name">Specified current control name.</param>
 <returns>Hashtable with specified control options.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.DefaultMyPage.CollectDataGraph">
 <summary>
 Collects data from the database for DefaultMyPage.
 </summary>
 <returns>Data table with order statistics.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.DefaultMyPage.SqlGlobal">
 <summary>
 Returns SQL string for statistics select.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Statistics.FrequentlyBoughtItems">
 <summary>
 Represents the statistics about the frequently buys items.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.FrequentlyBoughtItems.DateFrom">
 <summary>
 Gets or sets start date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.FrequentlyBoughtItems.DateTo">
 <summary>
 Gets or sets end date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.FrequentlyBoughtItems.Language">
 <summary>
 Gets or sets the language value for statistic filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.FrequentlyBoughtItems.Currency">
 <summary>
 Gets or sets current currency value.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.FrequentlyBoughtItems.XAxisColumn">
 <summary>
 Gets the X-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.FrequentlyBoughtItems.YAxisColumn">
 <summary>
 Gets the Y-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.FrequentlyBoughtItems.ColorColumn">
 <summary>
 Gets the color column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.FrequentlyBoughtItems.Prefix">
 <summary>
 Gets the prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.FrequentlyBoughtItems.DefaultGraph">
 <summary>
 Gets the default graph type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.FrequentlyBoughtItems.Data">
 <summary>
 Gets the data table.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.FrequentlyBoughtItems.GetOptions(System.String)">
 <summary>
 Implements <see cref="M:Dynamicweb.Extensibility.Editors.IDropDownOptions.GetOptions(System.String)">IDropDownOptions.GetOptions</see> method, and used for DropDownLists control.
 </summary>
 <param name="Name">Specified current control name.</param>
 <returns>Hashtable with specified control options.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Statistics.GraphType">
 <summary>
 Represents the graph types.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Statistics.GraphType.Line">
 <summary>
 Line type = 0
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Statistics.GraphType.Pie">
 <summary>
 Pie type = 1
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Statistics.GraphType.Column">
 <summary>
 Column type = 2
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Statistics.MostCriticalItems">
 <summary>
 Represents the statistic about the most critical items.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostCriticalItems.ParentGroup">
 <summary>
 Gets or set the parent group.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostCriticalItems.SubGroups">
 <summary>
 gets or sets the sub groups.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostCriticalItems.Language">
 <summary>
 Gets or sets the language value for statistic filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostCriticalItems.Shop">
 <summary>
 Gets or sets shop value for statistics filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostCriticalItems.XAxisColumn">
 <summary>
 Gets the X-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostCriticalItems.YAxisColumn">
 <summary>
 Gets the Y-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostCriticalItems.ColorColumn">
 <summary>
 Gets the color column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostCriticalItems.Prefix">
 <summary>
 Gets the prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostCriticalItems.DefaultGraph">
 <summary>
 Gets the default graph type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostCriticalItems.Data">
 <summary>
 Gets the data table.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.MostCriticalItems.GetOptions(System.String)">
 <summary>
 Implements <see cref="M:Dynamicweb.Extensibility.Editors.IDropDownOptions.GetOptions(System.String)">IDropDownOptions.GetOptions</see> method, and used for DropDownLists control.
 </summary>
 <param name="Name">Specified current control name.</param>
 <returns>Hashtable with specified control options.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.MostCriticalItems.GetSubGroups(Dynamicweb.Ecommerce.Products.Group,Dynamicweb.Ecommerce.Shops.Shop,System.String,System.Int32)">
 <summary>
 Gets the subgroups.
 </summary>
 <param name="group">The group.</param>
 <param name="shop">The shop.</param>
 <param name="groupIds">Subgroup ids.</param>
 <param name="counter">The counter.</param>
 <returns>Subgroup ids.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Statistics.MostViewedProducts">
 <summary>
 Represents the statistics about the most viewed products.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostViewedProducts.DateFrom">
 <summary>
 Gets or sets start date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostViewedProducts.DateTo">
 <summary>
 Gets or sets end date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostViewedProducts.ParentGroup">
 <summary>
 Gets or sets the parent group.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostViewedProducts.SubGroups">
 <summary>
 Gets or sets the sub group.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostViewedProducts.Language">
 <summary>
 Gets or sets the language value for statistic filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostViewedProducts.Shop">
 <summary>
 Gets or sets shop value for statistics filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostViewedProducts.XAxisColumn">
 <summary>
 Gets the X-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostViewedProducts.YAxisColumn">
 <summary>
 Gets the Y-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostViewedProducts.ColorColumn">
 <summary>
 Gets the color column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostViewedProducts.Prefix">
 <summary>
 Gets the prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostViewedProducts.DefaultGraph">
 <summary>
 Gets the default graph type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.MostViewedProducts.Data">
 <summary>
 Gets the data table.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.MostViewedProducts.GetOptions(System.String)">
 <summary>
 Implements <see cref="M:Dynamicweb.Extensibility.Editors.IDropDownOptions.GetOptions(System.String)">IDropDownOptions.GetOptions</see> method, and used for DropDownLists control.
 </summary>
 <param name="Name">Specified current control name.</param>
 <returns>Hashtable with specified control options.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.MostViewedProducts.GetSubGroups(Dynamicweb.Ecommerce.Products.Group,Dynamicweb.Ecommerce.Shops.Shop,System.String,System.Int32)">
 <summary>
 Gets the subgroups.
 </summary>
 <param name="group">The group.</param>
 <param name="shop">The shop.</param>
 <param name="groupIds">Subgroup ids.</param>
 <param name="counter">The counter.</param>
 <returns>Subgroup ids.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Statistics.OrderProfit">
 <summary>
 Class contains functions for Order profit statistics handling.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderProfit.DateFrom">
 <summary>
 Gets or sets start date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderProfit.DateTo">
 <summary>
 Gets or sets end date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderProfit.Currency">
 <summary>
 Gets or sets current currency value.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderProfit.Shop">
 <summary>
 Gets or sets shop value for statistics filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderProfit.XAxisColumn">
 <summary>
 Gets the X-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderProfit.YAxisColumn">
 <summary>
 Gets the Y-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderProfit.ColorColumn">
 <summary>
 Gets the color column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderProfit.Prefix">
 <summary>
 Gets the prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderProfit.StatisticCurrency">
 <summary>
 Gets or sets the statistic currency.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderProfit.Data">
 <summary>
 Gets the data table.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderProfit.Info">
 <summary>
 Gets current order profit statistics information.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.OrderProfit.GetOptions(System.String)">
 <summary>
 Implements <see cref="M:Dynamicweb.Extensibility.Editors.IDropDownOptions.GetOptions(System.String)">IDropDownOptions.GetOptions</see> method, and used for DropDownLists control.
 </summary>
 <param name="Name">Specified current control name.</param>
 <returns>Hashtable with specified control options.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.OrderProfit.SqlGlobal">
 <summary>
 Returns SQL string for statistics select.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Ecommerce.Statistics.OrderShippingPrice">
 <summary>
 Represents the statistics about order shipping price.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderShippingPrice.DateFrom">
 <summary>
 Gets or sets start date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderShippingPrice.DateTo">
 <summary>
 Gets or sets end date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderShippingPrice.Shop">
 <summary>
 Gets or sets shop value for statistics filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderShippingPrice.Language">
 <summary>
 Gets or sets the language value for statistic filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderShippingPrice.XAxisColumn">
 <summary>
 Gets the X-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderShippingPrice.YAxisColumn">
 <summary>
 Gets the Y-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderShippingPrice.ColorColumn">
 <summary>
 Gets the color column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderShippingPrice.Prefix">
 <summary>
 Gets the prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderShippingPrice.DefaultGraph">
 <summary>
 Gets the default graph type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.OrderShippingPrice.Data">
 <summary>
 Gets the data table.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.OrderShippingPrice.GetOptions(System.String)">
 <summary>
 Implements <see cref="M:Dynamicweb.Extensibility.Editors.IDropDownOptions.GetOptions(System.String)">IDropDownOptions.GetOptions</see> method, and used for DropDownLists control.
 </summary>
 <param name="Name">Specified current control name.</param>
 <returns>Hashtable with specified control options.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Statistics.Payment">
 <summary>
 Represents the payment statistics.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Payment.DateFrom">
 <summary>
 Gets or sets start date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Payment.DateTo">
 <summary>
 Gets or sets end date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Payment.Currency">
 <summary>
 Gets or sets current currency value.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Payment.Shop">
 <summary>
 Gets or sets shop value for statistics filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Payment.XAxisColumn">
 <summary>
 Gets the X-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Payment.YAxisColumn">
 <summary>
 Gets the Y-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Payment.ColorColumn">
 <summary>
 Gets the color column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Payment.Prefix">
 <summary>
 Gets the prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Payment.DefaultGraph">
 <summary>
 Gets the default graph type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Payment.Data">
 <summary>
 Gets the data table.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.Payment.GetOptions(System.String)">
 <summary>
 Implements <see cref="M:Dynamicweb.Extensibility.Editors.IDropDownOptions.GetOptions(System.String)">IDropDownOptions.GetOptions</see> method, and used for DropDownLists control.
 </summary>
 <param name="Name">Specified current control name.</param>
 <returns>Hashtable with specified control options.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Statistics.ProductGroupCount">
 <summary>
 Represents the product group statistics.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.ProductGroupCount.ParentGroup">
 <summary>
 Gets or sets the parent group.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.ProductGroupCount.SubGroups">
 <summary>
 Gets or sets the sub groups.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.ProductGroupCount.Language">
 <summary>
 Gets or sets the language value for statistic filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.ProductGroupCount.Shop">
 <summary>
 Gets or sets shop value for statistics filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.ProductGroupCount.XAxisColumn">
 <summary>
 Gets the X-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.ProductGroupCount.YAxisColumn">
 <summary>
 Gets the Y-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.ProductGroupCount.ColorColumn">
 <summary>
 Gets the color column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.ProductGroupCount.Prefix">
 <summary>
 Gets the prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.ProductGroupCount.DefaultGraph">
 <summary>
 Gets the default graph type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.ProductGroupCount.Data">
 <summary>
 Gets the data table.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.ProductGroupCount.Info">
 <summary>
 Gets current order profit statistics information.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.ProductGroupCount.GroupCount">
 <summary>
 Gets or sets the group count.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.ProductGroupCount.ProductCount">
 <summary>
 Gets or sets the product count.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.ProductGroupCount.GetOptions(System.String)">
 <summary>
 Implements <see cref="M:Dynamicweb.Extensibility.Editors.IDropDownOptions.GetOptions(System.String)">IDropDownOptions.GetOptions</see> method, and used for DropDownLists control.
 </summary>
 <param name="Name">Specified current control name.</param>
 <returns>Hashtable with specified control options.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.ProductGroupCount.GetSubGroups(Dynamicweb.Ecommerce.Products.Group,Dynamicweb.Ecommerce.Shops.Shop,System.String,System.Int32)">
 <summary>
 Gets the subgroups.
 </summary>
 <param name="group">The group.</param>
 <param name="shop">The shop.</param>
 <param name="groupIds">Subgroup ids.</param>
 <param name="counter">The counter.</param>
 <returns>Subgroup ids.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Statistics.Shipment">
 <summary>
 Represents the shipment statistics.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Shipment.DateFrom">
 <summary>
 Gets or sets start date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Shipment.DateTo">
 <summary>
 Gets or sets end date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Shipment.Currency">
 <summary>
 Gets or sets current currency value.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Shipment.Shop">
 <summary>
 Gets or sets shop value for statistics filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Shipment.XAxisColumn">
 <summary>
 Gets the X-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Shipment.YAxisColumn">
 <summary>
 Gets the Y-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Shipment.ColorColumn">
 <summary>
 Gets the color column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Shipment.Prefix">
 <summary>
 Gets the prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Shipment.DefaultGraph">
 <summary>
 Gets the default graph type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.Shipment.Data">
 <summary>
 Gets the data table.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.Shipment.GetOptions(System.String)">
 <summary>
 Implements <see cref="M:Dynamicweb.Extensibility.Editors.IDropDownOptions.GetOptions(System.String)">IDropDownOptions.GetOptions</see> method, and used for DropDownLists control.
 </summary>
 <param name="Name">Specified current control name.</param>
 <returns>Hashtable with specified control options.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Statistics.StatisticsProvider">
 <summary>
 Class used as base class inherited by other classes for eCom statistics handling.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.StatisticsProvider.XAxisColumn">
 <summary>
 Gets the X-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.StatisticsProvider.YAxisColumn">
 <summary>
 Gets the Y-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.StatisticsProvider.ColorColumn">
 <summary>
 Gets the color column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.StatisticsProvider.Prefix">
 <summary>
 Gets the prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.StatisticsProvider.Url">
 <summary>
 Gets the URL.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.StatisticsProvider.Data">
 <summary>
 Gets the data table.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.StatisticsProvider.DataList">
 <summary>
 Returns current statistics data NOT used in graph.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.StatisticsProvider.Info">
 <summary>
 Gets current order profit statistics information.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.StatisticsProvider.XmlData">
 <summary>
 Returns statistics data as XML string.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.StatisticsProvider.DefaultGraph">
 <summary>
 Gets the default graph type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.StatisticsProvider.StatisticCurrency">
 <summary>
 Gets or sets current currency value.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Statistics.TotalOrders">
 <summary>
 Represents the total orders statistics.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalOrders.DateFrom">
 <summary>
 Gets or sets start date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalOrders.DateTo">
 <summary>
 Gets or sets end date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalOrders.Currency">
 <summary>
 Gets or sets current currency value.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalOrders.Shop">
 <summary>
 Gets or sets shop value for statistics filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalOrders.XAxisColumn">
 <summary>
 Gets the X-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalOrders.YAxisColumn">
 <summary>
 Gets the Y-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalOrders.ColorColumn">
 <summary>
 Gets the color column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalOrders.Prefix">
 <summary>
 Gets the prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalOrders.Data">
 <summary>
 Gets the data table.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.TotalOrders.GetOptions(System.String)">
 <summary>
 Implements <see cref="M:Dynamicweb.Extensibility.Editors.IDropDownOptions.GetOptions(System.String)">IDropDownOptions.GetOptions</see> method, and used for DropDownLists control.
 </summary>
 <param name="Name">Specified current control name.</param>
 <returns>Hashtable with specified control options.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Statistics.TotalProductSale">
 <summary>
 Represents the total product sale statistics.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalProductSale.DateFrom">
 <summary>
 Gets or sets start date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalProductSale.DateTo">
 <summary>
 Gets or sets end date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalProductSale.TopCounter">
 <summary>
 Gets or sets the top count.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalProductSale.Language">
 <summary>
 Gets or sets the language value for statistic filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalProductSale.Currency">
 <summary>
 Gets or sets current currency value.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalProductSale.Shop">
 <summary>
 Gets or sets shop value for statistics filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalProductSale.XAxisColumn">
 <summary>
 Gets the X-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalProductSale.YAxisColumn">
 <summary>
 Gets the Y-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalProductSale.ColorColumn">
 <summary>
 Gets the color column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalProductSale.Prefix">
 <summary>
 Gets the prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalProductSale.DefaultGraph">
 <summary>
 Gets the default graph type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalProductSale.Data">
 <summary>
 Gets the data table.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.TotalProductSale.GetOptions(System.String)">
 <summary>
 Implements <see cref="M:Dynamicweb.Extensibility.Editors.IDropDownOptions.GetOptions(System.String)">IDropDownOptions.GetOptions</see> method, and used for DropDownLists control.
 </summary>
 <param name="Name">Specified current control name.</param>
 <returns>Hashtable with specified control options.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Statistics.TotalVAT">
 <summary>
 Represents the VAT statistics.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalVAT.DateFrom">
 <summary>
 Gets or sets start date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalVAT.DateTo">
 <summary>
 Gets or sets end date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalVAT.Shop">
 <summary>
 Gets or sets shop value for statistics filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalVAT.Language">
 <summary>
 Gets or sets the language value for statistic filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalVAT.XAxisColumn">
 <summary>
 Gets the X-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalVAT.YAxisColumn">
 <summary>
 Gets the Y-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalVAT.ColorColumn">
 <summary>
 Gets the color column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalVAT.Prefix">
 <summary>
 Gets the prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalVAT.DefaultGraph">
 <summary>
 Gets the default graph type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TotalVAT.Data">
 <summary>
 Gets the data table.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.TotalVAT.GetOptions(System.String)">
 <summary>
 Implements <see cref="M:Dynamicweb.Extensibility.Editors.IDropDownOptions.GetOptions(System.String)">IDropDownOptions.GetOptions</see> method, and used for DropDownLists control.
 </summary>
 <param name="Name">Specified current control name.</param>
 <returns>Hashtable with specified control options.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Statistics.TrafficSourceToSale">
 <summary>
 Represents the trafic source to the sale statistics.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TrafficSourceToSale.DateFrom">
 <summary>
 Gets or sets start date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TrafficSourceToSale.DateTo">
 <summary>
 Gets or sets end date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TrafficSourceToSale.Language">
 <summary>
 Gets or sets the language value for statistic filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TrafficSourceToSale.Shop">
 <summary>
 Gets or sets shop value for statistics filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TrafficSourceToSale.XAxisColumn">
 <summary>
 Gets the X-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TrafficSourceToSale.YAxisColumn">
 <summary>
 Gets the Y-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TrafficSourceToSale.ColorColumn">
 <summary>
 Gets the color column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TrafficSourceToSale.Prefix">
 <summary>
 Gets the prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TrafficSourceToSale.DefaultGraph">
 <summary>
 Gets the default graph type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TrafficSourceToSale.Data">
 <summary>
 Gets the data table.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TrafficSourceToSale.Info">
 <summary>
 Gets current order profit statistics information.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TrafficSourceToSale.GroupCount">
 <summary>
 Gets or sets the group count.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TrafficSourceToSale.ProductCount">
 <summary>
 Gets or sets the product count.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.TrafficSourceToSale.GetOptions(System.String)">
 <summary>
 Implements <see cref="M:Dynamicweb.Extensibility.Editors.IDropDownOptions.GetOptions(System.String)">IDropDownOptions.GetOptions</see> method, and used for DropDownLists control.
 </summary>
 <param name="Name">Specified current control name.</param>
 <returns>Hashtable with specified control options.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Statistics.TurnoverBasedOnDeviceType">
 <summary>
 Represents the turnover based on device type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TurnoverBasedOnDeviceType.DateFrom">
 <summary>
 Gets or sets start date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TurnoverBasedOnDeviceType.DateTo">
 <summary>
 Gets or sets end date value for statistics viewing period.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TurnoverBasedOnDeviceType.Shop">
 <summary>
 Gets or sets shop value for statistics filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TurnoverBasedOnDeviceType.Language">
 <summary>
 Gets or sets the language value for statistic filter.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TurnoverBasedOnDeviceType.XAxisColumn">
 <summary>
 Gets the X-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TurnoverBasedOnDeviceType.YAxisColumn">
 <summary>
 Gets the Y-axis column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TurnoverBasedOnDeviceType.ColorColumn">
 <summary>
 Gets the color column name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TurnoverBasedOnDeviceType.Prefix">
 <summary>
 Gets the prefix.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TurnoverBasedOnDeviceType.DefaultGraph">
 <summary>
 Gets the default graph type.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TurnoverBasedOnDeviceType.Data">
 <summary>
 Gets the data table.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TurnoverBasedOnDeviceType.Info">
 <summary>
 Gets current order profit statistics information.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TurnoverBasedOnDeviceType.GroupCount">
 <summary>
 Gets or sets the group count.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Statistics.TurnoverBasedOnDeviceType.ProductCount">
 <summary>
 Gets or sets the product count.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.TurnoverBasedOnDeviceType.GetOptions(System.String)">
 <summary>
 Implements <see cref="M:Dynamicweb.Extensibility.Editors.IDropDownOptions.GetOptions(System.String)">IDropDownOptions.GetOptions</see> method, and used for DropDownLists control.
 </summary>
 <param name="Name">Specified current control name.</param>
 <returns>Hashtable with specified control options.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Statistics.TurnoverBasedOnDeviceType.GetSubGroups(Dynamicweb.Ecommerce.Products.Group,Dynamicweb.Ecommerce.Shops.Shop,System.String,System.Int32)">
 <summary>
 Gets the subgroups.
 </summary>
 <param name="group">The group.</param>
 <param name="shop">The shop.</param>
 <param name="groupIds">Subgroup ids.</param>
 <param name="counter">The counter.</param>
 <returns>Subgroup ids.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.DefaultStockLevelProvider">
 <summary>
 Represents a default stock level provider.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.DefaultStockLevelProvider.FindStockLevel(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Finds the stock level of a product.
 </summary>
 <param name="product">The product.</param>
 <returns>The stock level of a product.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.DefaultStockLocationProvider">
 <summary>
 Represents a default stock provider.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.DefaultStockLocationProvider.FindStocks(Dynamicweb.Ecommerce.Orders.OrderLine)">
 <summary>
 Finds the stock.
 </summary>
 <param name="orderLine">The order line.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockLocation"/>.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.StockGroup">
 <summary>
 Represents the stock group.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockGroup.Id">
 <summary>
 Gets or sets the id.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws exception when the stock group in readonly mode.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockGroup.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws exception when the stock group in readonly mode.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockGroup.StockStatuses">
 <summary>
 Gets or sets the stock statuses.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws exception when the stock group in readonly mode.</exception>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockGroup.#ctor(System.String)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockGroup.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockGroup.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockGroup.Fill(System.Data.IDataReader)">
 <summary>
 Fills the class properties.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockGroup.Save(System.String)">
 <summary>
 Saves the stock group.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockGroup.Delete">
 <summary>
 Deletes the stock group.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockGroup.Delete(System.String)">
 <summary>
 Deletes the stock group.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockGroup.Copy">
 <summary>
 Copies the stock group.
 </summary>
 <returns>New instance of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockGroup.Clone">
 <summary>
 Clones the stock group.
 </summary>
 <returns>New instance of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockGroup.Lock">
 <summary>
 Locks the stock group (Readonly mode).
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockGroup.GetStockGroups">
 <summary>
 Gets the stock groups.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockGroup"/>.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.StockGroupCollection">
 <summary>
 Represents the collection of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockGroup"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockGroupCollection.Load(System.String)">
 <summary>
 Loads the items.
 </summary>
 <param name="sql">The SQL query.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.StockLevelManager">
 <summary>
 Represents a stock level manager.
 </summary> 
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLevelManager.FindStockLevel(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Finds the stock level of a product.
 </summary>
 <param name="product">The product.</param>
 <returns>The stock level of a product.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.StockLevelProvider">
 <summary>
 Represents a stock level provider.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLevelProvider.FindStockLevel(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Finds the stock level of product.
 </summary>
 <param name="product">The product.</param> 
 <returns>The stock level.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.StockLocation">
 <summary>
 Represents the stock location.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.#ctor">
 <summary>
 Initializes a new instance of the class. 
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.Save">
 <summary>
 Saves current data to the database.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.Delete(System.Int64)">
 <summary>
 Deletes the object with specified ID.
 </summary>
 <param name="id">Specified ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.GetStockLocationsByGroupId(System.Int64)">
 <summary>
 Gets the stock locations by group id.
 </summary>
 <param name="groupId">The id of stock location group.</param>
 <returns>The stock locations.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.GetStockLocationsByLanguageId(System.String)">
 <summary>
 Gets the stock locations by language id.
 </summary>
 <param name="languageId">The id of language.</param>
 <returns>The stock location.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.GetStockLocationByIdFromCache(Dynamicweb.Ecommerce.Products.Product,System.Int64)">
 <summary>
 Gets the stock location by id.
 </summary>
 <param name="stockLocationId">The id of stock location.</param>
 <returns>The stock location.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.GetStockLocationsFromCache(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Gets the stock location by id.
 </summary>
 <returns>The stock locations from cache.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.GetStockLocationsByLanguageIdAndProduct(Dynamicweb.Ecommerce.Products.Product,System.String)">
 <summary>
 Gets the stock locations by language id and product id.
 </summary>
 <returns>The collection of all stock location.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.GetStockLocationByIdAndLanguage(System.Int64,System.String)">
 <summary>
 Gets the stock location by id.
 </summary>
 <param name="id">The id of stock location.</param>
 <returns>The stock location.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.GetStockLocationById(System.Int64)">
 <summary>
 Gets the stock location by id.
 </summary>
 <param name="id">The id of stock location.</param>
 <returns>The stock location.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.GetStockLocations">
 <summary>
 Gets the stock locations.
 </summary>
 <returns>The collection of all stock location.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.GetStockLocations(System.Boolean)">
 <summary>
 Gets the stock locations.
 </summary>
 <returns>The collection of all stock location.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.GetStockLocationsFilteredByLanguage(System.String,System.String)">
 <summary>
 Gets the stock locations.
 </summary>
 <returns>The collection of all stock location.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.SaveRelation(System.String,System.Int64)">
 <summary>
 Saves the relation.
 </summary>
 <param name="shopId">The shop id.</param>
 <param name="stockLocationId">The stck location id.</param>
 <returns><c>True</c>, if saving is successful, otherwise, <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.DeleteRelation(System.String,System.Int64)">
 <summary>
 Deletes the relation.
 </summary>
 <param name="shopId">The shop id.</param>
 <param name="stockLocationId">The stock location id.</param>
 <returns><c>True</c>, if deleting is successful, otherwise, <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.DeleteAllRelationFromShop(System.String)">
 <summary>
 Deletes all relations for the shop.
 </summary>
 <param name="shopId">The shop id.</param>
 <returns><c>True</c>, if deleting is successful, otherwise, <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.DeleteStockRelations">
 <summary>
 Delete relations to the stock location.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.GetRelationByShopID(System.String)">
 <summary>
 Gets the relations.
 </summary>
 <param name="shopId">The shop id.</param>
 <returns>The relations.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocation.GetStockLocationBySql(System.String)">
 <summary>
 Gets the stock location by SQL.
 </summary>
 <param name="sql">The SQL query.</param>
 <returns>The collection of stock location.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.StockLocationCollection">
 <summary>
 Represents the collection of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockLocation"/>.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.StockLocationCollection.Comparer">
 <summary>
 Represents a collection element comparer.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockLocationCollection.Comparer.Comparison">
 <summary>
 Gets or sets the comparison.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocationCollection.Comparer.#ctor(System.Comparison{Dynamicweb.Ecommerce.Stocks.StockLocation})">
 <summary>
 Initializes a new instance of an object.
 </summary>
 <param name="comparison">Comparison.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="comparison">comparison</paramref> is null.</exception>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocationCollection.Comparer.Compare(Dynamicweb.Ecommerce.Stocks.StockLocation,Dynamicweb.Ecommerce.Stocks.StockLocation)">
 <summary>
 Compares two objects and returns the comparison result.
 </summary>
 <param name="x">First object.</param>
 <param name="y">Second object.</param>
 <returns>Comparison result.</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockLocationCollection.Data">
 <summary>
 Gets the underlying data storage.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocationCollection.Sort(System.Comparison{Dynamicweb.Ecommerce.Stocks.StockLocation})">
 <summary>
 Sorts elements according to the given comparison.
 </summary>
 <param name="comparison">Comparison.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocationCollection.Sort(System.Collections.Generic.IComparer{Dynamicweb.Ecommerce.Stocks.StockLocation})">
 <summary>
 Sorts elements according to the given comparer.
 </summary>
 <param name="comparer">Comparer.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocationCollection.SortByOrder(System.String)">
 <summary>
 Sorts emails by a name (ascending).
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.StockLocationManager">
 <summary>
 Represents a stock location manager. Provides prepares and finds stock locations.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocationManager.UpdateStock(Dynamicweb.Ecommerce.Orders.OrderLine,Dynamicweb.Ecommerce.Products.ProductOrderStockOperator)">
 <summary>
 Updates the stock.
 </summary>
 <param name="orderLine">The order line.</param>
 <param name="stockOperator">The operator.</param>
 <returns>Whether stock was updated or not.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocationManager.FindStocks(Dynamicweb.Ecommerce.Orders.OrderLine)">
 <summary>
 Find stocks for order line
 </summary>
 <param name="orderLine"></param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.StockLocationProvider">
 <summary>
 Represents a stock provider. 
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockLocationProvider.FindStocks(Dynamicweb.Ecommerce.Orders.OrderLine)">
 <summary>
 Finds the stock.
 </summary>
 <param name="orderLine">The order line.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockLocation"/>.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.StockStatus">
 <summary>
 Represents the stock status.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatus.StockStatusLineId">
 <summary>
 Gets or sets the stock status line id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatus.StockStatusLanguageValueId">
 <summary>
 Gets or sets the stock status language value id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatus.Id">
 <summary>
 Gets or sets the id.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws exception when the stock group in readonly mode.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatus.LanguageId">
 <summary>
 Gets or sets the language id.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws exception when the stock group in readonly mode.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatus.GroupId">
 <summary>
 Gets or sets the group id.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws exception when the stock group in readonly mode.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatus.Text">
 <summary>
 Gets or sets the text.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws exception when the stock group in readonly mode.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatus.Icon">
 <summary>
 Gets or sets the icon.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws exception when the stock group in readonly mode.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatus.Rate">
 <summary>
 Gets or sets the rate.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatus.Definition">
 <summary>
 Gets or sets the definition.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws exception when the stock group in readonly mode.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatus.ExpectedDeliveryValue">
 <summary>
 Gets or sets the expected delivery value.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws exception when the stock group in readonly mode.</exception>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatus.ExpectedDeliveryText">
 <summary>
 Gets or sets the expected delivery text.
 </summary>
 <exception cref="T:System.Data.ReadOnlyException">Setter throws exception when the stock group in readonly mode.</exception>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatus.#ctor(System.String)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatus.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatus.Save(System.String)">
 <summary>
 Saves the stock status.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatus.Delete">
 <summary>
 Deletes the stock status.
 </summary>
 <remarks>Only default language has delete button. If stock status is removed same satus on other languages has to be removed first.</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatus.Copy">
 <summary>
 Copies the stock status.
 </summary>
 <returns>New instance of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockStatus"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatus.Clone">
 <summary>
 Clones the stock status.
 </summary>
 <returns>New instance of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockStatus"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatus.Lock">
 <summary>
 Locks the stock status (Readonly mode).
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatus.GetStockStatuses(System.String,System.Boolean,System.String)">
 <summary>
 Gets the stock statuses.
 </summary>
 <param name="statusGroupID">The group id.</param>
 <param name="orderBy">The sort direction.</param>
 <param name="language">The language.</param>
 <returns>The collection of the stock statuses.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.StockStatusCollection">
 <summary>
 Represents the collection of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockStatus"/>
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue">
 <summary>
 Represents the stock status language value.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.Id">
 <summary>
 Gets or sets the id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.LineId">
 <summary>
 Gets or sets the line id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.LanguageId">
 <summary>
 Gets or sets the language id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.Text">
 <summary>
 Gets or sets the text.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.DeliveryValue">
 <summary>
 Gets or sets the delivery value.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.DeliveryText">
 <summary>
 Gets or sets the delivery text.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.#ctor(System.String)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.Load(System.String)">
 <summary>
 Fills the class properties.
 </summary>
 <param name="sql">The SQL query.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.Fill(System.Data.IDataReader)">
 <summary>
 Fills the class properties.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.Save">
 <summary>
 Saves this instanse.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.Save(System.String)">
 <summary>
 Saves this instanse.
 </summary>
 <param name="languageValueId">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.Delete">
 <summary>
 Deletes this instanse.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.Delete(System.String)">
 <summary>
 Deletes this instance.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.Copy">
 <summary>
 Copies this instance.
 </summary>
 <returns>New instance of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue"/></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.Clone">
 <summary>
 Clones this instance.
 </summary>
 <returns>New instance of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue"/></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.GetStockStatusValuesById(System.String)">
 <summary>
 Gets the stock status value.
 </summary>
 <param name="id">The id.</param>
 <returns>The stock status value.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.GetStockStatusValuesForAllLanguages(System.String)">
 <summary>
 Gets the stock status values for all languages.
 </summary>
 <param name="lineId">The line id.</param>
 <returns>The stock status values.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue.GetStockStatusValues(System.String,System.String)">
 <summary>
 Gets the stock status values.
 </summary>
 <param name="language">The language.</param>
 <param name="lineId">The line id.</param>
 <returns>The stock status values.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValueCollection">
 <summary>
 Represents the collection of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValue"/>
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLanguageValueCollection.Load(System.String)">
 <summary>
 Loads the items.
 </summary>
 <param name="sql">The SQL query.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.StockStatusLine">
 <summary>
 Represents the stock status line.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatusLine.Id">
 <summary>
 Gets or sets the id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatusLine.GroupId">
 <summary>
 Gets or sets the group id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatusLine.Rate">
 <summary>
 Gets or sets the rate.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatusLine.Definition">
 <summary>
 Gets or sets the definition.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockStatusLine.Icon">
 <summary>
 Gets or sets the icon.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLine.#ctor(System.String)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLine.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLine.#ctor(System.String,System.Object)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="sql">The SQL query.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLine.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLine.Fill(System.Data.IDataReader)">
 <summary>
 Fills the class properties.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLine.Save(System.String)">
 <summary>
 Saves the stock status.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLine.Delete">
 <summary>
 Deletes the stock status.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLine.Delete(System.String)">
 <summary>
 Deletes the stock status.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLine.Copy">
 <summary>
 Copies the stock status.
 </summary>
 <returns>New instance of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockStatusLine"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLine.Clone">
 <summary>
 Clones the stock status.
 </summary>
 <returns>New instance of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockStatusLine"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLine.GetStockStatuses(System.String,System.Boolean)">
 <summary>
 Gets the stock statuses.
 </summary>
 <param name="statusGroupId">The group id.</param>
 <param name="orderBy">The sort direction.</param>
 <returns>The stock statuses.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.StockStatusLineCollection">
 <summary>
 Represents th collection of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockStatusLine"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockStatusLineCollection.Load(System.String)">
 <summary>
 Loads the items.
 </summary>
 <param name="sql">The SQL query.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.StockUnit">
 <summary>
 Represents the stock unit.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockUnit.ProductId">
 <summary>
 Gets or sets the product id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockUnit.VariantId">
 <summary>
 Gets or sets the variant id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockUnit.UnitId">
 <summary>
 Gets or sets the unit id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockUnit.StockQuantity">
 <summary>
 Gets or sets the stock quantity.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockUnit.Weight">
 <summary>
 Gets or sets the weight.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockUnit.Volume">
 <summary>
 Gets or sets the volume.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockUnit.StockLocationId">
 <summary>
 Gets or sets the stock location id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockUnit.Description">
 <summary>
 Gets or sets a description of the unit for this product.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Stocks.StockUnit.RowId">
 <summary>
 Gets or sets the row id.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.#ctor(Dynamicweb.Ecommerce.Products.Product,System.String,System.Int64)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="product">The product.</param>
 <param name="unitId">The unit id.</param>
 <param name="stockLocationId">The stock location id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.Save(System.String,System.String,System.String)">
 <summary>
 Saves the stock unit.
 </summary>
 <param name="productId">The product id.</param>
 <param name="variantId">The variant id.</param>
 <param name="unitId">The unit id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.Save(System.Int32)">
 <summary>
 Saves the stock unit.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.Save">
 <summary>
 Saves the stock unit.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.Delete(System.String,System.String)">
 <summary>
 Deletes the stock unit.
 </summary>
 <param name="productId">The product id.</param>
 <param name="variantId">The variant id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.Delete(System.Int32)">
 <summary>
 Deletes the stock unit.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.DeleteProductStockUnits(System.String,System.String)">
 <summary>
 Delete the product's stock units.
 </summary>
 <param name="productId">The product id.</param>
 <param name="variantId">The variant id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.DeleteProductStockUnits(System.String,System.String,System.String,System.Int64)">
 <summary>
 Delete the product's stock units.
 </summary>
 <param name="productId">The product id.</param>
 <param name="variantId">The variant id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.GetStockUnitById(System.Int32)">
 <summary>
 Gets the stock unit by the id.
 </summary>
 <param name="id">The id.</param>
 <returns>The stock unit.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.GetStockUnitTotals(Dynamicweb.Ecommerce.Products.Product,System.String)">
 <summary>
 Gets the stock unit totals.
 </summary>
 <param name="product">The product.</param>
 <param name="currrentStockUnitId">The stock unit id.</param>
 <returns>The totals.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.GetMaxRowID">
 <summary>
 Gets max row id.
 </summary>
 <returns>The max id.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.GetProductStockUnitsWithVariants(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Gets the product's and product variant's stock units.
 </summary>
 <param name="product">The product.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockUnit"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.GetProductStockUnits(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Gets the product's stock units.
 </summary>
 <param name="product">The product.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockUnit"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.GetProductStockUnits(System.String,System.String)">
 <summary>
 Gets the product's stock units.
 </summary>
 <param name="productId">The product id.</param>
 <param name="variantId">The variant id.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockUnit"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.GetProductStockUnitsSorted(System.String)">
 <summary>
 Gets sorted product's stock units.
 </summary>
 <param name="productId">The product id.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.GetProductStockUnitsSorted(System.String,System.String)">
 <summary>
 Gets sorted product's stock units.
 </summary>
 <param name="productId">The product id.</param>
 <param name="variantId">The variant id.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnit.LoadStockUnitsOnProducts(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Loads the stock units for the products.
 </summary>
 <param name="products">Product collection.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Stocks.StockUnitCollection">
 <summary>
 Represents the collection of the <see cref="T:Dynamicweb.Ecommerce.Stocks.StockUnit"/>.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Stocks.StockUnitCollection.Load(System.String)">
 <summary>
 Loads the items.
 </summary>
 <param name="sql">The SQL query.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Synchronization.ProductInfo">
 <summary>
 Product information for syncronization service.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.Id">
 <summary>
 Gets or sets the product id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.Groups">
 <summary>
 Gets or sets the product groups.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.LanguageId">
 <summary>
 Gets or sets the product labguage id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.DefaultShopId">
 <summary>
 Gets or sets the product default shop id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.Number">
 <summary>
 Gets or sets the product number.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.Name">
 <summary>
 Gets or sets the product name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.ShortDescription">
 <summary>
 Gets or sets the product short description.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.LongDescription">
 <summary>
 Gets or sets the product long description.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.Stock">
 <summary>
 Gets or sets the product stock.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.StockGroupId">
 <summary>
 Gets or sets the product stock group id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.Weight">
 <summary>
 Gets or sets the product weight.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.Volume">
 <summary>
 Gets or sets the product volume.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.VatGroupId">
 <summary>
 Gets or sets the product VAT group id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.ManufacturerId">
 <summary>
 Gets or sets the product manufacturer id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.Active">
 <summary>
 Gets or sets the product is active.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.VariantId">
 <summary>
 Gets or sets the product variant id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.ImageSmall">
 <summary>
 Gets or sets the product small image.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.ImageMedium">
 <summary>
 Gets or sets the product medium image.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.ImageLarge">
 <summary>
 Gets or sets the product large image.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.Link1">
 <summary>
 Gets or sets the product link.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.Link2">
 <summary>
 Gets or sets the product link.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.Price">
 <summary>
 Gets or sets the product price.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.Cost">
 <summary>
 Gets or sets the product cost.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.Rating">
 <summary>
 Gets or sets the product rating.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.SoldItems">
 <summary>
 Gets or sets the product sold items.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Synchronization.ProductInfo.CustomFieldValues">
 <summary>
 Gets or sets the product custom fields values.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Synchronization.ProductService">
 <summary>
 Product service.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Synchronization.ProductService.SynchronizeProduct(Dynamicweb.Ecommerce.Synchronization.ProductInfo)">
 <summary>
 Synchronizes the product.
 </summary>
 <param name="product">An instance of the <see cref="T:Dynamicweb.Ecommerce.Synchronization.ProductInfo"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Synchronization.ProductService.SynchronizeProducts(Dynamicweb.Ecommerce.Synchronization.ProductInfo[])">
 <summary>
 Synchronizes the products.
 </summary>
 <param name="products">A collection of the <see cref="T:Dynamicweb.Ecommerce.Synchronization.ProductInfo"/>.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Synchronization.SynchronizationType">
 <summary>
 Defines types of the synchronization.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Synchronization.SynchronizationType.API">
 <summary>
 Synchronize using the Dynamicweb API.
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.Synchronization.SynchronizationType.DataIntegration">
 <summary>
 Synchronize using the Data Integration module.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.UserPermissions.DataPresenceType">
 <summary>
 Defines the data presence
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.UserPermissions.DefinedRight">
 <summary>
 The DefinedRight class provides the information about defined permissions
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.UserPermissions.DefinedRight.UserName">
 <summary>
 Gets the name of the user
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.UserPermissions.DefinedRight.IsGroup">
 <summary>
 Return <c>True</c> when it is group
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.UserPermissions.DefinedRight.Value">
 <summary>
 Gets the value of the permissions
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.UserPermissions.DefinedRight.UserId">
 <summary>
 The id of the user
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.UserPermissions.DefinedRight.Granted(Dynamicweb.Ecommerce.UserPermissions.UserPermissionRights)">
 <summary>
 Gets or sets the state of the defined permissions
 </summary>
 <param name="permission">User permission</param>
</member>
<member name="P:Dynamicweb.Ecommerce.UserPermissions.DefinedRight.Permissions">
 <summary>
 Gets or sets the permissions 
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.UserPermissions.DefinedRight.CalculatedMaxPermissions">
 <summary>
 Returns the maximum possible numeric value for rights
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.DefinedRight.#ctor(System.Int32,Dynamicweb.Ecommerce.UserPermissions.UserPermissionRights,System.String,System.Boolean)">
 <summary>
 Initializes a new instance of the DefinedRight class
 </summary>
 <param name="userId">The id of the user</param>
 <param name="permissions">User permissions</param>
 <param name="userName">The name of the user</param>
 <param name="isGroup"><c>True</c> if it is group</param>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.DefinedRight.#ctor(System.Int32,Dynamicweb.Ecommerce.UserPermissions.UserPermissionRights)">
 <summary>
 Initializes a new instance of the DefinedRight class
 </summary>
 <param name="userId">The id of the user</param>
 <param name="permissions">User permissions</param>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.DefinedRight.GrantNone">
 <summary>
 Provides no permissions
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.DefinedRight.GrantAll">
 <summary>
 Provides all permissions
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.UserPermissions.PredefinedType">
 <summary>
 Defines the predefined types
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.UserPermissions.UserPermission">
 <summary>
 This class contains functions for manage user permissions
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.UserPermissions.UserPermission.AngelUserId">
 <summary>
 Id for Angel user
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.UserPermissions.UserPermission.AdminUserId">
 <summary>
 Id for administrative user
 </summary>
</member>
<member name="F:Dynamicweb.Ecommerce.UserPermissions.UserPermission.EveryoneUserId">
 <summary>
 Id for non-administrative user
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.#ctor(System.String,System.String,System.Int32,System.Boolean)">
 <summary>
 Initializes a new instance of the UserPermission class
 </summary>
 <param name="userPermissionType">The type of the user permission</param>
 <param name="userPermissionTypeId">The id of the user permission</param>
 <param name="userId">The id of the user</param>
 <param name="forceReload"><c>True</c> to force reload the data from the database</param>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.#ctor(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
 <summary>
 Initializes a new instance of the UserPermission class
 </summary>
 <param name="userPermissionType">The type of the user permission</param>
 <param name="userPermissionTypeId">The id of the user permission</param>
 <param name="userId">The id of the user</param>
 <param name="forceReload"><c>True</c> to force reload the data from the database</param>
 <param name="isAdmin"><c>True</c> if user is administrator</param>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.#ctor(System.String,System.String,System.Int32)">
 <summary>
 Initializes a new instance of the UserPermission class
 </summary>
 <param name="userPermissionType">The type of the user permission</param>
 <param name="userPermissionTypeId">The id of the user permission</param>
 <param name="userId">The id of the user</param>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the UserPermission class
 </summary>
 <param name="userPermissionType">The type of the user permission</param>
 <param name="userPermissionTypeID">The id of the user permission</param>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.Save">
 <summary>
 Save changes to the database
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.GrantNone">
 <summary>
 Provides no rights
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.GrantAll">
 <summary>
 Provides all rights
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.UserPermissions.UserPermission.Granted(Dynamicweb.Ecommerce.UserPermissions.UserPermissionRights)">
 <summary>
 Gets or sets permission
 </summary>
 <param name="permission">A <see cref="T:Dynamicweb.Ecommerce.UserPermissions.UserPermissionRights"/> enumeration member</param>
</member>
<member name="P:Dynamicweb.Ecommerce.UserPermissions.UserPermission.SpecificPermissionsDefined">
 <summary>
 Return <c>True</c> if specific permissions are defined on a given object
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.UserPermissions.UserPermission.Value">
 <summary>
 Gets the value of the current permissions
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.UserPermissions.UserPermission.DataPresence">
 <summary>
 Gets the data presence
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.UserPermissions.UserPermission.UserId">
 <summary>
 Gets the user id
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.UserPermissions.UserPermission.UserPermissionType">
 <summary>
 Gets the type of user permission
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.UserPermissions.UserPermission.UserPermissionTypeId">
 <summary>
 Gets the id of the user permission type
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.UserPermissions.UserPermission.UserPermissionTypeGuid">
 <summary>
 Gets the GUID of the user permission type
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.UserPermissions.UserPermission.TranslationOf(Dynamicweb.Ecommerce.UserPermissions.UserPermissionRights,System.String)">
 <summary>
 Gets the translation for the permission
 </summary>
 <param name="permission">An instance of the <see cref="T:Dynamicweb.Ecommerce.UserPermissions.UserPermissionRights"/></param>
 <param name="usageContext">The usage context</param>
</member>
<member name="P:Dynamicweb.Ecommerce.UserPermissions.UserPermission.TranslationOf(Dynamicweb.Ecommerce.UserPermissions.UserPermissionRights)">
 <summary>
 Gets the translation for the permission
 </summary>
 <param name="permission">An instance of the <see cref="T:Dynamicweb.Ecommerce.UserPermissions.UserPermissionRights"/></param>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.ObjectType(Dynamicweb.Ecommerce.UserPermissions.PredefinedType)">
 <summary>
 Returns name of the predefined permission type
 </summary>
 <param name="predefinedType">An instance of the <see cref="T:Dynamicweb.Ecommerce.UserPermissions.PredefinedType"/></param>
 <exception cref="T:System.ArgumentException"></exception>
 <returns>Name of the predefined permission type</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.DatabasePrepared">
 <summary>
 Checks if the database is ready to work with permissions
 </summary>
 <returns><c>True</c> if the database is ready</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.DeleteRights(System.Int32)">
 <summary>
 Deletes all permissions defined for a specific user
 </summary>
 <param name="userId">The id of the user</param>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.DeleteGroupRights(System.String)">
 <summary>
 Deletes all permissions for the group
 </summary>
 <param name="groupId">The id of the group</param>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.DeleteRights(System.String,System.String)">
 <summary>
 Deletes all permissions defined on a given object
 </summary>
 <param name="userPermissionType">The type of the user permission</param>
 <param name="userPermissionTypeId">The id of the user permission</param>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.GetDefinedRights(System.String,System.String)">
 <summary>
 Return all permissions defined for the requested object based on type and id
 </summary>
 <param name="userPermissionType">The type of the user permission</param>
 <param name="userPermissionTypeId">The id of the user permission</param>
 <returns>The list of the <see cref="T:Dynamicweb.Ecommerce.UserPermissions.DefinedRight"/></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.GetDefinedRights(System.Guid)">
 <summary>
 Return all permissions defined for the requested object based on guid
 </summary>
 <param name="userPermissionTypeGuid">The GUID of the user permission type</param>
 <returns>The list of the <see cref="T:Dynamicweb.Ecommerce.UserPermissions.DefinedRight"/></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.UsePermissionTypeId(System.String)">
 <summary>
 Determines whether the user has access to the specified object
 </summary>
 <param name="userPermissionType">The type of the user permission</param>
 <returns><c>True</c> if user has access</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.GetRightsGuid(System.String,System.String)">
 <summary>
 Gets GUID for the permission
 </summary>
 <param name="userPermissionType">The type of the user permission</param>
 <param name="userPermissionTypeId">The id of the user permission</param>
 <returns>The Guid</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.SetDefinedRightsOnChildren(System.String,System.String,System.Collections.Generic.List{Dynamicweb.Ecommerce.UserPermissions.DefinedRight})">
 <summary>
 Setting defined permissions on children
 </summary>
 <param name="userPermissionType">The type of the user permission</param>
 <param name="userPermissionTypeId">The id of the user permission</param>
 <param name="newRights">The list of the new permissions</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.SetDefinedRights(System.String,System.String,System.Collections.Generic.List{Dynamicweb.Ecommerce.UserPermissions.DefinedRight},System.Boolean)">
 <summary>
 Setting defined permissions
 </summary>
 <param name="userPermissionType">The type of the user permission</param>
 <param name="userPermissionTypeId">The id of the user permission</param>
 <param name="newRights">The list of the new permissions</param>
 <param name="deleteExistingRights"><c>True</c> if need to delete existing permissions</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.SetDefinedRights(System.Guid,System.Collections.Generic.List{Dynamicweb.Ecommerce.UserPermissions.DefinedRight},System.Boolean)">
 <summary>
 Sets new permissions
 </summary>
 <param name="userPermissionTypeGuid">The GUID of the user permission type</param>
 <param name="newRights">The list of the new permissions</param>
 <param name="deleteExistingRights"><c>True</c> if need to delete existing permissions</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.RefreshXmlCache(System.String,System.String)">
 <summary>
 Refreshes the cache of the user permissions
 </summary>
 <param name="userPermissionType">The type of the user permission</param>
 <param name="userPermissionTypeId">The id of the user permission</param>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.RefreshXmlCache(System.Guid)">
 <summary>
 Refreshes the cache of the user permissions
 </summary>
 <param name="userPermissionTypeGuid">The GUID of the user permission type</param>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.WriteDenyMessage">
 <summary>
 Shows "Access denied" message
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.UserPermissions.UserPermission.WriteDenyMessage(System.String)">
 <summary>
 Shows "Access denied" message with the custom text
 </summary>
 <param name="message">The text of the message</param>
</member>
<member name="T:Dynamicweb.Ecommerce.UserPermissions.UserPermissionRights">
 <summary>
 Defines the user permissions
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Variants.VariantCombination">
 <summary>
 A combination of variant options on a product
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantCombination.ProductId">
 <summary>
 Gets or sets the product ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantCombination.VariantId">
 <summary>
 Gets or sets the variant ID.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantCombination.HasRowInProductTable">
 <summary>
 Indicates if the given variantcombination has an extended product or is simple (eg. if it has a productrow in the database table).
 </summary>
 <returns>hasRowInProductTable</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.GetProduct">
 <summary>
 Gets a variant product from a random language.
 </summary>
 <remarks>Random: Language is dependent upon ALL the configuration of everything in the whole stack. Dont use this!</remarks>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.GetProduct(System.String)">
 <summary>
 Gets the product.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.GetVariantOptionIds">
 <summary>
 Gets the option ids of this variant.
 </summary>
 <returns>optionIds</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantCombination" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.#ctor(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantCombination" /> class.
 <paramref name="product">The master product of this variantcombination.</paramref>>
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.GetVariantName(System.String)">
 <summary>
 Gets the variant text.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.SetProduct(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Sets the product.
 </summary>
 <param name="product">Product</param>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantCombination.VariantOptions">
 <summary>
 Gets or sets the variant options.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantCombination" /> class.
 </summary>
 <param name="productId">The product ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantCombination" /> class.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="variantId">The variant ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantCombination" /> class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.Fill(System.Data.IDataReader)">
 <summary>
 Fills the instance with data from the specified data reader.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.Save(System.String,System.String)">
 <summary>
 Saves the current instance with the specified parameters.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="variantId">The variant ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.Delete(System.String)">
 <summary>
 Deletes the combinations for the specified product ID.
 </summary>
 <param name="productId">The product ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.Delete(System.String,System.String)">
 <summary>
 Deletes the combinations for the specified product and variant ID.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="variantId">The variant ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.Delete(Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <summary>
 Deletes the combinations for the specified variant group.
 </summary>
 <param name="variantGroup">The variant group.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.Delete(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Deletes the combinations for the specified products.
 </summary>
 <param name="products">The products.</param>
 <returns>The <see cref="T:Dynamicweb.Data.CommandBuilder"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.Delete(Dynamicweb.Ecommerce.Products.ProductCollection,System.Boolean)">
 <summary>
 Deletes the combinations for the specified products.
 </summary>
 <param name="products">The products.</param>
 <param name="execute">if set to <c>true</c> it executes, otherwise not...</param>
 <returns>The <see cref="T:Dynamicweb.Data.CommandBuilder"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.GetCombinationText(Dynamicweb.Ecommerce.Products.Product,System.String,System.String)">
 <summary>
 Get the combination texts.
 </summary>
 <param name="product">The product.</param>
 <param name="variantTextSeperator">The variant text seperator.</param>
 <returns>The combination text.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.GetProductCombinations(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Gets the product combinations.
 </summary>
 <param name="product">The product.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantCombinationCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.GetProductCombinations(Dynamicweb.Ecommerce.Products.Product,System.String)">
 <summary>
 Gets the product combinations.
 </summary>
 <param name="product">The product.</param>
 <param name="variantTextSeperator">The variant text seperator.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantCombinationCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.ClearVariantCombinationCache">
 <summary>
 Clears the variant combination caches
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.GetProductCombinations(Dynamicweb.Ecommerce.Products.Product,System.String,System.Boolean)">
 <summary>
 Gets the product combinations.
 </summary>
 <param name="product">The product.</param>
 <param name="variantTextSeperator">Is always ignored. Makes no sense in a cached environment...</param>
 <param name="isFrontend">if set to <c>true</c> it is front end.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantCombinationCollection"/>.</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantCombination.VariantText">
 <summary>
 Gets or sets the variant text.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantCombination.ProductStock">
 <summary>
 Gets or sets the product stock.
 </summary>
 <value>The stock level of product.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantCombination.SimpleVariant">
 <summary>
 Gets or sets the product.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombination.CompareTo(Dynamicweb.Ecommerce.Variants.VariantCombination)">
 <summary>
 Compares one VariantCombination with another.
 </summary>
 <param name="other">An object to compare with this instance.</param>
 <returns>variantCombiantionComparison</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Variants.VariantCombinationCollection">
 <summary>
 A collection of variant combinations
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationCollection.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantCombinationCollection" /> class
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationCollection.#ctor(System.Collections.Generic.IList{Dynamicweb.Ecommerce.Variants.VariantCombination})">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantCombinationCollection" /> class as a wrapper for specified list
 </summary>
 <param name="list">The list that is wrapped by the new collection</param>
 <remarks>This is fastest method to create copy of variant combination collection. But developer should be sure that all elements of the list are unique by VariantID property</remarks>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationCollection.Add(Dynamicweb.Ecommerce.Variants.VariantCombination)">
 <summary>
 Adds the specified variant combination.
 </summary>
 <param name="variantCombination">The variant combination.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationCollection.ItemById(System.String)">
 <summary>
 Gets the item by id.
 </summary>
 <param name="id">The item id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationCollection.IndexOf(System.String)">
 <summary>
 Returns the index of the specified variant id in the collection.
 </summary>
 <param name="strVariantID">The variant id.</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationCollection.Load(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Loads the specified SQL.
 </summary>
 <param name="commandBuilder">The SQL.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationCollection.SetCombinationTexts(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Sets the combination texts.
 </summary>
 <param name="product">The product.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationCollection.SetCombinationTexts(Dynamicweb.Ecommerce.Products.Product,System.String)">
 <summary>
 Sets the combination texts.
 </summary>
 <param name="product">The product.</param>
 <param name="variantTextSeperator">The variant text seperator.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationRepository.SaveOrCreateVariant(Dynamicweb.Ecommerce.Variants.VariantCombination,System.String,System.String)">
 <summary>
 Saves the current instance with the specified parameters.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="variantId">The variant ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationRepository.Delete(System.String)">
 <summary>
 Deletes the combinations for the specified product ID.
 </summary>
 <param name="productId">The product ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationRepository.Delete(System.String,System.String)">
 <summary>
 Deletes the combinations for the specified product and variant ID.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="variantId">The variant ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationRepository.Delete(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Deletes the combinations for the specified variant group.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationRepository.Delete(System.Collections.Generic.IList{Dynamicweb.Ecommerce.Products.Product},System.Boolean)">
 <summary>
 Deletes the combinations for the specified products.
 </summary>
 <param name="products">The products.</param>
 <param name="execute">if set to <c>true</c> it executes, otherwise not...</param>
 <returns>The <see cref="T:Dynamicweb.Data.CommandBuilder"/>.</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantCombinationService.Repository">
 <summary>
 Gets the repository
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationService.ClearVariantCombinationCache">
 <summary>
 Clears the variant combination caches
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationService.Save(Dynamicweb.Ecommerce.Variants.VariantCombination)">
 <summary>
 Saves the current instance with the specified parameters.
 </summary>
 <param name="variantCombination">The variant.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationService.SaveNewVariant(Dynamicweb.Ecommerce.Variants.VariantCombination,System.String,System.String)">
 <summary>
 Saves the current instance with the specified parameters.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="variantId">The variant ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationService.Delete(System.String)">
 <summary>
 Deletes the combinations for the specified product ID.
 </summary>
 <param name="productId">The product ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationService.Delete(System.String,System.String)">
 <summary>
 Deletes the combinations for the specified product and variant ID.
 </summary>
 <param name="productId">The product ID.</param>
 <param name="variantId">The variant ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationService.GetVariantCombinations(System.String)">
 <summary>
 Gives all variant combinations for a product.
 </summary>
 <param name="productId">Id of product</param>
 <returns>variantCombinations</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationService.GetVariantCombination(System.String,System.String)">
 <summary>
 Gives a variant combination for a product id.
 </summary>
 <param name="productId">Id of product</param>
 <returns>variantCombinations</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationService.GetProductCombinations(Dynamicweb.Ecommerce.Products.Product,System.Boolean)">
 <summary>
 Gets the product combinations.
 </summary>
 <param name="product">The product.</param>
 <param name="isFrontend">if set to <c>true</c> it is front end.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantCombinationCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationService.DeleteVariantGroup(System.String,System.String,System.Boolean)">
 <summary>
 Deletes the combinations for the specified variant group.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationService.Delete(System.Collections.Generic.IList{Dynamicweb.Ecommerce.Products.Product})">
 <summary>
 Deletes the combinations for the specified products.
 </summary>
 <param name="products">The products.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantCombinationService.Delete(System.Collections.Generic.IList{Dynamicweb.Ecommerce.Products.Product},System.Boolean)">
 <summary>
 Deletes the combinations for the specified products.
 </summary>
 <param name="products">The products.</param>
 <param name="execute">if set to <c>true</c> it executes, otherwise not...</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Variants.VariantGroup">
 <summary>
 A variant group that hold variant options
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup" /> class.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroup.Label">
 <summary>
 Gets or sets the label.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroup.Id">
 <summary>
 Gets or sets the id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroup.LanguageId">
 <summary>
 Gets or sets the language id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroup.Name">
 <summary>
 Gets or sets the name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroup.Unit">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup" /> is unit.
 </summary>
 <value><c>true</c> if unit; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroup.PriceDiffers">
 <summary>
 Gets or sets a value indicating whether to differentiate on price.
 </summary>
 <value><c>true</c> if price difference, otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroup.Family">
 <summary>
 Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup" /> is family.
 </summary>
 <value><c>true</c> if family, otherwise, <c>false</c>.</value>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.GetAllVariantOptions">
 <summary>
 Gets all variant options for this group.
 </summary>
 <returns>variantOptions</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.GetVariantOptions(System.String)">
 <summary>
 Gets all existing variant options from this group, for the specified product.
 </summary>
 <param name="productId">Id of product</param>
 <returns>variantOptions</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.GetVariantGroupProductRelations">
 <summary>
 Gets all product relations.
 </summary>
 <returns>productsRelations</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.GetProperties">
 <summary>
 Gets the properties of this group.
 </summary>
 <returns>properties</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup" /> class.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.#ctor(System.String,Dynamicweb.Ecommerce.International.Language)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup" /> class.
 </summary>
 <param name="id">The id.</param>
 <param name="language">The language.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup" /> class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.Fill(System.Data.IDataReader)">
 <summary>
 Fills the object with data from the specified data reader.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.Save">
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.Save(System.String)">
 <summary>
 Saves the current instance with the specified id.
 </summary>
 <param name="variantGroupId">The ID.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.Delete(System.String)">
 <summary>
 Deletes the variant group with the specified id.
 </summary>
 <param name="id">The id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.Delete(System.String,System.String)">
 <summary>
 Deletes the variant group with the specified ID and Language id.
 </summary>
 <param name="id">The id.</param>
 <param name="languageId">The lang id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.Delete(Dynamicweb.Ecommerce.Variants.VariantGroup,System.String,System.Boolean)">
 <summary>
 Deletes the specified variant group.
 </summary>
 <param name="variantGroup">The variant group.</param>
 <param name="languageId">The language id.</param>
 <param name="deleteVariants">if set to <c>true</c> deletes variants.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.Copy">
 <summary>
 Copies this instance.
 </summary>
 <returns>The new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.Clone">
 <summary>
 Clones this instance.
 </summary>
 <returns>The new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.GetGroupByOptionId(System.String)">
 <summary>
 Gets the variant groups by the given variant option id.
 </summary>
 <param name="variantOptionId">The variant option id</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.ClearVariantGroupsCache">
 <summary>
 Crears the variant groups caches
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.Create(System.String)">
 <summary>
 Creates the a variant group with the specified variant group id.
 </summary>
 <param name="variantGroupId">The variant group id.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.Create(System.String,Dynamicweb.Ecommerce.International.Language)">
 <summary>
 Creates the a variant group with the specified variant group ID and language ID.
 </summary>
 <param name="variantGroupId">The variant group ID.</param>
 <param name="language">The language.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.GetVariantGroups(System.String)">
 <summary>
 Gets the variant groups.
 </summary>
 <param name="groupId">The group ID.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.GetVariantGroups(System.Boolean)">
 <summary>
 Gets the variant groups.
 </summary>
 <param name="isUnit">The variant group is unit.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.GetAllVariantGroups">
 <summary>
 Gets all variant groups.
 </summary>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.GetVariantGroupsByLanguage">
 <summary>
 Gets the variant groups by language.
 </summary>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroup.GetVariantGroupsWithOptions(Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Gets the variant groups with options.
 </summary>
 <param name="product">The product.</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupCollection"/>.</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroup.VariantOptions">
 <summary>
 Gets or sets the variant options.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroup.VariantGroupProductRelations">
 <summary>
 Gets or sets the variant product relations.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroup.Properties">
 <summary>
 Gets or sets the variant group properties.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Variants.VariantGroupCollection">
 <summary>
 A collection of variant groups
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupCollection.Remove(Dynamicweb.Ecommerce.Variants.VariantGroup,System.Boolean)">
 <summary>
 Removes the specified variant group.
 </summary>
 <param name="variantGroup">The variant group.</param>
 <param name="removeGroup">If set to <c>true</c> remove group.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupCollection.Contains(Dynamicweb.Ecommerce.Variants.VariantGroup,System.Boolean)">
 <summary>
 Determines whether the collection contains the specified variant group.
 </summary>
 <param name="variantGroup">The variant group.</param>
 <param name="loopGroups">If set to <c>true</c> loop groups.</param>
 <returns>
 <c>true</c> if contains the specified variant group, otherwise, <c>false</c>.
 </returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroupCollection.Item(System.Int32)">
 <summary>
 Gets or sets the element at the specified index.
 </summary>
 <returns>
 The element at the specified index.
 </returns>
 <exception cref="T:System.ArgumentOutOfRangeException">
 <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.
 </exception>
 <exception cref="T:System.NotSupportedException">
 The property is set and the <see cref="T:System.Collections.IList" /> is read-only.
 </exception>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupCollection.ItemById(System.String)">
 <summary>
 Gets the item by id.
 </summary>
 <param name="id">The item id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupCollection.FindOptionById(System.String)">
 <summary>
 Returns the option specified by the id, regardless of what group it is in.
 </summary>
 <returns>The instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupCollection.IndexOf(System.String)">
 <summary>
 Searches the VariantGroup list for the existance of id
 </summary>
 <param name="id">The id.</param>
 <returns>if id is found in the collection the index of that position is returned, otherwise -1</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupCollection.Load(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Loads the specified SQL.
 </summary>
 <param name="commandBuilder">The SQL.</param>
</member>
<member name="T:Dynamicweb.Ecommerce.Variants.VariantGroupOptionPropertyValue">
 <summary>
 A variant group properties values static class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupOptionPropertyValue.GetValue(System.String,System.String,System.String)">
 <summary>
 Gets variant group property value from the option
 </summary>
 <returns>The variant group property value</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupOptionPropertyValue.SaveValue(System.String,System.String,System.String,System.String)">
 <summary>
 Saves group property value
 </summary>
 <param name="optionId">The option id</param>
 <param name="propertyId">The property id</param>
 <param name="languageId">The language id</param>
 <param name="propertyValue">The poperty value</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupOptionPropertyValue.DeleteOptionValues(System.String)">
 <summary>
 Delete variant group property values for variant option
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupOptionPropertyValue.DeleteOptionValues(System.String,System.String)">
 <summary>
 Delete variant group property values for variant option and language
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupOptionPropertyValue.ClearCache">
 <summary>
 Clears variant group property values cache.
 </summary>
</member>
<member name="T:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation">
 <summary>
 Class represents the variant group to product relation
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.VariantGroups">
 <summary>
 Gets the variant groups
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.Id">
 <summary>
 Gets or sets the id
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.ProductId">
 <summary>
 Gets or sets the product id
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.VariantGroupId">
 <summary>
 Gets or sets the variant group id
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.Sorting">
 <summary>
 Gets or sets the sorting order
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.PriceDifference">
 <summary>
 Gets or sets whether the price is difference 
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.GetVariantGroups">
 <summary>
 Gets the variant groups.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.#ctor(System.String)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="productId"></param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="productId">The product id.</param>
 <param name="variantGroupId">The variant group id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.#ctor">
 <summary>
 Initializes a new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.Fill(System.Data.IDataReader)">
 <summary>
 Fills the object with data from the specified data reader.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.Save(System.String,System.String)">
 <summary>
 Saves this instance.
 </summary>
 <param name="productId">The product id.</param>
 <param name="variantGroupId">The variant group id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.Delete(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Deletes instances with the specified parameters.
 </summary>
 <param name="products">The <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection"/>.</param>
 <returns>The <see cref="T:Dynamicweb.Data.CommandBuilder"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.Delete(Dynamicweb.Ecommerce.Products.ProductCollection,System.Boolean)">
 <summary>
 Deletes instances with the specified parameters.
 </summary>
 <param name="products">The <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection"/>.</param>
 <param name="execute">If <c>True</c> deletes will executed</param>
 <returns>The <see cref="T:Dynamicweb.Data.CommandBuilder"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.VariantGroupCounter(System.String)">
 <summary>
 Gets the product relations count.
 </summary>
 <param name="productId">The product.</param>
 <returns>Count of the relations.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.Delete(System.String,System.String,System.String)">
 <summary>
 Deletes instances with the specified parameters.
 </summary>
 <param name="productId">The product id.</param>
 <param name="groupId">The group id.</param>
 <param name="relationId">The relation id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.GetProductRelations(System.String)">
 <summary>
 Gets the relations.
 </summary>
 <param name="productId">The product id.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.GetProductRelations(Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <summary>
 Gets the relations.
 </summary>
 <param name="variantGroup">The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup"/>.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation.GetProductRelations(Dynamicweb.Ecommerce.Variants.VariantGroup,System.String)">
 <summary>
 Gets the relations.
 </summary>
 <param name="variantGroup">The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup"/>.</param>
 <param name="productId">The product id.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation"/>.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Variants.VariantGroupProperty">
 <summary>
 A variant property in a variant group.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroupProperty.Id">
 <summary>
 Gets or sets the id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroupProperty.GroupId">
 <summary>
 Gets or sets the group id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroupProperty.Name">
 <summary>
 Gets or sets the name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroupProperty.SystemName">
 <summary>
 Gets or sets the system name.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProperty.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupProperty" /> class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProperty.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupProperty" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProperty.Fill(System.Data.IDataReader)">
 <summary>
 Initializes properties with new data.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProperty.Save">
 <summary>
 Saves group property
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProperty.Save(System.String)">
 <summary>
 Saves group property
 </summary>
 <param name="variantGroupPropertyId">The variant group property id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProperty.Delete">
 <summary>
 Deletes this instance
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProperty.Delete(System.String)">
 <summary>
 Deletes instance with the specified parameters.
 </summary>
 <param name="id">The variant group property id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProperty.Delete(Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <summary>
 Deletes instance with the specified parameters.
 </summary>
 <param name="variantGroup">The instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProperty.GetPropertiesByVariantGroupId(System.String)">
 <summary>
 Gets the variant group's properties.
 </summary>
 <param name="variantGroupId">The variant group id.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupProperty"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProperty.GetAllVariantGroupProperties">
 <summary>
 Gets all variant group's properties.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupProperty"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupProperty.ClearCache">
 <summary>
 Clears variant group properties cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.GetProductsCount(System.String,System.String)">
 <summary>
 Gets the products count.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.Delete(System.String)">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.Delete(System.String,System.String)">
 <summary>
 Deletes the variant group with the specified ID and Language id.
 </summary>
 <param name="id">The id.</param>
 <param name="languageId">The lang id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.FillVariantGroupProperties(System.Data.IDataReader)">
 <summary>
 Initializes properties with new data.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.GetAllVariantGroups">
 <summary>
 Gets all variant groups.
 </summary>
 <returns>The <see cref="T:System.Collections.Generic.IList`1"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.SaveValue(System.String,System.String,System.String,System.String)">
 <summary>
 Saves group property value
 </summary>
 <param name="optionId">The option id</param>
 <param name="propertyId">The property id</param>
 <param name="languageId">The language id</param>
 <param name="propertyValue">The poperty value</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.DeleteOptionValues(System.String)">
 <summary>
 Delete variant group property values for variant option
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.DeleteOptionValues(System.String,System.String)">
 <summary>
 Delete variant group property values for variant option and language
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.DeletePropertyValues(System.String)">
 <summary>
 Delete variant group property values for property
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.DeleteGroupValues(System.String)">
 <summary>
 Delete variant group property values for variant group
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.DeleteGroupValues(System.String,System.String)">
 <summary>
 Delete variant group property values for variant group and language
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.CreateVariantGroupProductRelation(System.String,System.String)">
 <summary>
 Initializes a new instance of the class.
 </summary>
 <param name="productId">The product id.</param>
 <param name="variantGroupId">The variant group id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.FillVariantGroupProductRelation(System.Data.IDataReader)">
 <summary>
 Fills the object with data from the specified data reader.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.SaveVariantGroupProductRelation(Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation,System.String,System.String)">
 <summary>
 Helper for obsolete methods. Merge with other save once the references = 1.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.Save(Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation)">
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.DeleteProductRelation(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Deletes instances with the specified parameters.
 </summary>
 <param name="products">The <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection"/>.</param>
 <returns>The <see cref="T:Dynamicweb.Data.CommandBuilder"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.Delete(Dynamicweb.Ecommerce.Products.ProductCollection,System.Boolean)">
 <summary>
 Deletes instances with the specified parameters.
 </summary>
 <param name="products">The <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection"/>.</param>
 <param name="execute">If <c>True</c> deletes will executed</param>
 <returns>The <see cref="T:Dynamicweb.Data.CommandBuilder"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.DeleteProductRelation(System.String,System.String,System.String)">
 <summary>
 Deletes instances with the specified parameters.
 </summary>
 <param name="productId">The product id.</param>
 <param name="groupId">The group id.</param>
 <param name="relationId">The relation id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.GetProductRelations(System.String)">
 <summary>
 Gets the relations.
 </summary>
 <param name="productId">The product id.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.GetProductRelations(Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <summary>
 Gets the relations.
 </summary>
 <param name="variantGroup">The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup"/>.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupRepository.GetProductRelations(Dynamicweb.Ecommerce.Variants.VariantGroup,System.String)">
 <summary>
 Gets the relations.
 </summary>
 <param name="variantGroup">The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup"/>.</param>
 <param name="productId">The product id.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation"/>.</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantGroupService.Repository">
 <summary>
 Gets the repository for working with the Page aggregate
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.ClearVariantGroupsCache">
 <summary>
 Crears the variant groups caches
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.ClearVariantGroupProductRelationCache">
 <summary>
 Crears the variant groups caches
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.ClearOptionValues">
 <summary>
 Clears variant group property values cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.ClearVariantGroupPropertiesCache">
 <summary>
 Clears variant group properties cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.Save(Dynamicweb.Ecommerce.Variants.VariantGroupProperty)">
 <summary>
 Saves group property
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.DeleteVariantGroupProperty(System.String)">
 <summary>
 Deletes instance with the specified parameters.
 </summary>
 <param name="id">The variant group property id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.DeleteVariantGroupPropertyByGroupId(System.String)">
 <summary>
 Deletes instance with the specified parameters.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.GetVariantGroupOptionPropertyValue(System.String,System.String,System.String)">
 <summary>
 Gets variant group property value from the option
 </summary>
 <returns>The variant group property value</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.GetVariantGroupProperty(System.String)">
 <summary>
 Gets the variant group properties for the specified group.
 </summary>
 <param name="groupId">Group id</param>
 <returns>variantGroupProperties</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.Save(Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <summary>
 Saves the current instance with the specified id.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.DeleteVariantGroup(System.String)">
 <summary>
 Deletes the variant group with the specified id.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.Delete(Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <summary>
 Deletes the variant group with the specified id.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.Delete(System.String,System.String)">
 <summary>
 Deletes the variant group with the specified ID and Language id.
 </summary>
 <param name="id">The id.</param>
 <param name="languageId">The lang id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.DeleteLanguageVariantGroup(System.String,System.String,System.Boolean)">
 <summary>
 Deletes the specified variant group.
 </summary>
 <param name="languageId">The language id.</param>
 <param name="deleteVariants">if set to <c>true</c> deletes variants.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.GetVariantGroups(System.String)">
 <summary>
 Gets the variant groups.
 </summary>
 <param name="groupId">The group ID.</param>
 <returns>The <see cref="T:System.Collections.Generic.IList`1"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.GetVariantGroups(System.String,System.String)">
 <summary>
 Gets the variant groups with options.
 </summary>
 <param name="productId">The product id.</param>
 <returns>The <see cref="T:System.Collections.Generic.IList`1"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.GetVariantGroups(System.Boolean)">
 <summary>
 Gets the variant groups.
 </summary>
 <param name="isUnit">The variant group is unit.</param>
 <returns>The <see cref="T:System.Collections.Generic.IList`1"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.GetUnits(System.String)">
 <summary>
 Gets all variant groups that are units.
 </summary>
 <param name="languageId">Language id</param>
 <returns>variantGroups</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.GetAllVariantGroups">
 <summary>
 Gets all variant groups.
 </summary>
 <returns>The <see cref="T:System.Collections.Generic.IList`1"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.GetVariantGroupsByLanguage">
 <summary>
 Gets the variant groups by language.
 </summary>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.GetVariantGroupsByLanguage(System.String)">
 <summary>
 Gets the variant groups by language.
 </summary>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupCollection"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.SaveValue(System.String,System.String,System.String,System.String)">
 <summary>
 Saves group property value
 </summary>
 <param name="optionId">The option id</param>
 <param name="propertyId">The property id</param>
 <param name="languageId">The language id</param>
 <param name="propertyValue">The poperty value</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.DeleteOptionValues(System.String)">
 <summary>
 Delete variant group property values for variant option
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.DeleteOptionValues(System.String,System.String)">
 <summary>
 Delete variant group property values for variant option and language
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.DeletePropertyValues(System.String)">
 <summary>
 Delete variant group property values for property
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.DeleteGroupValues(System.String)">
 <summary>
 Delete variant group property values for variant group
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.DeleteGroupValues(System.String,System.String)">
 <summary>
 Delete variant group property values for variant group and language
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.DeleteProductRelation(Dynamicweb.Ecommerce.Products.ProductCollection)">
 <summary>
 Deletes instances with the specified parameters.
 </summary>
 <param name="products">The <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection"/>.</param>
 <returns>The <see cref="T:Dynamicweb.Data.CommandBuilder"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.DeleteProductRelation(Dynamicweb.Ecommerce.Products.ProductCollection,System.Boolean)">
 <summary>
 Deletes instances with the specified parameters.
 </summary>
 <param name="products">The <see cref="T:Dynamicweb.Ecommerce.Products.ProductCollection"/>.</param>
 <param name="execute">If <c>True</c> deletes will executed</param>
 <returns>The <see cref="T:Dynamicweb.Data.CommandBuilder"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.VariantGroupCounter(System.String)">
 <summary>
 Gets the product relations count.
 </summary>
 <param name="productId">The product.</param>
 <returns>Count of the relations.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.DeleteProductRelation(System.String,System.String,System.String)">
 <summary>
 Deletes instances with the specified parameters.
 </summary>
 <param name="productId">The product id.</param>
 <param name="groupId">The group id.</param>
 <param name="relationId">The relation id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.GetProductRelations(System.String)">
 <summary>
 Gets the relations.
 </summary>
 <param name="productId">The product id.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.GetProductRelations(Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <summary>
 Gets the relations.
 </summary>
 <param name="variantGroup">The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup"/>.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.GetProductRelations(Dynamicweb.Ecommerce.Variants.VariantGroup,System.String)">
 <summary>
 Gets the relations.
 </summary>
 <param name="variantGroup">The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup"/>.</param>
 <param name="productId">The product id.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroupProductRelation"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantGroupService.GetGroupByOptionId(System.String)">
 <summary>
 Gets the variant groups by the given variant option id.
 </summary>
 <param name="variantOptionId">The variant option id</param>
 <returns>The <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup"/>.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Variants.VariantNumber">
 <summary>
 The variant number class.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantNumber.Number">
 <summary>
 Gets the number.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantNumber.Add(System.String,Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Adds the option number to product
 </summary>
 <param name="optionId">The option id.</param>
 <param name="product">The product.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantNumber.SortList(System.Collections.Generic.IList{System.String},Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Sorts the list.
 </summary>
 <param name="combies">The combies.</param>
 <param name="product">The product.</param>
 <returns>Sorted list.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantNumber.Parse(System.String,Dynamicweb.Ecommerce.Products.Product)">
 <summary>
 Parse the number.
 </summary>
 <param name="number">The number.</param>
 <param name="product">The product.</param>
 <returns>The number.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantNumber.GetVariantName(System.String,System.String)">
 <summary>
 Returns the variant name.
 </summary>
 <param name="optionId">The option id.</param>
 <param name="languageId">The language id.</param>
 <returns>The variant name.</returns>
</member>
<member name="T:Dynamicweb.Ecommerce.Variants.VariantOption">
 <summary>
 A variant option in a variant group.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantOption.Id">
 <summary>
 Gets or sets the id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantOption.GroupId">
 <summary>
 Gets or sets the group id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantOption.LanguageId">
 <summary>
 Gets or sets the language id.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantOption.Name">
 <summary>
 Gets or sets the name.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantOption.SortOrder">
 <summary>
 Gets or sets the sort order.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantOption.SmallImage">
 <summary>
 Gets or sets the small image.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantOption.MediumImage">
 <summary>
 Gets or sets the medium image.
 </summary>
</member>
<member name="P:Dynamicweb.Ecommerce.Variants.VariantOption.LargeImage">
 <summary>
 Gets or sets the large image.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.Clone">
 <summary>
 Clones this instance.
 </summary>
 <returns>The instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption" /> class.
 </summary>
 <param name="id">The variant option id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.#ctor(System.String,Dynamicweb.Ecommerce.International.Language)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption" /> class.
 </summary>
 <param name="id">The variant option id.</param>
 <param name="language">The language.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption" /> class.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.Fill(System.Data.IDataReader)">
 <history>
 	[cpk]	10-03-2006	changed from private to public
 </history>
 <summary>
 Initializes properties with new data.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.Save">
 <summary>
 Saves this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.Save(System.String)">
 <summary>
 Saves this instance to instance with the specified id.
 </summary>
 <param name="id">The variant option id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.Delete">
 <summary>
 Deletes this instance.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.Delete(System.String)">
 <summary>
 Deletes instance with the specified parameters.
 </summary>
 <param name="id">The variant option id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.Delete(System.String,System.String)">
 <summary>
 Deletes instance with the specified parameters.
 </summary>
 <param name="id">The variant option id.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.Delete(Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <summary>
 Deletes instance with the specified parameters.
 </summary>
 <param name="variantGroup">The instance of <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup"/>.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.Delete(Dynamicweb.Ecommerce.Variants.VariantGroup,System.String)">
 <summary>
 Deletes instance with the specified parameters.
 </summary>
 <param name="variantGroup">The instance of <see cref="T:Dynamicweb.Ecommerce.Variants.VariantGroup"/>.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.DeleteProductUnitRelations">
 <summary>
 Deletes relations to the product unit
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.Copy">
 <summary>
 Copies this instance.
 </summary>
 <returns>The instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.Create(System.String)">
 <summary>
 Creates the specified variant option with the specified id.
 </summary>
 <param name="variantOptionId">The variant option id.</param>
 <returns>The instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.Create(System.String,Dynamicweb.Ecommerce.International.Language)">
 <summary>
 Creates a variant option based on the id and language.
 </summary>
 <param name="variantOptionId">The variant option id.</param>
 <param name="language">The language.</param>
 <returns>The instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.ClearVariantOptionCaches">
 <summary>
 Clears the variant options cache
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.GetVariantOptions(System.String)">
 <summary>
 Gets the variant options.
 </summary>
 <param name="variantGroupId">The variant group id.</param>
 <remarks>It selects only translated elements.</remarks>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.GetVariantOptions(Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <summary>
 Gets the variant options.
 </summary>
 <param name="variantGroup">The variant group.</param>
 <remarks>Is dependent on the setting "Only show translated elements" of the language settings.</remarks>
 <returns>The options for the variant group.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.GetAllVariantOptions">
 <summary>
 Gets the variant options.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.GetVariantOptions(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Gets the variant options.
 </summary>
 <param name="commandBuilder">The command builder</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.GetVariantOptions(System.Boolean)">
 <summary>
 Gets the variant options.
 </summary>
 <param name="isUnit">if set to <c>true</c> for units.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.GetVariantOptions(Dynamicweb.Ecommerce.Products.Product,System.Int32)">
 <summary>
 Gets the variant options.
 </summary>
 <param name="product">The product.</param>
 <param name="joinUnitMethod">The join unit method.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.GetVariantOptions(Dynamicweb.Ecommerce.Prices.Price)">
 <summary>
 Gets the variant options.
 </summary>
 <param name="price">The price.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.GetVariantOption(System.String)">
 <summary>
 Gets the variant option.
 </summary>
 <param name="variantOptionId">The variant option id</param>
 <returns>The instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOption.DeleteVariantOption(System.String)">
 <summary>
 Deletes the variant option with variant products
 </summary>
 <param name="id">The variant id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOptionRepository.Fill(System.Data.IDataReader)">
 <history>
 	[cpk]	10-03-2006	changed from private to public
 </history>
 <summary>
 Initializes properties with new data.
 </summary>
 <param name="dataReader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOptionRepository.Delete(System.String)">
 <summary>
 Deletes instance with the specified parameters.
 </summary>
 <param name="id">The variant option id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOptionRepository.Delete(System.String,System.String)">
 <summary>
 Deletes instance with the specified parameters.
 </summary>
 <param name="id">The variant option id.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOptionRepository.DeleteVariantGroup(System.String)">
 <summary>
 Deletes instance with the specified parameters.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOptionRepository.DeleteVariantGroup(System.String,System.String)">
 <summary>
 Deletes instance with the specified parameters.
 </summary>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOptionRepository.DeleteProductUnitRelations(Dynamicweb.Ecommerce.Variants.VariantOption)">
 <summary>
 Deletes relations to the product unit
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOptionRepository.GetVariantOptionCollection(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Gets the variant option collection.
 </summary>
 <param name="commandBuilder">The instance of the <see cref="T:Dynamicweb.Data.CommandBuilder"/>.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOptionRepository.GetAllVariantOptions">
 <summary>
 Gets the variant options.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantOptionRepository.DeleteVariantOption(System.String)">
 <summary>
 Deletes the variant option with variant products
 </summary>
 <param name="id">The variant id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.ClearCache">
 <summary>
 Clears all caches used by everything related to variants
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.ClearVariantCombinationCache">
 <summary>
 Clears the variant combination cache.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.ClearVariantOptionsCache">
 <summary>
 Clears the cache for variantoptions
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.ClearVariantGroupCache">
 <summary>
 Clears the cache for variant groups
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.ClearVariantGroupPropertiesCache">
 <summary>
 Clears the cache for variant group properties
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.ClearVariantGroupProductRelationCache">
 <summary>
 Clears the variant group product relations
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.ClearVariantGroupOptionValuesCache">
 <summary>
 Clears the variant group option values
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.CreateExtendedVariant(Dynamicweb.Ecommerce.Products.Product,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Creates a variant for the product.
 </summary>
 <param name="product">Product</param>
 <param name="optionIds">Ids of variant options</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.CreateSimpleVariant(System.String,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Creates a variant for the product.
 </summary>
 <param name="productId">Id of product</param>
 <param name="optionIds">Ids of variant options</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.CreateSimpleVariant(System.String,System.String)">
 <summary>
 Creates a variant for the product.
 </summary>
 <param name="productId">Id of product</param>
 <param name="variantId">Id of variant</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.DeleteVariant(System.String,System.String)">
 <summary>
 Deletes a specific variant of a product.
 </summary>
 <param name="productId">Id of product</param>
 <param name="variantId">Id of variant</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.DeleteAllVariants(System.String)">
 <summary>
 Deletes all variants of product.
 </summary>
 <param name="productId">Id of product</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.Save(Dynamicweb.Ecommerce.Variants.VariantCombination)">
 <summary>
 Saves the variant.
 </summary>
 <param name="variantCombination">Variant</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.GetVariantName(System.String,System.String)">
 <summary>
 Gets the variant name.
 </summary>
 <param name="variantId">Id of variant</param>
 <param name="languageId">Id of language</param>
 <returns>variantName</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.GetVariantGroup(System.String,System.String)">
 <summary>
 Gets variant group.
 </summary>
 <param name="variantGroupId">Id of variant group</param>
 <param name="languageId">Id of language</param>
 <returns>variantGroup</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.PotentialVariantCount(System.String,System.String,System.Boolean)">
 <summary>
 Yields a count of all possible variants.
 </summary>
 <remarks>If count exceeds 10000000, return nothing</remarks>
 <param name="includeUntranslated">Include untranslated variants in count</param>
 <returns>numberOfPotentialVariants</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.Save(Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <summary>
 Saves the variant group.
 </summary>
 <param name="group">VariantGroup</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.Delete(Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <summary>
 Deletes the specifed variant group and the options used by this group.
 </summary>
 <param name="group">Variantgroup</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.DeleteVariantGroup(System.String,System.String)">
 <summary>
 Deletes the specifed variant group and the options used by this group.
 </summary>
 <param name="variantGroupId">Id of variantgroup</param>
 <param name="languageId">Id of variant group</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.AddGroupToProduct(System.String,System.String)">
 <summary>
 Adds a product relation to the specified variant group.
 </summary>
 <remarks>Deletes all variants for product</remarks>
 <param name="productId">Id of product</param>
 <param name="variantGroupId">Id of variant group</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.RemoveGroupFromProduct(System.String,System.String)">
 <summary>
 Removes all variant groups from specied product and language.
 </summary>
 <remarks>Deletes all variants for product</remarks>
 <param name="productId">Id of product</param>
 <param name="variantGroupId">Id of variant group</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.RemoveAllGroupsFromProduct(System.String)">
 <summary>
 Removes all variant groups from specied product, for all languages.
 </summary>
 <remarks>Deletes all variants for product</remarks>
 <param name="productId">Id of product</param>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.GetOptions(System.String,System.String,System.String)">
 <summary>
 Gets the variant options matching the parameters.
 </summary>
 <param name="productId">Id of product</param>
 <param name="variantGroupId">Id of variantgroup</param>
 <param name="languageId">Id of language</param>
 <returns>variantOptions</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.GetOptions(System.String,Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <summary>
 Gets the variant options matching the parameters.
 </summary>
 <param name="productId">Id of product</param>
 <param name="variantGroup">VariantGroup</param>
 <returns>variantOptions</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.GetOptions(System.Collections.Generic.IEnumerable{Dynamicweb.Ecommerce.Variants.VariantCombination},Dynamicweb.Ecommerce.Variants.VariantGroup)">
 <summary>
 Gets the variant options matching the parameters.
 </summary>
 <param name="variantCombinations">VariantCombinations</param>
 <param name="variantGroup">VariantGroup</param>
 <returns>variantOptions</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.Variants.VariantService.GetUnitName(System.String,System.String)">
 <summary>
 Gets the unit name.
 </summary>
 <param name="unitId">Id of unit</param>
 <param name="languageId">Id of language</param>
 <returns>unitName</returns>
</member>
<member name="P:Dynamicweb.Ecommerce.VariantOptionService.Repository">
 <summary>
 Gets the repository for working with the Page aggregate
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Ecommerce.VariantOptionService.ClearCache">
 <summary>
 Clears the variant options cache
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.VariantOptionService.Delete(System.String)">
 <summary>
 Deletes instance with the specified parameters.
 </summary>
 <param name="id">The variant option id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.VariantOptionService.Delete(System.String,System.String)">
 <summary>
 Deletes instance with the specified parameters.
 </summary>
 <param name="id">The variant option id.</param>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.VariantOptionService.DeleteByVariantGroup(System.String,System.String)">
 <summary>
 Deletes instance with the specified parameters.
 </summary>
 <param name="languageId">The language id.</param>
</member>
<member name="M:Dynamicweb.Ecommerce.VariantOptionService.GetVariantOption(System.String,System.String)">
 <summary>
 Gets the variant option.
 </summary>
 <param name="id">The variant option id</param>
 <param name="languageId">The language id</param>
 <returns>The instance of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.VariantOptionService.GetAllByGroup(System.String)">
 <summary>
 Yields all options accross all languages, for a given variantgroup id.
 </summary>
 <param name="variantGroupId">Id</param>
 <returns>variantOptions</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.VariantOptionService.GetByGroupAndLanguage(System.String,System.String,System.Boolean)">
 <summary>
 Gets the variant options.
 </summary>
 <param name="languageId">The language id.</param>
 <param name="variantGroupId">The variant group id.</param>
 <param name="showUntranslated">Should show untranslated or not.</param>
 <returns>The options for the variant group.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.VariantOptionService.GetAll(System.Boolean)">
 <summary>
 Gets the variant options.
 </summary>
 <param name="isUnit">if set to <c>true</c> for units.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.VariantOptionService.GetByProduct(Dynamicweb.Ecommerce.Products.Product,System.Int32)">
 <summary>
 Gets the variant options.
 </summary>
 <param name="product">The product.</param>
 <param name="joinUnitMethod">The join unit method.</param>
 <remarks>Does not use the cache</remarks>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
<member name="M:Dynamicweb.Ecommerce.VariantOptionService.DeleteVariantGroup(System.String)">
 <summary>
 Deletes instance with the specified parameters.
 </summary>
</member>
<member name="M:Dynamicweb.Ecommerce.VariantOptionService.GetByPrice(Dynamicweb.Ecommerce.Prices.Price)">
 <summary>
 Gets the variant options.
 </summary>
 <param name="price">The price.</param>
 <returns>The collection of the <see cref="T:Dynamicweb.Ecommerce.Variants.VariantOption"/>.</returns>
</member>
</members>
</doc>
