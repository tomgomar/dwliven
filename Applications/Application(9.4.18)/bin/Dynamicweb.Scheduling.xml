<?xml version="1.0"?>
<doc>
<assembly>
<name>
Dynamicweb.Scheduling
</name>
</assembly>
<members>
<member name="T:Dynamicweb.Scheduling.AddInJob">
 <summary>
 Represents add-in job
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.AddInJob.#ctor(Dynamicweb.Scheduling.Task)">
 <summary>
 Creates new add-in job instance using task object data
 </summary>
 <param name="task"><see cref="T:Dynamicweb.Scheduling.Task"/> object instance</param>
</member>
<member name="M:Dynamicweb.Scheduling.AddInJob.Execute">
 <summary>
 Executes add-in job
 </summary>
</member>
<member name="T:Dynamicweb.Scheduling.BaseScheduledTaskAddIn">
 <summary>
 Represents base schedule task add-in
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.BaseScheduledTaskAddIn.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="F:Dynamicweb.Scheduling.BaseScheduledTaskAddIn.ScheduledTaskName">
 <summary>
 Name of schrduled task
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.BaseScheduledTaskAddIn.Run">
 <summary>
 Runs task add-in
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Scheduling.Consts">
 <summary>
 Constants which are specific for scheduling project
 </summary>
</member>
<member name="T:Dynamicweb.Scheduling.DBIntegrationJob">
 <summary>
 Represents DBIntegration specific job
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.DBIntegrationJob.#ctor(Dynamicweb.Scheduling.Task)">
 <summary>
 Creates new job instance using task data
 </summary>
 <param name="task"><see cref="T:Dynamicweb.Scheduling.Task"/> object instance</param>
</member>
<member name="P:Dynamicweb.Scheduling.DBIntegrationJob.Url">
 <summary>
 Gets job url
 </summary>
 <returns>string data</returns>
</member>
<member name="M:Dynamicweb.Scheduling.DBIntegrationJob.Execute">
 <summary>
 Executes DBIntegration job
 </summary>
</member>
<member name="T:Dynamicweb.Scheduling.FileJob">
 <summary>
 Represents FileJob class
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.FileJob.#ctor(Dynamicweb.Scheduling.Task)">
 <summary>
 Creates new FileJob instance using task data
 </summary>
 <param name="task"><see cref="T:Dynamicweb.Scheduling.Task"/> object instance</param>
</member>
<member name="M:Dynamicweb.Scheduling.FileJob.Execute">
 <summary>
 Executes job
 </summary>
</member>
<member name="T:Dynamicweb.Scheduling.Job">
 <summary>
 Represents job
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.Job.#ctor(Dynamicweb.Scheduling.Task)">
 <summary>
 Creates new job instance using task data
 </summary>
 <param name="task"><see cref="T:Dynamicweb.Scheduling.Task"/> object instance</param>
</member>
<member name="M:Dynamicweb.Scheduling.Job.Execute">
 <summary>
 Executes job
 </summary>
</member>
<member name="T:Dynamicweb.Scheduling.JobFactory">
 <summary>
 Represents a factory for creating different types of scheduled task jobs.
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.JobFactory.GetJob(Dynamicweb.Scheduling.Task)">
 <summary>
 Returns a job for the given scheduled task.
 </summary>
 <param name="task">Task instance.</param>
 <returns>A new job for the given scheduling task.</returns>
</member>
<member name="T:Dynamicweb.Scheduling.MethodJob">
 <summary>
 Represents method job
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.MethodJob.#ctor(Dynamicweb.Scheduling.Task)">
 <summary>
 Creates new job instance using task data
 </summary>
 <param name="task"><see cref="T:Dynamicweb.Scheduling.Task"/> object instance</param>
</member>
<member name="M:Dynamicweb.Scheduling.MethodJob.Execute">
 <summary>
 Executes job run
 </summary>
</member>
<member name="T:Dynamicweb.Scheduling.Notifications.ScheduledTaskNotifications">
 <summary>
 Represents a set of notifications available in Scheduling.
 </summary>
</member>
<member name="F:Dynamicweb.Scheduling.Notifications.ScheduledTaskNotifications.OnScheduledTaskStart">
 <summary>Before scheduled task run notification. Occurs before scheduled task run.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Scheduling.Notifications.TaskStartNotificationArgs">TaskStartNotificationArgs</see></remarks>
</member>
<member name="F:Dynamicweb.Scheduling.Notifications.ScheduledTaskNotifications.OnScheduledTaskEnd">
 <summary>Before scheduled task complete notification. Occurs before scheduled task complete.</summary>
 <remarks>The passed NotificationArgs is <see cref="T:Dynamicweb.Scheduling.Notifications.TaskEndNotificationArgs">TaskEndNotificationArgs</see></remarks>
</member>
<member name="T:Dynamicweb.Scheduling.Notifications.TaskEndNotificationArgs">
 <summary>Provides information about the scheduled task.</summary>
</member>
<member name="F:Dynamicweb.Scheduling.Notifications.TaskEndNotificationArgs.TaskName">
 <summary>
 Gets the task name.
 </summary>
</member>
<member name="F:Dynamicweb.Scheduling.Notifications.TaskEndNotificationArgs.ResultMessage">
 <summary>
 Gets the task result.
 </summary>
</member>
<member name="F:Dynamicweb.Scheduling.Notifications.TaskEndNotificationArgs.Exception">
 <summary>
 Gets the task exception.
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.Notifications.TaskEndNotificationArgs.#ctor(System.String,System.String)">
 <summary>
 Creates a new instance of a class.
 </summary>
 <param name="taskName">The task name.</param>
 <param name="resultMessage">The task result.</param>
</member>
<member name="M:Dynamicweb.Scheduling.Notifications.TaskEndNotificationArgs.#ctor(System.String,System.Exception)">
 <summary>
 Creates a new instance of a class.
 </summary>
 <param name="taskName">The task name.</param>
 <param name="exception">The task exception.</param>
</member>
<member name="T:Dynamicweb.Scheduling.Notifications.TaskStartNotificationArgs">
 <summary>Provides information about the scheduled task.</summary>
</member>
<member name="F:Dynamicweb.Scheduling.Notifications.TaskStartNotificationArgs.TaskName">
 <summary>
 Gets the task name.
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.Notifications.TaskStartNotificationArgs.#ctor(System.String)">
 <summary>
 Creates a new instance of the class.
 </summary>
 <param name="taskName">The task name.</param>
</member>
<member name="T:Dynamicweb.Scheduling.PageJob">
 <summary>
 Represents page job
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.PageJob.#ctor(Dynamicweb.Scheduling.Task)">
 <summary>
 Creates new job instance using task data
 </summary>
 <param name="task"><see cref="T:Dynamicweb.Scheduling.Task"/> object instance</param>
</member>
<member name="T:Dynamicweb.Scheduling.TaskManagerMail">
 <summary>
 Provides functionality for sending mail notifications
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.TaskManagerMail.SendNotificationMail(System.String,System.String,System.String)">
 <summary>
 Sends mail notification
 </summary>
 <param name="toID">Identifier of recipient</param>
 <param name="fromID">Identifier of sender</param>
 <param name="taskID">Task identifier</param>
</member>
<member name="T:Dynamicweb.Scheduling.Task">
 <summary>
 Represents task
 </summary>
</member>
<member name="P:Dynamicweb.Scheduling.Task.Token">
 <summary>
 Gets or sets task token
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Scheduling.Task.#ctor(System.Int32)">
 <summary>
 Creates new <see cref="T:Dynamicweb.Scheduling.Task"/> instance
 </summary>
 <param name="id">Task identifier</param>
</member>
<member name="M:Dynamicweb.Scheduling.Task.#ctor(System.Data.IDataReader)">
 <summary>
 Creates new 
 </summary>
 <param name="reader"></param>
</member>
<member name="M:Dynamicweb.Scheduling.Task.GetActivationUrl(Dynamicweb.Scheduling.Task,System.String)">
 <summary>
 Gets the activation URL.
 </summary>
 <param name="task">The task.</param>
 <param name="domain">The domain. Include the protocol.</param>
 <returns></returns>
 <exception cref="T:System.ArgumentNullException">
 domain
 or
 task
 </exception>
</member>
<member name="P:Dynamicweb.Scheduling.Task.Name">
 <summary>
 Gets or sets task name
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.ID">
 <summary>
 Gets task identifier
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.Enabled">
 <summary>
 Gets or sets enabled state
 </summary>
 <returns>True or false value</returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.Type">
 <summary>
 Gets or sets 
 </summary>
 <returns>Integer value</returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.Day">
 <summary>
 Gets or sets day value
 </summary>
 <returns>Integer value</returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.DayOfWeek">
 <summary>
 Gets or sets week day
 </summary>
 <returns>Integer value</returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.Hour">
 <summary>
 Gets or sets hour value
 </summary>
 <returns>Integer value</returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.Minute">
 <summary>
 Gets or sets minute value
 </summary>
 <returns>Integer value</returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.Assembly">
 <summary>
 Gets or sets assembly
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.Namespace">
 <summary>
 Gets or sets namespace
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.Class">
 <summary>
 Gets or sets class
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.Target">
 <summary>
 Gets or sets target
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.Begin">
 <summary>
 Gets or sets task begin datetime stamp
 </summary>
 <returns>DateTime stamp</returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.End">
 <summary>
 Gets or sets task end datetime stamp
 </summary>
 <returns>DateTime stamp</returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.Args">
 <summary>
 Gets or sets arguments
 </summary>
 <returns>Array of strings</returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.AddInSettings">
 <summary>
 Gets or sets add-in settings
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.StartFromLastRun">
 <summary>
 Gets or sets a value to indicate if next run time should be calculated based on the end of the last run time or based on <see cref="P:Dynamicweb.Scheduling.Task.Begin"/> start time.
 </summary>
 <remarks>If set to true, a number of minutes will be added to the end of the task run time for the next run time.
 If set to false, the begin date and time will be used to calculate the next. I.e. always run 24 hours after the last start, i.e. 02.00 every night
 </remarks>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.Schedule">
 <summary>
 Gets task schedule
 </summary>
 <returns>String representation of task schedule data</returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.NextRun">
 <summary>
 Gets next run date
 </summary>
 <returns>String representation of next run date</returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.UpcomingRuntime">
 <summary>
 Gets or sets the date and time of the next task execution.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Scheduling.Task.LastRun">
 <summary>
 Gets last run date
 </summary>
 <returns>String representation of last run date</returns>
</member>
<member name="P:Dynamicweb.Scheduling.Task.PreviousRuntime">
 <summary>
 Gets or sets the date and time of the last task execution.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Scheduling.Task.ActiveImage">
 <summary>
 Gets active state image
 </summary>
 <returns>Image path</returns>
</member>
<member name="M:Dynamicweb.Scheduling.Task.Save">
 <summary>
 Saves task state to database
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.Task.SetNextRun">
 <summary>
 Sets task next run date time
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.Task.CalculateNextRuntime(System.DateTime,System.Int32,System.DateTime)">
 <summary>
 Calculates the next runtime based on a set begin time, an interval specified in minutes and a time point from which the next run time should be after.
 The begin time is used to find the proper next runtime to be in line with the right clock.
 I.e. if begin time is 2017/3/31 02.00 and we have to run every hour (interval = 60 minutes), no matter the value of calculateFromDateTime, the next runtime would be N*60 minutes away from begin time
 So if calculateFromDateTime is 2018/4/12 13.41 the result would be 2018/4/12 14.00
 </summary>
 <param name="beginDateTime">The begin date time.</param>
 <param name="runEveryMinutes">The run every minutes.</param>
 <param name="calculateFromDateTime">The calculate from date time.</param>
 <returns>System.DateTime.</returns>
</member>
<member name="M:Dynamicweb.Scheduling.Task.Delete(System.Int32)">
 <summary>
 Deletes scheduled task with specific id
 </summary>
 <param name="id">ID of task to be deleted</param>
</member>
<member name="M:Dynamicweb.Scheduling.Task.ChangeActive">
 <summary>
 Change active state of current task
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.Task.ChangeActive(System.Int32,System.String,System.Boolean)">
 <summary>
 Change active state of current task
 </summary>
 <param name="type">Type of task</param>
 <param name="target">Task target</param>
 <param name="active">Is active</param>
 <returns>The number of rows affected with update sql command</returns>
</member>
<member name="M:Dynamicweb.Scheduling.Task.SetLastRun">
 <summary>
 Sets last run date time stamp
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.Task.GetLastExistingTaskName(System.String)">
 <summary>
 Gets last existing task name
 </summary>
 <param name="name">Name of task</param>
 <returns>Last existing task name</returns>
</member>
<member name="M:Dynamicweb.Scheduling.Task.GetActiveTasksCount">
 <summary>
 Gets count of active tasks
 </summary>
 <returns>Number of active tasks</returns>
</member>
<member name="M:Dynamicweb.Scheduling.Task.GetCopy">
 <summary>
 Gets the task object copy.
 </summary>
 <returns>Task.</returns>
</member>
<member name="T:Dynamicweb.Scheduling.TaskCollection">
 <summary>
 Represents collection of tasks
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.TaskCollection.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="T:Dynamicweb.Scheduling.TaskType">
 <summary>
 Enumeration for task type
 </summary>
</member>
<member name="T:Dynamicweb.Scheduling.UrlJob">
 <summary>
 Represents UrlJob
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.UrlJob.#ctor(Dynamicweb.Scheduling.Task)">
 <summary>
 Creates new UrlJob instance using task object data
 </summary>
 <param name="task"><see cref="T:Dynamicweb.Scheduling.Task"/> object instance</param>
</member>
<member name="M:Dynamicweb.Scheduling.UrlJob.Execute">
 <summary>
 Executes UrlJob
 </summary>
</member>
<member name="T:Dynamicweb.Scheduling.WindowsScheduler">
 <summary>
 Provides methods an properties for managing Windows Scheduled Tasks service.
 </summary>
</member>
<member name="F:Dynamicweb.Scheduling.WindowsScheduler.FolderName">
 <summary>
 Gets the name of the folder within the Scheduled Tasks tool (if supports folder structure).
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Scheduling.WindowsScheduler.DefaultInternalServerCurlPath">
 <summary>
 The default path used in internal servers to the curl.exe 
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Scheduling.WindowsScheduler.CurlParameters">
 <summary>
 Curl.exe parameters
 -k insecure (SSL) This option explicitly allows curl to perform "insecure" SSL connections And transfers
 </summary>
</member>
<member name="P:Dynamicweb.Scheduling.WindowsScheduler.CurlPath">
 <summary>
 Gets the physical path to the Curl executive.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Scheduling.WindowsScheduler.UrlPath">
 <summary>
 Gets the absolute virtual path to the page that handles upcoming tasks.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Scheduling.WindowsScheduler.PowerShellArguments">
 <summary>
 Gets the arguments passed to the powershell.exe
 </summary>    
</member>
<member name="M:Dynamicweb.Scheduling.WindowsScheduler.EnsureSchedulerIsRunning(System.String,System.String,System.String)">
 <summary>
 Ensures that the Windows Scheduled Task is running.
 </summary>
 <param name="user">Name of the user that has permissions to manage Scheduled Tasks.</param>
 <param name="password">User password.</param>
 <param name="domain">Domain that the user belogs to.</param>
</member>
<member name="M:Dynamicweb.Scheduling.WindowsScheduler.StopScheduler(System.String,System.String,System.String)">
 <summary>
 Shuts down the Windows Scheduled Task.
 </summary>
 <param name="user">Name of the user that has permissions to manage Scheduled Tasks.</param>
 <param name="password">User password.</param>
 <param name="domain">Domain that the user belogs to.</param>
</member>
<member name="M:Dynamicweb.Scheduling.WindowsScheduler.FindTaskLastRunTime(System.String,System.String,System.String)">
 <summary>
 Retrieves the scheduled task last run time if it was found.
 </summary>
 <param name="user">Name of the user that has permissions to manage Scheduled Tasks.</param>
 <param name="password">User password.</param>
 <param name="domain">Domain that the user belogs to.</param>
 <returns>Date when Windows Scheduled Task was last executed or null if the task cannot be found.</returns>
</member>
<member name="M:Dynamicweb.Scheduling.WindowsScheduler.FindTaskLastRunDate(System.String,System.String,System.String)">
 <summary>
 Retrieves the scheduled task last run time if it was found.
 </summary>
 <param name="user">Name of the user that has permissions to manage Scheduled Tasks.</param>
 <param name="password">User password.</param>
 <param name="domain">Domain that the user belogs to.</param>
 <returns>Date when Windows Scheduled Task was last executed or null if the task cannot be found.</returns>
</member>
<member name="M:Dynamicweb.Scheduling.WindowsScheduler.FindTasks(Microsoft.Win32.TaskScheduler.TaskService)">
 <summary>
 Retrieves all scheduled tasks.
 </summary>
 <param name="taskService">An instance of the task service used to find the tasks.</param>
 <returns>Windows Scheduled Tasks Collection.</returns>
</member>
<member name="M:Dynamicweb.Scheduling.WindowsScheduler.FindTaskWithCurl(Microsoft.Win32.TaskScheduler.TaskService)">
 <summary>
 Retrieves the corresponding Scheduled Task with Curl action.
 </summary>
 <param name="taskService">An instance of the task service used to find the target task.</param>
 <returns>Windows Scheduled Task that handles Dynamicweb sehceuled tasks or null (Nothing in Visual Basic) if the task cannot be found.</returns>
</member>
<member name="M:Dynamicweb.Scheduling.WindowsScheduler.FindTaskWithPowerShell(Microsoft.Win32.TaskScheduler.TaskService)">
 <summary>
 Retrieves the corresponding Scheduled Task with PowerShell action
 </summary>
 <param name="taskService">An instance of the task service used to find the target task.</param>
 <returns>Windows Scheduled Task that handles Dynamicweb sehceuled tasks or null (Nothing in Visual Basic) if the task cannot be found.</returns>
</member>
<member name="M:Dynamicweb.Scheduling.WindowsScheduler.SupportsFolderStructure(Microsoft.Win32.TaskScheduler.TaskService)">
 <summary>
 Determines whether specified task service supports folder structure.
 </summary>
 <param name="taskService">Task service to examine.</param>
 <returns>Value indicating whether task service supports folder structure.</returns>
</member>
<member name="M:Dynamicweb.Scheduling.WindowsScheduler.GetUrlPath(System.String)">
 <summary>
 Gets the absolute virtual path to the page that handles upcoming tasks.
 </summary>
</member>
<member name="M:Dynamicweb.Scheduling.WindowsScheduler.GetCurlArguments(System.String)">
 <summary>
 Gets the arguments passed to the curl.exe
 </summary>    
</member>
<member name="M:Dynamicweb.Scheduling.WindowsScheduler.CreateTask(Microsoft.Win32.TaskScheduler.TaskService,Microsoft.Win32.TaskScheduler.TaskDefinition)">
 <summary>
 Creates the Task with PowerShell
 </summary>
 <param name="taskService">Task Service</param>
 <param name="taskDefinition">Task definition</param>
</member>
<member name="M:Dynamicweb.Scheduling.WindowsScheduler.DeleteTask(Microsoft.Win32.TaskScheduler.TaskService,Microsoft.Win32.TaskScheduler.Task)">
 <summary>
 Deletes the task
 </summary>
 <param name="taskService">Task Service</param>
 <param name="task">Task to delete</param>
 <returns></returns>
</member>
</members>
</doc>
