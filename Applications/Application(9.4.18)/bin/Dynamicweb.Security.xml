<?xml version="1.0"?>
<doc>
<assembly>
<name>
Dynamicweb.Security
</name>
</assembly>
<members>
<member name="T:Dynamicweb.Security.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Dynamicweb.Security.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Dynamicweb.Security.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Dynamicweb.Security.Access">
 <summary>
  This class contains the functions which use for users access handling.
 </summary>
</member>
<member name="M:Dynamicweb.Security.Access.StripPropertiesToArray(System.String)">
 <summary>
 Extracts properties from input XML.
 </summary>
 <param name="xmlData">Input XML.</param>
 <returns>Array of properties, otherwise "NOTHING".</returns>
</member>
<member name="T:Dynamicweb.Security.Authorization">
 <summary>
 Provides autorization-specific functions
 </summary>
</member>
<member name="M:Dynamicweb.Security.Authorization.HasAccess(System.String)">
 <summary>
 Checks if the current user has access to the module
 This is the same as calling HasAccess(moduleSystemName, Nothing)
 </summary>
 <param name="moduleSystemName"></param>
</member>
<member name="M:Dynamicweb.Security.Authorization.UserHasAccess(System.String,System.String)">
 <summary>
 Checks whether the current user, has access to a specific module or a value within that specific module.
 </summary>
 <param name="key"></param>
 <param name="value"></param>
 <returns>True if the current user has access.</returns>
 <history>
     [bbr]   11-04-2005  Comments edited
 	[daf]	14-03-2005	Created
 </history>
 -----------------------------------------------------------------------------
</member>
<member name="M:Dynamicweb.Security.Authorization.ModulesToHideInNewUi">
 <summary>
 Modules to hide in new UI. Will not be shown anywhere because they are deprecated or moved to management center.
 </summary>
 <returns>List of modules names</returns>
 <remarks>By default everyone have access to these modules... HasAccess and IsInstalled will return true.</remarks>
</member>
<member name="M:Dynamicweb.Security.Authorization.ModulesToHideInNewUiIfNotInstalled">
 <summary>
 Modules to hide in new UI if not installed. Deprecated modules
 </summary>
 <returns>Deprecated modules...</returns>
</member>
<member name="M:Dynamicweb.Security.Authorization.ModulesToHideInNewUiList">
 <summary>
 Modules to hide in new UI list. Can be added to a paragraph, but will not show up in module lust
 </summary>
 <returns>List of modules names</returns>
 <remarks>I.e. Templates and ControlLoader</remarks>
</member>
<member name="T:Dynamicweb.Security.Impersonation">
 <summary>
 Provides methods to impersonate the authenticated identity under the code should be executed.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Impersonation.Success">
 <summary>
 Gets value indicating whether impersonation succeeded.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Impersonation.DomainName">
 <summary>
 Gets domain name
 </summary>
 <returns>String value</returns>
</member>
<member name="M:Dynamicweb.Security.Impersonation.ImpersonateByFormRequest">
 <summary>
 Performs impersonation using credentials parsed from the current POST request.
 </summary>
</member>
<member name="M:Dynamicweb.Security.Impersonation.ImpersonateByCredentials(Dynamicweb.Security.ImpersonationCredentials)">
 <summary>
 Performs impersonation using specified credentials.
 </summary>
 <param name="credentials">Credentials to use.</param>
</member>
<member name="M:Dynamicweb.Security.Impersonation.HostingImpersonateCredentials">
 <summary>
 Provides hosting impersonation credentials
 </summary>
 <returns><see cref="T:Dynamicweb.Security.ImpersonationCredentials"/> object instnace</returns>
</member>
<member name="M:Dynamicweb.Security.Impersonation.Impersonate(System.String,System.String)">
 <summary>
 Performs impersonation using specified user-name and password.
 </summary>
 <param name="userName">User-name.</param>
 <param name="password">password.</param>
</member>
<member name="M:Dynamicweb.Security.Impersonation.Impersonate(System.String,System.String,System.String)">
 <summary>
 Performs impersonation using specified user-name and password.
 </summary>
 <param name="userName">User-name.</param>
 <param name="password">password.</param>
 <param name="domain">Domain name.</param>
</member>
<member name="M:Dynamicweb.Security.Impersonation.ImpersonateEnd">
 <summary>
 Terminates current impersonation.
 </summary>
</member>
<member name="M:Dynamicweb.Security.Impersonation.ImpersonateValidUser(System.String,System.String,System.String)">
 <summary>
 Performs impersonation using specified user-name and password.
 </summary>
 <param name="username">User-name.</param>
 <param name="password">password.</param>
 <param name="domain">Domain name.</param>
</member>
<member name="M:Dynamicweb.Security.Impersonation.UndoImpersonation">
 <summary>
 Terminates current impersonation.
 </summary>
</member>
<member name="M:Dynamicweb.Security.Impersonation.Dispose(System.Boolean)">
 <summary>
 Disposes unmanaged resources.
 </summary>
</member>
<member name="T:Dynamicweb.Security.ImpersonationCredentials">
 <summary>
 Represents impersonation credentials.
 </summary>
</member>
<member name="P:Dynamicweb.Security.ImpersonationCredentials.Type">
 <summary>
 Gets or sets impersonation type.
 </summary>
</member>
<member name="P:Dynamicweb.Security.ImpersonationCredentials.ImpersonationType">
 <summary>
 Gets or sets impersonation type.
 </summary>
</member>
<member name="P:Dynamicweb.Security.ImpersonationCredentials.UserName">
 <summary>
 Gets or sets user name.
 </summary>
</member>
<member name="P:Dynamicweb.Security.ImpersonationCredentials.UserNameWithoutDomain">
 <summary>
 Gets the user-name without a domain suffix.
 </summary>
</member>
<member name="P:Dynamicweb.Security.ImpersonationCredentials.Password">
 <summary>
 Gets or sets password.
 </summary>
</member>
<member name="P:Dynamicweb.Security.ImpersonationCredentials.Domain">
 <summary>
 Gets or sets domain name.
 </summary>
</member>
<member name="M:Dynamicweb.Security.ImpersonationCredentials.#ctor(Dynamicweb.Security.ImpersonationType)">
 <summary>
 Creates new instance of a class.
 </summary>
 <param name="type">Impersonation type.</param>
</member>
<member name="M:Dynamicweb.Security.ImpersonationCredentials.GetCredentialsByFormRequest">
 <summary>
 Retrieves impersonation credentials from the current form request.
 </summary>
</member>
<member name="M:Dynamicweb.Security.ImpersonationCredentials.ApplyBackendCredentials">
 <summary>
 Applies backend user credentials to the current instance.
 </summary>
</member>
<member name="M:Dynamicweb.Security.ImpersonationCredentials.RemoveDomainSuffix(System.String)">
 <summary>
 Removes the domain suffix from the given user-name.
 </summary>
 <param name="userName">User-name to process.</param>
</member>
<member name="T:Dynamicweb.Security.ImpersonationType">
 <summary>
 Represents impersonation type.
 </summary>
</member>
<member name="F:Dynamicweb.Security.ImpersonationType.BackendUser">
 <summary>
 Use backend user credentials for impersonation.
 </summary>
</member>
<member name="F:Dynamicweb.Security.ImpersonationType.Custom">
 <summary>
 Custom impersonation.
 </summary>
</member>
<member name="T:Dynamicweb.Security.Licensing.License">
 <summary>
 This file contains the information of what a license entails.
 </summary>
 <seealso cref="T:System.IComparable`1" />
</member>
<member name="M:Dynamicweb.Security.Licensing.License.HasFeature(System.String)">
 <summary>
 Determines whether the specified is available for use.
 </summary>
 <param name="feature">The feature.</param>
 <returns>
   <c>true</c> if the specified feature has feature; otherwise, <c>false</c>.
 </returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.License.IsTrial">
 <summary>
 Indicates if the current license is a trial
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Security.Licensing.LicenseManager">
 <summary>
 This class performs actions on the current license
 </summary>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseManager.Initialize(System.String,System.String,System.String)">
 <summary>
 Initializes the LicenseManager
 </summary>
 <param name="folderPath">The path to the folder where the license files should be placed</param>
 <param name="fileName">The name of the license file</param>
 <param name="installationChecksum">The installation id for the current installation</param>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseManager.IsLicenseValid(System.String)">
 <summary>
 Gives a boolean indicating if the current license if valid for the current installation
 </summary>
 <param name="installationChecksum">The installationid for the current installation</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseManager.HasLicenseBeenUpdated">
 <summary>
 Gives a bool indicating if the current license has been within the expected period
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseManager.GetLicenseServiceUrlSetting">
 <summary>
 Retrives the LicenseServiceUrl from GlobalSettings. If it isn't present it will fallback to the default value
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseManager.LicenseHasFeature(System.String)">
 <summary>
 Checks if the current license has the specified feature
 </summary>
 <param name="featureName">The name of the feature, we want to check if the license contains</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseManager.UpdateLicenseOnDisk(System.String)">
 <summary>
 Deserialiszes the current license object, and saves it to the license files located on the disk
 </summary>
 <param name="installationChecksum"></param>
</member>
<member name="P:Dynamicweb.Security.Licensing.LicenseManager.License">
 <summary>
 Retrives the license either from the cache or from the disk
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseManager.RefreshLicense">
 <summary>
 Reads the license file, and saves the value in the cache
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseManager.CacheLicense(Dynamicweb.Security.Licensing.License)">
 <summary>
 Caches the current instance of the license
 </summary>
 <param name="instance">The instance of the license, which will be added to the cache</param>
</member>
<member name="T:Dynamicweb.Security.Licensing.LicenseSerializer">
 <summary>
 This class handles how a licensefile is stored or retrieved.
 </summary>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseSerializer.SaveOperationImplementation(System.String,System.String)">
 <summary>
 Saves a license file to a specific location
 </summary>
 <param name="path">The path where the file should be located</param>
 <param name="content">The content, which should be in the file</param>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseSerializer.Serialize(System.IO.Stream,Dynamicweb.Security.Licensing.License)">
 <summary>
 Serializes the given license instance, and saves it on the disk. If encryption is enabled, the content in the stream will be encrypted before its saved.
 </summary>
 <param name="stream">The stream where the serialized data will be placed</param>
 <param name="license">The license instance, which will be serialized</param>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseSerializer.Serialize(Dynamicweb.Security.Licensing.License)">
 <summary>
 Serializes the given license instance, and saves it on the disk. If encryption is enabled, the content in the stream will be encrypted before its saved.
 </summary>
 <param name="license">The license instance, which will be serialized</param>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseSerializer.Deserialize(System.IO.Stream)">
 <summary>
 Deserializes the content from a given stream to a license.
 </summary>
 <param name="stream">The stream containing the license data</param>
 <returns>A license object, which represents the data from the given stream</returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseSerializer.Deserialize">
 <summary>
 Deserializes the content from the license file, which is associated with this LicenseSerializer
 </summary>
 <returns>A license object, which represents the data from the license file</returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseSerializer.TryToFillStreamWithReadOperation(System.IO.StreamWriter,System.IO.Stream)">
 <summary>
 Reads the data from the license file associated with this LicenseSerializer.
 </summary>
 <param name="writer"></param>
 <param name="stream"></param>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseSerializer.IsPlainTextXml(System.String)">
 <summary>
 Checks if the license file contains plain xml or if it's encrypted
 </summary>
 <param name="licenseFileString">The content from the license file</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseSerializer.SaveLicense(System.String,System.String)">
 <summary>
 Saves some content in a file at a specific location
 </summary>
 <param name="path">The location where the file should be saved</param>
 <param name="Text">The content of the file</param>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseSerializer.ReadLicense(System.String)">
 <summary>
 Reads all the content from a specific file, and returns it.
 </summary>
 <param name="path">The path to the file, which should be read</param>
 <returns>The content from the file if it exists, otherwise it will return an empty string</returns>
</member>
<member name="T:Dynamicweb.Security.Licensing.LicenseServiceManager">
 <summary>
 This class exposes the functionality from the internal LicenseServiceManager as a static object
 </summary>
</member>
<member name="T:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal">
 <summary>
 This class handles all communication with the LicenseService
 </summary>
</member>
<member name="P:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.Url">
 <summary>
 The url to the LicenseService 
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.TimeBeforeUpdateLicense">
 <summary>
 The time before a license should be updated
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.TimeBeforeWarning">
 <summary>
 The time before a warning will be displayed, if the license hasn't been updated
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.TimeBeforeLockBackend">
 <summary>
 The time before the backend will be locked, if the license hasn't been updated
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.GetLicense(System.String)">
 <summary>
 Retrives an updated version of the license for this installation from the LicenseService
 </summary>
 <param name="checksum">The installation id for the current installation</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.GetLicense(System.String,System.String)">
 <summary>
 Retrives an updated version of the license for this installation from the LicenseService
 </summary>
 <param name="checksum">The installation id for the current installation</param>
 <param name="trialId">If the current license is a trial, this tell which trial it is</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.ConvertSolutionXmlToDictionary(System.String)">
 <summary>
 Converts the solution xml to a dictionary
 </summary>
 <param name="installationXml">The solution xml string</param>
 <returns>A dictionary containing the installation from the solution xml</returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.GetLastWwwAccess(System.String)">
 <summary>
 Retrives information about when the last WWW access was for the given solution
 </summary>
 <param name="installationChecksum">The installation id for the current installation</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.WriteLicense(Dynamicweb.Security.Licensing.License,System.String)">
 <summary>
 Writes the given license instance to the disk and refreshes the cache
 </summary>
 <param name="license">The license instance, which should be saved</param>
 <param name="installationChecksum">The installation id for the current installation</param>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.GetEnvironmentTypes">
 <summary>
 Retrives all the environment types from the LicenseService
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.TempLicense(Dynamicweb.Security.Licensing.License)">
 <summary>
 Retrives a new license from the LicenseService, from the ItemList property in the given license
 </summary>
 <param name="currentLicense">The license instance, which contains a number of NAV item numbers in the ItemList-property</param>
 <returns>The new license instance, which matches the NAV item numbers in the ItemList-property</returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.GetAllSolutions">
 <summary>
 Retrives a list of all solutions from the LicenseService
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.GetAllAddOnItems">
 <summary>
 Retrives a list of all add-ons from the LicenseService
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.GetTrialTypes">
 <summary>
 Retrives a list of all trial types from the LicenseService
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.GetSubscriptions(System.String)">
 <summary>
 Retrives a list of the all subscriptions for a specific customer from the LicenseService
 </summary>
 <param name="customerNumber">The NAV customer number</param>
 <returns>A list of the subscriptions for the specified customer</returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.GetCustomers(System.String)">
 <summary>
 Retrives a list of the all customers for a specific partner from the LicenseService
 </summary>
 <param name="partnerNumber">The NAV partner number</param>
 <returns>A list of the customers for the specified partner</returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.RefreshLicense(System.String,System.String)">
 <summary>
 Check if its time to refresh the license. If the license should be updated, it will retrive a new license from the LicenseService
 </summary>
 <param name="installationChecksum">The installation id for the current installation</param>
 <param name="installationProperties">Installation properties for the current installation. These will be sent to the LicenseService</param>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.DisableApplication(System.String)">
 <summary>
 Locks the backend with a message, which will be displayed on the login screen
 </summary>
 <param name="message">The message to be displayed at the login screen</param>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.ConfigureClient(System.Net.Http.HttpClient)">
 <summary>
 Configures the HttpClient instance, which will be used to communicate with the LicenseService
 </summary>
 <param name="client">The HttpClient which will be configured</param>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.ConfigureBaseAddress(System.Net.Http.HttpClient,System.String)">
 <summary>
 Sets the base address on the given HttpClient
 </summary>
 <param name="client">The HttpClient instance to set the base address on</param>
 <param name="url">The url which will be used as base address</param>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.HasAccessToService(System.Net.Http.HttpResponseMessage)">
 <summary>
 Check if we have a connection to the LicenseService
 </summary>
 <param name="response">A HttpResponseMessage from the LicenseService</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.RegisterInstallation(Dynamicweb.Security.Licensing.DataObjects.Installation)">
 <summary>
 Sends information about the current installation to the LicenseService.
 </summary>
 <param name="installation">The information about the current installation</param>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.SetInstallationProperties(System.String,System.String)">
 <summary>
 Sends the installation properties to the LicenseService
 </summary>
 <param name="installationProperties">The properties for the current installation</param>
 <param name="installationChecksum">The installation id for the current installation</param>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.IssueTrial(Dynamicweb.Security.Licensing.DataObjects.Installation,System.String)">
 <summary>
 Sends a request to the LicenseService to issue a trial for the current installation
 </summary>
 <param name="installation">Information about the current installation</param>
 <param name="trialId">The id of the selected trial type</param>
 <returns>A boolean indicating if the trial has been created or not</returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.LogOn(System.String,System.String)">
 <summary>
 Tries to login as the partner and retrives a list of the users customers
 </summary>
 <param name="userName">The username of the partner</param>
 <param name="password">The password of the partner</param>
 <returns>The list of the current partners customers</returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.GetDebugLicense(System.String,Dynamicweb.Security.Licensing.DataObjects.Installation,System.String)">
 <summary>
 Sends information about an existing license, which matches another installation. 
 </summary>
 <param name="previousLicenseChecksum">The installation id for the installation which own the license</param>
 <param name="currentInstallation">The installation id for the current installation</param>
 <param name="userName">The username of the user, which has requested the debug license</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Licensing.LicenseServiceManagerInternal.NotifyDynamicweb(System.String,System.Exception)">
 <summary>
 Sends an email to dynamicweb
 </summary>
 <param name="subject"></param>
 <param name="exception"></param>
</member>
<member name="M:Dynamicweb.Security.Permissions.IDisplayName.GetDisplayName">
 <summary>
 Yields a human-readable name for rendering.
 </summary>
 <returns>name</returns>
</member>
<member name="T:Dynamicweb.Security.Permissions.IPermissionCustomAncestors">
 <summary>
 Interface for objects that are used in a hierarchy with different parents depending upon context.
 <remarks>GetParent() should return null to work with custom ancestors</remarks>
 </summary>
</member>
<member name="M:Dynamicweb.Security.Permissions.IPermissionCustomAncestors.GetAncestors(System.String[])">
 <summary>
 Defines how ancestors can be resolved from a specified path.
 </summary>
 <param name="path">Path if identifiers</param>
 <returns>ancestors</returns>
</member>
<member name="T:Dynamicweb.Security.Permissions.IPermissionLookup">
 <summary>
 Marks the permission controlled object as an implementation that can be looked up.
 </summary>
</member>
<member name="M:Dynamicweb.Security.Permissions.IPermissionLookup.GetByKey(System.String)">
 <summary>
 Can be used to look up a concrete object based upon the key.
 </summary>
 <param name="key">Identifier</param>
 <returns>permissionControlled</returns>
</member>
<member name="T:Dynamicweb.Security.Permissions.IPermissionControlled">
 <summary>
 A permission controlled object can be used with the permission framework to get the <see cref="T:Dynamicweb.Security.Permissions.PermissionLevel">PermissionLevel</see> for a given user on this object.
 </summary>
</member>
<member name="M:Dynamicweb.Security.Permissions.IPermissionControlled.GetPermissionIdentifier">
 <summary>
 Combination of values that form a unique identifier.
 </summary>
 <returns>Unique identifier.</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.IPermissionControlled.GetParent">
 <summary>
 Gets the parent of this object, for the purposes of inherited permissions.
 </summary>
 <remarks>Return null, if no parent permissions exist</remarks>
 <returns>parent</returns>
</member>
<member name="T:Dynamicweb.Security.Permissions.PermissionControlledAttribute">
 <summary>
 Configuration of how this a given permissioncontrolled object behaves.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Permissions.PermissionControlledAttribute.UsePathInsteadOfIdAsKey">
 <summary>
 Defines that this permissioncontrolled object uses paths instead of ids. Eg. "/Files/Images/Cats.jpg" instead of "123".
 </summary>
 <returns>usePathsInstead</returns>
</member>
<member name="P:Dynamicweb.Security.Permissions.PermissionAncestorContext.Current">
 <summary>
 Gets the current permission context.
 </summary>
 <returns>permissionContext</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionAncestorContext.Dispose">
 <summary>
 Performs application-defined tasks associated with freeing, releasing or resetting unmanaged resources.
 </summary>
</member>
<member name="T:Dynamicweb.Security.Permissions.PermissionLookupManager">
 <summary>
 Loads all permissioncontrolled objects once, when needed, and uses this memorycache for the rest of the application lifecycle.
 </summary>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionLookupManager.UsesPathInsteadOfId(System.String)">
 <summary>
 Indicates that this typename requires a full path instead of an id.
 </summary>
 <param name="name">Name of type</param>
 <returns>usesPath</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionLookupManager.GetPermissionObject(System.String,System.String)">
 <summary>
 Resolvse a <see cref="T:Dynamicweb.Security.Permissions.IPermissionControlled"/> object based upon key, name (and subname).
 </summary>
 <param name="key">Identifier</param>
 <param name="name">Type of permission controlled object</param>
 <returns>permissionControlled</returns>
</member>
<member name="T:Dynamicweb.Security.Permissions.PermissionLevel">
 <summary>
 Indicates how high a level of permission is allowed. Implicitly allows all levels below self.
 None &lt; Read &lt; Edit &lt; Create &lt; Delete
 </summary>
</member>
<member name="F:Dynamicweb.Security.Permissions.PermissionLevel.None">
 <summary>
 Explicit deny all.
 </summary>
</member>
<member name="F:Dynamicweb.Security.Permissions.PermissionLevel.Read">
 <summary>
 Lowest level of access. Allows read.
 </summary>
</member>
<member name="F:Dynamicweb.Security.Permissions.PermissionLevel.Edit">
 <summary>
 Alows Read and Edit.
 </summary>
</member>
<member name="F:Dynamicweb.Security.Permissions.PermissionLevel.Create">
 <summary>
 Allows Read, Edit and Create.
 </summary>
</member>
<member name="F:Dynamicweb.Security.Permissions.PermissionLevel.Delete">
 <summary>
 Allows Read, Edit, Create and Delete.
 </summary>
</member>
<member name="F:Dynamicweb.Security.Permissions.PermissionLevel.All">
 <summary>
 Allows everything.
 </summary>
</member>
<member name="T:Dynamicweb.Security.Permissions.PermissionLevelExtension">
 <summary>
 Extension class for parsing permission levels.
 </summary>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionLevelExtension.HasPermission(Dynamicweb.Security.Permissions.PermissionLevel,Dynamicweb.Security.Permissions.PermissionLevel)">
 <summary>
 Checks to see if specified permission is allowed.
 </summary>
 <param name="ownedPermission">Owned permission</param>
 <param name="requiredPermission">Permissions to be tested against</param>
 <returns>hasSufficientPermission</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.SystemRoleManager.SetupServerRoles">
 <summary>
 Enables or disables the server roles (considering new permissions model is in use).
 </summary>
</member>
<member name="M:Dynamicweb.Security.Permissions.SystemRoleManager.GetAvailableServerRoles">
 <summary>
 Gets all server roles available in the solution.
 </summary>
 <returns>A collection of the <see cref="T:Dynamicweb.Security.UserManagement.Group"/>.</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.SystemRoleManager.GetRole(System.String)">
 <summary>
 Gets the system role by it's system name.
 </summary>
 <param name="systemName">Unique name</param>
 <returns>systemRole</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.SystemRoleManager.GetRolebasedDefaultPermissionLevel(Dynamicweb.Security.UserManagement.LimitedUser)">
 <summary>
 Gets the permission level for the user based on his roles.
 </summary>
 <param name="user">The <see cref="T:Dynamicweb.Security.UserManagement.User"/>. Allows null, for when user is not logged on.</param>
 <returns>The <see cref="T:Dynamicweb.Security.Permissions.PermissionLevel"/> for the user.</returns>
</member>
<member name="T:Dynamicweb.Security.Permissions.UnifiedPermission">
 <summary>
 Model representation of permission data from the storage.
 <remarks>Immutable</remarks>
 </summary>
</member>
<member name="M:Dynamicweb.Security.Permissions.UnifiedPermission.#ctor(System.Int32,System.String,System.String,System.String,System.String,Dynamicweb.Security.Permissions.PermissionLevel)">
 <summary>
 Instantiates a permission level for a user on an identifier.
 </summary>
 <param name="userId">userId</param>
 <param name="key">key</param>
 <param name="name">name</param>
 <param name="subName">subName</param>
 <param name="permission">permission level</param>
</member>
<member name="F:Dynamicweb.Security.Permissions.UnifiedPermission.Id">
 <summary>
 Internal id for mapping to storage.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Permissions.UnifiedPermission.UserId">
 <summary>
 Unique id that matches a user or usergroup.
 <remarks>custom unique userids are supported, but user of these values will have to ensure uniqueness with AccessUser table</remarks>
 </summary>
 <returns>userId</returns>
</member>
<member name="P:Dynamicweb.Security.Permissions.UnifiedPermission.Key">
 <summary>
 Identifier associated with "something" that can get a permission.
 </summary>
 <returns>key</returns>
</member>
<member name="P:Dynamicweb.Security.Permissions.UnifiedPermission.Name">
 <summary>
 Name of type that is affected by permission.
 </summary>
 <example>"Page", "Paragraph", "Item", "MyOwnCustomType" etc.</example>
 <returns>name</returns>
</member>
<member name="P:Dynamicweb.Security.Permissions.UnifiedPermission.SubName">
 <summary>
 Name of derived information related to the type targeted by Name.
 <example>Name="Page", SubName="Sort" gives permissions for the Sort field</example>
 </summary>
 <returns>subName</returns>
</member>
<member name="P:Dynamicweb.Security.Permissions.UnifiedPermission.Permission">
 <summary>
 Permission level that describes what is allowed.
 </summary>
 <returns>permission</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.UnifiedPermission.ToIdentifier">
 <summary>
 Yields the identifier this permission affects.
 </summary>
 <returns>identifier</returns>
</member>
<member name="T:Dynamicweb.Security.Permissions.UnifiedPermissionIdentifier">
 <summary>
 A permission identifier is a unique identifier for "something" that has a permission level.
 </summary>
 <remarks>Immutable</remarks>
</member>
<member name="M:Dynamicweb.Security.Permissions.UnifiedPermissionIdentifier.#ctor(System.String,System.String)">
 <summary>
 Combination of values that form a unique identifier.
 </summary>
 <param name="key">Identity key value</param>
 <param name="name">Name of type that is affected by permission</param>
</member>
<member name="M:Dynamicweb.Security.Permissions.UnifiedPermissionIdentifier.#ctor(System.String,System.String,System.String)">
 <summary>
 Combination of values that form a unique identifier.
 </summary>
 <param name="key">Identity key value</param>
 <param name="name">Name of type that is affected by permission</param>
 <param name="subName">Name of derived information related to the type targeted by Name</param>
</member>
<member name="P:Dynamicweb.Security.Permissions.UnifiedPermissionIdentifier.Key">
 <summary>
 Identifier associated with "something" that can get a permission.
 </summary>
 <returns>key</returns>
</member>
<member name="P:Dynamicweb.Security.Permissions.UnifiedPermissionIdentifier.Name">
 <summary>
 Name of type that is affected by permission.
 </summary>
 <example>"Page", "Paragraph", "Item", "MyOwnCustomType" etc.</example>
 <returns>name</returns>
</member>
<member name="P:Dynamicweb.Security.Permissions.UnifiedPermissionIdentifier.SubName">
 <summary>
 Name of derived information related to the type targeted by Name.
 <example>Name="Page", SubName="Sort" gives permissions for the Sort field</example>
 </summary>
 <returns>subName</returns>
</member>
<member name="T:Dynamicweb.Security.Permissions.UnifiedPermissionQuery">
 <summary>
 A permission query is a description of what parameters you want use for quering the permission storage.
 <example>Name="Page" + Key="123" will return all permissions related to a Page with Id "123"</example>
 </summary>
</member>
<member name="P:Dynamicweb.Security.Permissions.UnifiedPermissionQuery.UserId">
 <summary>
 User id
 </summary>
 <remarks>Leaving this property blank means it will not be a limiting factor for the query, meaning "Any" value is accepted.</remarks>
 <returns>userId</returns>
</member>
<member name="P:Dynamicweb.Security.Permissions.UnifiedPermissionQuery.Key">
 <summary>
 Identifier that is unique in combination with Name.
 </summary>
 <remarks>Leaving this property blank means it will not be a limiting factor for the query, meaning "Any" value is accepted.</remarks>
 <returns>key</returns>
</member>
<member name="P:Dynamicweb.Security.Permissions.UnifiedPermissionQuery.Name">
 <summary>
 Name of type that is affected by permission.
 </summary>
 <example>"Page", "Paragraph", "Item", "MyOwnCustomType" etc.</example>
 <remarks>Leaving this property blank means it will not be a limiting factor for the query, meaning "Any" value is accepted.</remarks>
 <returns>name</returns>
</member>
<member name="P:Dynamicweb.Security.Permissions.UnifiedPermissionQuery.SubName">
 <summary>
 Name of derived information related to the type targeted by Name.
 <example>Name="Page", SubName="Sort" gives permissions for the Sort field</example>
 </summary>
 <remarks>Leaving this property blank means it will not be a limiting factor for the query, meaning "Any" value is accepted.</remarks>
 <returns>subName</returns>
</member>
<member name="P:Dynamicweb.Security.Permissions.UnifiedPermissionQuery.IncludeSubKeys">
 <summary>
 Include sub keys in search result or not.
 <example>
 For file and folders
 Key="MyFolder", Name="Files", IncludeSubKeys=true gives permissions for the folder and all its subfolders:
 \MyFolder
 \MyFolder\Subfolder1
 \MyFolder\Subfolder2
 \MyFolder\Subfolder2\Subfolder3
 </example>
 </summary>
 <remarks>Is useful in case of hierarchical keys.</remarks>
 <returns>includeSubKeys</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.UnifiedPermissionQuery.GetEmptyPropertyNames">
 <summary>
 Gives a list of property names that are null (to be ignored for queries).
 </summary>
 <returns>emptyProperties</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.UnifiedPermissionQuery.IsEmpty">
 <summary>
 If all query properties are null, this return true. Otherwise, false.
 </summary>
 <returns>isEmpty</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.UnifiedPermissionQuery.GetIdentifier">
 <summary>
 Gets the identifier for this query.
 </summary>
 <returns>identifier</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.UnifiedPermissionRepository.Save(System.String,Dynamicweb.Security.Permissions.UnifiedPermissionIdentifier,Dynamicweb.Security.Permissions.PermissionLevel)">
 <summary>
 Sets the specified permission of a user. Will perform an atomic insert or update command agaisnt the storage.
 </summary>
 <remarks>Execution isolation set to SERIALIZABLE</remarks>
 <param name="userId">Id of user</param>
 <param name="target">What is getting the permission</param>
 <param name="permission">Permission level for user on target</param>
</member>
<member name="M:Dynamicweb.Security.Permissions.UnifiedPermissionRepository.AppendCondition(Dynamicweb.Data.CommandBuilder,System.String,System.String,System.Boolean@)">
 <summary>
 Appends the condition IF the value is not nothing.
 </summary>
 <param name="commandBuilder"></param>
 <param name="condition"></param>
 <param name="value"></param>
 <param name="conditionAlreadyAdded"></param>
</member>
<member name="T:Dynamicweb.Security.Permissions.UnifiedPermissionService">
 <summary>
 Handles everything related to working with permissions in the system.
 </summary>
</member>
<member name="M:Dynamicweb.Security.Permissions.UnifiedPermissionService.UseNewPermission">
 <summary>
 Defines if new or old permission model should be used.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.UnifiedPermissionService.ClearUserCache(System.String)">
 <summary>
 Clears the cache for specified id.
 </summary>
 <param name="id">Id of group or user</param>
</member>
<member name="M:Dynamicweb.Security.Permissions.UnifiedPermissionService.GetPermission(System.String,Dynamicweb.Security.Permissions.UnifiedPermissionIdentifier,Dynamicweb.Security.Permissions.PermissionLevel)">
 <summary>
 Retrieves the permission level for the specified user and query.
 </summary>
 <param name="userId">Id of user</param>
 <param name="identifier">Target of permission</param>
 <param name="defaultPermission">The permission level to use, if no permission was configured for the identifier</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.UnifiedPermissionService.TryGetPermission(Dynamicweb.Security.PermissionPriorityQueue{System.String},Dynamicweb.Security.Permissions.UnifiedPermissionIdentifier,System.Nullable{Dynamicweb.Security.Permissions.PermissionLevel}@)">
 <summary>
 Retrieves the permission level closest to the top of the permission queue. If multiple permissions recide on the same level, these will be consolidated to one result.
 </summary>
 <param name="permissionPriorities">Permission queue</param>
 <param name="identifier"></param>
 <param name="permissionLevel"></param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.UnifiedPermissionService.SetPermission(System.String,Dynamicweb.Security.Permissions.UnifiedPermissionIdentifier,Dynamicweb.Security.Permissions.PermissionLevel)">
 <summary>
 Sets permissions for the specified userid and query.
 </summary>
 <param name="userId">Id of user</param>
 <param name="identifier">Target of permission</param>
 <param name="permission">Permission level</param>
</member>
<member name="M:Dynamicweb.Security.Permissions.UnifiedPermissionService.DeletePermission(System.String,Dynamicweb.Security.Permissions.UnifiedPermissionIdentifier)">
 <summary>
 Deletes all permissions for the specified userid and query.
 </summary>
 <param name="userId">Id of user</param>
 <param name="identifier">Target of permission</param>
</member>
<member name="M:Dynamicweb.Security.Permissions.UnifiedPermissionService.DeleteAllPermissionsByQuery(Dynamicweb.Security.Permissions.UnifiedPermissionQuery)">
 <summary>
 Deletes all permissions for the specified userid and query.
 </summary>
 <remarks>Will remove cached permissions</remarks>
 <param name="query">Target of permission</param>
</member>
<member name="M:Dynamicweb.Security.Permissions.UnifiedPermissionService.GetAllPermissionsByQuery(Dynamicweb.Security.Permissions.UnifiedPermissionQuery)">
 <summary>
 Gets all permissions matching the specified userId and query.
 </summary>
 <remarks>UserId == null means that userid is not part of the query. Will not use a cache.</remarks>
 <param name="query">Target of permission</param>
</member>
<member name="T:Dynamicweb.Security.Permissions.VirtualPermissionNode">
 <summary>
 This class allows for insertion of virtual permission nodes into logical hierarchies. Ei. can be used to insert a virtual page root into the content tree.
 </summary>
</member>
<member name="M:Dynamicweb.Security.Permissions.VirtualPermissionNode.#ctor">
 <summary>
 Used for lookup
 </summary>
</member>
<member name="M:Dynamicweb.Security.Permissions.VirtualPermissionNode.#ctor(System.String,Dynamicweb.Security.Permissions.IPermissionControlled)">
 <summary>
 Configures a virtual permission node with the specified type (name) and placement in the permission hierarchy (parent).
 </summary>
 <param name="name">Type of virtual permission node</param>
 <param name="parent">Placement of virtual node in hierarchy</param>
</member>
<member name="P:Dynamicweb.Security.Permissions.PermissionContext.BasePermissionContext">
 <summary>
 Fallback permission context for when no permission context for logged on user exist.
 </summary>
 <returns>permissionContext</returns>
</member>
<member name="P:Dynamicweb.Security.Permissions.PermissionContext.CurrentId">
 <summary>
 Gets the id of the current permission context.
 </summary>
 <returns>Id</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.GetAncestorId(System.Int32)">
 <summary>
 Gets the id of the specified ancestor generation.
 </summary>
 <example>A permission stack of as follows:
 using(var userContext = PermissionContext.UserContext(123)) {
    using(var userContext2 = PermissionContext.UserContext(456)) {
       using(var elevated = PermissionContext.ElevatedPermissions()) {      
          var result = (PermissionContext.GetAncestorId(1) == 456);
          result = (PermissionContext.GetAncestorId(2) == 123);
       }
    }
 }
 Both of the above results will be "true", as the first ancestor generation (parent) from the current (elevated) is the userContext2, which has an id of 456, and the second.
 The second ancestor generation (grand-parent) is userContext with id 123.
 </example>
 <param name="ancestorGeneration"></param>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Security.Permissions.PermissionContext.DefaultPermission">
 <summary>
 Default permission level to grant for all cases where no specific permission has been set for the current context (context is typically current user).
 </summary>
 <returns>defaultPermission</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.PriorityContext(Dynamicweb.Security.PermissionPriorityQueue{System.Int32})">
 <summary>
 Creates a permission context for the specified permission priority.
 </summary>
 <param name="priority">Permission priority; user/group ids</param>
 <returns>permissionContext</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.PriorityContext(Dynamicweb.Security.PermissionPriorityQueue{System.String})">
 <summary>
 Creates a permission context for the specified permission priority.
 </summary>
 <param name="priority">Permission priority; user/group ids</param>
 <returns>permissionContext</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.UserContext(Dynamicweb.Security.UserManagement.LimitedUser)">
 <summary>
 Creates a permission context based upon a users id.
 </summary>
 <remarks>If id is not valid then BasePermissionContext</remarks>
 <param name="user">User</param>
 <returns>permissionContext</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.UserContext(System.Int32)">
 <summary>
 Creates a permission context based upon a users id.
 </summary>
 <remarks>If id is not valid then BasePermissionContext</remarks>
 <param name="id">User id</param>
 <returns>permissionContext</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.Backend">
 <summary>
 Creates a permission context for current backend user.
 </summary>
 <remarks>If not backend user is logged in, then returns BasePermissionContext</remarks>
 <returns>permissionContext</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.Frontend">
 <summary>
 Creates a permission context for current frontend user.
 </summary>
 <remarks>If not frontend user is logged in, then returns BasePermissionContext</remarks>
 <returns>permissionContext</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.ElevatedPrivileges">
 <summary>
 Creates a permission context that explicitly allows everything.
 </summary>
 <returns>permissionContext</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.TryGetPermission(Dynamicweb.Security.Permissions.UnifiedPermissionIdentifier,System.Nullable{Dynamicweb.Security.Permissions.PermissionLevel}@)">
 <summary>
 Retrieves the permission level for the specified query.
 </summary>
 <param name="identifier">Target of permission</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.GetAllPermissions(Dynamicweb.Security.Permissions.UnifiedPermissionQuery)">
 <summary>
 Gets all permissions matching the query.
 </summary>
 <param name="query">Target of permission</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.SetPermission(System.String,Dynamicweb.Security.Permissions.PermissionLevel,Dynamicweb.Security.Permissions.UnifiedPermissionIdentifier)">
 <summary>
 Sets permissions for the specified userid and query.
 </summary>
 <param name="permission">Permission level</param>
 <param name="identifier">Target of permission</param>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.DeletePermission(System.String,Dynamicweb.Security.Permissions.UnifiedPermissionIdentifier)">
 <summary>
 Deletes all permissions for the specified userid and query.
 </summary>
 <param name="identifier">Target of permission</param>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.DeleteAllPermissions(Dynamicweb.Security.Permissions.UnifiedPermissionQuery)">
 <summary>
 Deletes all permissions matching the query.
 </summary>
 <param name="query">Target of permission</param>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.GetPermission(Dynamicweb.Security.Permissions.UnifiedPermissionIdentifier)">
 <summary>
 Retrieves the permission level for the specified query.
 </summary>
 <param name="identifier">Target of permission</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.GetPermission(System.String,System.String)">
 <summary>
 Retrieves the permission level for the specified user and query.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.GetPermission(System.String,System.String,System.String)">
 <summary>
 Retrieves the permission level for the specified user and query.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.SetPermission(System.Int32,Dynamicweb.Security.Permissions.PermissionLevel,System.String,System.String,System.String)">
 <summary>
 Sets permissions for the specified userid and query.
 </summary>
 <param name="permission">Permission level</param>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.SetPermission(System.String,Dynamicweb.Security.Permissions.PermissionLevel,System.String,System.String,System.String)">
 <summary>
 Sets permissions for the specified userid and query.
 </summary>
 <param name="permission">Permission level</param>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.SetPermission(System.Int32,Dynamicweb.Security.Permissions.PermissionLevel,Dynamicweb.Security.Permissions.IPermissionControlled)">
 <summary>
 Sets permissions for the specified userid and query.
 </summary>
 <param name="permission">Permission level</param>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.SetPermission(System.String,Dynamicweb.Security.Permissions.PermissionLevel,Dynamicweb.Security.Permissions.IPermissionControlled)">
 <summary>
 Sets permissions for the specified userid and query.
 </summary>
 <param name="permission">Permission level</param>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.DeletePermission(System.String,System.String,System.String,System.String)">
 <summary>
 Deletes all permissions for the specified userid and query.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Permissions.PermissionContext.Current">
 <summary>
 Gets the current permission context.
 </summary>
 <returns>permissionContext</returns>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.SetMapper``1(System.Func{``0})">
 <summary>
 Allows exchanging the default mapper.
 <remarks>Used when ThreadStatic cannot be used to ensure the permission stack. Do not use this, if you're unsure what this means.</remarks>
 </summary>
 <param name="contextMapper">contextMapper</param>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.ForceClearPermissions">
 <summary>
 Force clears all permissions. Permissions in use may break and exceptions may occour. Use at own risk!
 </summary>
</member>
<member name="M:Dynamicweb.Security.Permissions.PermissionContext.Dispose">
 <summary>
 Performs application-defined tasks associated with freeing, releasing or resetting unmanaged resources.
 </summary>
</member>
<member name="T:Dynamicweb.Security.PermissionPriorityQueue`1">
 <summary>
 Supports data in a pyramid fashion, understood in the way, that each level/slab of the pyramid represents a level of priority with decreasing importance as you iterate through the queue.
 </summary>
 <typeparam name="T"></typeparam>
</member>
<member name="P:Dynamicweb.Security.PermissionPriorityQueue`1.Root">
 <summary>
 Root owner of the permission priority.
 </summary>
 <returns>root</returns>
</member>
<member name="M:Dynamicweb.Security.PermissionPriorityQueue`1.#ctor(`0)">
 <summary>
 Constructs a permission priority with root at the top.
 </summary>
 <param name="root">root</param>
</member>
<member name="M:Dynamicweb.Security.PermissionPriorityQueue`1.CastToString">
 <summary>
 Converts this object to a string based priority queue, by casting each element in the original queue, ToString().
 </summary>
 <returns>permissionPriorityQueue</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalAuthentication.IAuthenticationWithCredentials.LogOn(System.String,System.String)">
 <summary>
 Makes the login request to the external login platform.
 </summary>
 <param name="username"></param>
 <param name="password"></param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalAuthentication.IAuthenticationWithCredentials.RestoreSession(System.String,System.String)">
 <summary>
 Called when a session is restored based on user information stored in cookies. 
 
 Usually, this method can simply call the Logon method, unless different behaviour is required.
 </summary>
 <param name="username"></param>
 <param name="password"></param>
</member>
<member name="T:Dynamicweb.Security.UserManagement.ExternalAuthentication.NamespaceDoc">
 <summary>
 The Dynamicweb.Security.UserManagement.ExternalAuthentication namespace contains the API used for external authentication against external security stores.
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginProvider">
 <summary>
 Represents a base class for implmenting external login providers.
 </summary> 
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginProvider.Name">
 <summary>
 Gets the name of the provider.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginProvider.PageID">
 <summary>
 The ID of the page from where the login has started. Only contains a value if a field with name ID has been posted to ExternalLogin.aspx.
 </summary>      
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginProvider.AddInInstance">
 <summary>
 External Login Provider Configurable AddIn instance.
 </summary>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginProvider.CreateNewUserPage">
 <summary>
 Gets or sets the page to redirect to when the user logs in with External Login account and doesn't have a Dynamicweb account.
 This page should contain the paragraph with Extranet module on it configured to new user creation.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginProvider.CreateLocalAccountWithoutPage">
 <summary>
 If set to true local user will be created by External Login account info.
 If set to false the CreateNewUserPage will be shown for the new local user creation.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginProvider.OnlyDoVerificationExternally">
 <summary>
 When set, only username and password validation is handled externally. If external validation succeeds, the dynamicweb user with the matching Username is logged in.
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginProvider.NewUserGroups">
 <summary>
 Groups assigned to the new user created by External Login account info.        
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginProvider.Icon">
 <summary>
 Gets the icon class name for the provider.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginProvider.ProviderID">
 <summary>
 Returns the login provider id
 </summary>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginProvider.RedirectUrl">
 <summary>
 Returns url to redirect to after the login request is made.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginProvider.ReturnUrl">
 <summary>
 Returns url to redirect to after successful login.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginProvider.Login">
 <summary>
 Makes the login request to the external login platform.
 </summary>        
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginProvider.GetLoginResult">
 <summary>
 Returns the login result from the external login platform.
 </summary>        
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginProvider.RegisterProvider(Owin.IAppBuilder)">
 <summary>
 Registers provider in the Owin automatic startup.    
 </summary>        
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginProvider.Render(System.Object)">
 <summary>
 Renders provider specific tags to the specified temmplate instance.
 </summary>
 <param name="templateInstance">The temmplate instance.</param>
 <remarks>Override this method to add own template tags to the login template. The render method is passed object template, and should be castet to Dynamicweb.Rendering.Template (Dynamicweb.dll) to set tags on the rendering instance.</remarks>
</member>
<member name="T:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult">
 <summary>
 Represents the login result from the external login platform.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult.Success">
 <summary>
 Gets or sets value indicating whether login was successfull.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult.ErrorText">
 <summary>
 Gets or sets the error text.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult.DefaultUserName">
 <summary>
 Gets or sets the login default user name
 </summary>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult.ProviderID">
 <summary>
 Gets or sets the login provider id
 </summary>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult.ProviderKey">
 <summary>
 Gets or sets the login provider key for the logged-in user
 </summary>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult.Email">
 <summary>
 Gets or sets the email
 </summary>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult.Phone">
 <summary>
 Gets or sets the phone.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult.CurrentExternalLogOnResult">
 <summary>
 Returns current external login result.
 </summary>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.ExternalLoginResult.CurrentExternalLoginResult">
 <summary>
 Returns current external login result.
 </summary>        
</member>
<member name="T:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider">
 <summary>
 Represents a external login provider.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.Name">
 <summary>
 Gets or sets the name of the provider.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.IsActive">
 <summary>
 Gets or sets value indicating whether login provider is active.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.Parameters">
 <summary>
 Gets or sets the XML string representing provider parameters.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.Type">
 <summary>
 Gets or sets the type of the provider.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.ProviderType">
 <summary>
 Gets or sets the type of the provider.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.FullType">
 <summary>
 Gets or sets the full assembly type of the provider.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.Created">
 <summary>
 Gets the date and time when the provider was created.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.Updated">
 <summary>
 Gets the date and time when the provider was updated.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.ExternalLogOnProvider">
 <summary>
 Gets or sets the reference to <see cref="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.ExternalLoginProvider">Provider</see> that handles the actual communication with the External Login platform.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.ExternalLoginProvider">
 <summary>
 Gets or sets the reference to <see cref="P:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.ExternalLoginProvider">Provider</see> that handles the actual communication with the External Login platform.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.Fill(System.Data.IDataReader)">
 <summary>
 Fills object properties with data from the given <see cref="T:System.Data.IDataReader">IDataReader</see> object.
 </summary>
 <param name="reader">Reader to read data from.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.FillRow(System.Data.DataRow)">
 <summary>
 Fills the given <see cref="T:System.Data.DataRow">DataRow</see> object with object state values.
 </summary>
 <param name="row">Row to write data into.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.Delete(System.Int32)">
 <summary>
 Deletes provider
 </summary>
 <param name="id">Identifier of provider to be deleted</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.GetProviderById(System.Int32)">
 <summary>
 Returns the provider by its Id.
 </summary>
 <param name="id">Provider Id.</param>
 <returns>A provider with the given Id or null (Nothing in Visual Basic) if the provider with the given Id doesn't exist.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.GetProviders">
 <summary>
 Returns a list of all available providers.
 </summary>
 <returns>A list of all available providers.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.GetActiveProviders">
 <summary>
 Returns a list of all active providers.
 </summary>
 <returns>A list of all active providers.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalAuthentication.Provider.GetProviders(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Returns a list of all providers that match the given SQL query.
 </summary>
 <param name="commandBuilder">The command builder representing a query.</param>
 <returns>A list of all providers that match the given SQL query.</returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.ExternalAuthentication.ProviderCollection">
 <summary>
 Represents a collection of external login providers.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalAuthentication.ProviderCollection.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.LogOnFailedReason.IncorrectLogin">
 <summary>
 Wrong username or password.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.LogOnFailedReason.PasswordLengthInvalid">
 <summary>
 Invalid password length.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.LogOnFailedReason.PasswordExpired">
 <summary>
 Password is expired and must be renewed.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.LogOnFailedReason.ExceededFailedLogOnLimit">
 <summary>
 Exceeded limit of failed login attempts.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.LogOnFailedReason.LoginLocked">
 <summary>
 User login has been locked.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LogOnResult.Success">
 <summary>
 Gets or sets success state.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LogOnResult.FailedReason">
 <summary>
 Gets or sets the reason why the login failed.
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.NamespaceDoc">
 <summary>
 The Dynamicweb.Security.UserManagement namespace contains the API for managing users, groups, addresses etc. used for user management in Dynamicweb.
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.ADSI.NamespaceDoc">
 <summary>
 The Dynamicweb.Security.UserManagement.ADSI namespace contains the API for AD integration
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.ADSI.AD">
 <summary>
 Active directory helper class used by Extranet module for AD login.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ADSI.AD.#ctor">
 <summary>
 Initializes a new instance of the <see cref="F:Dynamicweb.Security.UserManagement.ADSI.AD.directoryEntry" /> class.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ADSI.AD.#ctor(System.String,System.String,System.DirectoryServices.AuthenticationTypes,System.String)">
 <summary>
 Initializes a new instance of the <see cref="F:Dynamicweb.Security.UserManagement.ADSI.AD.directoryEntry" /> class.
 </summary>
 <param name="logOnUserName">The logon username.</param>
 <param name="logOnPassword">The logon password.</param>
 <param name="authenticationType">Type of the authentication.</param>
 <param name="domainName">Name of the domain.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ADSI.AD.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="F:Dynamicweb.Security.UserManagement.ADSI.AD.directoryEntry" /> class.
 </summary>
 <param name="logOnPath">The STR logon path.</param>
 <param name="domainName">Name of the STR domain.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ADSI.AD.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes,System.String)">
 <summary>
 Initializes a new instance of the <see cref="F:Dynamicweb.Security.UserManagement.ADSI.AD.directoryEntry" /> class.
 </summary>
 <param name="logOnPath">The login path.</param>
 <param name="logOnUserName">The login username.</param>
 <param name="logOnPassword">The login password.</param>
 <param name="authenticationType">Type of the authentication.</param>
 <param name="domainName">Name of the domain.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ADSI.AD.LoadUser(System.String)">
 <summary>
 Loads the user.
 </summary>
 <param name="UserName">Name of the user.</param>
 <returns>Loaded user</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ADSI.AD.GetGroups">
 <summary>
 Gets the groups.
 </summary>
 <returns>ArrayList of groups</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ADSI.AD.GetGroupUsers(System.DirectoryServices.DirectoryEntry)">
 <summary>
 Gets the group users.
 </summary>
 <param name="group">The group.</param>
 <returns>ArrayList of group users</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ADSI.AD.Connect">
 <summary>
 Connects this instance.
 </summary>
 <returns>True or false value representing connection success</returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.ADSI.SecurityGroups">
 <summary>
 Active Directory security group helper class.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ADSI.SecurityGroups.#ctor(System.Guid,System.DirectoryServices.DirectoryEntry)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Security.UserManagement.ADSI.SecurityGroups" /> class.
 </summary>
 <param name="userGuid">The user GUID.</param>
 <param name="searchRoot">The search root.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ADSI.SecurityGroups.#ctor(System.String,System.DirectoryServices.DirectoryEntry)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Security.UserManagement.ADSI.SecurityGroups" /> class.
 </summary>
 <param name="sAMAccountName">Name of the s AM account.</param>
 <param name="searchRoot">The search root.</param>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.SecurityGroups.Groups">
 <summary>
 Gets the groups.
 </summary>
 <value>The groups.</value>
</member>
<member name="T:Dynamicweb.Security.UserManagement.ADSI.User">
 <summary>
 Active Directory user helper class
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ADSI.User.#ctor(System.DirectoryServices.DirectoryEntry,System.String)">
 <summary>
 Initializes a new instance of the <see cref="P:Dynamicweb.Security.UserManagement.ADSI.User.User" /> class.
 </summary>
 <param name="user">The user.</param>
 <param name="domainName">Name of the domain.</param>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.Groups">
 <summary>
 Gets the groups.
 </summary>
 <value>The groups.</value>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ADSI.User.ConvertToOctetString(System.Byte[])">
 <summary>
 Converts to octet string.
 </summary>
 <param name="values">The values.</param>
 <returns>String result</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ADSI.User.ConvertToOctetString(System.Byte[],System.Boolean)">
 <summary>
 Converts to octet string.
 </summary>
 <param name="values">The values.</param>
 <param name="isAddBackslash">if set to <c>true</c> [is add backslash].</param>
 <returns>String result</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ADSI.User.ConvertToOctetString(System.Byte[],System.Boolean,System.Boolean)">
 <summary>
 Converts to octet string.
 </summary>
 <param name="values">The values.</param>
 <param name="isAddBackslash">if set to <c>true</c> [is add backslash].</param>
 <param name="isUppercase">if set to <c>true</c> [is upper case].</param>
 <returns>String result</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.User">
 <summary>
 Gets or sets the user.
 </summary>
 <value>The user.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.DomainName">
 <summary>
 Gets or sets the name of the domain.
 </summary>
 <value>The name of the domain.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.ValidUserInAd">
 <summary>
 Gets or sets a value indicating whether [valid user in ad].
 </summary>
 <value><c>true</c> if [valid user in ad]; otherwise, <c>false</c>.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.UserDirectoryEntry">
 <summary>
 Gets or sets the user dir en try.
 </summary>
 <value>The user dir en try.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.UserName">
 <summary>
 Gets or sets the username.
 </summary>
 <value>The username.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.FullName">
 <summary>
 Gets or sets the full name.
 </summary>
 <value>The full name.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.Password">
 <summary>
 Gets or sets the password.
 </summary>
 <value>The password.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.Description">
 <summary>
 Gets or sets the description.
 </summary>
 <value>The description.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.PasswordExpired">
 <summary>
 Gets or sets the password expired.
 </summary>
 <value>The password expired.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.RasPermissions">
 <summary>
 Gets or sets the ras permissions.
 </summary>
 <value>The ras permissions.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.MaxStorage">
 <summary>
 Gets or sets the max storage.
 </summary>
 <value>The max storage.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.PasswordAge">
 <summary>
 Gets or sets the password age.
 </summary>
 <value>The password age.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.BadPasswordAttempts">
 <summary>
 Gets or sets the bad password attempts.
 </summary>
 <value>The bad password attempts.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.HomeDirectory">
 <summary>
 Gets or sets the home directory.
 </summary>
 <value>The home directory.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.LogOnScript">
 <summary>
 Gets or sets the login script.
 </summary>
 <value>The login script.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.HomeDirDrive">
 <summary>
 Gets or sets the home dir drive.
 </summary>
 <value>The home dir drive.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.MinPasswordLength">
 <summary>
 Gets or sets the length of the min password.
 </summary>
 <value>The length of the min password.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.MaxPasswordAge">
 <summary>
 Gets or sets the max password age.
 </summary>
 <value>The max password age.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.MinPasswordAge">
 <summary>
 Gets or sets the min password age.
 </summary>
 <value>The min password age.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.PasswordHistoryLength">
 <summary>
 Gets or sets the length of the password history.
 </summary>
 <value>The length of the password history.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.AutoUnlockInterval">
 <summary>
 Gets or sets the auto unlock interval.
 </summary>
 <value>The auto unlock interval.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.LockoutObservationInterval">
 <summary>
 Gets or sets the lockout observation interval.
 </summary>
 <value>The lockout observation interval.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ADSI.User.MaxBadPasswordsAllowed">
 <summary>
 Gets or sets the max bad passwords allowed.
 </summary>
 <value>The max bad passwords allowed.</value>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Indexing.NamespaceDoc">
 <summary>
 The Dynamicweb.Security.UserManagement.Indexing contains types used for indexing users to search using the Lucene based indexes.
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Indexing.UserIndexBuilder">
 <summary>
 UserIndexBuilder is an implementation of a <see cref="T:Dynamicweb.Indexing.IndexBuilderBase"/> to index users and groups into a lucene index.
 </summary>
 <seealso cref="T:Dynamicweb.Indexing.IndexBuilderBase" />
 <seealso cref="T:Dynamicweb.Indexing.IResumable" />
</member>
<member name="M:Dynamicweb.Security.UserManagement.Indexing.UserIndexBuilder.Build(Dynamicweb.Indexing.IIndexWriter,Dynamicweb.Diagnostics.Tracking.Tracker)">
 <summary>
 Builds the index of users
 </summary>
 <param name="writer">IndexWriter instance</param>
 <param name="tracker"><see cref="P:Dynamicweb.Security.UserManagement.Indexing.UserIndexBuilder.InternalTracker" /> instance</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Indexing.UserIndexBuilder.GetFields">
 <summary>
 Gets fields from the schema extender
 </summary>
 <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Indexing.UserIndexBuilder.SupportedActions">
 <summary>
 Gets the supported actions by this builder.
 </summary>
 <value>The supported actions, currently only 'Full'.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Indexing.UserIndexBuilder.DefaultSettings">
<summary>
 Gets default settings collection
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Indexing.UserIndexSchemaExtender">
 <summary>
 Represents UserIndexSchemaExtender
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Indexing.UserIndexSchemaExtender.GetFields">
 <summary>
 Gets current schema extender fields
 </summary>
 <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Notifications.NamespaceDoc">
 <summary>
 The Dynamicweb.Security.UserManagement.Notifications contains the notifications broadcastet from the users API.
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Notifications.GroupNotificationArgs">
 <summary>
 Represents a group notification agruments.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Notifications.GroupNotificationArgs.Subject">
 <summary>
 Gets the subject of the notification (group which has been changed).
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Notifications.GroupNotificationArgs.#ctor(Dynamicweb.Security.UserManagement.Group)">
 <summary>
 Creates a new instance of a class.
 </summary>
 <param name="subject">The changed group.</param>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Notifications.ListUsersNotificationArgs">
 <summary>
 Represents a user list notification arguments.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Notifications.ListUsersNotificationArgs.Users">
 <summary>
 Gets the user list of the notification.
 </summary>
 <value>User list.</value>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Notifications.ListUsersNotificationArgs.#ctor(Dynamicweb.Security.UserManagement.UserCollection)">
 <summary>
 Creates a new instance of a class.
 </summary>
 <param name="users">The user list.</param>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Notifications.Notifications">
 <summary>
 Represents a set of notifications available in User Management module.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Notifications.Notifications.UserSaved">
 <summary>
 Fires when the user has been saved.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Notifications.Notifications.UserOnBeforeSave">
 <summary>
 Fires just before the user is saved. The <see cref="T:Dynamicweb.Security.UserManagement.User">user</see> object can be modified before the actual saving is done.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Notifications.Notifications.GroupSaved">
 <summary>
 Fires when the group has been saved.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Notifications.Notifications.GroupOnBeforeSave">
 <summary>
 Fires just before the group is saved. The <see cref="T:Dynamicweb.Security.UserManagement.Group">group</see> object can be modified before the actual saving is done.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Notifications.Notifications.UserDeleted">
 <summary>
 Fires when the user has been deleted.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Notifications.Notifications.GroupDeleted">
 <summary>
 Fires when the group has been deleted.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Notifications.Notifications.UserValidated">
 <summary>
 Fires when the user has been validated.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Notifications.Notifications.OnBeforeListUsers">
 <summary>
 Fires when users search.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Notifications.Notifications.OnDownloadFile">
 <summary>
 Fires when users download.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Notifications.Notifications.UserAddressOnAfterSave">
 <summary>
 Fires after the user address has been saved.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Notifications.Notifications.UserAddressOnBeforeSave">
 <summary>
 Fires just before the user address is saved. The <see cref="T:Dynamicweb.Security.UserManagement.UserAddress">user address</see> object can be modified before the actual saving is done.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Notifications.Notifications.UserAddressOnAfterDelete">
 <summary>
 Fires after the user address has been deleted.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Notifications.Notifications.UserAddressOnBeforeDelete">
 <summary>
 Fires just before the user address is deleted. The <see cref="T:Dynamicweb.Security.UserManagement.UserAddress">user address</see> object can be modified before the actual deleting is done.
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Notifications.OnDownloadFileNotificationArgs">
 <summary>
 Represents arguments for OnDownloadFile notification
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Notifications.OnDownloadFileNotificationArgs.#ctor(System.String)">
 <summary>
 Creates new object setting secureFolderName value
 </summary>
 <param name="secureFolderName">String value</param>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Notifications.OnDownloadFileNotificationArgs.SecureFolderName">
 <summary>
 Gets SourceFolderName
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Notifications.OnDownloadFileNotificationArgs.HasAccess">
 <summary>
 Shows if access granted
 </summary>
 <returns>True or False</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Notifications.OnDownloadFileNotificationArgs.Handled">
 <summary>
 Shows if notofocation arg was handled
 </summary>
 <returns>True or false</returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Notifications.UserAddressNotificationArgs">
 <example>
 <code title="User address saved notification subscriber" description="Allow to handle user address before save event" source="..\Dynamicweb\05 - Modules\Dynamicweb.UserManagement\Head\Dynamicweb.UserManagement.Examples\Notifications\UserAddressBeforeSaveObserverSample.cs" lang="CS"></code>
 </example>
 <summary>
 Represents a user address notification agruments.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Notifications.UserAddressNotificationArgs.UserAddress">
 <summary>
 Gets the user address which has been changed.
 </summary>
 <remarks></remarks>
 <value>User address which has been changed.</value>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Notifications.UserAddressNotificationArgs.#ctor(Dynamicweb.Security.UserManagement.UserAddress)">
 <summary>
 Creates a new instance of a class.
 </summary>
 <param name="useraddress">The changed user address.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Notifications.UserNotificationArgs">
 <summary>
 Represents a user notification agruments.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Notifications.UserNotificationArgs.Subject">
 <summary>
 Gets the subject of the notification (user which has been changed).
 </summary>
 <remarks></remarks>
 <value>User which has been changed.</value>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Notifications.UserNotificationArgs.#ctor(Dynamicweb.Security.UserManagement.User)">
 <summary>
 Creates a new instance of a class.
 </summary>
 <param name="subject">The changed user.</param>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Synchronization.NamespaceDoc">
 <summary>
 The Dynamicweb.Security.UserManagement.Synchronization contains the API used for syncronizing users from external sources.
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Synchronization.Service">
 <summary>
 User syncronization service.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Synchronization.Service.SynchronizeUser(Dynamicweb.Security.UserManagement.Synchronization.UserInfo)">
 <summary>
 Synchronizes the user.
 </summary>
 <param name="user">The user.</param>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Synchronization.SyncAction">
 <summary>
 Specifies if user info is an update or delete
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Synchronization.SyncAction.Update">
 <summary>
 Update
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Synchronization.SyncAction.Delete">
 <summary>
 Delete
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Synchronization.UserInfo">
 <summary>
 User information for sync <see cref="T:Dynamicweb.Security.UserManagement.Synchronization.Service">service</see>.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.Action">
 <summary>
 Sync action.
 See 
 <see cref="T:Dynamicweb.Security.UserManagement.Synchronization.SyncAction"/>
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.Groups">
 <summary>
 Array of user groups.
 Each group defined as full path in the group tree, like:
 /MS CRM/Cities/NY,
 /MS CRM/Accounts
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.ExternalID">
 <summary>
 Gets or sets the external id.
 </summary>
 <value>The external id.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.UserName">
 <summary>
 Gets or sets the name of the user.
 </summary>
 <value>The name of the user.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.Password">
 <summary>
 Gets or sets the password.
 </summary>
 <value>The password.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.Name">
 <summary>
 Gets or sets the name.
 </summary>
 <value>The name.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.Department">
 <summary>
 Gets or sets the department.
 </summary>
 <value>The department.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.Email">
 <summary>
 Gets or sets the email.
 </summary>
 <value>The email.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.Phone">
 <summary>
 Gets or sets the phone.
 </summary>
 <value>The phone.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.PhonePrivate">
 <summary>
 Gets or sets the phone private.
 </summary>
 <value>The phone private.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.PhoneBusiness">
 <summary>
 Gets or sets the phone business.
 </summary>
 <value>The phone business.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.PhoneMobile">
 <summary>
 Gets or sets the phone mobile.
 </summary>
 <value>The phone mobile.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.Fax">
 <summary>
 Gets or sets the fax.
 </summary>
 <value>The fax.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.Address">
 <summary>
 Gets or sets the address.
 </summary>
 <value>The address.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.Address2">
 <summary>
 Gets or sets the address2.
 </summary>
 <value>The address2.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.Zip">
 <summary>
 Gets or sets the zip.
 </summary>
 <value>The zip.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.City">
 <summary>
 Gets or sets the city.
 </summary>
 <value>The city.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.Country">
 <summary>
 Gets or sets the country.
 </summary>
 <value>The country.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.JobTitle">
 <summary>
 Gets or sets the job title.
 </summary>
 <value>The job title.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.Company">
 <summary>
 Gets or sets the company.
 </summary>
 <value>The company.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.CustomerNumber">
 <summary>
 Gets or sets the customer number.
 </summary>
 <value>The customer number.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Synchronization.UserInfo.Currency">
 <summary>
 Gets or sets the currency.
 </summary>
 <value>The currency.</value>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomField">
 <summary>
 Represents custom field
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomField.SystemName">
 <summary>
 Gets custom field system name
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomField.TableName">
 <summary>
 Gets custom field table name
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomField.Type">
 <summary>
 Gets custom field type
 </summary>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.Common.CustomFields.Types"/> instance</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomField.FieldType">
 <summary>
 Gets custom field type
 </summary>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.Common.CustomFields.Types"/> instance</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomField.Name">
 <summary>
 Gets or sets custom field Name 
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomField.Options">
 <summary>
 Gets or sets options
 </summary>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldCollection"/></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomField.Sort">
 <summary>
 Gets or sets sort direction
 </summary>
 <returns>Integer value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomField.DatabaseName">
 <summary>
 Gets or sets database name
 </summary>
 <returns>String value</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomField.#ctor(System.String,System.String,Dynamicweb.Security.UserManagement.Common.CustomFields.Types)">
 <summary>
 Creates new CustomField object instance
 </summary>
 <param name="systemName">System name</param>
 <param name="tableName">Table name</param>
 <param name="type">Type</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomField.Save">
 <summary>
 Saves custom field data
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomField.Delete">
 <summary>
 Deletes custom field
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomField.GetCustomFields(System.String)">
 <summary>
 Gets custom fields
 </summary>
 <param name="tableName">Table name</param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldCollection"/> object instance</returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldCollection">
 <summary>
 Represents collection of custom fields
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldCollection.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldCollection.ContainsCustomField(Dynamicweb.Security.UserManagement.Common.CustomFields.CustomField)">
 <summary>
 Shows if collection contains specific custom field
 </summary>
 <param name="customField"><see cref="T:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomField"/> object instnace</param>
 <returns>True if collection contains specified object instance, otherwise returns false</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldCollection.Remove(Dynamicweb.Security.UserManagement.Common.CustomFields.CustomField)">
 <summary>
 Removes specified item from collection
 </summary>
 <param name="item"><see cref="T:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomField"/> objec instance to be deleted</param>
 <returns>True if remove operation succedded, otherwise - false</returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldOptions">
 <summary>
 Represents custom field options
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldOptions.DataType">
 <summary>
 Gets or sets custom field type
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldOptions.DefaultValue">
 <summary>
 Gets default value
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldOptions.GetOptionsXml">
 <summary>
 Gets xml content of options xml node
 </summary>
 <returns>String value with xml data</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldOptions.GetOptions(System.String)">
 <summary>
 Gets custom field options
 </summary>
 <param name="optionsXml">String data with optionsXml xml-element data</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldType">
 <summary>
 Represents custom field type
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldType.GetName(Dynamicweb.Security.UserManagement.Common.CustomFields.Types)">
 <summary>
 Casts type enum to string
 </summary>
 <param name="type">Type instance to be casted to string</param>
 <returns>String representstion</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldType.GetTypesWithOptions">
 <summary>
 Gets types with options
 </summary>
 <returns>List of types</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldType.GetTypesForOptions">
 <summary>
 Gets types for options
 </summary>
 <returns>List of types</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldType.GetDBType(Dynamicweb.Security.UserManagement.Common.CustomFields.Types)">
 <summary>
 Gets database field type
 </summary>
 <param name="type">Type</param>
 <returns>String value</returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldValue">
 <summary>
 Represents custom field value
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldValue.CustomField">
 <summary>
 Gets or sets custom field
 </summary>
 <returns><see cref="P:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldValue.CustomField"/> object instance</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldValue.Value">
 <summary>
 Gets or sets value
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldValue.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldValue.GetCustomFieldValues(System.String,System.Data.IDataReader)">
 <summary>
 Gets custom field values
 </summary>
 <param name="tableName">Table name</param>
 <param name="reader"></param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldValue.GetCustomFieldValues(System.String,System.Data.DataRow)">
 <summary>
 Gets custom field values
 </summary>
 <param name="tableName"></param>
 <param name="row"></param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldValue.GetCustomFieldValues(System.String)">
 <summary>
 Gets custom field values for specific table
 </summary>
 <param name="tableName">Table name</param>
 <returns>Collection of custom field values</returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldValueCollection">
 <summary>
 Represents collection of CustomFieldValue elements
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldValueCollection.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldValueCollection.RequestCustomFieldValues">
 <summary>
 Requests custom field values
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Common.CustomFields.Types">
 <summary>
 Represents enumeration of db field types
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemField">
 <summary>
 Represents system field
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemField.SystemName">
 <summary>
 Gets or sets system name
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemField.TableName">
 <summary>
 Gets or sets table name
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemField.Type">
 <summary>
 Gets or sets type
 </summary>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.Common.CustomFields.Types"/> value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemField.FieldType">
 <summary>
 Gets custom type
 </summary>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.Common.CustomFields.Types"/> instance</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemField.Name">
 <summary>
 Gets or sets name
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemField.Options">
 <summary>
 Gets or sets options
 </summary>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldOptions"/></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemField.IsFrontendEditable">
 <summary>
 Shows if current system field is frontent editable
 </summary>
 <returns>True or false</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemField.#ctor(System.Data.IDataReader)">
 <summary>
 Creates new SystemField instance using reader data
 </summary>
 <param name="reader"><see cref="T:System.Data.IDataReader"/> based object with data</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemField.#ctor(System.String,System.String,Dynamicweb.Security.UserManagement.Common.CustomFields.Types,System.String)">
 <summary>
 Creates new SystemField instance
 </summary>
 <param name="systemName">System name</param>
 <param name="tableName">Table name</param>
 <param name="type">Type</param>
 <param name="name">Name</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemField.Save">
 <summary>
 Saves system field data
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemField.Delete">
 <summary>
 Deletes current system field instance
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemField.GetSystemFields(System.String)">
 <summary>
 Gets system fields collection
 </summary>
 <param name="tableName">Table name having system fields we need to get</param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemFieldCollection"/></returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemFieldCollection">
 <summary>
 Represents system field colection
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemFieldCollection.GetById(System.String,System.String)">
 <summary>
 Gets item from collection
 </summary>
 <param name="tableName">System field table name</param>
 <param name="systemName">System field system name</param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemField"/></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemFieldCollection.ContainsSystemField(Dynamicweb.Security.UserManagement.Common.SystemFields.SystemField)">
 <summary>
 Shows if current collection contains specific item
 </summary>
 <param name="systemField"><see cref="T:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemField"/></param>
 <returns>True if specified object instance presents in collection</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemFieldCollection.Remove(Dynamicweb.Security.UserManagement.Common.SystemFields.SystemField)">
 <summary>
 Removes item from current collection
 </summary>
 <param name="item">Item to be deleted</param>
 <returns>True if item was successfuly deleted</returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemFieldValue">
 <summary>
 Represents system field value
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemFieldValue.SystemField">
 <summary>
 Gets or sets SystemField
 </summary>
 <returns><see cref="P:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemFieldValue.SystemField"/></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemFieldValue.ItemId">
 <summary>
 Gets or sets ItemId
 </summary>
 <returns>Integer value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemFieldValue.Value">
 <summary>
 Gets or sets value
 </summary>
 <returns>Object instance</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemFieldValue.Save">
 <summary>
 Saves system field value
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemFieldValue.GetSystemFieldValues(System.String,System.Int32)">
 <summary>
 
 </summary>
 <param name="tableName"></param>
 <param name="itemId"></param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemFieldValueCollection">
 <summary>
 Represents SystemFieldValueCollection
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemFieldValueCollection.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemFieldValueCollection.Save">
 <summary>
 Saves collection data
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemFieldValueCollection.RequestSystemFieldValues">
 <summary>
 Loads values for system field values of current collection instance
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Actions">
 <summary>
 License specific actions enumeration
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.AuditUserInfo">
 <summary>
 Class AuditUserInfo
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.AuditUserInfo._createdOn">
 <summary>
 The _created on
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.AuditUserInfo._updatedOn">
 <summary>
 The _updated on
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.AuditUserInfo._createdBy">
 <summary>
 The _created by
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.AuditUserInfo._updatedBy">
 <summary>
 The _updated by
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.AuditUserInfo._emailPermissionGivenOn">
 <summary>
 The _email permission given on
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.AuditUserInfo._emailPermissionUpdatedOn">
 <summary>
 The _email permission updated on
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.AuditUserInfo._lastLogOnOn">
 <summary>
 The _last login on
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.AuditUserInfo.CreatedOn">
 <summary>
 Gets the created on.
 </summary>
 <value>The created on.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.AuditUserInfo.UpdatedOn">
 <summary>
 Gets the updated on.
 </summary>
 <value>The updated on.</value>
</member>
<member name="F:Dynamicweb.Security.UserManagement.AuditUserInfo._createdByCached">
 <summary>
 The _created by cached
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.AuditUserInfo.CreatedByUser">
 <summary>
 Gets the created by user.
 </summary>
 <value>The created by user.</value>
</member>
<member name="F:Dynamicweb.Security.UserManagement.AuditUserInfo._updatedByCached">
 <summary>
 The _updated by cached
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.AuditUserInfo.UpdatedByUser">
 <summary>
 Gets the updated by user.
 </summary>
 <value>The updated by user.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.AuditUserInfo.EmailPermissionGivenOn">
 <summary>
 Gets the email permission given on.
 </summary>
 <value>The email permission given on.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.AuditUserInfo.EmailPermissionUpdatedOn">
 <summary>
 Gets the email permission updated on.
 </summary>
 <value>The email permission updated on.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.AuditUserInfo.LastLoginOn">
 <summary>
 Gets the last login on.
 </summary>
 <value>The last login in .</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.AuditUserInfo.LastLogOnOn">
 <summary>
 Gets the last login on.
 </summary>
 <value>The last login in .</value>
</member>
<member name="M:Dynamicweb.Security.UserManagement.AuditUserInfo.Fill(System.Data.IDataReader)">
 <summary>
 Fills the specified reader.
 </summary>
 <param name="reader">The reader.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.AuditUserInfo.FillRow(System.Data.DataRow)">
 <summary>
 Fills the row.
 </summary>
 <param name="row">The row.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.AuditUserInfo.NotifyEmailPermissionUpdated(System.Boolean)">
 <summary>
 Notifies the email permission updated.
 </summary>
 <param name="newValue">if set to <c>true</c> [new value].</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.AuditUserInfo.NotifyUserSaving(System.Boolean)">
 <summary>
 Notifies the user saving.
 </summary>
 <param name="IsNewUser">if set to <c>true</c> [is new user].</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.AuditUserInfo.NotifyUserSaving(System.Boolean,System.Boolean)">
 <summary>
 Notifies the user saving.
 </summary>
 <param name="IsNewUser">if set to <c>true</c> [is new user].</param>
 <param name="FromImport">True if save is coming from import user.</param>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Consts">
 <summary>
 Provides VCard-specific constants
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Consts.CustomFieldPrefix">
 <summary>
 CustomField prefix
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Consts.DefaultFieldPrefix">
 <summary>
 DefaultField prefix
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Consts.DefaultVCardFileName">
 <summary>
 Default VCard file name
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Consts.ObligatoryVCardFields">
 <summary>
 Obligatory VCard fields 
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Consts.MandatoryVCardFields">
 <summary>
 Obligatory VCard fields 
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.Consts.VCardFields">
 <summary>
 VCard fields
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Consts.GeneralVCardFields">
 <summary>
 General VCard fields
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.ExternalLogin">
 <summary>
 Represents External Login
 </summary>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalLogin.UserID">
 <summary>
 Gets or sets the Dynamicweb user id
 </summary>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalLogin.ProviderID">
 <summary>
 Gets or sets the login provider id
 </summary>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalLogin.ProviderKey">
 <summary>
 Gets or sets the login provider key for the logged-in user
 </summary>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.ExternalLogin.ProviderUserName">
 <summary>
 Gets or sets the default login provider user name for the logged-in user
 </summary>        
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalLogin.Save">
 <summary>
 Saves current data to the database.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalLogin.#ctor(System.Int32,System.Int32,System.String,System.String)">
 <summary>
 Initializes a new instance of an object.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalLogin.#ctor(System.Data.IDataReader)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.Security.UserManagement.ExternalLogin" /> class.
 </summary>
 <param name="DataReader">DataReader.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalLogin.FillRow(System.Data.DataRow)">
 <summary>
 Fills this instance with data from the data row.
 </summary>
 <param name="row">The row.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalLogin.Fill(System.Data.IDataReader)">
 <summary>
 Fills this instance with data from the specified datareader.
 </summary>
 <param name="reader">The data reader.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalLogin.GetExternalLogOn(System.Int32)">
 <summary>
 Returns External Login by id
 </summary>        
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalLogin.GetExternalLogin(System.Int32)">
 <summary>
 Returns External Login by id
 </summary>   
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalLogin.GetLogOn(System.Int32,System.String)">
 <summary>
 Returns External Login by provider id and provider key
 </summary>        
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalLogin.GetLogin(System.Int32,System.String)">
 <summary>
 Returns External Login by provider id and provider key
 </summary>        
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalLogin.GetUserExternalLogins(System.Int32)">
 <summary>
 Returns External Logins for specific user
 </summary>
 <param name="userId">Dynamicweb user id</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalLogin.IsConflictExternalLogOn(System.Int32,System.String,System.Int32)">
 <summary>
 Returns True if External Login is already assigned to another user otherwise False
 </summary>
 <param name="providerID">External Login provider id</param>
 <param name="providerKey">External Login provider key</param>
 <param name="userID">Dynamicweb user id to check External Login assignment</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalLogin.IsConflictExternalLogin(System.Int32,System.String,System.Int32)">
 <summary>
 Returns True if External Login is already assigned to another user otherwise False
 </summary>
 <param name="providerID">External Login provider id</param>
 <param name="providerKey">External Login provider key</param>
 <param name="userID">Dynamicweb user id to check External Login assignment</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalLogin.IsExistingExternalLogin(System.Int32,System.String,System.Int32)">
 <summary>
 Returns True if External Login is already associated with the Dynamicweb user otherwise False
 </summary>
 <param name="providerID">External Login provider id</param>
 <param name="providerKey">External Login provider key</param>        
 <param name="userID">Dynamicweb user id</param>        
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalLogin.IsExistingExternalLogOn(System.Int32,System.String,System.Int32)">
 <summary>
 Returns True if External Login is already associated with the Dynamicweb user otherwise False
 </summary>
 <param name="providerID">External Login provider id</param>
 <param name="providerKey">External Login provider key</param>        
 <param name="userID">Dynamicweb user id</param>                
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalLogin.GetUserByExternalLogin(System.Int32,System.String)">
 <summary>
 Returns Dynamicweb user by External Login
 </summary>
 <param name="providerID">External Login provider id</param>
 <param name="providerKey">External Login provider key</param>        
</member>
<member name="M:Dynamicweb.Security.UserManagement.ExternalLogin.GetUserByExternalLogOn(System.Int32,System.String)">
 <summary>
 Returns Dynamicweb user by External Login
 </summary>
 <param name="providerID">External Login provider id</param>
 <param name="providerKey">External Login provider key</param>        
</member>
<member name="T:Dynamicweb.Security.UserManagement.Group">
 <summary>
 Represents a user group.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.FrontendStartPage">
 <summary>
 Gets or sets frontend start page
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.ID">
 <summary>
 Gets or sets the ID of this Group
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.ParentID">
 <summary>
 Gets or sets parent group ID for current group.
 </summary>
 <value>Parent group ID for current group.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.Parent">
 <summary>
 Gets or sets parent group for current group.
 </summary>
 <value>Parent group for current group.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.UserLoaded">
 <summary>
 Shows if user logged in
 </summary>
 <returns>True or false value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.Users">
 <summary>
 Gets a collection of user which belongs to current group. The collection is read-only.
 </summary>
 <value>A collection of user which belongs to current group. The collection is read-only.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.TopUsers(System.Int32,System.Boolean)">
 <summary>
 Gets n top users from current group
 </summary>
 <param name="top">Number of top users to be retrieved</param>
 <param name="onlyBackEnd">If true then only back ed users will be considered</param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.UserCollection"/></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.UserCount(System.Boolean)">
 <summary>
 Gets current group users count
 </summary>
 <param name="onlyBackEnd">If true then only back ed users will be considered</param>
 <returns>Number of users</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.Subgroups">
 <summary>
 Gets a collection of child groups for current group. The collection is read-only.
 </summary>
 <value>A collection of child groups for current group. The collection is read-only.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.Name">
 <summary>
 Gets or sets group's name.
 </summary>
 <value>Group's name.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.CustomerNumber">
 <summary>
 Gets or sets group's customer number.
 </summary>
 <value>Group's customer number.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.JobTitle">
 <summary>
 Gets or sets group's job title.
 </summary>
 <value>Group's job title.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.CompanyName">
 <summary>
 Gets or sets group's company name.
 </summary>
 <value>Group's company name.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.Address">
 <summary>
 Gets or sets group's address.
 </summary>
 <value>Group's address.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.Address2">
 <summary>
 Gets or sets group's secondary address.
 </summary>
 <value>Group's secondary address.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.ZipCode">
 <summary>
 Gets or sets group's zip code.
 </summary>
 <value>Group's zip code.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.City">
 <summary>
 Gets or sets group's city.
 </summary>
 <value>Group's city.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.State">
 <summary>
 Gets or sets group's state.
 </summary>
 <value>Group's state.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.Country">
 <summary>
 Gets or sets group's country.
 </summary>
 <value>Group's country.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.Telephone">
 <summary>
 Gets or sets group's telephone.
 </summary>
 <value>Group's telephone.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.TelephoneHome">
 <summary>
 Gets or sets group's home telephone.
 </summary>
 <value>Group's home telephone.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.Telefax">
 <summary>
 Gets or sets group's telefax.
 </summary>
 <value>Group's telefax.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.Cellular">
 <summary>
 Gets or sets group's cellular.
 </summary>
 <value>Group's cellular.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.ValidFrom">
 <summary>
 Gets or sets group's validity starting date.
 </summary>
 <remarks></remarks>
 <value>Group's validity starting date.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.ValidTo">
 <summary>
 Gets or sets group's validity ending date.
 </summary>
 <value>Group's validity ending date.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.ConfigurationID">
 <summary>
 Gets or sets group's editor configuration ID.
 </summary>
 <value>Group's editor configuration ID.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.Modules">
 <summary>
 Gets or sets module permissions for current group.
 </summary>
 <value>Module permissions for current user.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.ModulesWithInheritance">
 <summary>
 Gets the module permissions with inheritance from this groups's parent
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.RelatedSmartSearchID">
 <summary>
 Gets or sets group's related smart search id
 </summary>
 <value>Related smart search id</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.SmartSearchCacheLastRecalculation">
 <summary>
 Gets or sets last group's smart search cache recalculation time
 </summary>
 <remarks>Caching last recalculation time.</remarks>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.SmartSearchLastCalculatedTime">
 <summary>
 Gets or sets the last time the smart search was calculated and user relations was updated.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.ItemType">
 <summary>
 Gets or sets the type of the associated item.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.ItemId">
 <summary>
 Gets or sets the Id of the associated content item.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.UserAndGroupTypeSystemName">
 <summary>
 Gets or sets the <see cref="P:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType.SystemName"/>.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.UserAndGroupType">
 <summary>
 Gets the <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/>.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.CustomFieldValues">
 <summary>
 Gets or sets custom field values
 </summary>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldValueCollection"/></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.UserDefaultItemType">
 <summary>
 Gets or sets the type of the associated item for new user.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.AllowBackendWithInheritance">
 <summary>
 Gets AllowBackendWithInheritance setting value
 </summary>
 <returns>True or false</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.GeolocationLatitude">
 <summary>
 Gets geo location latitude
 </summary>
 <returns>Double value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.GeolocationLongitude">
 <summary>
 Gets geo location longitude
 </summary>
 <returns>Double value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.GeoLocationIsCustom">
 <summary>
 Gets or sets GeoLocationIsCustom setting value
 </summary>
 <returns>Double value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.IsGeolocationCustom">
 <summary>
 Gets or sets GeoLocationIsCustom setting value
 </summary>
 <returns>Double value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.GeoLocationHash">
 <summary>
 Gets or sets GeoLocationHash
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.GeolocationHashCode">
 <summary>
 Gets or sets GeolocationHashCode
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.GeoLocationImage">
 <summary>
 Gets or sets GeoLocationImage
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.GeolocationIcon">
 <summary>
 Gets or sets GeoLocationImage
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.EmailAllowed">
 <summary>
 Gets or sets EmailAllowed
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.Administrators">
 <summary>
 Gets the administration collection of current group.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.DefaultPermission">
 <summary>
 The default permission this group grants to all it's users.
 </summary>
 <returns>defaultPermission</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.#ctor">
 <summary>
 Creates a new instance of a class.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.#ctor(System.String)">
 <summary>
 Creates a new instance of a class.
 </summary>
 <param name="groupName">Initial name to be assigned to the group.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.Fill(System.Data.IDataReader)">
 <summary>
 Fills object properties according to provided IDataReader.
 </summary>
 <param name="reader">Data holder.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.Save">
 <summary>
 Saves current group.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.Delete(System.Int32)">
 <summary>
 Deletes a group.
 </summary>
 <param name="groupID">The ID of the group to be deleted.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.Delete(System.Boolean)">
 <summary>
 Deletes a group.
 </summary>
 <param name="recursive">Value indicating whether to delete all subgroups.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.Delete">
 <summary>
 Deletes a group.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.AddUser(System.Int32)">
 <summary>
 Adds specified user to current group.
 </summary>
 <param name="userID">The ID of the user to be added.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.AddAdministrator(System.Int32)">
 <summary>
 Adds specified user to current group administrator collection.
 </summary>
 <param name="userID">The ID of the user to be added.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.RemoveUser(System.Int32)">
 <summary>
 Removes specified user from the current group.
 </summary>
 <param name="userID">The ID of the user to be removed.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.RemoveAdministrator(System.Int32)">
 <summary>
 Removes specified user from current group administrator collection.
 </summary>
 <param name="userID">The ID of the user to be removed.</param>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Group.AllGroups">
 <summary>
 Gets all groups
 </summary>
 <returns><see cref="T:System.Collections.Generic.Dictionary`2"/></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.ClearCache">
 <summary>
 Clears cache
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.GetGroups">
 <summary>
 Retrieves a collection of all groups.
 </summary>
 <returns>Retrieved groups.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.GetGroupByID(System.Int32)">
 <summary>
 Retrieves a group by its ID.
 </summary>
 <param name="groupID">The ID of the group to be retrieved.</param>
 <returns>Retrieved group or Nothing if group can not be retrieved.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.LoadWithUsers">
 <summary>
 Loads all groups and their users.
 </summary>
 <returns>A collection of all groups with their users loaded.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.IsDataLoaded(System.Nullable{System.Boolean})">
 <summary>
 Determines whether groups and users has been loaded for the given HTTP context
 </summary>
 <param name="value"></param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.GetGroupsByID(System.Collections.Generic.ICollection{System.Int32})">
 <summary>
 Gets groups by id
 </summary>
 <param name="ids">Collection of id</param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.GroupCollection"/></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.GetGroupsFromString(System.String)">
 <summary>
 Retrieves a collection of groups from specified IDs list ('@'-format).
 </summary>
 <param name="ids">Groups IDs ('@'-format).</param>
 <returns>Retrieved groups.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.GetGroupDBString(Dynamicweb.Security.UserManagement.GroupCollection)">
 <summary>
 Gets group db string
 </summary>
 <param name="groups">Collection of groups</param>
 <returns>String value</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.UpdateUsersEmailAllowed(System.Boolean,System.Int32)">
 <summary>
 Updates email allowed setting
 </summary>
 <param name="isEmailAllowed">Setting value</param>
 <param name="groupId">Id of group</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.ClearSmartSearchCache">
 <summary>
 Clears smart search cache
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Group.SetToCache(System.Collections.Generic.IEnumerable{Dynamicweb.Security.UserManagement.User})">
 <summary>
 Puts users collection into cache
 </summary>
 <param name="usersCollection">Collection of users</param>
</member>
<member name="T:Dynamicweb.Security.UserManagement.GroupCollection">
 <summary>
 Represents a collection of groups.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.GroupCollection.FindGroupByID(System.Int32)">
 <summary>
 Retrieves a group from collection by its ID.
 </summary>
 <param name="groupID">The ID of the group to search for.</param>
 <returns>Retrieved group or Nothing if the group can not be retrieved.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.GroupCollection.LoadUsers">
 <summary>
 Loads group collection users
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.GroupCollection.LoadUserCollection(System.Int32)">
 <summary>
 Loads Group collection users
 </summary>
 <param name="depth">Number of sub groups</param>
</member>
<member name="T:Dynamicweb.Security.UserManagement.GroupNameComparer">
 <summary>
 Compares group names
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.GroupNameComparer.Compare(Dynamicweb.Security.UserManagement.Group,Dynamicweb.Security.UserManagement.Group)">
 <summary>
 Compares two objects and returns a value indicating whether one' name 
 is equal to, or not than the other' group name.
 </summary>
 <param name="x">First group</param>
 <param name="y">Second croup</param>
 <returns>A signed Integer that indicates the relative values Of x And y, 
 As shown In the following table.Value Meaning Less than zerox Is less than 
 y.Zerox equals y.Greater than zerox Is greater than y.</returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.IDCollection">
 <summary>
 Represents a collection of unique IDs.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.IDCollection.LoadFromString(System.String)">
 <summary>
 Loads specified IDs into collection.
 </summary>
 <param name="ids">Comma-separated string of IDs to add.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.IDCollection.Add(System.String)">
 <summary>
 Adds specified IDs to collection.
 </summary>
 <param name="ids">Comma-separated string of IDs to add.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.IDCollection.Add(System.String,System.Boolean)">
 <summary>
 Adds specified IDs to collection.
 </summary>
 <param name="ids">Comma-separated string of IDs to add.</param>
 <param name="skipExisting">Value indicating whether to skip existing items.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.IDCollection.ToString">
 <summary>
 Returns a comma-separated string of collection items.
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.InheritanceInfo">
 <summary>
 Represents inheritance data
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.InheritanceInfo.Item(System.String)">
 <summary>
 Gets permission group
 </summary>
 <param name="permissionAccessName">Permission access name</param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.Group"/></returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.License">
 <summary>
 Represents DynamicWeb CMS License
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.License.IsUsingUserManagement">
 <summary>
 Shows if actual version of UserManager module installed
 </summary>
 <returns>True or false</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.License.HasAccess(Dynamicweb.Security.UserManagement.Actions)">
 <summary>
 Shows if current action is available
 </summary>
 <param name="action"></param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.License.IsModuleAvailable(System.String,System.Boolean)">
 <summary>
 Checks whether the specified module is installed.
 </summary>
 <param name="moduleSystemName">System name for module.</param>
 <param name="refreshCache">If set, the method refreshes the cache</param>
 <returns>Returns True if the specified module is installed.</returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.ModulePermission">
 <summary>
 Represents permission rights for a single module.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ModulePermission.Access">
 <summary>
 Gets or sets "Access" permission.
 </summary>
 <value>"Access" permission.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ModulePermission.Create">
 <summary>
 Gets or sets "Create" permission
 </summary>
 <value>"Create" permission.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ModulePermission.Edit">
 <summary>
 Gets or sets "Edit" permission..
 </summary>
 <value>"Edit" permission.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ModulePermission.Delete">
 <summary>
 Gets or sets "Delete" permission.
 </summary>
 <value>"Delete" permission.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ModulePermission.Categories">
 <summary>
 Gets or sets categories for which access is allowed.
 </summary>
 <value>Categories for which access is allowed.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ModulePermission.Item(System.String)">
 <summary>
 Gets or sets module permission item
 </summary>
 <param name="permissionAccessName">Permission access name</param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.ModulePermissionAccess"/></returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.ModulePermissionAccess">
 <summary>
 Represents a module permission type.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.ModulePermissionAccess.Allow">
 <summary>
 Allows access to module-specified content.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.ModulePermissionAccess.Deny">
 <summary>
 Denies access to module-specified content.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.ModulePermissionAccess.Inherit">
 <summary>
 Value indicating that access should be inherited.
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.ModulePermissionCollection">
 <summary>
 Represents a collection of modules permissions.
 </summary>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.ModulePermissionCollection.Keys">
 <summary>
 Gets a collection containing the keys
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.ModulePermissionCollection.Item(System.String)">
 <summary>
 Gets or sets module permission for desired module.
 </summary>
 <param name="moduleSystemName">Module system name for which module permission should be retrieved/set.</param>
 <value>Module permission.</value>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ModulePermissionCollection.Add(System.String,Dynamicweb.Security.UserManagement.ModulePermission)">
 <summary>
 Adds (or updates) module permission for desired module.
 </summary>
 <param name="moduleSystemName">Module system name for which module permission should be set.</param>
 <param name="permission">Module permissions to be set.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ModulePermissionCollection.LoadFromXml(System.String)">
 <summary>
 Loads modules permissions from xml string.
 </summary>
 <param name="xml">Xml string to load modules permissions from.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ModulePermissionCollection.ToString">
 <summary>
 Retrieves modules permissions as xml string.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ModulePermissionCollection.GetModulePermissionsWithInheritance(Dynamicweb.Security.UserManagement.GroupCollection)">
 <summary>
 Gets module permissions respecting inheritance
 </summary>
 <param name="parents"><see cref="T:Dynamicweb.Security.UserManagement.GroupCollection"/></param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.ModulePermissionCollection"/></returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.PagePermissionAccess">
 <summary>
 Enumeration for page permission access
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.PagePermissionLevels">
 <summary>
 Enumeration for page permission levels
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.PermissionCollection">
 <summary>
 Represents permissions collection
 </summary>        
</member>
<member name="M:Dynamicweb.Security.UserManagement.PermissionCollection.#ctor(Dynamicweb.Security.UserManagement.PagePermissionLevels)">
 <summary>
 Creates new PagePermissionLevels-specific colelction
 </summary>
 <param name="level"><see cref="T:Dynamicweb.Security.UserManagement.PagePermissionLevels"/></param>
</member>
<member name="P:Dynamicweb.Security.UserManagement.PermissionCollection.EveryonePermission">
 <summary>
 Gets or sets EveryonePermission
 </summary>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.PagePermissionAccess"/></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.PermissionCollection.HasDeniedRestrictions">
 <summary>
 Shows if collection has any denied restrictions
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.PermissionCollection.Keys">
 <summary>
 Gets a collection containing the keys
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.PermissionCollection.Item(System.Int32)">
 <summary>
 Gets or sets collection item
 </summary>
 <param name="userID">User identifier</param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.PagePermissionAccess"/></returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.PermissionLevels">
 <summary>
 Types of permission levels
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.Permissions">
 <summary>
 Represents security permissions
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Permissions.#ctor">
 <summary>
 Creates new permissions object
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Permissions.Item(Dynamicweb.Security.UserManagement.PagePermissionLevels)">
 <summary>
 Gets permission item
 </summary>
 <param name="level"><see cref="T:Dynamicweb.Security.UserManagement.PagePermissionLevels"/></param>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Permissions.Backend">
 <summary>
 Gets backend permissions
 </summary>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.PermissionCollection"/></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.Permissions.Frontend">
 <summary>
 Gets frontend permissions
 </summary>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.PermissionCollection"/></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Permissions.LoadFromXml(System.String)">
 <summary>
 Loads permissions items from xml string
 </summary>
 <param name="xmlData"></param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.Permissions.ToString">
 <summary>
 Builds xml string with current object state data
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.ReadOnlyGroupCollection">
 <summary>
 Represents a read-only collection of groups.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ReadOnlyGroupCollection.#ctor(System.Collections.Generic.IList{Dynamicweb.Security.UserManagement.Group})">
 <summary>
 Creates a new instance of a class.
 </summary>
 <param name="list">The initial items that collection should hold.</param>
</member>
<member name="T:Dynamicweb.Security.UserManagement.ReadOnlyUserCollection">
 <summary>
 Represents a read-only collection of users.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ReadOnlyUserCollection.#ctor(System.Collections.Generic.IList{Dynamicweb.Security.UserManagement.User})">
 <summary>
 Creates a new instance of a class.
 </summary>
 <param name="list">The initial items that collection should hold.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.ReadOnlyUserCollection.#ctor">
 <summary>
 Creates a new instance of a class.
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.SearchQuery">
 <summary>
 Represents a search query.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.SearchQuery.IsSearchRequest">
 <summary>
 ToDo: not sure if I can do anything here
 </summary>
 <returns>True or false</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.SearchQuery.Text">
 <summary>
 Gets or sets the search query text submitted by the user.
 </summary>
 <remarks>String value</remarks>
</member>
<member name="P:Dynamicweb.Security.UserManagement.SearchQuery.MatchCase">
 <summary>
 Gets or sets value indicating whether the case of the search query should be taken into consideration.
 </summary>
 <value>True or false</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.SearchQuery.AlphabetRange">
 <summary>
 Gets or sets the alphabet range submitted by the user.
 </summary>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.SearchQueryAlphabetRange"/></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.SearchQuery.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.SearchQueryAlphabetRange">
 <summary>
 Represents an alphabet range.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.SearchQueryAlphabetRange.StartLetter">
 <summary>
 Gets or sets the start letter.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.SearchQueryAlphabetRange.EndLetter">
 <summary>
 Gets or sets the end letter.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.SearchQueryAlphabetRange.IsCollapsed">
 <summary>
 Gets value indicating whether range is collapsed (start letter is equal to end letter).
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.SearchQueryAlphabetRange.IsValid">
 <summary>
 Gets value indicating whether range is valid.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.SearchQueryAlphabetRange.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.SearchQueryAlphabetRange.TryParse(System.String,Dynamicweb.Security.UserManagement.SearchQueryAlphabetRange@)">
 <summary>
 Converts the specified string representation of an alphabet range to its <see cref="T:Dynamicweb.Security.UserManagement.SearchQueryAlphabetRange">SearchQueryAlphabetRange</see> equivalent and returns a value that indicates whether the conversion succeeded.
 </summary>
 <param name="s">A string containing an alphabet range to convert.</param>
 <param name="searchQueryAlphabetRange">When this method returns, contains the <see cref="T:Dynamicweb.Security.UserManagement.SearchQueryAlphabetRange">SearchQueryAlphabetRange</see> value qeuivalent to the alphabet range contained in s, if the conversion succeeded, or an empty range if the conversion failed.
 The conversion fails if the s parameter is Nothing, is an empty string (""), or does not contain a valid string representation of an alphabet range. This parameter is passed uninitialized.
 </param>
 <returns>True if the s parameter was converted successfully; otherwise, false.</returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.SortFields">
 <summary>
 SotFields enumeration
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.LimitedUser">
 <summary>
 Represents a limited user, that can be used for authentication, without loading unneeded data from dependencies, database and context.
 </summary>    
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.ID">
 <summary>
 Gets or sets user's ID.
 </summary>
 <value>User's ID.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.UserName">
 <summary>
 Gets or sets user's user-name.
 </summary>
 <value>User's user-name.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Name">
 <summary>
 Gets or sets user's name.
 </summary>
 <value>User's name.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Title">
 <summary>
 Gets or sets user's title.
 </summary>
 <value>User's title.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.FirstName">
 <summary>
 Gets or sets user's first name.
 </summary>
 <value>User's first name.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.LastName">
 <summary>
 Gets or sets user's last name.
 </summary>
 <value>User's last name.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.MiddleName">
 <summary>
 Gets or sets user's middle name.
 </summary>
 <value>User's middle name.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.HouseNumber">
 <summary>
 Gets or sets user's house number.
 </summary>
 <value>User's house number.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Department">
 <summary>
 Gets or sets user's department name.
 </summary>
 <value>User's department name.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Email">
 <summary>
 Gets or sets user's e-mail address.
 </summary>
 <value>User's e-mail address.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Phone">
 <summary>
 Gets or sets user's phone number.
 </summary>
 <remarks></remarks>
 <value>User's phone number.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.PhonePrivate">
 <summary>
 Gets or sets user's private phone number.
 </summary>
 <value>User's private phone number.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.PhoneBusiness">
 <summary>
 Gets or sets user's password.
 </summary>
 <value>User's password.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.PhoneMobile">
 <summary>
 Gets or sets user's mobile phone number.
 </summary>
 <value>User's mobile phone number.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Fax">
 <summary>
 Gets or sets user's fax number
 </summary>
 <value>User's fax number.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.ValidFrom">
 <summary>
 Gets or sets user's validity starting date.
 </summary>
 <value>User's validity starting date.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.ValidTo">
 <summary>
 Gets or sets user's validity ending date.
 </summary>
 <value>User's validity ending date.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.PointBalance">
 <summary>
 Gets user's loyalty points balance
 </summary>
 <value>User's loyalty points balance.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.GeoLocationLat">
 <summary>
 Gets geo location latitude
 </summary>
 <returns>Double value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.GeolocationLatitude">
 <summary>
 Gets geo location latitude
 </summary>
 <returns>Double value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.GeoLocationLng">
 <summary>
 Gets or sets GeoLocation longitude
 </summary>
 <returns>Double value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.GeolocationLongitude">
 <summary>
 Gets geo location longitude
 </summary>
 <returns>Double value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.GeoLocationHash">
 <summary>
 Gets or sets geo location hash value
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.GeolocationHashCode">
 <summary>
 Gets or sets geo location hash value
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.GeoLocationImage">
 <summary>
 Gets or sets geo location image
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.GeolocationIcon">
 <summary>
 Gets or sets geo location image
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.CountryCode">
 <summary>
 Gets or sets user's country code
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.FrontendStartPage">
 <summary>
 Gets or sets the page that the user is redirected to on login
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.AddressTitle">
 <summary>
 Gets or sets user address title.
 </summary>
 <remarks></remarks>
 <value>User address title.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Address">
 <summary>
 Gets or sets user's primary address.
 </summary>
 <value>User's primary address.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Address2">
 <summary>
 Gets or sets user's secondary address.
 </summary>
 <value>User's secondary address.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Zip">
 <summary>
 Gets or sets user's zip code.
 </summary>
 <value>User's zip code.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.City">
 <summary>
 Gets or sets user's city.
 </summary>
 <value>User's city.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.State">
 <summary>
 Gets or sets user's state.
 </summary>
 <value>User's state.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Country">
 <summary>
 Gets or sets user's country.
 </summary>
 <value>User's country.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.JobTitle">
 <summary>
 Gets or sets user's job title.
 </summary>
 <value>User's job title.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Company">
 <summary>
 Gets or sets user's company name.
 </summary>
 <value>User's company name.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.CustomerNumber">
 <summary>
 Gets or sets user's customer number.
 </summary>
 <value>User's customer number.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Currency">
 <summary>
 Gets or sets user's currency name.
 </summary>
 <value>User's currency name.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Active">
 <summary>
 Gets or sets value indicating whether user is active.
 </summary>
 <value>Value indicating whether user is active.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.ConfigurationID">
 <summary>
 Gets or sets user's editor configuration ID.
 </summary>
 <value>User's editor configuration ID.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.AllowBackendWithInheritance">
 <summary>
 Shows if backed access granted to current user
 </summary>
 <returns>True or false</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.ExternalID">
 <summary>
 Get or sets user's external id.
 </summary>
 <value>external user's id (if any)</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.VatRegNumber">
 <summary>
 A value added tax identification number.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Image">
 <summary>
 Gets or sets path to the user's image.
 </summary>
 <value>Path to the user's image.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.IsAngel">
 <summary>
 Gets or sets value indicating whether current user's type is "Angel".
 </summary>
 <value>Value indicating whether current user's type is "Angel".</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.AllowBackend">
 <summary>
 Gets or sets allow backend property value
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.ApprovalKey">
 <summary>
 Gets or sets approval key
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.IsAdmin">
 <summary>
 Returns true if this user is Admin or Administrator
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.IsBuiltInAdmin">
 <summary>
 Returns true if this user is built-in Admin or Administrator
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.GroupsHaveChanged">
 <summary>
 Shows if groups of user have been changed
 </summary>
 <returns>True or false</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.UserSortCollection">
 <summary>
 Gets or sets UserSort collection
 </summary>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.UserSortCollection"/></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.IsValid">
 <summary>
 Shows if user data is valid
 </summary>
 <returns>True or false</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.CanEditPermissions">
 <summary>
 Sows if user can edit permissions
 </summary>
 <returns>True or false</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Culture">
 <summary>
 Gets user culture
 </summary>
 <returns><see cref="T:System.Globalization.CultureInfo"/></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Region">
 <summary>
 Gets user's region info
 </summary>
 <remarks></remarks>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Groups">
 <summary>
 Gets user's groups. The collection is read-only.
 </summary>
 <value>User's groups. The collection is read-only.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.AdministratorInGroups">
 <summary>
 Gets the collection of groups where the current user is administrator.
 </summary>
 <value>The collection of groups where the current user is administrator. The collection is read-only.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.AdministratorInGroupsIDs">
 <summary>
 Gets the collection of group IDs where the current user is administrator.
 </summary>
 <value>The collection of group IDs where the current user is administrator.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.GroupsIdsUserIsAdmin">
 <summary>
 Gets the collection of group IDs where the current user is administrator.
 </summary>
 <value>The collection of group IDs where the current user is administrator.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.ExternalLogOns">
 <summary>
 Gets the external logins associated with the user
 </summary>
 <value>The collection is read-only.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.ExternalLogins">
 <summary>
 Gets the external logins associated with the user
 </summary>
 <value>The collection is read-only.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Addresses">
 <summary>
 Gets user's addresses
 </summary>
 <value>User's addresses.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.GroupsCount">
 <summary>
 Gets the number of groups that current user is attached to.
 </summary>
 <value>The number of groups.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.ShopID">
 <summary>
 Gets or sets shop identifier
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Type">
 <summary>
 Gets or sets user's type.
 </summary>
 <value>User's type.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.UserType">
 <summary>
 Gets or sets user's type.
 </summary>
 <value>User's type.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.IsLivePricesDisabled">
 <summary>
 Gets or sets DisableLivePrices
 </summary>
 <returns>True or false</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.EncryptPassword">
 <summary>
 Encrypts password
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Modules">
 <summary>
 Gets or sets module permissions for current user.
 </summary>
 <value>Module permissions for current user.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.ModulesWithInheritance">
 <summary>
 Gets the module permissions with inheritance from this user's groups
 </summary>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.ModulePermissionCollection"/></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Exported">
 <summary>
 Gets or sets user last exported date
 </summary>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.ItemType">
 <summary>
 Gets or sets the type of the associated item.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.ItemId">
 <summary>
 Gets or sets the Id of the associated content item.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.UserAndGroupTypeSystemName">
 <summary>
 Gets or sets the <see cref="P:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType.SystemName"/>.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.UserAndGroupType">
 <summary>
 Gets the <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/>.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.StockLocationID">
 <summary>
 Gets or sets user's stock location id.
 </summary>
 <remarks></remarks>               
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.GeoLocationIsCustom">
 <summary>
 Gets or sets "Geo location is custom" sign
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.IsGeolocationCustom">
 <summary>
 Gets or sets "Geo location is custom" sign
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.PasswordDate">
 <summary>
 Stores and retrieves password date value.
 </summary>
 <value>Data</value>
 <returns>Password date.</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.Password">
 <summary>
 Gets or sets user's password.
 </summary>
 <value>User's password.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.DecryptedPassword">
 <summary>
 Gets or sets the plain password.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.PasswordRecoveryToken">
 <summary>
 Gets or sets the password recovery token.
 </summary>
 <value>
 The password recovery token.
 </value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.PasswordRecoveryTokenExpirationTime">
 <summary>
 Gets or sets the password recovery token expiration time.
 </summary>
 <value>
 The password recovery token expiration time.
 </value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.LimitedUser.TypeID">
 <summary>
 Gets or sets user's type ID.
 </summary>
 <value>User's type ID.</value>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.#ctor">
 <summary>
 Creates a new instance of a class.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.#ctor(System.String)">
 <summary>
 Creates a new instance of a class.
 </summary>
 <param name="userName">Initial user-name to be assigned to the user.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.Fill(System.Data.IDataReader)">
 <summary>
 Fills object properties according to provided IDataReader.
 </summary>
 <param name="reader">Data holder.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.IsUserNameValid">
 <summary>
 Checks if the user name is valid.
 </summary>
 <returns>True if the username is non-empty and not taken by another user, false otherwise</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.AddToGroup(System.Int32)">
 <summary>
 Adds current user to the new group.
 </summary>
 <param name="groupID">The ID of the group to add user to.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.AddToGroupAdministrators(System.Int32)">
 <summary>
 Adds current user to the group as administrator.
 </summary>
 <param name="groupID">The ID of the group to add user as administrator.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.RemoveFromGroup(System.Int32)">
 <summary>
 Removes current user from the group.
 </summary>
 <param name="groupID">The ID of the group to remove user from.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.RemoveFromGroupAdministrators(System.Int32)">
 <summary>
 Removes current user from the group as administrator.
 </summary>
 <param name="groupID">The ID of the group to remove user as administrator.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.HasGroup(System.Int32)">
 <summary>
 Determines whether current user is attached to specified group.
 </summary>
 <param name="groupID">The ID of the group to check.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.HasAccess(Dynamicweb.Security.UserManagement.Group)">
 <summary>
 Determines whether current user has an access to the specified group.
 </summary>
 <param name="group">The ID of the group to check.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.ChangePassword(System.String,System.Boolean)">
 <summary>
 Changes the user password.
 </summary>
 <param name="newPassword">The new password.</param>
 <param name="encryptPassword">Determines whether new password should be encrypted.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.SetGroups(Dynamicweb.Security.UserManagement.GroupCollection)">
 <summary>
 Sets the groups for a given user.
 </summary>
 <param name="groups">User groups.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.GetUserTypesAsString(System.Boolean)">
 <summary>
 Retrieves all user types as comma-separated values string.
 </summary>
 <returns>User types.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.GetUserTypes(System.Boolean,System.Boolean)">
 <summary>
 Gets the user types.
 </summary>
 <param name="includeAngelType">if set to <c>true</c> [include angel type].</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.Authenticate(System.String,System.String,Dynamicweb.Security.UserManagement.PermissionLevels)">
 <summary>
 Authenticates user
 </summary>
 <param name="userName">User name</param>
 <param name="password">Password</param>
 <param name="permissionLevel">Permission level</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.Authenticate(System.String,System.String,Dynamicweb.Security.UserManagement.PermissionLevels,System.String,System.Boolean)">
 <summary>
 Authenticates user
 </summary>
 <param name="userName">User name</param>
 <param name="password">Password</param>
 <param name="permissionLevel">Permissions level</param>
 <param name="shopID">Shop identifier</param>
 <param name="updatePassword">Is it needs to update password</param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.User"/></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.GetUser(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Retrieves a user according to provided SQL statement in the specified command builder.
 </summary>
 <param name="commandBuilder">The command builder.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.IsAdministratorUserType(Dynamicweb.Security.UserManagement.UserType)">
 <summary>
 Determines whether the given user type represents an administrator.
 </summary>
 <param name="userType">The user type.</param>
 <returns><c>true</c> if the given user type represents an administrator; otherwise, <c>false</c>.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.IsAdministratorUserType(System.Int32)">
 <summary>
 Determines whether the given user type represents an administrator.
 </summary>
 <param name="userType">The user type.</param>
 <returns><c>true</c> if the given user type represents an administrator; otherwise, <c>false</c>.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.IsAngelUserType(System.Int32)">
 <summary>
 Determines whether the given user type represents an angel user.
 </summary>
 <param name="userType">The user type.</param>
 <returns><c>true</c> if the given user type represents an angel user; otherwise, <c>false</c>.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.IsAngelOrAdministrator(System.Int32)">
 <summary>
 Determines whether the given user type represents an angel user or an administrator user.
 </summary>
 <param name="userType">The user type.</param>
 <returns><c>true</c> if the given user type represents an angel or admin user; otherwise, <c>false</c>.</returns>
 <autogeneratedoc />
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.GetRegions">
 <summary>
 Returns countries in the ISO format
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.AddExternalLogOn(System.Int32,System.String,System.String)">
 <summary>
 Adds external login to the user
 </summary>
 <param name="providerID">External login provider id</param>        
 <param name="providerKey">External login provider key</param>        
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.AddExternalLogin(System.Int32,System.String,System.String)">
 <summary>
 Adds external login to the user
 </summary>
 <param name="providerID">External login provider id</param>        
 <param name="providerKey">External login provider key</param>        
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.RemoveExternalLogOn(System.Int32,System.String)">
 <summary>
 Removes external login from the user
 </summary>
 <param name="providerID">External login provider id</param>        
 <param name="providerKey">External login provider key</param>        
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Security.UserManagement.LimitedUser.RemoveExternalLogin(System.Int32,System.String)">
 <summary>
 Removes external login from the user
 </summary>
 <param name="providerID">External login provider id</param>        
 <param name="providerKey">External login provider key</param>        
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Security.UserManagement.User">
 <summary>
 Represents a user.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.CreatedOn">
 <summary>
 Gets "crated on" date
 </summary>
 <returns>DateTime or null value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.UpdatedOn">
 <summary>
 Gets "updated on" date
 </summary>
 <returns>DateTime or null value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.CreatedByUser">
 <summary>
 Gets user who created current user
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.UpdatedByUser">
 <summary>
 Gets user who updated current user
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.EmailPermissionGivenOn">
 <summary>
 Gets "Email permission given on" date
 </summary>
 <returns>DateTime or null value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.EmailPermissionUpdatedOn">
 <summary>
 Gets "Email permission updated on" date
 </summary>
 <returns>DateTime or null value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.LastLogOnOn">
 <summary>
 Gets date of last login
 </summary>
 <returns>DateTime or null value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.LastLoginOn">
 <summary>
 Gets date of last login
 </summary>
 <returns>DateTime or null value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.SystemFieldValues">
 <summary>
 Gets or sets system field values
 </summary>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.Common.SystemFields.SystemFieldValueCollection"/></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.CurrentSecondaryUser">
 <summary>
 Gets the user that is secondary to the current logged in user
 </summary>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.CustomFieldValues">
 <summary>
 Gets or sets custom field values
 </summary>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.Common.CustomFields.CustomFieldValueCollection"/></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.AddressCustomFieldValues">
 <summary>
 Gets or sets User Address Is Default.
 </summary>
 <remarks>Represents if the User Address is default.</remarks>
 <value>User Address Is Default.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.Current(Dynamicweb.Security.UserManagement.PagePermissionLevels)">
 <summary>
 Gets current session user
 </summary>
 <param name="level"><see cref="T:Dynamicweb.Security.UserManagement.PagePermissionLevels"/></param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.User"/></returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.ImpersonationMode">
 <summary>
 Gets the impersonation mode.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.SecondaryUsers">
 <summary>
 Gets or sets secondary users for current user.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.ExternalLogOnProviderID">
 <summary>
 External login provider id
 </summary>
 <value></value>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.ExternalLoginProviderID">
 <summary>
 External login provider id
 </summary>
 <value></value>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.ExternalLogOnProviderName">
 <summary>
 External login provider name
 </summary>
 <value></value>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.ExternalLoginProviderName">
 <summary>
 External login provider name
 </summary>
 <value></value>       
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.ExternalLogOnProviderType">
 <summary>
 External login provider type
 </summary>
 <value></value>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.ExternalLoginProviderType">
 <summary>
 External login provider type
 </summary>
 <value></value>   
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.ExternalLogOnProviderKey">
 <summary>
 External login provider key
 </summary>
 <value></value>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.ExternalLoginProviderKey">
 <summary>
 External login provider key
 </summary>
 <value></value>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.ExternalLogOnUserName">
 <summary>
 External login user name
 </summary>
 <value>The name of the user in the external system.</value>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.ExternalLoginUserName">
 <summary>
 External login user name
 </summary>
 <value>The name of the user in the external system.</value>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.ExternalLogOnEmail">
 <summary>
 External login e-mail
 </summary>
 <value>The user e-mail in the external system.</value>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.User.ExternalLoginEmail">
 <summary>
 External login e-mail
 </summary>
 <value>The user e-mail in the external system.</value>    
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.#ctor">
 <summary>
 Creates a new instance of a class.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.#ctor(System.String)">
 <summary>
 Creates a new instance of a class.
 </summary>
 <param name="userName">Initial user-name to be assigned to the user.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.Save">
 <summary>
 Saves current user.
 </summary>
 <returns>True if the user was saved, false if the username already exists on another user.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.Delete">
 <summary>
 Deletes the user from database.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.Delete(System.Int32)">
 <summary>
 Deletes a user from the database.
 </summary>
 <param name="userID">The ID of the user to be deleted.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.RemoveSecondaryUsers(System.Int32)">
 <summary>
 Removes all the users and groups that can impersonate the user or grouop and
 users and groups that the user or group can impersonate
 </summary>
 <param name="userId">The user or group id to remove the impersonated users and groups from</param>
 <remarks>The user id can be group id for group</remarks>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.UpdateSecondaryUsers(System.Collections.Generic.ICollection{System.Int32},System.Boolean)">
 <summary>
 Update users and groups that I can impersonate or that can Impersonate me
 </summary>
 <param name="secondaryUserIds">The list of group or user ids that can impersonate me or I can impersonate them</param>
 <param name="updateUsersICanSetAsSecondary">If set to true the users and groups that I can impersonate are updated.
 Otherwise the users and grouops that can impersonate me are updated.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.UpdateSecondaryUsers(System.Int32,System.Collections.Generic.ICollection{System.Int32},System.Boolean)">
 <summary>
 Update users and groups that I can impersonate or that can Impersonate me
 </summary>
 <param name="userId">The user or group id to update imeprsonation users and groups ids</param>
 <param name="secondaryUserIds">The list of group or user ids that can impersonate the user or user can impersonate them</param>
 <param name="updateUsersICanSetAsSecondary">If set to true the users and groups that I can impersonate are updated.
 Otherwise the users and grouops that can impersonate me are updated.</param>
 <remarks>The user id can be group id for group</remarks>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUsersICanSetAsSecondary">
 <summary>
 Gets users whom I can set as secondary
 </summary>
 <return>Users I can set as secondary. The collection is read-only.</return>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUsersThatCanSetMeAsSecondary">
 <summary>
 Gets user's that can impersonate me
 </summary>
 <return>User's that can impersonate me. The collection is read-only.</return>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.RemoveExternalLogOns">
 <summary>
 Removes external logins for the user
 </summary>        
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.Fill(System.Data.IDataReader)">
 <summary>
 Fills object properties according to provided IDataReader.
 </summary>
 <param name="reader">Data holder.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.MatchesSearchQuery(Dynamicweb.Security.UserManagement.SearchQuery)">
 <summary>
 Gets value indicating whether current user matches the specified search query.
 </summary>
 <param name="query">Search query to use.</param>
 <returns>True or false</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetEmptyAccessUserDataSet">
 <summary>
 Returns an empty dataset from the AccessUser table - used for looking at the columns
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUsersBySql(System.String)">
 <summary>
 Retrieves a collection of users according to provided SQL statement.
 </summary>
 <param name="sqlCommandText">SQL statement to be used to retrieve users.</param>
 <returns>Retrieved users.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUserByID(System.Int32)">
 <summary>
 Retrieves a user by its ID.
 </summary>
 <param name="userID">The ID of the user to be retrieved.</param>
 <returns>Retrieved users or Nothing if user can not be retrieved.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUserByID(System.Int32,System.Boolean)">
 <summary>
 Retrieves a user by its ID.
 </summary>
 <param name="userID">The ID of the user to be retrieved.</param>
 <param name="includeAngelType">If true, include angel user type into search, otherwise - not.</param>
 <returns>Retrieved user or Nothing if user can not be retrieved.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUsersByID(System.Collections.Generic.ICollection{System.Int32})">
 <summary>
 Retrieves a user by its ID.
 </summary>
 <param name="userIDs">The ID of the user to be retrieved.</param>
 <returns>Retrieved users or Nothing if user can not be retrieved.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUserByUserName(System.String)">
 <summary>
 Retrieves a user by its user name.
 </summary>
 <param name="userName">The user name of the user to be retrieved.</param>
 <returns>Retrieved user or Nothing if user can not be retrieved.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUserByUserName(System.String,System.String)">
 <summary>
 Retrieves a user by its user name.
 </summary>
 <param name="userName">The user name of the user to be retrieved.</param>
 <returns>Retrieved user or Nothing if user can not be retrieved.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUserBySql(System.String)">
 <summary>
 Retrieves a user according to provided SQL statement.
 </summary>
 <param name="sqlCommandText">SQL statement to be used to retrieve a user.</param>
 <returns>Retrieved user or Nothing if user can not be retrieved.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUser(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Retrieves a user according to provided SQL statement in the specified command builder.
 </summary>
 <param name="commandBuilder">The command builder.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.Authenticate(System.String,System.String,Dynamicweb.Security.UserManagement.PermissionLevels)">
 <summary>
 Authenticates user
 </summary>
 <param name="userName">User name</param>
 <param name="password">Password</param>
 <param name="permissionLevel">Permission level</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.Authenticate(System.String,System.String,Dynamicweb.Security.UserManagement.PermissionLevels,System.String,System.Boolean)">
 <summary>
 Authenticates user
 </summary>
 <param name="userName">User name</param>
 <param name="password">Password</param>
 <param name="permissionLevel">Permissions level</param>
 <param name="shopID">Shop identifier</param>
 <param name="updatePassword">Is it needs to update password</param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.User"/></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUsers(System.Boolean)">
 <summary>
 Gets collection of users
 </summary>
 <param name="onlyBackEnd">Do we need only backend users</param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.UserCollection"/></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUsers">
 <summary>
 Retrieves a collection of all users.
 </summary>
 <returns>Retrieved users.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUsers(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Retrieves a collection of users.
 </summary>
 <param name="commandBuilder">The command builder.</param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.UserCollection"/></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUsersByIds(System.Collections.Generic.List{System.Int32})">
 <summary>
 Gets the users by the list of user ids.
 </summary>
 <param name="UserIDs">The user ids.</param>
 <returns>UserCollection.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetTopUsersByGroupID(System.Int32,System.Int32,System.Boolean)">
 <summary>
 Retrieves a collection of users of the same group.
 </summary>
 <param name="groupID">The ID of the group which retrieved users belongs to.</param>
 <returns>Retrieved users.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUsersByGroupID(System.Int32)">
 <summary>
 Gets users from specific group
 </summary>
 <param name="groupID">Group identifier</param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.UserCollection"/></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUsersByGroupID(System.Int32,System.Boolean)">
 <summary>
 Gets users from specific group
 </summary>
 <param name="groupID">Group identifier</param>
 <param name="onlyBackEnd">Do we need only backend users</param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.UserCollection"/></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUsersFromGroupTree(Dynamicweb.Security.UserManagement.Group,System.Collections.Generic.Dictionary{System.Int32,Dynamicweb.Security.UserManagement.User})">
 <summary>
 Gets users from group tree hierarchy
 </summary>
 <param name="group">Parent group</param>
 <param name="users"><see cref="T:System.Collections.Generic.Dictionary`2"/></param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUserByEmailAddress(System.String)">
 <summary>
 Gets user by email
 </summary>
 <param name="emailAddress">User email address</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetAdministratorsByGroupID(System.Int32)">
 <summary>
 Get administrators from specific group
 </summary>
 <param name="groupID">Group identifier</param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.UserCollection"/></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetAncestors(System.Int32)">
 <summary>
 Gets all ancestor groups collection
 </summary>
 <param name="userId">The id of the user to get ancestors</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetCurrentUser">
 <summary>
 Retrieves the current user for the current context.
 If context is Frontend and no user is logged in, Nothing is returned.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetCurrentBackendUser">
 <summary>
 Retrieves the current backend user.
 If no user is logged in, Nothing is returned.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetCurrentUserID">
 <summary>
 Retrieves the ID of the current backend user.
 If no user is logged in backend, 0 is returned.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetCurrentExtranetUserId">
 Retrieves the ID of the current frontend (extranet) user.
 If no user is logged in frontend, 0 is returned.
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetCurrentExtranetUser">
 <summary>
 Retrieves the current user for the current context.
 If context is Frontend and no user is logged in, Nothing is returned.
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.IsExtranetUserLoggedIn">
 <summary>
 Determines whether a user is logged into the frontend (extranet).
 </summary>
 <returns><c>true</c> if user is logged into the frontend otherwise, <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUsersAndGroupsICanSetAsSecondary">
 <summary>
 Get Users and Groups that user can set as secondary
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUsersAndGroupsThatCanSetMeAsSecondary">
 <summary>
 Get users and groups that can impersonate user
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUsersAndGroupsThatCanSetMeAsSecondary(System.Int32,Dynamicweb.Security.UserManagement.ReadOnlyGroupCollection)">
 <summary>
 Get users and groups that can impersonate the defined user
 </summary>
 <param name="userID">The user id to find users and groups that can impersonate user</param>
 <param name="groups">The user groups or group subgroups to find the users and groups that can impersonate user</param>
 <remarks>The user id can be group id for group</remarks>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.GetUsersAndGroupsICanSetAsSecondary(System.Int32,Dynamicweb.Security.UserManagement.ReadOnlyGroupCollection)">
 <summary>
 Get Users and Groups that defined user can set as secondary
 </summary>
 <param name="userID">The user id to find secondary users and groups</param>
 <param name="groups">The user groups or group subgroups to find the secondary users and groups</param>
 <remarks>The user id can be group id for group</remarks>
</member>
<member name="M:Dynamicweb.Security.UserManagement.User.ApproveUser(System.String,Dynamicweb.Security.UserManagement.User@)">
 <summary>
 Approves user using special key string
 </summary>
 <param name="approvalKey">Approval key</param>
 <param name="user">Return approved user</param>
 <returns>True or false</returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.UserAddress">
 <summary>
 Represents a user address
 </summary>    
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.ID">
 <summary>
 Gets or sets user address ID.
 </summary>
 <value>User address ID.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.UserID">
 <summary>
 Gets or sets user ID
 </summary>
 <value>User ID</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.AddressType">
 <summary>
 Gets or sets Address Type
 </summary>
 <remarks></remarks>
 <value>Address Type</value>                
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.CallName">
 <summary>
 Gets or sets user address Call Name.
 </summary>
 <remarks>Address name like: Home, Business, etc.</remarks>
 <value>User address Call Name.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.Company">
 <summary>
 Gets or sets user address Company name.
 </summary>
 <value>User address Company Name.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.Name">
 <summary>
 Gets or sets user address name.
 </summary>
 <remarks>Address name like: Home, Business, etc.</remarks>
 <value>User address name.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.Address">
 <summary>
 Gets or sets address.
 </summary>
 <value>Address</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.Address2">
 <summary>
 Gets or sets Address2.
 </summary>
 <value>Address2</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.Zip">
 <summary>
 Gets or sets User Address Zip.
 </summary>
 <value>User Address Zip.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.City">
 <summary>
 Gets or sets User Address City.
 </summary>
 <value>User Address City.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.Country">
 <summary>
 Gets or sets User Address Country.
 </summary>
 <value>User Address Country.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.State">
 <summary>
 Gets or sets User Address State.
 </summary>
 <value>User Address State.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.Phone">
 <summary>
 Gets or sets User Address Phone.
 </summary>
 <value>User Address Phone.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.Cell">
 <summary>
 Gets or sets User Address Cell.
 </summary>
 <value>User Address Cell.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.PhoneBusiness">
 <summary>
 Gets or sets User Address Phone (business).
 </summary>
 <value>User Address Phone (business).</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.Fax">
 <summary>
 Gets or sets User Address Fax.
 </summary>
 <value>User Address Fax.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.Email">
 <summary>
 Gets or sets User Address Email.
 </summary>
 <value>User Address Email.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.CustomerNumber">
 <summary>
 Gets or sets User Address Customer Number.
 </summary>
 <value>User Address Customer Number.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.UID">
 <summary>
 Gets or sets User Address UID.
 </summary>
 <remarks></remarks>
 <value>User Address UID.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.UniqueIdentifier">
 <summary>
 Gets or sets User Address UID.
 </summary>
 <remarks></remarks>
 <value>User Address UID.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.IsDefault">
 <summary>
 Gets or sets User Address Is Default.
 </summary>
 <remarks>Represents if the User Address is default.</remarks>
 <value>User Address Is Default.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.CountryCode">
 <summary>
 Gets or sets address country code
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.Region">
 <summary>
 Gets address region info
 </summary>
 <remarks></remarks>        
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserAddress.CustomFieldValues">
 <summary>
 Gets or sets User Address Is Default.
 </summary>
 <remarks>Represents if the User Address is default.</remarks>
 <value>User Address Is Default.</value>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserAddress.#ctor">
 <summary>
 Creates a new instance of a class.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserAddress.Fill(System.Data.IDataReader)">
 <summary>
 Fills object properties according to provided IDataReader.
 </summary>
 <param name="reader">Data holder.</param>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserAddress.GetUserAddressById(System.Int32)">
 <summary>
 Retrieves the user address according to user address iD.
 </summary>
 <param name="id">User address id</param>
 <returns>User address if found, otherwise returns Nothing.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserAddress.GetUserAddresses(System.Int32)">
 <summary>
 Retrieves the user addresses collection according to user id
 </summary>
 <param name="userId">User id</param>
 <returns>User addresses collection</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserAddress.GetUserAddresses">
 <summary>
 Retrieves all user addresses from database
 </summary>
 <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserAddress.GetUserAddressesBySql(System.String)">
 <summary>
 Retrieves a collection of user addresses according to provided SQL statement.
 </summary>
 <param name="sqlCommandText">SQL statement to be used to retrieve user addresses.</param>
 <returns>Retrieved user addresses.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserAddress.GetUserAddresses(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Retrieves a collection of user addresses.
 </summary>
 <param name="commandBuilder">The command builder.</param>
 <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserAddress.GetUserDefaultUserAddressesCustomFields(System.Int32)">
 <summary>
 Retrieves a collection of user default addresses custom fields.
 </summary>
 <param name="userId">User id</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserAddress.Delete(System.Int32)">
 <summary>
 Deletes the user address from database
 </summary>
 <param name="addressId">Address id for deletion</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserAddress.RemoveDefaultAddress(System.Int32)">
 <summary>
 Deletes the user default address from database
 </summary>
 <param name="userID">User id to be used for searching default address</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserAddress.GetUserDefaultAddress(System.Int32)">
 <summary>
 Retrieves default user address from AccessUserAddress table.
 If no default address is set returns user address from AccessUserTable
 </summary>
 <param name="userID">User id to be used for searching default address</param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.UserAddress"/></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserAddress.HasUserDefaultAddress(System.Int32)">
 <summary>
 Returns true if the user has a default address
 </summary>
 <param name="userID">User id to be used for search default address</param>
 <returns>True or false</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserAddress.Save">
 <summary>
 Saves current user address
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.UserCollection">
 <summary>
 Represents a collection of users.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserCollection.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserCollection.FindUserByID(System.Int32)">
 <summary>
 Retrieves a user from collection by its ID.
 </summary>
 <param name="userID">The ID of the user to search for.</param>
 <returns>Retrieved user or Nothing if the user can not be retrieved.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserCollection.SortBy(Dynamicweb.Security.UserManagement.SortFields,System.Boolean,Dynamicweb.Security.UserManagement.Group)">
 <summary>
 Sorts inner collection of elements
 </summary>
 <param name="sortOrder">Sort order</param>
 <param name="ascending">Sort direction</param>
 <param name="group">Sort users within that group</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserCollection.Filter(Dynamicweb.Security.UserManagement.SearchQuery)">
 <summary>
 Filters the collection of users by the specified search query.
 </summary>
 <param name="query">Search query to use.</param>
 <returns>Users that matches the specified search query.</returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.UserComparer">
 <summary>
 Helps to compare users
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserComparer.#ctor(Dynamicweb.Security.UserManagement.SortFields,System.Boolean,Dynamicweb.Security.UserManagement.Group)">
 <summary>
 Create a comparer to sort users within concrete group
 </summary>
 <param name="sortBy"></param>
 <param name="ascending"></param>
 <param name="group">Sort users whithin this group</param>
</member>
<member name="T:Dynamicweb.Security.UserManagement.UserDataBaseField">
 <summary>
 User DB fields.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.UserId">
 <summary>
 User Id
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.ParentId">
 <summary>
 Parent Id
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.UserName">
 <summary>
 User name
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.UserPassword">
 <summary>
 User password
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.Name">
 <summary>
 Name
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.Title">
 <summary>
 Title
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.UserEmail">
 <summary>
 User e-mail
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.UserEmailAllowed">
 <summary>
 Can send e-mail
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.FirstName">
 <summary>
 First Name
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.MiddleName">
 <summary>
 Middle Name
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.LastName">
 <summary>
 Last Name
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.Image">
 <summary>
 Image
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.Address">
 <summary>
 Address
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.Address2">
 <summary>
 Address2
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.HouseNumber">
 <summary>
 House number
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.Zip">
 <summary>
 Zip code
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.City">
 <summary>
 City
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.Region">
 <summary>
 State or region
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.Country">
 <summary>
 Country
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.BillingCountry">
 <summary>
 Billing / Shipping country
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.Phone">
 <summary>
 Phone
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.PhonePrivate">
 <summary>
 Phone (private)
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.PhoneMobile">
 <summary>
 Mobile
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.CustomerNumber">
 <summary>
 Customer number
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.ExternalId">
 <summary>
 External id
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.CurrencyCharacter">
 <summary>
 Currency
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.StockLocation">
 <summary>
 Stock location
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.Company">
 <summary>
 Company
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.Department">
 <summary>
 Department
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.JobTitle">
 <summary>
 Job Title
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.PhoneBusiness">
 <summary>
 Phone (business)
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.VatRegNumber">
 <summary>
 A value added tax identification number
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.GeolocationLatitude">
 <summary>
 Geolocation latitude
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.GeolocationLongitude">
 <summary>
 Geolocation longitude
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.IsGeolocationCustom">
 <summary>
 Is geolocation custom
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.GeolocationImage">
 <summary>
 Geolocation image
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.FrontendStartPage">
 <summary>
 Gets or sets the page that the user is redirected to on login
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.Type">
 <summary>
 User type
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.ValidFrom">
 <summary>
 Valid from
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.ValidTo">
 <summary>
 Valid to
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.Active">
 <summary>
 Active
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.AllowBackend">
 <summary>
 Allow backend
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.CreatedOn">
 <summary>
 Created on
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.UpdatedOn">
 <summary>
 Updated on
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.CreatedBy">
 <summary>
 Created by
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.UpdatedBy">
 <summary>
 Updated by
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.EmailPermissionUpdatedOn">
 <summary>
 Email permission updated on
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.LastLogOn">
 <summary>
 Last login time
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.LastOrderDate">
 <summary>
 Last order date
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.Fax">
 <summary>
 Fax
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.GeolocationShowOnMap">
 <summary>
 Show location on map
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.GeolocationGetFromApi">
 <summary>
 Get location from API
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.DisableLivePrices">
 <summary>
 Disable live prices
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.UserGroups">
 <summary>
 Groups
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.GroupUsers">
 <summary>
 Users
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.ItemType">
 <summary>
 Item type
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserDataBaseField.DefaultPermission">
 <summary>
 Default permission level
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.UserImpersonation">
 <summary>
 Represents the user impersonation modes.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserImpersonation.OnlyOrders">
 <summary>
 Allow create orders on behalf of other users.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserImpersonation.Full">
 <summary>
 Full(real) impersonation mode.
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.UserMacro">
 <summary>
 Represents user macro
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserMacro.Evaluate(System.String)">
 <summary>
 Evaluates action
 </summary>
 <param name="action">action name</param>
 <returns>Evaluated action object</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserMacro.Name">
 <summary>
 Gets user macro name
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserMacro.SupportedActions">
 <summary>
 Gets list of supported actions
 </summary>
 <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
</member>
<member name="T:Dynamicweb.Security.UserManagement.UserPasswordHashAlgorithm">
 <summary>
 Represents the type of password hash algorithm.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserPasswordHashAlgorithm.MD5">
 <summary>
 MD5 hash (default).
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserPasswordHashAlgorithm.SHA512">
 <summary>
 SHA512 hash.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Security.UserManagement.UserSort">
 <summary>
 Responsible for store users sorting within several groups. 
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserSort.GroupID">
 <summary>
 Gets or sets group ID.
 </summary>
 <value>group ID.</value>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserSort.Sort">
 <summary>
 Gets or sets status sort number.
 </summary>
 <value>Status sort number.</value>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserSort.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserSort.#ctor(System.Int32,System.Int32)">
 <summary>
 Creates new object instance defining groupID and sort order
 </summary>
 <param name="groupID">Group identifier</param>
 <param name="sort">Sort order</param>
</member>
<member name="T:Dynamicweb.Security.UserManagement.UserSortCollection">
 <summary>
 Represents collection of UserSort
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserSortCollection.GetUserSortCollection(System.String)">
 <summary>
 Gets collection of user sorts
 </summary>
 <param name="xml">xml string with user sort data</param>
 <returns><see cref="T:Dynamicweb.Security.UserManagement.UserSortCollection"/></returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserSortCollection.ToString">
 <summary>
 Gets object data as string
 </summary>
 <returns>String representation of object state</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserSortCollection.CheckContains(Dynamicweb.Security.UserManagement.Group)">
 <summary>
 Checks if collection contains group
 </summary>
 <param name="group"><see cref="T:Dynamicweb.Security.UserManagement.Group"/> object instance</param>
 <returns>True if collection contains group element</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserSortCollection.GetSorting(Dynamicweb.Security.UserManagement.Group)">
 <summary>
 Gets sorting value
 </summary>
 <param name="group"><see cref="T:Dynamicweb.Security.UserManagement.Group"/> object instance</param>
 <returns>Integer value</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserSortCollection.AddOrReplace(Dynamicweb.Security.UserManagement.UserSort)">
 <summary>
 Adds sort object to collection or replaces found object with new one
 </summary>
 <param name="sort"><see cref="T:Dynamicweb.Security.UserManagement.UserSort"/> object instance</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserSortCollection.XmlHelper.Serialize``1(``0)">
 <summary>
 Serialization of the object.
 </summary>
 <typeparam name="T">Type of the object.</typeparam>
 <param name="objT">Serialized object.</param>
 <returns>XML string.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserSortCollection.XmlHelper.Deserialize``1(System.String)">
 <summary>
 Deserialization of the object.
 </summary>
 <typeparam name="T">Type of the object.</typeparam>
 <param name="objXml">Xml string representation of the serialized object.</param>
 <returns>Deserialized object.</returns>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Security.UserManagement.UserType">
 <summary>
 Represents a type of user.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserType.SystemAdministrator">
 <summary>
 System administrator (partner).
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserType.Administrator">
 <summary>
 Normal administrator.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserType.Editor">
 <summary>
 Editor
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserType.Default">
 <summary>
 User (default type).
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserType.ExtranetUser">
 <summary>
 Extranet user.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupFieldRule.Visible">
 <summary>
 Visible and editable.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupFieldRule.ReadOnly">
 <summary>
 Visible and not editable.
 </summary>
</member>
<member name="F:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupFieldRule.Hidden">
 <summary>
 Not visible.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupField.SystemName">
 <summary>
 Gets or sets the field system name.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupField.Rule">
 <summary>
 Gets or sets the rule.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType.Name">
 <summary>
 Gets or sets the name.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType.SystemName">
 <summary>
 Gets or sets the system name.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType.Description">
 <summary>
 Gets or sets the description.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType.Icon">
 <summary>
 Gets or sets the icon.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType.IconColor">
 <summary>
 Gets or sets the icon color.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType.IsGroupTemplate">
 <summary>
 Gets or sets value indicating that it is a user or a group template.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType.AllowedParents">
 <summary>
 Gets or sets the collection of allowed parent's system names.
 </summary>
</member>
<member name="P:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType.Fields">
 <summary>
 Gets or sets the collection of the fields.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType.#ctor">
 <summary>
 Initializes new instance of the class.
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType.#ctor(System.String)">
 <summary>
 Initializes new instance of the class.
 </summary>
 <param name="systemName">The system name.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType.#ctor(System.String,System.String)">
 <summary>
 Initializes new instance of the class.
 </summary>
 <param name="systemName">The system name.</param>
 <param name="name">The name.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupTypeService.CheckCanBeChild(Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType,Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType)">
 <summary>
 Checks the <paramref name="child"/> is can be descendant of the <paramref name="parent"/>.
 </summary>
 <param name="parent">The child.</param>
 <param name="child">The parent.</param>
 <returns><c>True</c>, if child is can be descendant of the parent, otherwise <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupTypeService.IsDefaultChildAllowed(System.String)">
 <summary>
 Checks the regular group or user is can be child.
 </summary>
 <param name="systemName">The <see cref="P:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType.SystemName"/>.</param>
 <returns><c>True</c>, if regular group or user is can be child of the <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/>, otherwise <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupTypeService.GetAllowedChildren(Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType)">
 <summary>
 Gets the collection of the <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/> with items which can be a child of the <paramref name="parent"/>.
 </summary>
 <param name="parent">The parent.</param>
 <returns>The collection of the children.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupTypeService.GetAllowedChildren(System.String)">
 <summary>
 Gets the collection of the <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/> with items which can be a child of the parent.
 </summary>
 <param name="parentSystemName">The parent system name.</param>
 <returns>The collection of the children.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupTypeService.ValidateSystemName(System.String)">
 <summary>
 Checks if the specified system name is unique and have no invalid characters.
 </summary>
 <param name="systemName">The system name.</param>
 <returns><c>True</c>, if system name is unique and valid, otherwise <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupTypeService.HaveVisibleOrReadOnlyFields(Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType,System.Collections.Generic.IEnumerable{Dynamicweb.Security.UserManagement.UserDataBaseField})">
 <summary>
 Determines whether at least one of the <paramref name="dbFields"/> is not hidden.
 </summary>
 <param name="item">The <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/>.</param>
 <param name="dbFields">The collection of the <see cref="T:Dynamicweb.Security.UserManagement.UserDataBaseField"/>.</param>
 <returns><c>True</c>, if the <paramref name="item"/> have rule for at least one of the <paramref name="dbFields"/> and its rule is not set to <see cref="F:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupFieldRule.Hidden"/>, otherwise <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupTypeService.IsVisibleOrReadOnlyField(Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType,Dynamicweb.Security.UserManagement.UserDataBaseField)">
 <summary>
 Determines whether the field is not hidden.
 </summary>
 <param name="item">The <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/>.</param>
 <param name="dbField">The <see cref="T:Dynamicweb.Security.UserManagement.UserDataBaseField"/>.</param>
 <returns><c>True</c>, if the <paramref name="item"/> have rule for the <paramref name="dbField"/> and its rule is not set to <see cref="F:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupFieldRule.Hidden"/>, otherwise <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupTypeService.IsVisibleOrReadOnlyField(Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType,System.String)">
 <summary>
 Determines whether the field is not hidden.
 </summary>
 <param name="item">The <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/>.</param>
 <param name="fieldSystemName">The <see cref="P:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupField.SystemName"/>.</param>
 <returns><c>True</c>, if the <paramref name="item"/> have rule for the <paramref name="fieldSystemName"/> and its rule is not set to <see cref="F:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupFieldRule.Hidden"/>, otherwise <c>false</c>.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupTypeService.GetUserAndGroupField(Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType,Dynamicweb.Security.UserManagement.UserDataBaseField)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupField"/> by <see cref="T:Dynamicweb.Security.UserManagement.UserDataBaseField"/> from <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/>.
 </summary>
 <param name="item">The <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/>.</param>
 <param name="dbField">The <see cref="T:Dynamicweb.Security.UserManagement.UserDataBaseField"/>.</param>
 <returns>The <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupField"/>.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupTypeService.GetUserAndGroupField(Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType,System.String)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupField"/> by the system name from <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/>.
 </summary>
 <param name="item">The <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/>.</param>
 <param name="fieldSystemName">The <see cref="P:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupField.SystemName"/>.</param>
 <returns>The <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupField"/>.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupTypeService.GetAll">
 <summary>
 Gets all <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/> available in the solution.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/>.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupTypeService.GetBySystemName(System.String)">
 <summary>
 Gets the <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/> by system name.
 </summary>
 <param name="systemName">The system name.</param>
 <returns>The <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/>.</returns>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupTypeService.Save(Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType)">
 <summary>
 Saves the <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/>.
 </summary>
 <param name="item">The <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/> for save.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupTypeService.Delete(System.String)">
 <summary>
 Deletes the <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/>.
 </summary>
 <param name="systemName">The <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/> system name.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupTypeService.Delete(Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType)">
 <summary>
 Deletes the <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/>.
 </summary>
 <param name="item">The <see cref="T:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupType"/> for delete.</param>
</member>
<member name="M:Dynamicweb.Security.UserManagement.UserTypes.UserAndGroupTypeService.ClearCache">
 <summary>
 Clears the cache.
 </summary>
</member>
<member name="T:Dynamicweb.Security.UserManagement.VCard">
 <summary>
 Represents VCard object
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.VCard.#ctor">
 <summary>
 Creates new VCard object and fills user fields
 </summary>
</member>
<member name="M:Dynamicweb.Security.UserManagement.VCard.GetVCard(System.String[],Dynamicweb.Security.UserManagement.User)">
 <summary>
 Gets users vcard string data
 </summary>
 <param name="tags">Array of tags</param>
 <param name="user"><see cref="T:Dynamicweb.Security.UserManagement.User"/></param>
 <returns>VCard string data</returns>
</member>
<member name="T:Dynamicweb.Security.NamespaceDoc">
 <summary>
 The Dynamicweb.Security namespace contains types for accessing and managing data in the database. Use this namespace to query data directly on the database where the objects in Dynamicweb are not sufficient.
 </summary>
</member>
<member name="T:Dynamicweb.Security.SystemTools.NamespaceDoc">
 <summary>
 The Dynamicweb.Security.SystemTools namespace contains types used internally by the Security namespace.
 </summary>
</member>
<member name="T:Dynamicweb.Security.SystemTools.Crypto">
 <summary>
  This class contains functions uses to Encrypt/Decrypt source.
 </summary>
 <remarks>
 Crypto is a wrapper of System.Security.Cryptography.SymmetricAlgorithm classes
 and simplifies the interface. It supports customized SymmetricAlgorithm as well.
 </remarks>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Crypto.#ctor(Dynamicweb.Security.SystemTools.SymmProvEnum)">
 <summary>
 Determines kind of CryptoServiceProvider algorithm. 
 </summary>
 <param name="netSelected" >Enum of kinds.</param>
 <remarks>
 Constructor for using an intrinsic .Net SymmetricAlgorithm class.
 </remarks>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Crypto.#ctor(System.Security.Cryptography.SymmetricAlgorithm)">
 <summary> 
 Determines custom CryptoServiceProvider algorithm.
 </summary>
 <param name="serviceProvider"></param>
 <remarks>
 Constructor for using a customized SymmetricAlgorithm class.
 </remarks>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Crypto.GetLegalKey(System.String)">
 <summary>
 Gets a Key and make it a legal length.
 </summary>
 <param name="key">Input <i>Key</i> value.</param>
 <returns>The processed string as sequence of bytes.</returns>
 <remarks>
 Depending on the legal key size limitations of a specific CryptoService provider
 and length of the private key provided, padding the secret key with space character
 to meet the legal size of the algorithm.
 </remarks>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Crypto.GetLegalIV(System.String)">
 <summary>
 Gets a IV and make it a legal length.
 </summary>
 <param name="key">Input <i>IV</i> value.</param>
 <returns>The processed string as sequence of bytes.</returns>
 <remarks>
 Depending on the legal IV size limitations of a specific CryptoService provider
 and length of the private key provided, padding the secret key with space character
 to meet the legal size of the algorithm.
 </remarks>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Crypto.Encrypt(System.String,System.String)">
 <summary>
 Encrypts an input source using current <i>Key</i> parameter.
 </summary>
 <param name="source">Source to encrypt.</param>
 <param name="key">The current <i>Key</i> parameter.</param>
 <returns>Encrypted source converted into Base64 so that the result can be used in xml.
 </returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Crypto.Decrypt(System.String,System.String)">
 <summary>
 Decrypts an input source using current <i>Key</i> parameter.
 </summary>
 <param name="source">Source to encrypt.</param>
 <param name="key">The current <i>Key</i> parameter.</param>
 <returns>String representation of the decrypted source.</returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Crypto.StringToHex(System.String)">
 <summary>
 Converts strings to hex.
 </summary>
 <param name="text">The text.</param><returns></returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Crypto.HexToString(System.String)">
 <summary>
 Converts hex values to string.
 </summary>
 <param name="hex">The hex.</param><returns></returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Crypto.Encrypt(System.String)">
 <summary>
 Encrypts the specified value.
 </summary>
 <param name="value">The value.</param>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Crypto.Decrypt(System.String)">
 <summary>
 Decrypts the specified value.
 </summary>
 <param name="value">The value.</param>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Crypto.EncryptAes(System.String)">
 <summary>
 Encrypts the specified value with AES.
 </summary>
 <param name="value">The value.</param>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Crypto.DecryptAes(System.String)">
 <summary>
 Decrypts the specified value with AES.
 </summary>
 <param name="value">The value.</param>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Crypto.EncryptPassword(System.String,Dynamicweb.Security.UserManagement.UserPasswordHashAlgorithm)">
 <summary>
 Encrypts a string with either MD5 or SHA512 encryption according to global settings.
 </summary>
 <param name="password">The password.</param>
 <param name="hashAlgorithm">The hash algorithm - either SHA512 or MD5 (default).</param>
 <returns>The <paramref name="password" /> hashed with MD5 (default) or SHA512</returns>
 <remarks>
 A string hashed with MD5 (default) or SHA512 cannot be reversed to plain text.
 </remarks>
</member>
<member name="T:Dynamicweb.Security.SystemTools.DESencrypter">
 <summary>
   This class contains the functions used DES encryption.
 </summary>
</member>
<member name="M:Dynamicweb.Security.SystemTools.DESencrypter.Encrypt(System.String)">
 <summary> 
 Encrypts the input value using DES algorithm.
 </summary>
 <param name="value">Input value.</param>
 <returns>Encrypted array of bytes.</returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.DESencrypter.Decrypt(System.Byte[])">
 <summary>
 Decrypts the input encrypted array.
 </summary>
 <param name="encrypted">Encrypted array of bytes.</param>
 <returns>Decrypted array converted from byte to string.</returns>
</member>
<member name="T:Dynamicweb.Security.SystemTools.GeoLocation">
 <summary>
 Represents geo location with two coordinates
 </summary>
</member>
<member name="F:Dynamicweb.Security.SystemTools.GeoLocation.Latitude">
 <summary>
 Geo latitude
 </summary>
</member>
<member name="F:Dynamicweb.Security.SystemTools.GeoLocation.Longitude">
 <summary>
 Geo longitude
 </summary>
</member>
<member name="M:Dynamicweb.Security.SystemTools.GeoLocation.#ctor(System.Double,System.Double)">
 <summary>
 Creates new GeoLocation instance
 </summary>
 <param name="latitude">Latitude</param>
 <param name="longitude">Longitude</param>
</member>
<member name="T:Dynamicweb.Security.SystemTools.GeoLocationStatus">
 <summary>
 Enumeration for geo location status types
 </summary>
</member>
<member name="T:Dynamicweb.Security.SystemTools.Hash">
 <summary>
 Represents hash
 </summary>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Hash.GetHash(System.String,System.String)">
 <summary>
 Gets salted hash
 </summary>
 <param name="input">Input stream</param>
 <param name="salt">Salt</param>
</member>
<member name="T:Dynamicweb.Security.SystemTools.JsonHelper">
 <summary>
 Helps to obtain specific data from JSON string
 </summary>
</member>
<member name="M:Dynamicweb.Security.SystemTools.JsonHelper.#ctor(System.String)">
 <summary>
 Creates new instance
 </summary>
 <param name="json">JSON string</param>
</member>
<member name="M:Dynamicweb.Security.SystemTools.JsonHelper.GetObject(System.String)">
 <summary>
 Gets object by path
 </summary>
 <param name="path">Path to object property</param>
 <returns><see cref="T:System.Object"/></returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.JsonHelper.GetString(System.String)">
 <summary>
 Gets string by path
 </summary>
 <param name="path">Path to object property</param>
 <returns>String value</returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.JsonHelper.GetDouble(System.String)">
 <summary>
 Gets double value by path
 </summary>
 <param name="path">Path to object property</param>
 <returns>Double value</returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.JsonHelper.GetDecimal(System.String)">
 <summary>
 Gets decimal value by path
 </summary>
 <param name="path">Path to object property</param>
 <returns>Decimal value</returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.JsonHelper.GetValue(System.String)">
 <remarks>Get value by path on the form a.b.c, a.b[1], ...</remarks>
</member>
<member name="T:Dynamicweb.Security.SystemTools.JsonHelper.JsonConvertHelper">
 <summary>
 Convert all nested JSON properties to objects 
 </summary>
</member>
<member name="M:Dynamicweb.Security.SystemTools.JsonHelper.JsonConvertHelper.ConvertToDictionary(Newtonsoft.Json.Linq.JObject)">
 <summary>
 Convert the JObject to Dictionary
 </summary>
 <param name="jsonObject">JObject which will be converted</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.JsonHelper.JsonConvertHelper.ConvertToArray(Newtonsoft.Json.Linq.JArray)">
 <summary>
 Convert the JArray to object[]
 </summary>
 <param name="jsonArray">JArray which will be converted</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.Security.SystemTools.Login">
 <summary>
 Handles extranet login.
 </summary>
 <remarks></remarks>    
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.#ctor">
 <summary>
 Initializes a new instance of the login class.
 </summary>
 <remarks>Initializes the object with <c>Username</c> and <c>Password</c> from form post.</remarks>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the login class.
 </summary>
 <param name="strusername">The username.</param>
 <param name="strpassword">The password.</param>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.StartLogin">
 <summary>
 Starts the Login.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.StartLogOn">
 <summary>
 Starts the Login.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.ResetPasswords">
 <summary>
 Resets passwords.
 </summary>
 <remarks>Set angel password.</remarks>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.Login">
 <summary>
  Determines whether the current user has access or not.
 </summary>
 <returns>Boolean statement.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.LogOn">
 <summary>
  Determines whether the current user has access or not.
 </summary>
 <returns>Boolean statement.</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.getPageRights(System.String,System.String[])">
 <summary>
 Returns rights from user and membership groups.
 </summary>
 <param name="UserPages"></param>
 <param name="MemberOfGroups"></param>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.GetModules">
 <summary>
 Gets two-sided array of ModuleSystemName, ModuleAccess for all modules
 Call this method when Session object is not accessed or is nothing
 </summary>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.GetCustomModules">
 <summary>
 Gets all custom modules from the database
 </summary>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.ClearCustomModules">
 <summary>
 Clear customM mdules
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.SetModuleSession">
 <summary>
 Sets the session variable DW_Admin_Modules to a two-sided array of ModuleSystemName, ModuleAccess for all modules
 Call this method to reload from DB
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.GetRights(System.String@,System.String[]@)">
 <summary>
 Gets access rights for the current user, or groups of users.
 </summary>
 <param name="getRightsUserID"></param>
 <param name="getRightsGroups"></param>
 <returns>Nothing</returns>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.ApplyRight(System.String@,System.String@,System.Int32@)">
 <summary>
 Disabled or assigned right.
 </summary>
 <param name="CallName"></param>
 <param name="Value"></param>
 <param name="ParentID"></param>
 <returns>Nothing</returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.SaveCookie">
 <summary>
 Saves cookie.
 </summary>
 <returns>Nothing</returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.SaveAngelCookie">
 <summary>
 Saves cookie.
 </summary>
 <returns>Nothing</returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.NormalLogin">
 <summary>
 Starts a normall login.
 </summary>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.NormalLogOn">
 <summary>
 Starts a normall login.
 </summary>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.ActiveDirectoryLogin">
 <summary>
 Starts login for ActiveDirectory.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Login.ActiveDirectoryLogOn">
 <summary>
 Starts login for ActiveDirectory.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.Security.SystemTools.Maps">
 <summary>
 Provides methods for working with google maps data
 </summary>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Maps.SetGeoLocationFromGoogleMapsAPI(Dynamicweb.Security.UserManagement.User,System.Boolean)">
 <summary>
 Sets geo location using google maps api data
 </summary>
 <param name="user"><see cref="T:Dynamicweb.Security.UserManagement.User"/></param>
 <param name="force">Defines if it needs to force operation</param>
 <returns><see cref="T:Dynamicweb.Security.SystemTools.GeoLocationStatus"/></returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Maps.SetGeolocationFromGoogleMaps(Dynamicweb.Security.UserManagement.User,System.Boolean)">
 <summary>
 Sets geo location using google maps api data
 </summary>
 <param name="user"><see cref="T:Dynamicweb.Security.UserManagement.User"/></param>
 <param name="force">Defines if it needs to force operation</param>
 <returns><see cref="T:Dynamicweb.Security.SystemTools.GeoLocationStatus"/></returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Maps.SetGeoLocationFromGoogleMapsAPI(Dynamicweb.Security.UserManagement.Group,System.Boolean)">
 <summary>
 Sets geo location using google maps api data
 </summary>
 <param name="group"><see cref="T:Dynamicweb.Security.UserManagement.Group"/></param>
 <param name="force">Defines if it needs to force operation</param>
 <returns><see cref="T:Dynamicweb.Security.SystemTools.GeoLocationStatus"/></returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Maps.SetGeolocationFromGoogleMaps(Dynamicweb.Security.UserManagement.Group,System.Boolean)">
 <summary>
 Sets geo location using google maps api data
 </summary>
 <param name="group"><see cref="T:Dynamicweb.Security.UserManagement.Group"/></param>
 <param name="force">Defines if it needs to force operation</param>
 <returns><see cref="T:Dynamicweb.Security.SystemTools.GeoLocationStatus"/></returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Maps.GetGetLocationAddress(Dynamicweb.Security.UserManagement.User,System.String)">
 <summary>
 Gets geo location address
 </summary>
 <param name="user"><see cref="T:Dynamicweb.Security.UserManagement.User"/></param>
 <param name="delimiter">String delimiter</param>
 <returns>String value</returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Maps.GetGetLocationAddress(Dynamicweb.Security.UserManagement.Group,System.String)">
 <summary>
 Gets geo location address
 </summary>
 <param name="group"><see cref="T:Dynamicweb.Security.UserManagement.Group"/></param>
 <param name="delimiter">String delimiter</param>
 <returns>String value</returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Maps.GeocodingResponse(System.String)">
 <summary>
 Gets geo coding response
 </summary>
 <param name="address">String value with address</param>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.SystemTools.Maps.GoogleMapsAPIKey">
 <summary>
 Gets google map api key
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.SystemTools.Maps.GoogleMapsApiKeyValue">
 <summary>
 Gets google map api key
 </summary>
 <returns>String value</returns>
</member>
<member name="P:Dynamicweb.Security.SystemTools.Maps.GoogleMapsClientID">
 <summary>
 Gets google map client identifier
 </summary>
 <returns>String value</returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Maps.GetLocation(System.String)">
 <summary>
 Gets location coordinates using address
 </summary>
 <param name="address">Address</param>
 <returns>Latitude and longitude values</returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Maps.Wrap(System.Double,System.Double,System.Double)">
 <summary>
 Wrap a number to fit inside a specified range
 </summary>
 <param name="value">the value</param>
 <param name="min">minimum allowed value (inclusive)</param>
 <param name="max">maximum allowed value (inclusive)</param>
 <returns>the wrapped value</returns>
</member>
<member name="M:Dynamicweb.Security.SystemTools.Maps.Clamp(System.Double,System.Double,System.Double)">
 <summary>
 Clamp a number to be inside a specified range
 </summary>
 <param name="value">the value</param>
 <param name="min">minimum allowed value (inclusive)</param>
 <param name="max">maximum allowed value (inclusive)</param>
 <returns>the clamped value</returns>
</member>
<member name="T:Dynamicweb.Security.SystemTools.SymmProvEnum">
 <remarks>
 Supported .Net intrinsic SymmetricAlgorithm classes.
 </remarks>
</member>
<member name="F:Dynamicweb.Security.SystemTools.SymmProvEnum.DES">
 <summary>
 	
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Security.SystemTools.SymmProvEnum.RC2">
 <summary>
 	
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Security.SystemTools.SymmProvEnum.Rijndael">
 <summary>
 	
 </summary>
 <remarks></remarks>
</member>
<member name="F:Dynamicweb.Security.SystemTools.SymmProvEnum.AES">
 <summary>
 
 </summary>
</member>
<member name="T:Dynamicweb.Security.Utilities.NamespaceDoc">
 <summary>
 The Dynamicweb.Security.Utilities namespace contains supporting helpers used by the security namespace.
 </summary>
</member>
<member name="T:Dynamicweb.Security.Utilities.CheckSum">
 <summary>
 Represents check sum
 </summary>
</member>
<member name="M:Dynamicweb.Security.Utilities.CheckSum.GetPageCheckSum(System.Int32)">
 <summary>
 Gets pageID based checksum
 </summary>
 <param name="pageID">Id of page</param>
 <returns>Calculated md5 hash string</returns>
</member>
<member name="T:Dynamicweb.Security.Utilities.LoginHelper">
 <summary>
 Helper class with supporting methods used internally by Dynamicweb.
 </summary>    
</member>
<member name="M:Dynamicweb.Security.Utilities.LoginHelper.IsAutoLogOnAllowed">
 <summary>
 Check if auto login is allowed
 </summary>
 <returns>Is all seems ok.</returns>
 <remarks>A trying to prevent CFRF attacks(Cross Site Request Forgery)</remarks>
</member>
<member name="M:Dynamicweb.Security.Utilities.LoginHelper.IsAutoLoginAllowed">
 <summary>
 Check if auto login is allowed
 </summary>
 <returns>Is all seems ok.</returns>
 <remarks>A trying to prevent CFRF attacks(Cross Site Request Forgery)</remarks>
</member>
<member name="T:Dynamicweb.Security.Utilities.PasswordGenerator">
 <summary>
 Generates password
 </summary>
</member>
<member name="T:Dynamicweb.Security.Utilities.PasswordGenerator.SecurityLevel">
 <summary>
 Enumeration representing the security level for a generated password
 </summary>
</member>
<member name="F:Dynamicweb.Security.Utilities.PasswordGenerator.SecurityLevel.Low">
 <summary>
 Low password security restrict the minimum length of a password a little and limits the possible characters in the password a lot
 </summary>
</member>
<member name="F:Dynamicweb.Security.Utilities.PasswordGenerator.SecurityLevel.Medium">
 <summary>
 Medium password security restrict the minimum length of a password somewhat and limits the possible characters in the password a lot
 </summary>
</member>
<member name="F:Dynamicweb.Security.Utilities.PasswordGenerator.SecurityLevel.High">
 <summary>
 High password security restrict the minimum length of a password a lot and limits the possible characters in the password a little
 </summary>
</member>
<member name="M:Dynamicweb.Security.Utilities.PasswordGenerator.PasswordGenerate(System.String)">
 <summary>
 Generates a random password.
 </summary>
 <param name="charactersNumber">Length of password.</param>
 <history>
     [bbr]   11-04-2005  Comments edited
 	[daf]	16-03-2005	Created
 </history>
</member>
<member name="M:Dynamicweb.Security.Utilities.PasswordGenerator.GeneratePassword(System.Int32)">
 <summary>
 Generates a random password of the given length
 By default, <see cref="F:Dynamicweb.Security.Utilities.PasswordGenerator.SecurityLevel.Medium"/> is used
 </summary>
 <param name="passwordLength">The length of the password to generate</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Utilities.PasswordGenerator.PasswordGenerate(System.String,System.String)">
 <summary>
 Generates a random password.
 </summary>
 <param name="charactersNumber">Length of password.</param>
 <param name="security">Password security - low, medium, high</param>
</member>
<member name="M:Dynamicweb.Security.Utilities.PasswordGenerator.GeneratePassword(System.Int32,Dynamicweb.Security.Utilities.PasswordGenerator.SecurityLevel)">
 <summary>
 Generates a random password of the given length
 </summary>
 <param name="passwordLength">The length of the password to generate</param>
 <param name="securityLevel">The security level to enforce for the password</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.Security.Utilities.PasswordGenerator.CheckPasswordComplexity(System.String,System.Int32,System.String@,System.Int32@,System.Boolean,System.Boolean)">
 <summary>
 Checks the password complexity.
 </summary>
 <param name="password">The password.</param>
 <param name="userId">The User id.</param>
 <param name="errorMessage">The error message.</param>
 <param name="passwordErrorCode">The password error code.</param>
 <param name="forceReuseCheck">If set to <c>true</c> force check of password reuse.</param>
 <param name="isBackendCheck">If set to <c>true</c> force chaeck by backend rules.</param>
 <returns><c>True</c>, if password complexity is corresponds to system settings, otherwise <c>False</c>.</returns>
</member>
<member name="M:Dynamicweb.Security.Utilities.PasswordGenerator.CheckCharInString(System.String,System.Int32)">
 <summary>
 Checks whether there is a characters in different cases within the input string.
 </summary> 
 <param name="characterString">The string to match for specific casing character.</param> 
 <param name="matchSelector">As integer from 1 to 4.</param>
</member>
<member name="M:Dynamicweb.Security.Utilities.PasswordGenerator.CheckCharInString(System.String,System.String)">
 <summary>
 Checks whether two strings contain similar characters.
 </summary> 
 <param name="stringValue"></param>
 <param name="charactersToCheckWith"></param>
</member>
<member name="T:Dynamicweb.Security.Utilities.TokenAuthorization">
 <summary>
 Provides methods for performing token-based authorization. This class cannot be inherited.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Utilities.TokenAuthorization.Tag">
 <summary>
 Gets the name of the request item that is being checked for authorization token presence.
 </summary>
</member>
<member name="M:Dynamicweb.Security.Utilities.TokenAuthorization.#ctor">
 <summary>
 Initializes a new instance of an object.
 </summary>
</member>
<member name="M:Dynamicweb.Security.Utilities.TokenAuthorization.IssueToken">
 <summary>
 Issues a new token.
 </summary>
 <returns>Token.</returns>
</member>
<member name="M:Dynamicweb.Security.Utilities.TokenAuthorization.IssueToken(System.Boolean)">
 <summary>
 Issues a new token.
 </summary>
 <param name="throwOnError">Value indicating whether to throw exception if token cannot be issued.</param>
 <returns>Token.</returns>
 <exception cref="T:System.InvalidOperationException">Token cannot be issued.</exception>
</member>
<member name="M:Dynamicweb.Security.Utilities.TokenAuthorization.Revoke(System.String)">
 <summary>
 Revokes the given authorization token.
 </summary>
 <param name="token">Token to revoke.</param>
</member>
<member name="M:Dynamicweb.Security.Utilities.TokenAuthorization.Revoke(Dynamicweb.Environment.IRequest)">
 <summary>
 Revokes the given authorization token.
 </summary>
 <param name="request">HTTP request containing token information.</param>
</member>
<member name="M:Dynamicweb.Security.Utilities.TokenAuthorization.Validate(System.String)">
 <summary>
 Validates the given token.
 </summary>
 <param name="token">Token to validate.</param>
 <returns>Value indicating whether the given token is valid.</returns>
</member>
<member name="M:Dynamicweb.Security.Utilities.TokenAuthorization.Validate(Dynamicweb.Environment.IRequest)">
 <summary>
 Validates the given token.
 </summary>
 <param name="request">HTTP request containing token information.</param>
 <returns>Value indicating whether the given token is valid.</returns>
</member>
<member name="M:Dynamicweb.Security.Utilities.TokenAuthorization.ValidateAndRevoke(Dynamicweb.Environment.IRequest)">
 <summary>
 Validates the given token and revokes it right away.
 </summary>
 <param name="request">HTTP request containing token information.</param>
 <returns>Value indicating whether the given token is valid.</returns>
</member>
<member name="M:Dynamicweb.Security.Utilities.TokenAuthorization.ValidateAndRevoke(System.String)">
 <summary>
 Validates the given token and revokes it right away.
 </summary>
 <param name="token">Token to validate.</param>
 <returns>Value indicating whether the given token is valid.</returns>
</member>
<member name="M:Dynamicweb.Security.Utilities.TokenAuthorization.RemoveTokenDefinition(System.String)">
 <summary>
 Removes the token definition from the given URI string.
 </summary>
 <param name="uri">URI to remove token definition from.</param>
 <returns>URI with removed token definition.</returns>
</member>
<member name="M:Dynamicweb.Security.Utilities.TokenAuthorization.GetKey(System.String)">
 <summary>
 Returns the data storage key for the given token.
 </summary>
 <param name="token">Token.</param>
 <returns>Data storage key.</returns>
</member>
<member name="M:Dynamicweb.Security.Utilities.TokenAuthorization.IsWellFormedToken(System.String)">
 <summary>
 Returns value indicating whether the given token has valid format.
 </summary>
 <param name="token">Token.</param>
 <returns>Value indicating whether the given token has valid format.</returns>
</member>
<member name="M:Dynamicweb.Security.Utilities.TokenAuthorization.GetStorage">
 <summary>
 Gets the associated storage.
 </summary>
 <returns>Associated storage.</returns>
</member>
<member name="T:Dynamicweb.Security.IPermissionService`1">
 <summary>
 Defines operations for getting user permission data
 </summary>
 <typeparam name="T"><see cref="T:Dynamicweb.Security.IPermissionObject"/></typeparam>
</member>
<member name="T:Dynamicweb.Security.IPermissionService">
 <summary>
 Defines operations for getting user permission data
 </summary>
</member>
<member name="T:Dynamicweb.Security.PermissionObjectType">
 <summary>
 Enumeration for permission object types
 </summary>
</member>
<member name="T:Dynamicweb.Security.ActiveDirectory.ActiveDirectoryAuthenticationService">
<remarks/>
</member>
<member name="M:Dynamicweb.Security.ActiveDirectory.ActiveDirectoryAuthenticationService.#ctor">
<remarks/>
</member>
<member name="E:Dynamicweb.Security.ActiveDirectory.ActiveDirectoryAuthenticationService.AuthenticateUserCompleted">
<remarks/>
</member>
<member name="E:Dynamicweb.Security.ActiveDirectory.ActiveDirectoryAuthenticationService.AuthenticateUserNewCompleted">
<remarks/>
</member>
<member name="E:Dynamicweb.Security.ActiveDirectory.ActiveDirectoryAuthenticationService.AuthenticateCompleted">
<remarks/>
</member>
<member name="M:Dynamicweb.Security.ActiveDirectory.ActiveDirectoryAuthenticationService.AuthenticateUser(System.Byte[],System.Byte[])">
<remarks/>
</member>
<member name="M:Dynamicweb.Security.ActiveDirectory.ActiveDirectoryAuthenticationService.AuthenticateUserAsync(System.Byte[],System.Byte[])">
<remarks/>
</member>
<member name="M:Dynamicweb.Security.ActiveDirectory.ActiveDirectoryAuthenticationService.AuthenticateUserAsync(System.Byte[],System.Byte[],System.Object)">
<remarks/>
</member>
<member name="M:Dynamicweb.Security.ActiveDirectory.ActiveDirectoryAuthenticationService.AuthenticateUserNew(System.Byte[],System.Byte[],System.String,System.String)">
<remarks/>
</member>
<member name="M:Dynamicweb.Security.ActiveDirectory.ActiveDirectoryAuthenticationService.AuthenticateUserNewAsync(System.Byte[],System.Byte[],System.String,System.String)">
<remarks/>
</member>
<member name="M:Dynamicweb.Security.ActiveDirectory.ActiveDirectoryAuthenticationService.AuthenticateUserNewAsync(System.Byte[],System.Byte[],System.String,System.String,System.Object)">
<remarks/>
</member>
<member name="M:Dynamicweb.Security.ActiveDirectory.ActiveDirectoryAuthenticationService.Authenticate(System.String,System.String)">
<remarks/>
</member>
<member name="M:Dynamicweb.Security.ActiveDirectory.ActiveDirectoryAuthenticationService.AuthenticateAsync(System.String,System.String)">
<remarks/>
</member>
<member name="M:Dynamicweb.Security.ActiveDirectory.ActiveDirectoryAuthenticationService.AuthenticateAsync(System.String,System.String,System.Object)">
<remarks/>
</member>
<member name="M:Dynamicweb.Security.ActiveDirectory.ActiveDirectoryAuthenticationService.CancelAsync(System.Object)">
<remarks/>
</member>
<member name="T:Dynamicweb.Security.ActiveDirectory.AuthenticateUserCompletedEventHandler">
<remarks/>
</member>
<member name="T:Dynamicweb.Security.ActiveDirectory.AuthenticateUserCompletedEventArgs">
<remarks/>
</member>
<member name="P:Dynamicweb.Security.ActiveDirectory.AuthenticateUserCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Dynamicweb.Security.ActiveDirectory.AuthenticateUserNewCompletedEventHandler">
<remarks/>
</member>
<member name="T:Dynamicweb.Security.ActiveDirectory.AuthenticateUserNewCompletedEventArgs">
<remarks/>
</member>
<member name="P:Dynamicweb.Security.ActiveDirectory.AuthenticateUserNewCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Dynamicweb.Security.ActiveDirectory.AuthenticateCompletedEventHandler">
<remarks/>
</member>
<member name="T:Dynamicweb.Security.ActiveDirectory.AuthenticateCompletedEventArgs">
<remarks/>
</member>
<member name="P:Dynamicweb.Security.ActiveDirectory.AuthenticateCompletedEventArgs.Result">
<remarks/>
</member>
<member name="T:Dynamicweb.Security.Workflows.Workflow">
 <summary>
 Represents a workflow.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Workflows.Workflow.Id">
 <summary>
 Gets or sets workflow's ID.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Workflows.Workflow.Name">
 <summary>
 Gets or sets workflow's name.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Workflows.Workflow.Created">
 <summary>
 Gets workflow's created date.
 </summary>
</member>
<member name="M:Dynamicweb.Security.Workflows.Workflow.GetStatesCount">
 <summary>
 Gets total amount of the workflow states
 </summary>
</member>
<member name="M:Dynamicweb.Security.Workflows.Workflow.GetNotificationsCount">
 <summary>
 Gets total amount of the workflow states notifications
 </summary>
</member>
<member name="T:Dynamicweb.Security.Workflows.WorkflowNotification">
 <summary>
 Represents a workflow notification model.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Workflows.WorkflowNotification.Id">
 <summary>
 Gets or sets notification's ID.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Workflows.WorkflowNotification.WorkflowId">
 <summary>
 Gets or sets workflow's ID.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Workflows.WorkflowNotification.Sender">
 <summary>
 Gets or sets sender email.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Workflows.WorkflowNotification.SenderName">
 <summary>
 Gets or sets sender name.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Workflows.WorkflowNotification.Subject">
 <summary>
 Gets or sets notification subject.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Workflows.WorkflowNotification.Template">
 <summary>
 Gets or sets notification template.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Workflows.WorkflowNotification.Users">
 <summary>
 Gets or sets users.
 </summary>
</member>
<member name="T:Dynamicweb.Security.Workflows.WorkflowNotificationService">
 <summary>
 The WorkflowNotificationService class is a Domain Service responsible for resolving and creating workflow notifications
 </summary>
</member>
<member name="M:Dynamicweb.Security.Workflows.WorkflowNotificationService.GetByState(Dynamicweb.Security.Workflows.WorkflowState)">
 <summary>
 Gets all notifications for the <paramref name="workflowState"/>
 </summary>
 <param name="workflowState">The state</param>
</member>
<member name="M:Dynamicweb.Security.Workflows.WorkflowNotificationService.SetNotificationsToState(Dynamicweb.Security.Workflows.WorkflowState,System.Collections.Generic.IEnumerable{Dynamicweb.Security.Workflows.WorkflowNotification})">
 <summary>
 Sets new notifications to the <paramref name="workflowState"/>
 </summary>
 <param name="workflowState">The state</param>
 <param name="notifications">The new notifications for the state</param>
 <remarks>
 After execution of this method all previouse state notifications will be replaced by a new <paramref name="notifications"/>
 </remarks>
</member>
<member name="M:Dynamicweb.Security.Workflows.WorkflowNotificationService.AddNotificationToState(Dynamicweb.Security.Workflows.WorkflowState,Dynamicweb.Security.Workflows.WorkflowNotification)">
 <summary>
 Add new notification to the <paramref name="workflowState"/>
 </summary>
 <param name="workflowState">The state</param>
 <param name="notification">The notification to add for the state</param>
 <remarks>
 If the notification already added to the state the exception will be thrown
 </remarks>
 <exception cref="T:System.ApplicationException"></exception>
</member>
<member name="M:Dynamicweb.Security.Workflows.WorkflowNotificationService.GetById(System.Int32)">
 <summary>
 Gets notification by <paramref name="workflowNotificationId"/>
 </summary>
 <param name="workflowNotificationId">The workflow notification id</param>
</member>
<member name="M:Dynamicweb.Security.Workflows.WorkflowNotificationService.Delete(System.Int32)">
 <summary>
 Delete notification by id
 </summary>
 <param name="workflowNotificationId">The notification id to remove</param>
</member>
<member name="M:Dynamicweb.Security.Workflows.WorkflowNotificationService.Save(Dynamicweb.Security.Workflows.WorkflowNotification)">
 <summary>
 Save workflow notification
 </summary>
 <param name="notification">The notification to save</param>
 <returns>Return updated version of the notification</returns>
</member>
<member name="T:Dynamicweb.Security.Workflows.WorkflowService">
 <summary>
 The WorkflowService class is a Domain Service responsible for resolving and creating workflow
 </summary>
</member>
<member name="M:Dynamicweb.Security.Workflows.WorkflowService.GetAll">
 <summary>
 Gets all workflow in solution.
 </summary>
 <returns>The collection of the <see cref="T:Dynamicweb.Security.Workflows.Workflow"/>.</returns>
</member>
<member name="M:Dynamicweb.Security.Workflows.WorkflowService.GetById(System.Int32)">
 <summary>
 Gets workflow by id
 </summary>
 <param name="workflowId">The workflow id</param>
 <returns>The <see cref="T:Dynamicweb.Security.Workflows.Workflow"/> or null if not found.</returns>
</member>
<member name="M:Dynamicweb.Security.Workflows.WorkflowService.Delete(System.Collections.Generic.IEnumerable{System.Int32})">
 <summary>
 Delete workflow by ids
 </summary>
 <param name="ids">The workflow ids to remove</param>
</member>
<member name="M:Dynamicweb.Security.Workflows.WorkflowService.Save(Dynamicweb.Security.Workflows.Workflow)">
 <summary>
 Save workflow
 </summary>
 <param name="workflow">The workflow to save</param>
 <returns>Return updated version of the workflow</returns>
</member>
<member name="T:Dynamicweb.Security.Workflows.WorkflowState">
 <summary>
 Represents a workflow state model.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Workflows.WorkflowState.Id">
 <summary>
 Gets or sets state's ID.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Workflows.WorkflowState.WorkflowId">
 <summary>
 Gets or sets workflow's ID.
 </summary>
</member>
<member name="P:Dynamicweb.Security.Workflows.WorkflowState.Name">
 <summary>
 Gets or sets name.
 </summary>
</member>
<member name="T:Dynamicweb.Security.Workflows.WorkflowStateService">
 <summary>
 The WorkflowStateService class is a Domain Service responsible for resolving and creating workflow states
 </summary>
</member>
<member name="M:Dynamicweb.Security.Workflows.WorkflowStateService.GetStates(Dynamicweb.Security.Workflows.Workflow)">
 <summary>
 Gets workflow states 
 </summary>
 <param name="workflow">The workflow</param>
 <returns>
 Return list of the states for workflow. 
 </returns>
</member>
<member name="M:Dynamicweb.Security.Workflows.WorkflowStateService.GetNextStates(Dynamicweb.Security.Workflows.WorkflowState)">
 <summary>
 Gets the set of states available to go from the current states.
 </summary>
 <param name="state">The workflow state</param>
 <returns>
 Return list of the next states. 
 </returns>
</member>
<member name="M:Dynamicweb.Security.Workflows.WorkflowStateService.GetById(System.Int32)">
 <summary>
 Gets state by id
 </summary>
 <param name="stateId">The state id</param>
 <returns>
 Return workflow state for the <paramref name="stateId"/> or null if not found
 </returns>
</member>
<member name="M:Dynamicweb.Security.Workflows.WorkflowStateService.Save(Dynamicweb.Security.Workflows.WorkflowState)">
 <summary>
 Save workflow state
 </summary>
 <param name="state">The state to save</param>
 <returns>Return updated version of the state</returns>
</member>
<member name="M:Dynamicweb.Security.Workflows.WorkflowStateService.SetGoToStates(Dynamicweb.Security.Workflows.WorkflowState,System.Collections.Generic.IEnumerable{Dynamicweb.Security.Workflows.WorkflowState})">
 <summary>
 Sets new states to go from the <paramref name="state"/>
 </summary>
 <param name="state">The state</param>
 <param name="nextLevelStates">The new next level states</param>
 <remarks>
 After execution of this method all previouse states available to go from the current state will be replaced by a new <paramref name="nextLevelStates"/>
 </remarks>
</member>
<member name="M:Dynamicweb.Security.Workflows.WorkflowStateService.Delete(System.Int32)">
 <summary>
 Delete state
 </summary>
 <param name="workflowStateId">The state id to remove</param>
</member>
</members>
</doc>
