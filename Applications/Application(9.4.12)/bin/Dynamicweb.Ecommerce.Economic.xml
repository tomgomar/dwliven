<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dynamicweb.Ecommerce.Economic</name>
    </assembly>
    <members>
        <member name="T:Dynamicweb.Ecommerce.Economic.ConfigReader">
            <summary>
            Summary description for ConfigReader - economic configuration settings
            </summary>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.ConfigReader.#ctor">
            <summary>
            Constructor that loads config automatic. It makes a call to LoadConfig() after initialization
            </summary>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.ConfigReader.LoadConfig">
            <summary>
            Loads configuration from various sources.
            </summary>
        </member>
        <member name="F:Dynamicweb.Ecommerce.Economic.ConfigReader.AppSecretToken">
            <summary>
            App secret token from the E-conomic developer app that connects to E-conomic account
            </summary>
        </member>
        <member name="F:Dynamicweb.Ecommerce.Economic.ConfigReader.AgreementGrantToken">
            <summary>
            Grnat token from the E-conomic account that accepts the app
            </summary>
        </member>
        <member name="P:Dynamicweb.Ecommerce.Economic.ConfigReader.DebitorGroup">
            <summary>
            Debitor group to store new debitor in
            </summary>
        </member>
        <member name="P:Dynamicweb.Ecommerce.Economic.ConfigReader.DebitorVatGroup">
            <summary>
            Debitor vat group
            </summary>
        </member>
        <member name="P:Dynamicweb.Ecommerce.Economic.ConfigReader.DebitorCurrency">
            <summary>
            Debitor currency
            </summary>
        </member>
        <member name="P:Dynamicweb.Ecommerce.Economic.ConfigReader.DebitorTermsOfPayment">
            <summary>
            Debitor terms of payment
            </summary>
        </member>
        <member name="P:Dynamicweb.Ecommerce.Economic.ConfigReader.DebitorLayout">
            <summary>
            Debitor layout
            </summary>
        </member>
        <member name="P:Dynamicweb.Ecommerce.Economic.ConfigReader.ProductUnit">
            <summary>
            Product unit
            </summary>
        </member>
        <member name="P:Dynamicweb.Ecommerce.Economic.ConfigReader.ErrorEmail">
            <summary>
            Error email
            </summary>
        </member>
        <member name="P:Dynamicweb.Ecommerce.Economic.ConfigReader.OrderTermsOfPayment">
            <summary>
            Order terms of payment
            </summary>
        </member>
        <member name="P:Dynamicweb.Ecommerce.Economic.ConfigReader.Orderlayout">
            <summary>
            Order layout
            </summary>
        </member>
        <member name="T:Dynamicweb.Ecommerce.Economic.EconomicCommunicator">
            <summary>
            Wrapper class for Economic API
            </summary>
        </member>
        <member name="P:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.ConfigReader">
            <summary>
            object: ConfigReader where all settings are loaded and stored
            </summary>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.Dispose">
            <summary>
            Disposes and closes the connection of the E-conomic session
            </summary>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetApiInfo">
            <summary>
            E-conomic API Information
            </summary>
            <returns>string: E-conomic API info</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetDebitor(System.String)">
            <summary>
            Gets a debitor by number
            </summary>
            <param name="debtorNumber">string: number of the debitor in your e-conomic account</param>
            <returns>IDeptor object: a special type from E-conomic API</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.DebitorExists(System.String)">
            <summary>
            Checks wether a debitor exists in your E-conomic account
            </summary>
            <param name="debtorNumber">string: number of the debitor in your e-conomic account</param>
            <returns>bool: true of the debitor exists else false</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.ProductgroupExistsByName(System.String)">
            <summary>
            Checks wether the Productgroup exists
            </summary>
            <param name="productGroupName">string: name of the productgroup to search for</param>
            <returns>int: E-conomics productgroup number of it is found else 0 (zero)</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.ProductExistsByNumber(System.String)">
            <summary>
            Check wehter the productgroup exists
            </summary>
            <param name="productNumber">string: product number</param>
            <returns>string: returns the product number if found else empty string</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetProductGroupById(System.Int32)">
            <summary>
            Gets a product group
            </summary>
            <param name="groupId">int: Group ID to search for</param>
            <returns>IProductGroup object</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetProductGroupById(System.Int32[])">
            <summary>
            Gets a product groups
            </summary>
            <param name="groupIds">int: Groups IDs to search for</param>
            <returns>IProductGroup array</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetAllDebitorGroups">
            <summary>
            Gets all debitor groups
            </summary>
            <returns>IDeptorGroup array: a special type from the E-conomic API</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetAllVatGroups">
            <summary>
            Gets all VAT groups
            </summary>
            <returns>IVapAccount array: a special type from the E-conomic API</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetAllCurrencies">
            <summary>
            Gets all Currencies
            </summary>
            <returns>ICurrency array: a special type from the E-conomic API</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetAllPaymenttypes">
            <summary>
            Gets all Terms of payment see also <seealso cref="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetAllTermsOfPayments"/>
            </summary>
            <returns><see cref="T:Economic.Api.ITermOfPayment"/> array: a special type from the E-conomic API</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetAllDebitorLayouts">
            <summary>
            Gets all debitor layouts
            </summary>
            <returns><see cref="T:Economic.Api.ITemplateCollection"/> array: a special type from the E-conomic API</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetAllTermsOfPayments">
            <summary>
            Gets all Terms of payment see also <seealso cref="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetAllPaymenttypes"/>
            </summary>
            <returns><see cref="T:Economic.Api.ITermOfPayment"/> array: a special type from the E-conomic API</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetAllProductGroups">
            <summary>
            Gets alle productgroups
            </summary>
            <returns><see cref="T:Economic.Api.IProductGroup"/> array: a special type from the E-conomic API</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetAllUnits">
            <summary>
            Get all Units
            </summary>
            <returns><see cref="T:Economic.Api.IUnit"/> array: a special type from the E-conomic API</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetAllAccounts">
            <summary>
            Gets all accounts
            </summary>
            <returns><see cref="T:Economic.Api.IAccount"/> array: a special type from the E-conomic API</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetAllInvoices">
            <summary>
            Gets all invoices
            </summary>
            <returns><see cref="T:Economic.Api.IInvoice"/> array: a special type from the E-conomic API</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetInvoicesByDate(System.DateTime,System.DateTime)">
            <summary>
            Gets all invoices made in the provided date range
            </summary>
            <param name="from">DateTime: from date</param>
            <param name="to">DateTime: to date</param>
            <returns><see cref="T:Economic.Api.IInvoice"/> array of all invoices within the provided date range</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetInvoicesByDate(System.DateTime)">
            <summary>
            Gets all invoices made on the specified date
            </summary>
            <param name="date">DateTime: the date</param>
            <returns><see cref="T:Economic.Api.IInvoice"/> array of all invoices made on the provided date</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetInvoicePdf(System.Int32)">
            <summary>
            Gets the PDF document of a specific invoice
            </summary>
            <param name="invoiceNumber">int: InvoiceNumber</param>
            <returns>byte[] array of the PDF file</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetInvoice(System.Int32)">
            <summary>
            Gets the Invoice object 
            </summary>
            <param name="invoiceNumber">int: InvoiceNumber</param>
            <returns><see cref="T:Economic.Api.IInvoice"/> object of the Invoice</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetProductGroupIdByName(System.String)">
            <summary>
            Gets a productgroup id by providing the group name
            </summary>
            <param name="groupName">string: name of the group</param>
            <returns>int: productgroup id</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetAllProducts">
            <summary>
            Gets all products from e-conomic <remarks>Watch out for performance issue, there could be many products in E-conomic to fetch</remarks>
            </summary>
            <returns>object: array of IProduct</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetProductByNumber(System.String)">
            <summary>
            Gets a single product by simple search by number
            </summary>
            <param name="productNumber">string: the product number to search for</param>
            <returns>object: IProduct if found else null</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetProductsByNumber(System.String[])">
            <summary>
            Gets all products found
            </summary>
            <param name="productNumbers">array of strings as productnumbers</param>
            <returns>IProduct array</returns>
            <remarks>Be careful about matching the length of input array with output array because you can retrieve null objects</remarks>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.DeleteOrderFromEconomic(System.Int32)">
            <summary>
            Deletes an order in e-conomic
            </summary>
            <param name="orderNumber">int: Ordernumber</param>
            <remarks>
            	Use with caution it delete an entire order in e-conomic
            	Should typically only be used when an exception is thrown by creating orderlines, then you can delete the order so that nothing half-finished is left for administrating
            </remarks>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.SaveDebitor(Economic.Api.Data.IDebtorData)">
            <summary>
            Saves a debitor in e-conomic
            </summary>
            <param name="debitorData"><paramref name="debitorData"/> object <see cref="!:debitorData"/></param>
            <returns>IDebtor object</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.MakeDebitor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Makes a IDebtorData object with most default properties set
            </summary>
            <param name="debitorNummer">string: debitor number</param>
            <param name="debitorName">string: debitor name</param>
            <param name="debitorAddress">string: debitor address</param>
            <param name="debitorCity">string: debitor city</param>
            <param name="debitorCountry">string debitor country</param>
            <param name="debitorEan">string: EAN number</param>
            <param name="debitorEmail">string: debitor e-mail</param>
            <param name="debitorZipcode">string: debitor zipcode</param>
            <param name="debitorTelefonFax">string: debitor phone and fax number</param>
            <returns>IDebtorData object that can be used with <paramref name="SaveDebitor"/></returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.SaveDebitorContact(Economic.Api.IDebtor,System.String,System.String,System.String)">
            <summary>
            Saves a contact person on a debitor and creates the contact person if not found by strContactName.
            </summary>
            <param name="debitor">IDebtor object to assign the contact person to</param>
            <param name="contactName">string: name of the contact person</param>
            <param name="phoneNumber">string phone number</param>
            <param name="email">string: e-mail that is used to receive order confirmations and invoices.</param>
            <returns>IDebtorContact object</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.SaveOrder(Economic.Api.Data.IOrderData)">
            <summary>
            Saves the order in E-conomic
            </summary>
            <param name="orderData">IOrderData object <see cref="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.MakeOrder(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.DateTime,System.DateTime,System.String,System.String)"/></param>
            <returns>IOrder object</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.MakeOrder(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            Makes an order for <see cref="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.SaveOrder(Economic.Api.Data.IOrderData)"/>
            </summary>
            <param name="debitorNumber">string: debitor number</param>
            <param name="orderName">string: order name</param>
            <param name="deliveryAddress">string: delivery address</param>
            <param name="deliveryCity">string: delivery city</param>
            <param name="deliveryCountry">string: delivery country</param>
            <param name="deliveryPostalCode">string: delivery zipcode</param>
            <param name="termsOfDelivery">string: terms of delivery</param>
            <param name="comments">string: comments</param>
            <param name="dateDeliveryDate">DateTime: delivery date</param>
            <param name="orderDate">DateTime: order date</param>
            <param name="dueDate">DateTime: due date</param>
            <param name="orderLayoutName">The name of the layout</param>
            <param name="debitorCurrencyCode">string: currency code for the debitor</param>
            <returns>IOrderData object</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.SaveOrderLine(Economic.Api.Data.IOrderLineData)">
            <summary>
            Saves a Orderline
            </summary>
            <param name="orderlineData">IOrderLineData object</param>
            <returns>IOrderLine object</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.SaveOrderLines(Economic.Api.Data.IOrderLineData[])">
            <summary>
            Saves an array of Orderlines
            </summary>
            <param name="orderlineData">IOrderLineData object array</param>
            <returns>IOrderLine object array</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.MakeOrderLine(System.Int32,System.String,System.Decimal,System.Decimal)">
            <summary>
            Makes an IOrderLineData object
            </summary>
            <param name="orderNumber">int: Order number</param>
            <param name="productNumber">string: product number</param>
            <param name="quantity">decimal: Quantity</param>
            <param name="price">decimal: Price</param>
            <returns>IOrderLineData object</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.SaveProduct(Economic.Api.Data.IProductData)">
            <summary>
            Saves a product in e-conomic
            </summary>
            <param name="productData">IProductData object</param>
            <returns>IProduct object</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.MakeProduct(System.String,System.Int32,System.String,System.String,System.Decimal,System.Decimal)">
            <summary>
            Makes a IProductData object
            </summary>
            <param name="productNumber">string: Product number</param>
            <param name="productGroupNumber">int: Product group number</param>
            <param name="productName">string: Product name</param>
            <param name="productDescription">string: product description</param>
            <param name="productSalesPrice">decimal: Sales price</param>
            <param name="productVolume">decimal: Product volume</param>
            <returns>IProductData object</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.SaveProductGroup(System.Int32,System.String,System.Int32)">
            <summary>
            Saves a product group in e-conomic
            </summary>
            <param name="groupNumber">int: product group number</param>
            <param name="groupName">string: product group name</param>
            <param name="accountNumber">int: account number</param>
            <returns>IProductGroup object</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetProductGroupsDataByIDs(System.Int32[])">
            <summary>
            Gets Product Groups Data by Group's ID's
            </summary>                        
            <param name="groupsIDs">int: Groups ID's to search for</param>
            <returns>IProductGroupData array</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.EconomicCommunicator.GetProductsData(Economic.Api.IProduct[])">
            <summary>
            Gets a ProdcutData
            </summary>
            <param name="products">Array of IProduct</param>
            <returns>Array of IProductData</returns>
        </member>
        <member name="P:Dynamicweb.Ecommerce.Economic.Integration.EconomicProvider.LangId">
            <summary>
            LangID setting
            </summary>
        </member>
        <member name="P:Dynamicweb.Ecommerce.Economic.Integration.EconomicProvider.ShopId">
            <summary>
            ShopID setting
            </summary>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.Integration.NotificationHandler.HandleOrder(Dynamicweb.Ecommerce.Orders.Order)">
            <summary>
            OrderCompleteNotification : Exports the order to economic when the order is complete.
            </summary>
            <param name="dwOrder">The dynamicweb order.</param>
        </member>
        <member name="T:Dynamicweb.Ecommerce.Economic.Integration.OrderCompleteNotificationExtender">
            <summary>
            Extention class to intercept how Dynamicweb eCommerce orders are stored in E-conomic
            </summary>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.Integration.OrderCompleteNotificationExtender.DynamicwebOrder(Dynamicweb.Ecommerce.Orders.Order)">
            <summary>
            Method to modify Dynamicweb order information. Order to be stored in e-conomic
            </summary>
            <param name="order">Dynamicweb eCommerce order</param>
            <returns>Dynamicweb eCommerce order</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.Integration.OrderCompleteNotificationExtender.EconomicDebitor(Dynamicweb.Ecommerce.Orders.Order,Economic.Api.Data.IDebtorData)">
            <summary>
            Method to do manipulation with the objEconomicDebitor object
            </summary>
            <param name="order">Dynamicweb eCommerce Order object that is currently under processing</param>
            <param name="economicDebitor">E-conomic IDebtorData object that is being created</param>
            <returns>IDebtorData object</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.Integration.OrderCompleteNotificationExtender.EconomicOrder(Dynamicweb.Ecommerce.Orders.Order,Economic.Api.Data.IOrderData)">
            <summary>
            Method to do manipulation with the objEconomicOrder object
            </summary>
            <param name="order">Dynamicweb eCommerce Order object that is currently under processing</param>
            <param name="economicOrder">E-conomic IOrderData object that is currently being created</param>
            <returns>IOrderData object</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.Integration.OrderCompleteNotificationExtender.EconomicOrderline(Dynamicweb.Ecommerce.Orders.OrderLine,Economic.Api.Data.IOrderLineData)">
            <summary>
            Method to do manipulation with the ordinary objEconomicOrderline object before it is sent to E-conomic
            </summary>
            <param name="orderLine">Dynamiceb eCommerce OrderLine object that is currently under processing</param>
            <param name="economicOrderLine">E-conomic IOrderLineData object that is currently being created</param>
            <returns>IOrderLineData object</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.Integration.OrderCompleteNotificationExtender.EconomicDiscountOrderline(Dynamicweb.Ecommerce.Orders.OrderLine,Economic.Api.Data.IOrderLineData)">
            <summary>
            Method to do manipulation with the Discount EconomicOrderline object before it is sent to E-conomic
            </summary>
            <param name="orderLine">Dynamiceb eCommerce Discount OrderLine object that is currently under processing</param>
            <param name="economicDiscountOrderLine">E-conomic IOrderLineData object that is currently being created</param>        
            <returns>IOrderLineData object</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.Integration.OrderCompleteNotificationExtender.EconomicPaymentFeeOrderline(Economic.Api.Data.IOrderLineData)">
            <summary>
            Method to do manipulation with the Payment Fee EconomicOrderline object before it is sent to E-conomic
            </summary>        
            <param name="paymentFeeOrderline">E-conomic IOrderLineData object that is currently being created</param>
            <returns>IOrderLineData object</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.Integration.OrderCompleteNotificationExtender.EconomicShippingFeeOrderline(Economic.Api.Data.IOrderLineData)">
            <summary>
            Method to do manipulation with the Shipping Fee EconomicOrderline object before it is sent to E-conomic
            </summary>        
            <param name="paymentFeeOrderline">E-conomic IOrderLineData object that is currently being created</param>
            <returns>IOrderLineData object</returns>
        </member>
        <member name="T:Dynamicweb.Ecommerce.Economic.Integration.ProductImportActivityExtender">
            <summary>
            Extention class to intercept how E-conomic Products are stored in Dynamicweb eCommerce
            </summary>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.Integration.ProductImportActivityExtender.ProductGroupConverter(Economic.Api.Data.IProductGroupData)">
            <summary>
            Method to do manipulation with the E-conomic Group object before it is imported to Dynamicweb
            </summary>        
            <param name="economicProductGroup">E-conomic IProductGroup object that is currently being transfered</param>
            <returns>E-conomic Group object</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.Integration.ProductImportActivityExtender.ProductConverter(Economic.Api.Data.IProductData)">
            <summary>
            Method to do manipulation with the E-conomic Product object before is is imported to Dynamicweb
            </summary>        
            <param name="economicProduct">E-conomic IProduct object that is currently being transfered</param>
            <returns>E-conomic IProduct object</returns>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.Result.#ctor">
            <summary>
            Empty contructor
            </summary>
        </member>
        <member name="M:Dynamicweb.Ecommerce.Economic.Result.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Default contructor
            </summary>
            <param name="text">Result text</param>
            <param name="value">Result value</param>
            <param name="selected">Result selected</param>
        </member>
        <member name="P:Dynamicweb.Ecommerce.Economic.Result.Text">
            <summary>
            Holds the result text/name
            </summary>
        </member>
        <member name="P:Dynamicweb.Ecommerce.Economic.Result.Value">
            <summary>
            Holds the result value
            </summary>
        </member>
        <member name="P:Dynamicweb.Ecommerce.Economic.Result.Selected">
            <summary>
            Indicates which item is selected
            </summary>
        </member>
    </members>
</doc>
