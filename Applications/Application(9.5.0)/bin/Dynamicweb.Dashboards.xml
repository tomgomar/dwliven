<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dynamicweb.Dashboards</name>
    </assembly>
    <members>
        <member name="T:Dynamicweb.Dashboards.DashboardConfiguration">
            <summary>
            The class DashboardConfiguration provides change tracking for dashboard that needs to be persisted.
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.DashboardConfiguration.DashboardType">
            <summary>
            Gets dashboard type
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.DashboardConfiguration.Path">
            <summary>
            Gets dashboard path
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.DashboardConfiguration.UserId">
            <summary>
            Gets dashboard user
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.DashboardConfiguration.Title">
            <summary>
            Gets dashboard title
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.DashboardConfiguration.Widgets">
            <summary>
            Gets or sets collection of dashboard widgets
            </summary>
        </member>
        <member name="T:Dynamicweb.Dashboards.DashboardBase">
            <summary>
            The class DashboardBase provides dashboard base functionality with database persistance
            </summary>
            <remarks>
            The customer should mark interface implementation with <see cref="T:System.ComponentModel.Composition.ExportAttribute">Export</see>" attribute to specify dashboard unique Id.
            Customer can use Export attribute without parameters in this case class fully qualified name be used as dashboard id. After implementation user dashboard page will be available for backed user by URL: <code>[site]/Admin/Dashboard/[DashboardId]/View/[path*]</code>.
            </remarks>
            <example>
            <code title="How to inherit DashboardBase" source="..\Dynamicweb\04 - Backend Building Blocks\Dynamicweb.Dashboards\Head\Dynamicweb.Dashboards.Examples\SimpleDashboard.cs" lang="CS"></code>
            </example> 
        </member>
        <member name="P:Dynamicweb.Dashboards.DashboardBase.Title">
            <summary>
            Gets or sets the Dashboard title
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.DashboardBase.Widgets">
            <summary>
            Gets or sets collection of widgets to show 
            </summary>
        </member>
        <member name="M:Dynamicweb.Dashboards.DashboardBase.Load(System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Loads the <see cref="P:Dynamicweb.Dashboards.DashboardBase.Widgets">widgets</see> to the Dashboard from database.
            </summary>
            <param name="path">The request path</param>
            <param name="fetchWidgets">Set to <code>true</code> when <see cref="M:Dynamicweb.Dashboards.Widgets.DashboardWidget.Fetch(Dynamicweb.Dashboards.IDashboard,System.String)"/> method require to call</param>
            <param name="requestParameters">All request parameters</param>
        </member>
        <member name="M:Dynamicweb.Dashboards.DashboardBase.Load(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Loads the <see cref="P:Dynamicweb.Dashboards.DashboardBase.Widgets">widgets</see> to the Dashboard from database.
            </summary>
            <param name="path">The request path</param>
            <param name="fetchWidgets">Set to <code>true</code> when <see cref="M:Dynamicweb.Dashboards.Widgets.DashboardWidget.Fetch(Dynamicweb.Dashboards.IDashboard,System.String)"/> method require to call</param>
            <param name="requestParameters">All request parameters</param>
        </member>
        <member name="M:Dynamicweb.Dashboards.DashboardBase.Save(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Saves the Dashboard to storage
            </summary>
            <param name="path">The request path</param>
            <param name="requestParameters">All request parameters</param>
        </member>
        <member name="M:Dynamicweb.Dashboards.DashboardBase.GetAllAvailableWidgets(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets widget types for the Dashboard
            </summary>
            <param name="path">The request path</param>
            <param name="allWidgets">all widget available for application</param>
            <remarks>The method used to filter widget types which could be shown for the Dashboard</remarks>
            <returns>The list of widget types available to the Dashboard show</returns>
        </member>
        <member name="M:Dynamicweb.Dashboards.DashboardBase.GetDefault(System.String)">
            <summary>
            Gets default dashboard configuration
            </summary>
            <param name="path">The request path</param>
            <returns></returns>
        </member>
        <member name="T:Dynamicweb.Dashboards.DashboardExtensions">
            <summary>
            The class DashboardExtensions defines dashboard extensions.
            </summary>
        </member>
        <member name="M:Dynamicweb.Dashboards.DashboardExtensions.Id(Dynamicweb.Dashboards.IDashboard)">
            <summary>
            Return Id of the dashboard
            </summary>
            <param name="dashboard">The dashboard</param>
            <returns></returns>
        </member>
        <member name="T:Dynamicweb.Dashboards.IDashboard">
            <summary>
            The interface IDashboard defines dashboard model
            </summary>
            <remarks>
            Used as main component for implementing a custom dashboard page embed to the application.
            The customer should mark interface implementation with <see cref="T:System.ComponentModel.Composition.ExportAttribute">Export</see>" attribute to specify dashboard unique Id.
            Customer can use Export attribute without parameters in this case class fully qualified name be used as dashboard id. After interface implementation user dashboard page will be available for backed user by URL: <code>[site]/Admin/Dashboard/[DashboardId]/View/[path*]</code>.
            <para>
            You may inherit your dashboard from simple <seealso cref="T:Dynamicweb.Dashboards.DashboardBase"/> to use default save/load methods.
            </para> 
            </remarks>
        </member>
        <member name="P:Dynamicweb.Dashboards.IDashboard.Title">
            <summary>
            Gets or sets the Dashboard title
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.IDashboard.Widgets">
            <summary>
            Gets or sets collection of widgets to show 
            </summary>
        </member>
        <member name="M:Dynamicweb.Dashboards.IDashboard.Load(System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Loads the <see cref="P:Dynamicweb.Dashboards.IDashboard.Widgets">widgets</see> to the Dashboard.
            </summary>
            <param name="path">The request path</param>
            <param name="fetchWidgets">Set to <code>true</code> when <see cref="M:Dynamicweb.Dashboards.Widgets.DashboardWidget.Fetch(Dynamicweb.Dashboards.IDashboard,System.String)"/> method require to call</param>
            <param name="requestParameters">All request parameters</param>
        </member>
        <member name="M:Dynamicweb.Dashboards.IDashboard.Save(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Save the Dashboard to storage
            </summary>
            <param name="path">The request path</param>
            <param name="requestParameters">All request parameters</param>
        </member>
        <member name="M:Dynamicweb.Dashboards.IDashboard.GetAllAvailableWidgets(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets widget types for the Dashboard
            </summary>
            <param name="path">The request path</param>
            <param name="allWidgets">all widget available for application</param>
            <remarks>The method used to filter widget types which could be shown for the Dashboard</remarks>
            <returns>The list of widget types available to the Dashboard show</returns>
        </member>
        <member name="T:Dynamicweb.Dashboards.Widgets.CountWidget">
            <summary>
            The class CountWidget provides base counter dashboard widget
            </summary>
            <example>    
            <code title="How to inherit CountWidget" source="..\Dynamicweb\04 - Backend Building Blocks\Dynamicweb.Dashboards\Head\Dynamicweb.Dashboards.Examples\MemoryUsageCounter.cs" lang="CS"></code>
            </example> 
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.CountWidget.#ctor">
            <summary>
            The counter widget default constructor
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.CountWidget.DefaultBackgroundColor">
            <summary>
            Gets or sets counter default background color
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.CountWidget.BackgroundColor">
            <summary>
            Gets or sets counter background color
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.CountWidget.Subtitle">
            <summary>
            Gets or sets counter sub title
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.CountWidget.DefaultAction">
            <summary>
            Gets or sets action for click on counter number.
            </summary>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.CountWidget.GetCounterNumber(Dynamicweb.Dashboards.IDashboard,System.String)">
            <summary>
            Gets or sets counter number
            </summary>
            <param name="dashboard">The dashboard</param>
            <param name="path">The request path</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.CountWidget.Fetch(Dynamicweb.Dashboards.IDashboard,System.String)">
            <summary>
            Fetches widget <seealso cref="T:Dynamicweb.UI.Elements.Displays.Counter">element</seealso> with data
            </summary>
            <param name="dashboard">The dashboard</param>
            <param name="path">The request path</param>
        </member>
        <member name="T:Dynamicweb.Dashboards.Widgets.DashboardElementWidget">
            <summary>
            The class DashboardElementWidget provides base dashboard element widget
            </summary>
            <example>    
            <code title="How to inherit DashboardElementWidget" source="..\Dynamicweb\04 - Backend Building Blocks\Dynamicweb.Dashboards\Head\Dynamicweb.Dashboards.Examples\SimpleElementWidget.cs" lang="CS"></code>
            </example> 
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.DashboardElementWidget.Element">
            <summary>
            The <seealso cref="T:Dynamicweb.UI.Elements.Element">element</seealso> to be shown
            </summary>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.DashboardElementWidget.Render">
            <summary>
            The method render widget and return html
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamicweb.Dashboards.Widgets.DashboardWidget">
            <summary>
            The class DashboardWidget provides base dashboard widget
            </summary>
            <example>    
            <code title="How to inherit DashboardWidget" source="..\Dynamicweb\04 - Backend Building Blocks\Dynamicweb.Dashboards\Head\Dynamicweb.Dashboards.Examples\SimpleHtmlWidget.cs" lang="CS"></code>
            </example> 
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.DashboardWidget.Id">
            <summary>
            Gets widget Id
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.DashboardWidget.CreatedDate">
            <summary>
            Gets the created date and time.
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.DashboardWidget.ModifiedDate">
            <summary>
            Gets the last modified date and time.
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.DashboardWidget.Columns">
            <summary>
            Gets or sets widget size
            </summary>
            <remarks>
            The size set on widget via class name <c>"col-md-" + Size</c>
            </remarks> 
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.DashboardWidget.Title">
            <summary>
            Gets or sets widget title
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.DashboardWidget.ShowTitle">
            <summary>
            Gets or sets value indicating whether to show widget title.
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.DashboardWidget.Order">
            <summary>
            Gets or sets widget order
            </summary>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.DashboardWidget.Fetch(Dynamicweb.Dashboards.IDashboard,System.String)">
            <summary>
            Fetches widget data from storage
            </summary>
            <param name="dashboard">The dashboard</param>
            <param name="path">The request path</param>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.DashboardWidget.Render">
            <summary>
            The method render widget and return html
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.DashboardWidget.GetOptions(System.String)">
            <summary>
            Return dropdown options
            </summary>
            <param name="dropdownName"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.DashboardWidget.ScriptDependencies">
            <summary>
            Specifies relative paths to all script files that this widget is dependent upon.
            </summary>
            <remark>fx. /Admin/Resources/js/layout/chartist-pie-legend.js</remark>
            <returns>scriptDependencies</returns>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.DashboardWidget.StylesheetDependencies">
            <summary>
            Specifies relative paths to all style files that this widget is dependent upon.
            </summary>
            <remark>fx. /Admin/Resources/css/main.css</remark>
            <returns>stylescheetDependencies</returns>
        </member>
        <member name="T:Dynamicweb.Dashboards.Widgets.ChartWidget">
            <summary>
            The class ChartWidget provides base chart dashboard widget
            </summary>
            <example>    
            <code title="How to inherit ChartWidget" source="..\Dynamicweb\04 - Backend Building Blocks\Dynamicweb.Dashboards\Head\Dynamicweb.Dashboards.Examples\SimpleChartWidget.cs" lang="CS"></code>
            </example> 
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.ChartWidget.#ctor">
            <summary>
            The chart widget default constructor
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.ChartWidget.InstantFetch">
            <summary>
            Gets or sets value indicating whether data should be fetch to widget instantly, otherwise - using ajax
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.ChartWidget.Presentation">
            <summary>
            Gets or sets chart presentation
            </summary>
            <remarks>
            This property is string representation of <see cref="P:Dynamicweb.Dashboards.Widgets.ChartWidget.ChartType"/> with get <c>ChartType.ToString()</c> and set using <c>Enum.TryParse</c>.
            </remarks>         
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.ChartWidget.ChartType">
            <summary>
            Gets or sets chart presentation type
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.ChartWidget.Color">
            <summary>
            Gets or sets chart color
            </summary>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.ChartWidget.Fetch(Dynamicweb.Dashboards.IDashboard,System.String)">
            <summary>
            Fetches widget <seealso cref="T:Dynamicweb.UI.Elements.Displays.Chart">element</seealso> with data
            </summary>
            <param name="dashboard">The dashboard</param>
            <param name="path">The request path</param>
            <remarks>
            If <see cref="P:Dynamicweb.Dashboards.Widgets.ChartWidget.InstantFetch"/> - getting chart data with <see cref="M:Dynamicweb.Dashboards.Widgets.ChartWidget.GetData(Dynamicweb.Dashboards.IDashboard,System.String)"/>
            otherwise setting datasource with <c>"/Admin/Dashboard/{dashboard.Id()}/Widget/{Id}/Data/{path}"</c>
            </remarks> 
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.ChartWidget.GetData(Dynamicweb.Dashboards.IDashboard,System.String)">
            <summary>
            Gets chart data
            </summary>
            <param name="dashboard">The dashboard</param>
            <param name="path">The request path</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.ChartWidget.GetOptions(System.String)">
            <summary>
            Return dropdown options
            </summary>
            <param name="dropdownName"></param>
            <returns></returns>
        </member>
        <member name="T:Dynamicweb.Dashboards.Widgets.DashboardWidgetHelper">
            <summary>
            Contains helper methods to work with widgets
            </summary>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.DashboardWidgetHelper.GetName(Dynamicweb.Dashboards.Widgets.DashboardWidget)">
            <summary>
            Gets widget friendly name.
            </summary>
            <param name="widget">The widget</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.DashboardWidgetHelper.GetAllWidgetsTypes">
            <summary>
            Gets the all widgets AddIn's classes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.DashboardWidgetHelper.GetSystemName(System.Type)">
            <summary>
            Gets widget system name used as unique id
            </summary>
            <param name="type">The widget type</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.DashboardWidgetHelper.GetName(System.Type,System.String)">
            <summary>
            Gets widget type friendly name or default.
            </summary>
            <param name="type">The widget type</param>
            <param name="defaultName">The default value</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.DashboardWidgetHelper.GetDescription(System.Type)">
            <summary>
            Gets the AddIn description attribute.
            </summary>
            <param name="type">The widget type</param>
            <returns>
            </returns>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.DashboardWidgetHelper.GetIcon(System.Type,Dynamicweb.Core.UI.Icons.KnownIcon)">
            <summary>
            Gets the AddIn icon attribute.
            </summary>
            <param name="type">The widget type</param>
            <param name="defaultIcon">Default icon if icon attribute not specified</param>
            <returns>
            </returns>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.DashboardWidgetHelper.Create(System.Type)">
            <summary>
            Creates the AddIn instance.
            </summary>
            <param name="widgetType">Type of the AddIn.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.DashboardWidgetHelper.GetParametersCount(Dynamicweb.Dashboards.Widgets.DashboardWidget)">
            <summary>
            Gets widget AddIn parameters count 
            </summary>
            <param name="widget"></param>
            <returns></returns>
        </member>
        <member name="T:Dynamicweb.Dashboards.Widgets.FeedWidget">
            <summary>
            The class FeedWidget represents feed widget
            </summary>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.FeedWidget.#ctor">
            <summary>
            The feed widget default constructor
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.FeedWidget.DataSource">
            <summary>
            Gets or sets feed data source url
            </summary>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.FeedWidget.Fetch(Dynamicweb.Dashboards.IDashboard,System.String)">
            <summary>
            Fetches widget <seealso cref="T:Dynamicweb.UI.Elements.Displays.Teaser">element</seealso> with data
            </summary>
            <param name="dashboard">The dashboard</param>
            <param name="path">The request path</param>
        </member>
        <member name="T:Dynamicweb.Dashboards.Widgets.GridWidget">
            <summary>
            The class DashboardWidget provides base list dashboard widget
            </summary>
            <example>    
            <code title="How to inherit GridWidget" source="..\Dynamicweb\04 - Backend Building Blocks\Dynamicweb.Dashboards\Head\Dynamicweb.Dashboards.Examples\FilesFolderSizes.cs" lang="CS"></code>
            </example> 
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.GridWidget.#ctor">
            <summary>
            The list widget default constructor
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.GridWidget.InstantFetch">
            <summary>
            Gets or sets value indicating whether data should be fetch to widget instantly, otherwise - using ajax
            </summary>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.GridWidget.Fetch(Dynamicweb.Dashboards.IDashboard,System.String)">
            <summary>
            Fetches widget <seealso cref="T:Dynamicweb.UI.Elements.Displays.DataListView">element</seealso> with data
            </summary>
            <param name="dashboard">The dashboard</param>
            <param name="path">The request path</param>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.GridWidget.GetItems(Dynamicweb.Dashboards.IDashboard,System.String)">
            <summary>
            Gets grid items
            </summary>
            <param name="dashboard">The dashboard</param>
            <param name="path">The request path</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.GridWidget.GetColumns">
            <summary>
            Gets grid columns
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamicweb.Dashboards.Widgets.ListWidget">
            <summary>
            The class DashboardWidget provides base list dashboard widget
            </summary>
            <example>    
            <code title="How to inherit ListWidget" source="..\Dynamicweb\04 - Backend Building Blocks\Dynamicweb.Dashboards\Head\Dynamicweb.Dashboards.Examples\FilesFolderSizes.cs" lang="CS"></code>
            </example> 
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.ListWidget.#ctor">
            <summary>
            The list widget default constructor
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.ListWidget.InstantFetch">
            <summary>
            Gets or sets value indicating whether data should be fetch to widget instantly, otherwise - using ajax
            </summary>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.ListWidget.Fetch(Dynamicweb.Dashboards.IDashboard,System.String)">
            <summary>
            Fetches widget <seealso cref="T:Dynamicweb.UI.Elements.Displays.DataListView">element</seealso> with data
            </summary>
            <param name="dashboard">The dashboard</param>
            <param name="path">The request path</param>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.ListWidget.GetItems(Dynamicweb.Dashboards.IDashboard,System.String)">
            <summary>
            Gets list items
            </summary>
            <param name="dashboard">The dashboard</param>
            <param name="path">The request path</param>
            <returns></returns>
        </member>
        <member name="T:Dynamicweb.Dashboards.Widgets.ThresholdCountWidget">
            <summary>
            The class ThresholdCountWidget provides base counter dashboard widget with threshold states
            </summary>
            <code title="How to inherit ThresholdCountWidget" source="..\Dynamicweb\04 - Backend Building Blocks\Dynamicweb.Dashboards\Head\Dynamicweb.Dashboards.Examples\MyThresholdCountWidget.cs" lang="CS"></code>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.ThresholdCountWidget.Title">
            <summary>
            Gets or sets widget title
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.ThresholdCountWidget.DefaultBackgroundColor">
            <summary>
            Gets or sets counter default background color
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.ThresholdCountWidget.Threshold1Enable">
            <summary>
            Gets or sets threshold 1 enable
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.ThresholdCountWidget.Threshold1Color">
            <summary>
            Gets or sets counter threshold 1 background color
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.ThresholdCountWidget.Threshold1Condition">
            <summary>
            Gets or sets counter threshold 1 condition
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.ThresholdCountWidget.Threshold1Value">
            <summary>
            Gets or sets counter threshold 1 value
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.ThresholdCountWidget.Threshold2Enable">
            <summary>
            Gets or sets threshold 2 enable
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.ThresholdCountWidget.Threshold2Color">
            <summary>
            Gets or sets counter threshold 2 background color
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.ThresholdCountWidget.Threshold2Condition">
            <summary>
            Gets or sets counter threshold 2 condition
            </summary>
        </member>
        <member name="P:Dynamicweb.Dashboards.Widgets.ThresholdCountWidget.Threshold2Value">
            <summary>
            Gets or sets counter threshold 2 value
            </summary>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.ThresholdCountWidget.GetCounterNumber(Dynamicweb.Dashboards.IDashboard,System.String)">
            <summary>
            Gets formated counter number
            </summary>
            <param name="dashboard">The dashboard</param>
            <param name="path">The request path</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.ThresholdCountWidget.GetCounterValue(Dynamicweb.Dashboards.IDashboard,System.String,System.String@)">
            <summary>
            Gets counter value
            </summary>
            <param name="dashboard">The dashboard</param>
            <param name="path">The request path</param>
            <param name="formattedValue">When this method returns, contains the formated string value equivalent counted value</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.ThresholdCountWidget.ApplyThresholdState(Dynamicweb.Dashboards.IDashboard,System.String,System.Double,System.String)">
            <summary>
            Apply thrashold states to widget
            </summary>
            <param name="dashboard">The dashboard</param>
            <param name="path">The request path</param>
            <param name="counterValue">The request path</param>
            <param name="formattedValue">The formated string value equivalent counter value</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.ThresholdCountWidget.IsValueFollowThresholdCondition(System.Double,System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="counterValue"></param>
            <param name="thresholdCondition"></param>
            <param name="thresholdValue"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Dashboards.Widgets.ThresholdCountWidget.GetOptions(System.String)">
            <summary>
            Return dropdown options
            </summary>
            <param name="dropdownName"></param>
            <returns></returns>
        </member>
    </members>
</doc>
