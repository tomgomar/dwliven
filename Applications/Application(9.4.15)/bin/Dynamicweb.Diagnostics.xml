<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dynamicweb.Diagnostics</name>
    </assembly>
    <members>
        <member name="T:Dynamicweb.Diagnostics.ExecutionTable">
            <summary>
            Represents an execution table. Add events to it and get a html table with time taken on the different events with the <see cref="M:Dynamicweb.Diagnostics.ExecutionTable.GetExecutionTable">getExecutionTable</see>.
            </summary>
            <remarks>Used internally by pageview object.</remarks>
        </member>
        <member name="P:Dynamicweb.Diagnostics.ExecutionTable.ExecutionTableMapper">
            <summary>
            Gets or sets the execution table mapper.
            </summary>
            <value>
            The execution table mapper.
            </value>
        </member>
        <member name="P:Dynamicweb.Diagnostics.ExecutionTable.Current">
            <summary>
            Gets execution table for current thread.
            </summary>
        </member>
        <member name="M:Dynamicweb.Diagnostics.ExecutionTable.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="P:Dynamicweb.Diagnostics.ExecutionTable.Debug">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Dynamicweb.Diagnostics.ExecutionTable"/> should record debug information.
            </summary>
            <value>
              <c>true</c> if debug; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dynamicweb.Diagnostics.ExecutionTable.DbStat">
            <summary>
            Gets or sets a value indicating whether database debug information should be recorded.
            </summary>
            <value>
              <c>true</c> if [database stat]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dynamicweb.Diagnostics.ExecutionTable.DbStatClean">
            <summary>
            Gets or sets a value indicating whether to collection debug information for a limited dbstat.
            </summary>
            <value>
              <c>true</c> if [database stat clean]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dynamicweb.Diagnostics.ExecutionTable.DbCountEnabled">
            <summary>
            Gets or sets a value indicating whether database call count is recorded.
            </summary>
            <value>
              <c>true</c> if [database count]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dynamicweb.Diagnostics.ExecutionTable.IgnoreDbStatCounter">
             <summary>
             Gets or sets a value indicating whether to skip the connection counter increment.
             </summary>
             <value>
             <c>true</c> if [ignore database stat counter]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dynamicweb.Diagnostics.ExecutionTable.ConnectionCounter">
            <summary>
            Counter for number of database connections during the request.
            </summary>
            <value>
            The connection counter.
            </value>
        </member>
        <member name="P:Dynamicweb.Diagnostics.ExecutionTable.TimestampStart">
            <summary>
            Gets or sets time stamp represents begin of request
            </summary>
        </member>
        <member name="F:Dynamicweb.Diagnostics.ExecutionTable.Start">
            <summary>
            The start time of this object
            </summary>
        </member>
        <member name="P:Dynamicweb.Diagnostics.ExecutionTable.DbCounter">
            <summary>
            Gets or sets count of data base calls per query
            </summary>
        </member>
        <member name="F:Dynamicweb.Diagnostics.ExecutionTable.DbCount">
            <summary>
            The database count
            </summary>
        </member>
        <member name="M:Dynamicweb.Diagnostics.ExecutionTable.Add(System.String)">
            <summary>
            Adds the specified event name to the executing table.
            </summary>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Dynamicweb.Diagnostics.ExecutionTable.GetExecutionTable(System.Boolean)">
            <summary>
            Gets the execution table.
            </summary>
            <param name="fromRequestStart">if set to <c>true</c> timer from when the request started, otherwise from instance of Exceution was created.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Diagnostics.ExecutionTable.GetExecutionTable">
            <summary>
            Gets the execution table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Diagnostics.ExecutionTable.CountDbCall(System.String)">
            <summary>
            Adds or increses given data base query counter to <seealso cref="P:Dynamicweb.Diagnostics.ExecutionTable.DbCounter"/> collection
            </summary>
            <param name="dbQuery">The data base query</param>
        </member>
        <member name="M:Dynamicweb.Diagnostics.ExecutionTable.AddDbStat(System.String)">
            <summary>
            Adds a line to the dbstat output.
            </summary>
            <param name="message">The message.</param>
            <autogeneratedoc />
        </member>
        <member name="M:Dynamicweb.Diagnostics.ExecutionTable.GetDbStat">
            <summary>
            Gets the dbstat output.
            </summary>
            <returns>System.String.</returns>
            <autogeneratedoc />
        </member>
        <member name="T:Dynamicweb.Diagnostics.IExecutionTableMapper">
            <summary>
            Handles storing the ExecutionTable for the current request.
            </summary>
        </member>
        <member name="M:Dynamicweb.Diagnostics.IExecutionTableMapper.GetExecutionTable">
            <summary>
            Gets the execution table.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamicweb.Diagnostics.NamespaceDoc">
            <summary>
            The Dynamicweb.Diagnostics namespace contains types for tracking and task management used for async task handlers.
            </summary>
        </member>
        <member name="T:Dynamicweb.Diagnostics.Tasks.NamespaceDoc">
            <summary>
            The Dynamicweb.Diagnostics.Tasks namespace contains types for handling tasks across threads.
            </summary>
        </member>
        <member name="T:Dynamicweb.Diagnostics.Tasks.Context">
            <summary>
            The Class Context represents context 
            </summary>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tasks.Context.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamicweb.Diagnostics.Tasks.Context"/> class.
            </summary>
        </member>
        <member name="T:Dynamicweb.Diagnostics.Tasks.TaskManager">
            <summary>
            The Class TaskManager provides common operations on the <seealso cref="T:System.Threading.Tasks.Task"/> objects
            </summary>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tasks.TaskManager.BaseFolder">
            <summary>
            Gets or sets the base folder in which diagnostics are stored.
            </summary>
            <value>
            The base folder.
            </value>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tasks.TaskManager.Context">
            <summary>
            Gets or sets the context that provides an independant set of parameters for tasks.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tasks.TaskManager.StartTask(System.String,System.Action{Dynamicweb.Diagnostics.Tracking.Tracker})">
            <summary>
            Starts the given task and register the task with the given name.
            A <see cref="T:Dynamicweb.Diagnostics.Tracking.Tracker"/> is created and passed through.
            The task can use the provided <see cref="T:Dynamicweb.Diagnostics.Tracking.Tracker"/> internally.
            </summary>
            <param name="name">The name.</param>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tasks.TaskManager.StartTask(System.String,System.Action{Dynamicweb.Diagnostics.Tracking.Tracker},Dynamicweb.Diagnostics.Tracking.Tracker)">
            <summary>
            Starts the given task and register the task with the given name using the provided <see cref="T:Dynamicweb.Diagnostics.Tracking.Tracker"/>.
            The task can use the provided <see cref="T:Dynamicweb.Diagnostics.Tracking.Tracker"/> internally.
            If the given <see cref="T:Dynamicweb.Diagnostics.Tracking.Tracker"/> is <c>null</c>, a <see cref="T:Dynamicweb.Diagnostics.Tracking.Tracker"/> is created automatically.
            </summary>
            <param name="name">The name.</param>
            <param name="task">The task.</param>
            <param name="tracker">The tracker.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tasks.TaskManager.StartTask``1(System.String,System.Action{Dynamicweb.Diagnostics.Tracking.Tracker,``0},``0)">
            <summary>
            Starts the given task and register the task with the given name.
            A <see cref="T:Dynamicweb.Diagnostics.Tracking.Tracker"/> is created and passed through.
            The task can use the provided <see cref="T:Dynamicweb.Diagnostics.Tracking.Tracker"/> internally.
            An provided object of type <typeparamref name="T"/> is passed to the task.
            </summary>
            <typeparam name="T">The type of the object to pass to the task.</typeparam>
            <param name="name">The name.</param>
            <param name="task">The task.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tasks.TaskManager.StartTask``1(System.String,System.Action{Dynamicweb.Diagnostics.Tracking.Tracker,``0},Dynamicweb.Diagnostics.Tracking.Tracker,``0)">
            <summary>
            Starts the given task and register the task with the given name.
            The task can use the provided <see cref="T:Dynamicweb.Diagnostics.Tracking.Tracker"/> internally.
            If the given <see cref="T:Dynamicweb.Diagnostics.Tracking.Tracker"/> is <c>null</c>, a <see cref="T:Dynamicweb.Diagnostics.Tracking.Tracker"/> is created automatically.
            An provided object of type <typeparamref name="T"/> is passed to the task.
            </summary>
            <typeparam name="T">The type of the object to pass to the task.</typeparam>
            <param name="name">The name.</param>
            <param name="task">The task.</param>
            <param name="tracker">The tracker.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tasks.TaskManager.StartTask(System.String,System.Action)">
            <summary>
            Starts the given task and register the task with the given name.
            </summary>
            <param name="name">The name.</param>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tasks.TaskManager.IsTaskActive(System.String)">
            <summary>
            Determines whether a task with the given name exists and is running.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tasks.TaskManager.GetActiveTaskNames">
            <summary>
            Gets a list of names of active tasks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tasks.TaskManager.GetTaskInfo(System.String)">
            <summary>
            Gets the task information for a task with the given name. If a task with the given name does not exist, <c>null</c> is returned.
            </summary>
            <param name="name">The name.</param>
            <returns><see cref="T:Dynamicweb.Diagnostics.Tasks.TaskInfo" /> for the task if it exists; otherwise <c>null</c>.</returns>
        </member>
        <member name="T:Dynamicweb.Diagnostics.Tasks.TaskInfo">
            <summary>
            The Structure TaskInfo provides information about the <seealso cref="T:System.Threading.Tasks.Task"/>
            </summary>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tasks.TaskInfo.Name">
            <summary>
            Gets name of the task information instance
            </summary>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tasks.TaskInfo.Task">
            <summary>
            Gets related <seealso cref="T:System.Threading.Tasks.Task"/>
            </summary>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tasks.TaskInfo.Tracker">
            <summary><seealso cref="T:Dynamicweb.Diagnostics.Tracking.Tracker"/>
            Gets related 
            </summary>
        </member>
        <member name="T:Dynamicweb.Diagnostics.Tracking.NamespaceDoc">
            <summary>
            The Dynamicweb.Diagnostics.Tracking namespace contains types for tracking information across threads when running tasks in seperate threads.
            </summary>
        </member>
        <member name="T:Dynamicweb.Diagnostics.Tracking.TrackingState">
            <summary>
            Tracking state enumeration
            </summary>
        </member>
        <member name="F:Dynamicweb.Diagnostics.Tracking.TrackingState.Completed">
            <summary>
            The completed state
            </summary>
        </member>
        <member name="F:Dynamicweb.Diagnostics.Tracking.TrackingState.Failed">
            <summary>
            The failed state
            </summary>
        </member>
        <member name="F:Dynamicweb.Diagnostics.Tracking.TrackingState.Running">
            <summary>
            The running state
            </summary>
        </member>
        <member name="T:Dynamicweb.Diagnostics.Tracking.Status">
            <summary>
            The Class Status provides represents the position of affairs at a particular time
            </summary>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tracking.Status.StartTime">
            <summary>
            Gets start time
            </summary>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tracking.Status.EndTime">
            <summary>
            Gets end time
            </summary>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tracking.Status.Runtime">
            <summary>
            Gets time gone from start
            </summary>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tracking.Status.CurrentCount">
            <summary>
            Gets current count
            </summary>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tracking.Status.TotalCount">
            <summary>
            Gets total count
            </summary>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tracking.Status.State">
            <summary>
            Gets tracking state
            </summary>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tracking.Status.FailReason">
            <summary>
            Gets reason of fail
            </summary>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tracking.Status.FailExceptionMessage">
            <summary>
            Gets exception message
            </summary>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tracking.Status.FailExceptionStackTrace">
            <summary>
            Gets exception stack trace
            </summary>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tracking.Status.FailException">
            <summary>
            Gets the fail exception.
            </summary>
            <value>
            The fail exception.
            </value>
            <remarks>Wont be persisted/read from disk. Only available while the object lives.</remarks>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tracking.Status.LatestLogInformation">
            <summary>
            Gets last log entry information
            </summary>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tracking.Status.Meta">
            <summary>
            Gets metadata
            </summary>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tracking.Status.SaveOrUpdate(System.String)">
            <summary>
            Saves new one or update existing status
            </summary>
            <param name="folderPath">The status folder path</param>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tracking.Status.Load(System.String)">
            <summary>
            Loads status from directory
            </summary>
            <param name="folderPath">The status folder path</param>
            <returns>The status instance</returns>
        </member>
        <member name="T:Dynamicweb.Diagnostics.Tracking.Tracker">
            <summary>
            The Class Tracker represents tracker of log entries
            </summary>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tracking.Tracker.LogFolder">
            <summary>
            Gets the log folder.
            </summary>
            <value>
            The log folder.
            </value>
        </member>
        <member name="P:Dynamicweb.Diagnostics.Tracking.Tracker.Status">
            <summary>
            Gets related <seealso cref="T:Dynamicweb.Diagnostics.Tracking.Status"/> instance
            </summary>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tracking.Tracker.GetTracker(System.String)">
            <summary>
            Gets a <see cref="T:Dynamicweb.Diagnostics.Tracking.Tracker"/> ready to be used.
            </summary>
            <param name="subpath">The subpath under <see cref="P:Dynamicweb.Diagnostics.Tasks.TaskManager.BaseFolder"/> to store <see cref="P:Dynamicweb.Diagnostics.Tracking.Tracker.Status"/> elements.</param>
            <returns>A ready to use <see cref="T:Dynamicweb.Diagnostics.Tracking.Tracker"/>.</returns>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tracking.Tracker.Start">
            <summary>
            Starts the tracker
            </summary>
            <remarks>if not yet started - captures start time, otherwise does nothing</remarks>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tracking.Tracker.Stop">
            <summary>
            Stops the tracker
            </summary>
            <remarks>if not yet stoped or still started - captures end time, otherwise does nothing</remarks>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tracking.Tracker.Fail(System.String,System.Exception)">
            <summary>
            Records a fail with given reason in logs and stops the tracker
            </summary>
            <param name="reason">The reason of fail</param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tracking.Tracker.IncrementCounter">
            <summary>
            Increses <see cref="P:Dynamicweb.Diagnostics.Tracking.Tracker.Status"/> current count by 1
            </summary>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tracking.Tracker.IncrementCounter(System.Int32)">
            <summary>
            Increses <see cref="P:Dynamicweb.Diagnostics.Tracking.Tracker.Status"/> current count by given increment
            </summary>
            <param name="incrementCount">The increment count to be applied to <see cref="P:Dynamicweb.Diagnostics.Tracking.Tracker.Status"/> count</param>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tracking.Tracker.LogInformation(System.String,System.Object[])">
            <summary>
            Logs the information.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tracking.Tracker.LogException(System.String,System.Exception)">
            <summary>
            Logs and exception
            </summary>
            <param name="message">The message to be recorded into logs</param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tracking.Tracker.Dispose">
            <summary>
            Stops the tracker
            </summary>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tracking.Tracker.Dispose(System.Boolean)">
            <summary>
            Stops the tracker
            </summary>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tracking.Tracker.GetStatusHistory(System.String)">
            <summary>
            Gets the 10 newest <see cref="P:Dynamicweb.Diagnostics.Tracking.Tracker.Status"/> elements in the specified subpath. The list is sorted by date in descending order.
            </summary>
            <param name="subpath">
            The subpath under <see cref="P:Dynamicweb.Diagnostics.Tasks.TaskManager.BaseFolder"/> to <see cref="P:Dynamicweb.Diagnostics.Tracking.Tracker.Status"/> elements from.
            Format: {path1}\{path2}\...\{pathN} will get all <see cref="P:Dynamicweb.Diagnostics.Tracking.Tracker.Status"/> elements in {pathN}.
            </param>
            <returns>A list of <see cref="P:Dynamicweb.Diagnostics.Tracking.Tracker.Status"/> elements</returns>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tracking.Tracker.GetStatusHistory(System.String,System.Int32)">
            <summary>
            Gets the newest <see cref="P:Dynamicweb.Diagnostics.Tracking.Tracker.Status"/> elements in the specified subpath. The list is sorted by date in descending order.
            </summary>
            <param name="subpath">
            The subpath under <see cref="P:Dynamicweb.Diagnostics.Tasks.TaskManager.BaseFolder"/> to <see cref="P:Dynamicweb.Diagnostics.Tracking.Tracker.Status"/> elements from.
            Format: {path1}\{path2}\...\{pathN} will get all <see cref="P:Dynamicweb.Diagnostics.Tracking.Tracker.Status"/> elements in {pathN}.
            </param>
            <param name="count">The number of <see cref="P:Dynamicweb.Diagnostics.Tracking.Tracker.Status"/> elements to get.</param>
            <returns>A list of <see cref="P:Dynamicweb.Diagnostics.Tracking.Tracker.Status"/> elements</returns>
        </member>
        <member name="M:Dynamicweb.Diagnostics.Tracking.Tracker.DeleteTrackerHistory(System.String)">
            <summary>
            Delete tracker history
            </summary>
            <param name="subpath">
            The subpath under <see cref="P:Dynamicweb.Diagnostics.Tasks.TaskManager.BaseFolder"/> to delete.
            Format: {path1}\{path2\..\{pathN} will delete the folder {pathN} and all its contents.
            </param>
        </member>
    </members>
</doc>
