<?xml version="1.0"?>
<doc>
<assembly>
<name>
Dynamicweb.DataManagement
</name>
</assembly>
<members>
<member name="T:Dynamicweb.DataManagement.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Dynamicweb.DataManagement.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Dynamicweb.DataManagement.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Dynamicweb.DataManagement.ConnectionManager">
 <summary>
 Manages connections to data sources
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.DMConnection">
 <summary>
 Represents DataManagement connection
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.DMConnection.Name">
 <summary>
 Name
 </summary>
 <returns>Name in string format</returns>
</member>
<member name="P:Dynamicweb.DataManagement.DMConnection.Type">
 <summary>
 Type
 </summary>
 <returns>integer value of type code</returns>
</member>
<member name="P:Dynamicweb.DataManagement.DMConnection.DW">
 <summary>
 Dynamicweb mark
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.DMConnection.Meta">
 <summary>
 Metainformation for this connection.
 </summary>
 <returns>DMConnectionMeta class</returns>
</member>
<member name="P:Dynamicweb.DataManagement.DMConnection.Data">
 <summary>
 Data interface for this connection.
 </summary>
 <returns>DMConnectionData class</returns>
</member>
<member name="P:Dynamicweb.DataManagement.DMConnection.DBName">
 <summary>
 For some legacy code.
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnection.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnection.FillRow(System.Data.DataRow)">
 <summary>
 Fill fields: ID, Name, DW
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnection.Fill(System.Data.IDataReader)">
 <summary>
 Fill fields: ID, Name, DW
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnection.GetConnection(System.Int32,System.String)">
 <summary>
 Gets connection by ID and database name
 </summary>
 <param name="ID">Identifier</param>
 <param name="DBName">Dataase name</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnection.GetConnection(System.Int32)">
 <summary>
 Gets connection by identifier
 </summary>
 <param name="ID">Identifier</param>
 <returns>DataManagement connection instance</returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnection.GetConnections">
 <summary>
 Gets all DataManagement module connections
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnection.GetConnectionsBySql(System.String)">
 <summary>
 Gets DataManager connections useng sql command text
 </summary>
 <param name="sqlCommandText">sql command text</param>
 <returns>Datamanagement codule connections</returns>
</member>
<member name="T:Dynamicweb.DataManagement.DMConnectionCollection">
 <summary>
 Represents collection of DataManagement connections
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionCollection.SortByName">
 <summary>
 Sort collection by name (ascending)
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionCollection.SortByName(System.Boolean)">
 <summary>
 Sort by name
 </summary>
 <param name="ascending">Direction of sorting</param>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionCollection.ConnectionComparer.Compare(Dynamicweb.DataManagement.DMConnection,Dynamicweb.DataManagement.DMConnection)">
 <summary>
 Compares two instances of DMConnection
 </summary>
 <param name="x">First object to compare</param>
 <param name="y">Second object to compare</param>
 <returns>
 A signed integer that indicates the relative values of x and y, as shown in the
 following table.Value Meaning Less than zerox is less than y.Zerox equals y.Greater
 than zerox is greater than y.
 </returns>
</member>
<member name="T:Dynamicweb.DataManagement.DMConnectionData">
 <summary>
 Connection data-provider interface.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionData.CriteriaToNativeQuery(Dynamicweb.DataManagement.Criteria)">
 <summary>
 Convert criteria to native string, represents this query.
 </summary>
 <returns>native query string</returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionData.SelectQuery(Dynamicweb.DataManagement.Criteria,System.Collections.Generic.IEnumerable{Dynamicweb.DataManagement.QueryVariable})">
 <summary>
 Query data using criteria.
 </summary>
 <param name="criteria">criteria</param>
 <returns>data table</returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionData.GetCriteriaVariables(Dynamicweb.DataManagement.Criteria)">
 <summary>
 Retrieve list of variables in criteria.
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionData.UpdateTableRow(System.String,Dynamicweb.DataManagement.FieldCollection)">
 <summary>
 Update row in specified table.
 </summary>
 <param name="fields">fields with values to update</param>
 <returns>true, if updated</returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionData.InsertTableRow(System.String,Dynamicweb.DataManagement.FieldCollection)">
 <summary>
 Insert new row to specified table.
 </summary>
 <param name="tableName">table to insert new row</param>
 <param name="fields">fields with values</param>
 <returns>true, if inserted</returns>
</member>
<member name="T:Dynamicweb.DataManagement.DMConnectionFactory">
 <summary>
 Factory class for creating DMConnection instances
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionFactory.#cctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionFactory.CanCreate(System.Int32)">
 <summary>
 Shows if the current factory object is configured to create specified connection
 </summary>
 <param name="connectionType">Type of connection</param>
 <returns>True if fsctory configured for creating defined connection type</returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionFactory.CreateConnection(System.Int32)">
 <summary>
 Creates connection object
 </summary>
 <param name="connectionType">Type of connection</param>
 <returns>DMConnection object</returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionFactory.GetAvaliableTypes">
 <summary>
 Gets list of available connection types
 </summary>
 <returns>List of connection type IDs</returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionFactory.GetAvaliableTypesCommaSeparated">
 <summary>
 Gets list of available connection types as coma separated string
 </summary>
 <returns>Coma separated string of connection type IDs</returns>
</member>
<member name="T:Dynamicweb.DataManagement.DMConnectionInfoAttribute">
 <summary>
 DMConnectionInfo Attribute
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.DMConnectionInfoAttribute.TypeIDProperty">
 <summary>
 ID of attribute type
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.DataManagement.DMConnectionInfoAttribute.Name">
 <summary>
 Attribute name
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionInfoAttribute.#ctor(System.Int32,System.String)">
 <summary>
 Constructs new DMConnectionInfoAttribute instance using parameters
 </summary>
 <param name="typeID">Type ID</param>
 <param name="name">Attribute name</param>
</member>
<member name="T:Dynamicweb.DataManagement.DMConnectionMeta">
 <summary>
 Provides metainformation for connection.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.DataManagement.DMConnectionMeta.Tables">
 <summary>
 Tables in this connection.
 </summary>
 <returns>collection of tables</returns>
 <remarks>result can be null for bad connection</remarks>
</member>
<member name="P:Dynamicweb.DataManagement.DMConnectionMeta.TableFields(System.String)">
 <summary>
 Fields of table.
 </summary>
 <param name="tableName">table name</param>
 <returns>list of fieds, or null if table not exists</returns>
</member>
<member name="P:Dynamicweb.DataManagement.DMConnectionMeta.Table(System.String)">
 <summary>
 Table by its name.
 </summary>
 <param name="tableName">table name</param>
 <returns>table or noll</returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionMeta.GetTable(System.String)">
 <summary>
 Get table information by table name. Can be overrided.
 </summary>
 <param name="tableName">name</param>
 <returns>table information or null, if table is not found</returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionMeta.CreateTable(System.String,Dynamicweb.DataManagement.FieldCollection)">
 <summary>
 Create new table in connection
 </summary>
 <param name="name">table name</param>
 <param name="fields">table fields</param>
 <returns>true, if created</returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionMeta.AddFieldsToTable(System.String,Dynamicweb.DataManagement.FieldCollection)">
 <summary>
 Add new fields to table.
 </summary>
 <param name="tableName">table name</param>
 <param name="fields">fields to add</param>
 <returns>true, if added</returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionMeta.GetTables">
 <summary>
 Get list of tables of this connection.
 </summary>
 <returns>list of tables</returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionMeta.GetTableFields(System.String)">
 <summary>
 Get list of table fields of this connection.
 </summary>
 <param name="tableName">table name</param>
 <returns>list of fields or null</returns>
</member>
<member name="T:Dynamicweb.DataManagement.Field">
 <summary>
 Data field object with name, key, type and value fields
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.Field.Name">
 <summary>
 Name
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.Field.Key">
 <summary>
 Shows if current fiekd is a key field
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.DataManagement.Field.Type">
 <summary>
 Type of field
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.DataManagement.Field.Value">
 <summary>
 Field value
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.DataManagement.Field.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.Field.#ctor(System.String,System.Boolean,System.Type)">
 <summary>
 Constructs new Field object
 </summary>
 <param name="name">Name</param>
 <param name="key">Key</param>
 <param name="type">Type</param>
</member>
<member name="M:Dynamicweb.DataManagement.Field.#ctor(System.String,System.Boolean,System.Type,System.Object)">
 <summary>
 Constructs new Field object
 </summary>
 <param name="name">Name</param>
 <param name="key">Key</param>
 <param name="type">Type</param>
 <param name="value">Value</param>
</member>
<member name="M:Dynamicweb.DataManagement.Field.Clone">
 <summary>
 Creates new object instance using data of current Field object
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.DataManagement.Field.ToString">
 <summary>
 Get string representation of current object state
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.DataManagement.FieldCollection">
 <summary>
 Represents collection of fields
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FieldCollection.SortByName">
 <summary>
 Sorts inner collection by name
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FieldCollection.SortByName(System.Boolean)">
 <summary>
 Sorts inner collection by name
 </summary>
 <param name="ascending">Direction of sorting</param>
</member>
<member name="M:Dynamicweb.DataManagement.FieldCollection.FindByName(System.String)">
 <summary>
 Finds field by name
 </summary>
 <param name="name">Name of field to be found</param>
 <returns>Field object instance</returns>
</member>
<member name="M:Dynamicweb.DataManagement.FieldCollection.Remove(Dynamicweb.DataManagement.Field)">
 <summary>
 Removes element with defined value from inner collection
 </summary>
 <param name="value">Value of element to be removed</param>
</member>
<member name="T:Dynamicweb.DataManagement.QueryVariable">
 <summary>
 Variable for query.
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.QueryVariable.VariableType">
 <summary>
 VariableType enumeration defining where to get querydata from
 </summary>
</member>
<member name="F:Dynamicweb.DataManagement.QueryVariable.VariableType.Session">
 <summary>
 Get data from session
 </summary>
</member>
<member name="F:Dynamicweb.DataManagement.QueryVariable.VariableType.Request">
 <summary>
 Get data from request
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.QueryVariable.Type">
 <summary>
 Type of query variable
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.DataManagement.QueryVariable.TypeString">
 <summary>
 Shows type (Request or Session)
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.QueryVariable.Name">
 <summary>
 Name
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.QueryVariable.Value">
 <summary>
  Value
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.DataManagement.QueryVariable.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.QueryVariable.#ctor(Dynamicweb.DataManagement.QueryVariable.VariableType,System.String)">
 <summary>
 Construct new QueryVariable defining type and name
 </summary>
 <param name="type">QueryVariable type</param>
 <param name="name">QueryVariable name</param>
</member>
<member name="M:Dynamicweb.DataManagement.QueryVariable.#ctor(Dynamicweb.DataManagement.QueryVariable.VariableType,System.String,System.String)">
 <summary>
 Construct new QueryVariable defining type, name and value
 </summary>
 <param name="type">QueryVariable type</param>
 <param name="name">QueryVariable name</param>
 <param name="value">QueryVariable value</param>
</member>
<member name="M:Dynamicweb.DataManagement.QueryVariable.Create(System.String)">
 <summary>
 Create variable from string definition.
 </summary>
 <param name="def">in format @Type("name") or @Type('name')</param>
 <returns>created variable, or null</returns>
</member>
<member name="M:Dynamicweb.DataManagement.QueryVariable.Create(System.Text.RegularExpressions.Match)">
 <summary>
 Create variable from regex match definition.
 </summary>
 <returns>created variable, or null</returns>
</member>
<member name="M:Dynamicweb.DataManagement.QueryVariable.Equals(System.Object)">
 <summary>
 Compares current QueryVariable with object instance
 </summary>
 <param name="obj">Object ot be compared with</param>
 <returns>True if objects are equal</returns>
</member>
<member name="M:Dynamicweb.DataManagement.QueryVariable.GetHashCode">
 <summary>
 Return hash code based on Name property value
 </summary>
 <returns>Integer value</returns>
</member>
<member name="T:Dynamicweb.DataManagement.AccessConnection">
 <summary>
 Represents connection to instance of Microsoft Access database .
 </summary>
 <seealso cref="T:Dynamicweb.DataManagement.DMConnection" />
</member>
<member name="P:Dynamicweb.DataManagement.AccessConnection.LocalPath">
 <summary>
 Local path to database file
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.AccessConnection.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.AccessConnection.FillRow(System.Data.DataRow)">
 <summary>
 Fill fields: LocalPath
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.AccessConnection.Fill(System.Data.IDataReader)">
 <summary>
 Fill fields: LocalPath
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.AccessConnection.GetDatabaseConnection">
 <summary>
 Gets object that represents connection to database
 </summary>
 <returns>OleDbConnection object</returns>
</member>
<member name="M:Dynamicweb.DataManagement.AccessConnection.GetAdapter">
 <summary>
 Returns new OleDbDataAdapter instance
 </summary>
 <returns>OleDbDataAdapter object</returns>
</member>
<member name="M:Dynamicweb.DataManagement.AccessConnection.Clone">
 <summary>
 Creates new AccessConnection object using data of current object
 </summary>
 <returns>New AccessConnection object with copied data</returns>
</member>
<member name="T:Dynamicweb.DataManagement.AccessConnectionData">
 <summary>
 Provides methods for selecting and modification Access database data
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.AccessConnectionData.#ctor(Dynamicweb.DataManagement.AccessConnection)">
 <summary>
 Creates new object defining connection to Access data source
 </summary>
 <param name="connection"></param>
</member>
<member name="M:Dynamicweb.DataManagement.AccessConnectionData.GetDataSet(System.String)">
 <summary>
 Retrieves dataset based on sqlCommand
 </summary>
 <param name="sqlCommandText">Text of sql command</param>
 <returns>DataSet</returns>
</member>
<member name="M:Dynamicweb.DataManagement.AccessConnectionData.CriteriaToNativeQuery(Dynamicweb.DataManagement.Criteria)">
 <summary>
 Builds sql query command based on criteria parameters
 </summary>
 <param name="criteria">Criteria instance</param>
 <returns>string representation of sql command text</returns>
</member>
<member name="M:Dynamicweb.DataManagement.AccessConnectionData.SelectQuery(Dynamicweb.DataManagement.Criteria,System.Collections.Generic.IEnumerable{Dynamicweb.DataManagement.QueryVariable})">
 <summary>
 Gets data as DataTable using criataria with defined values
 </summary>
 <param name="criteria">Criteria object</param>
 <param name="variables">Collection of query variables</param>
 <returns>Datatable object</returns>
</member>
<member name="M:Dynamicweb.DataManagement.AccessConnectionData.GetCriteriaVariables(Dynamicweb.DataManagement.Criteria)">
 <summary>
 Gets variable of criteria
 </summary>
 <param name="criteria">Criteria object</param>
 <returns>Colection of query variables</returns>
</member>
<member name="M:Dynamicweb.DataManagement.AccessConnectionData.UpdateTableRow(System.String,Dynamicweb.DataManagement.FieldCollection)">
 <summary>
 Updates row in table with new data
 </summary>
 <param name="tableName">Name of table</param>
 <param name="fields">Collection of Fields</param>
 <returns>True if operation succeded</returns>
</member>
<member name="M:Dynamicweb.DataManagement.AccessConnectionData.InsertTableRow(System.String,Dynamicweb.DataManagement.FieldCollection)">
 <summary>
 Inserts row with data into table
 </summary>
 <param name="tableName">Name of target table</param>
 <param name="fields">Field collection to be inserted</param>
 <returns>True if operation succeded</returns>
</member>
<member name="T:Dynamicweb.DataManagement.AccessConnectionMeta">
 <summary>
 Metainformation for Access connection.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Dynamicweb.DataManagement.AccessConnectionMeta.#cctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.AccessConnectionMeta.#ctor(Dynamicweb.DataManagement.AccessConnection)">
 <summary>
 Constructs new object using Connection
 </summary>
 <param name="connection">AccessConnetion object</param>
</member>
<member name="M:Dynamicweb.DataManagement.AccessConnectionMeta.CreateTable(System.String,Dynamicweb.DataManagement.FieldCollection)">
 <summary>
 Creates table
 </summary>
 <param name="name">Table name</param>
 <param name="fields">Collection of fields</param>
 <returns>True if table was successfully created</returns>
</member>
<member name="M:Dynamicweb.DataManagement.AccessConnectionMeta.AddFieldsToTable(System.String,Dynamicweb.DataManagement.FieldCollection)">
 <summary>
 Adds fields to table
 </summary>
 <param name="tableName">Name of table</param>
 <param name="fields">Collection of fields</param>
 <returns>True if fields were successfully created</returns>
</member>
<member name="T:Dynamicweb.DataManagement.DMConnectionUtility">
 <summary>
 Provides DMConnection specific methods
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionUtility.GetTableColumns(System.Data.IDbConnection,System.String)">
 <summary>
 Gets collection of table fields
 </summary>
 <param name="connection">Connection to datasource</param>
 <param name="tableName">Table mane</param>
 <returns>Collection of fields</returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionUtility.GetSqlStringVariables(System.String)">
 <summary>
 Gets sql string variables from command text
 </summary>
 <param name="sqlCommandText">Sql command text</param>
 <returns>Collection of query vatriables</returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionUtility.GenerateRowID(System.Data.DataRow,System.Data.DataColumn[])">
 <summary>
 Generated row id
 </summary>
 <param name="row">DataRow</param>
 <param name="columns">Array of columns</param>
 <returns>String with key value pairs of row column</returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionUtility.ParseRowID(System.String)">
 <summary>
 Parses row data
 </summary>
 <param name="rowID"></param>
 <returns>Row data as list of key-value pairs</returns>
</member>
<member name="M:Dynamicweb.DataManagement.DMConnectionUtility.ReplaceVariablesInSql(System.String,System.Collections.Generic.IEnumerable{Dynamicweb.DataManagement.QueryVariable})">
 <summary>
 Replaces variables in command text
 </summary>
 <param name="sqlCommandText">sql command text</param>
 <param name="variables">variables collection</param>
 <returns>String of sql commnd with replaced variables</returns>
</member>
<member name="T:Dynamicweb.DataManagement.MsSqlConnection">
 <summary>
 Represents connection to instance of Microsoft SQL Server
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.MsSqlConnection.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.MsSqlConnection.Fill(System.Data.IDataReader)">
 <summary>
 Fills current connection property with data of DataReader
 </summary>
 <param name="dataReader">Source DataReader</param>
</member>
<member name="M:Dynamicweb.DataManagement.MsSqlConnection.GetDatabaseConnection">
 <summary>
 Gets SqlConnection instance
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.DataManagement.MsSqlConnection.GetAdapter">
 <summary>
 Returns new SqlDataAdapter instance
 </summary>
 <returns>SqlDataAdapter object</returns>
</member>
<member name="M:Dynamicweb.DataManagement.MsSqlConnection.Clone">
 <summary>
 Creates new MsSqlConnection object using data of current object
 </summary>
 <returns>New MsSqlConnection object with copied data</returns>
</member>
<member name="T:Dynamicweb.DataManagement.MsSqlConnectionData">
 <summary>
 Provides methods for selecting and modification MS SQL Server database data
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.MsSqlConnectionData.#ctor(Dynamicweb.DataManagement.MsSqlConnection)">
 <summary>
 Creates new object defining connection to MS SQL Server data source
 </summary>
 <param name="connection"></param>
</member>
<member name="M:Dynamicweb.DataManagement.MsSqlConnectionData.GetDataSet(System.String)">
 <summary>
 Retrieves dataset based on sqlCommand
 </summary>
 <param name="sqlCommandText">Text of sql command</param>
 <returns>DataSet</returns>
</member>
<member name="M:Dynamicweb.DataManagement.MsSqlConnectionData.CriteriaToNativeQuery(Dynamicweb.DataManagement.Criteria)">
 <summary>
 Builds sql query command based on criteria parameters
 </summary>
 <param name="criteria">Criteria instance</param>
 <returns>string representation of sql command text</returns>
</member>
<member name="M:Dynamicweb.DataManagement.MsSqlConnectionData.SelectQuery(Dynamicweb.DataManagement.Criteria,System.Collections.Generic.IEnumerable{Dynamicweb.DataManagement.QueryVariable})">
 <summary>
 Gets data as DataTable using criataria with defined values
 </summary>
 <param name="criteria">Criteria object</param>
 <param name="variables">Collection of query variables</param>
 <returns>Datatable object</returns>
</member>
<member name="M:Dynamicweb.DataManagement.MsSqlConnectionData.GetCriteriaVariables(Dynamicweb.DataManagement.Criteria)">
 <summary>
 Gets variable of criteria
 </summary>
 <param name="criteria">Criteria object</param>
 <returns>Colection of query variables</returns>
</member>
<member name="M:Dynamicweb.DataManagement.MsSqlConnectionData.UpdateTableRow(System.String,Dynamicweb.DataManagement.FieldCollection)">
 <summary>
 Updates row in table with new data
 </summary>
 <param name="tableName">Name of table</param>
 <param name="fields">Collection of Fields</param>
 <returns>True if operation succeded</returns>
</member>
<member name="M:Dynamicweb.DataManagement.MsSqlConnectionData.InsertTableRow(System.String,Dynamicweb.DataManagement.FieldCollection)">
 <summary>
 Inserts row with data into table
 </summary>
 <param name="tableName">Name of target table</param>
 <param name="fields">Field collection to be inserted</param>
 <returns>True if operation succeded</returns>
</member>
<member name="T:Dynamicweb.DataManagement.MsSqlConnectionMeta">
 <summary>
 Represents MsSqlConnection meta info
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.MsSqlConnectionMeta.#cctor">
 <summary>
 Defualt constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.MsSqlConnectionMeta.#ctor(Dynamicweb.DataManagement.MsSqlConnection)">
 <summary>
 Constracts new object instance using connection object data
 </summary>
 <param name="connection">Connection object</param>
</member>
<member name="M:Dynamicweb.DataManagement.MsSqlConnectionMeta.GetTables">
 <summary>
 Returns collection of all tables using information schema data
 </summary>
 <returns>Collection of tables</returns>
</member>
<member name="M:Dynamicweb.DataManagement.MsSqlConnectionMeta.CreateTable(System.String,Dynamicweb.DataManagement.FieldCollection)">
 <summary>
 Creates table
 </summary>
 <param name="name">Table name</param>
 <param name="fields">Collection of fields</param>
 <returns>True if operation succeded</returns>
</member>
<member name="M:Dynamicweb.DataManagement.MsSqlConnectionMeta.AddFieldsToTable(System.String,Dynamicweb.DataManagement.FieldCollection)">
 <summary>
 Adds fields to table
 </summary>
 <param name="tableName">Name of table</param>
 <param name="fields">Collection of fields</param>
 <returns>True if fields were successfully created</returns>
</member>
<member name="T:Dynamicweb.DataManagement.RemoteServerConnection">
 <summary>
 Connection settings for remote servers (like sql server - host, service, user name, pwd)
 </summary>
 <remarks></remarks>
</member>
<member name="P:Dynamicweb.DataManagement.RemoteServerConnection.DBName">
 <summary>
 Database name
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.DataManagement.RemoteServerConnection.ServiceName">
 <summary>
 Remote service name. Can be database name for SQL server, or organization name for ms crm etc.
 </summary>
 <value>service name</value>
 <returns>service name</returns>
</member>
<member name="P:Dynamicweb.DataManagement.RemoteServerConnection.Server">
 <summary>
 Server address.
 </summary>
 <value>server address</value>
 <returns>server address</returns>
</member>
<member name="P:Dynamicweb.DataManagement.RemoteServerConnection.UserID">
 <summary>
 User name.
 </summary>
 <value>user name</value>
 <returns>user name</returns>
</member>
<member name="P:Dynamicweb.DataManagement.RemoteServerConnection.Password">
 <summary>
 Password.
 </summary>
 <value>password</value>
 <returns>password</returns>
</member>
<member name="P:Dynamicweb.DataManagement.RemoteServerConnection.TrustedConnection">
 <summary>
 True, if connection trusted (windows auth used)
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.RemoteServerConnection.FillRow(System.Data.DataRow)">
 <summary>
 Fill fields: ServiceName, Server, UserId, Password, TrustedConnection
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.RemoteServerConnection.Fill(System.Data.IDataReader)">
 <summary>
 Fill fields: ServiceName, Server, UserId, Password, TrustedConnection
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.Table">
 <summary>
 Represents data source table
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.Table.Name">
 <summary>
 Name
 </summary>
 <returns>Name as string</returns>
</member>
<member name="P:Dynamicweb.DataManagement.Table.Connection">
 <summary>
 Connection
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.Table.Fields">
 <summary>
 Table fields
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.TableCollection">
 <summary>
 Collection of tables
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.TableCollection.SortByName">
 <summary>
 Return tables sorted by name
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.TableCollection.SortByName(System.Boolean)">
 <summary>
 Return tables sorted by name
 </summary>
 <param name="ascending">Direction of sorting</param>
</member>
<member name="T:Dynamicweb.DataManagement.FormField">
 <summary>
 Represents FormField
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.FormField.FieldType">
 <summary>
 Type of field
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.FormField.OptionSourceType">
 <summary>
 Type of option source
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FormField.GetFieldOptions">
 <summary>
 Gets field options
 </summary>
 <returns>List of options</returns>
</member>
<member name="M:Dynamicweb.DataManagement.FormField.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FormField.FillRow(System.Data.DataRow)">
 <summary>
 Fills row instance with data of current object
 </summary>
 <param name="row">DatRow object</param>
</member>
<member name="M:Dynamicweb.DataManagement.FormField.Fill(System.Data.IDataReader)">
 <summary>
 Fills object with dataReader data
 </summary>
 <param name="dataReader">DataReader instance</param>
</member>
<member name="M:Dynamicweb.DataManagement.FormField.Delete(System.Int32)">
 <summary>
 Deletes element of inner collection by id value
 </summary>
 <param name="id">Identifier of element to be deleted</param>
</member>
<member name="M:Dynamicweb.DataManagement.FormField.GetFormFieldById(System.Int32)">
 <summary>
 Gets form field by specified id
 </summary>
 <param name="id">FormField identifier</param>
 <returns>FormField instance</returns>
</member>
<member name="M:Dynamicweb.DataManagement.FormField.GetFormFields(System.Int32)">
 <summary>
 Gets fileds of form specified by id
 </summary>
 <param name="formID">Form identifier</param>
 <returns>Collection of form fields</returns>
</member>
<member name="M:Dynamicweb.DataManagement.FormField.GetFormFieldsBySql(System.String)">
 <summary>
 Gets collection of form fields using sql comand
 </summary>
 <param name="sqlCommandText">Text of sql commnd</param>
 <returns>Collection of form fields</returns>
</member>
<member name="M:Dynamicweb.DataManagement.FormField.GetFormFields(Dynamicweb.Data.CommandBuilder)">
 <summary>
 Gets form fields collection using command builder
 </summary>
 <param name="commandBuilder">Command builer object</param>
 <returns>Collection of form fields</returns>
</member>
<member name="M:Dynamicweb.DataManagement.FormField.GetAvailableTypes(System.TypeCode)">
 <summary>
 Gets list of available types
 </summary>
 <param name="code">Code of type</param>
 <returns>List of field types</returns>
</member>
<member name="M:Dynamicweb.DataManagement.FormField.GetTypesWithOptions">
 <summary>
 Gets list with field types
 </summary>
 <returns>List of field types</returns>
</member>
<member name="T:Dynamicweb.DataManagement.FormFieldCollection">
 <summary>
 Represents Colelction of FormField items
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.FormFieldCollection.SortBy">
 <summary>
 SorBy enumeration
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FormFieldCollection.Sort(Dynamicweb.DataManagement.FormFieldCollection.SortBy)">
 <summary>
 Sorts inner collection 
 </summary>
 <param name="sortBy">Column of inner collection to be sorted by</param>
</member>
<member name="M:Dynamicweb.DataManagement.FormFieldCollection.Sort(Dynamicweb.DataManagement.FormFieldCollection.SortBy,System.Boolean)">
 <summary>
 Sorts inner collection
 </summary>
 <param name="sortBy">Column of inner collection to be sorted by</param>
 <param name="ascending">Direction of sorting</param>
</member>
<member name="M:Dynamicweb.DataManagement.FormFieldCollection.GetById(System.Int32)">
 <summary>
 Gets element form inner collection using id value
 </summary>
 <param name="id">ID of element</param>
 <returns>FormField object instance</returns>
</member>
<member name="M:Dynamicweb.DataManagement.FormFieldCollection.RemoveById(System.Int32)">
 <summary>
 Removes element With specified id from inner collection
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.FormFieldOption">
 <summary>
 Represents option of FormField
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FormFieldOption.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FormFieldOption.FillRow(System.Data.DataRow)">
 <summary>
 Fills DataRow with object data
 </summary>
 <param name="row">DatRow instance</param>
</member>
<member name="M:Dynamicweb.DataManagement.FormFieldOption.Fill(System.Data.IDataReader)">
 <summary>
 Fills current object with data of DataReader object
 </summary>
 <param name="dataReader">DataReader instance</param>
</member>
<member name="M:Dynamicweb.DataManagement.FormFieldOption.GetFormFieldOptions(System.Int32)">
 <summary>
 Gets FormFieldOptions collection
 </summary>
 <param name="fieldId">Field identifier</param>
 <returns>Collection of FormFieldOptions</returns>
</member>
<member name="M:Dynamicweb.DataManagement.FormFieldOption.GetFormFieldOptionsBySql(System.String)">
 <summary>
 Gets form field options using specific sql command
 </summary>
 <param name="sqlCommandText">Text of sql command</param>
 <returns>Collection of form field options</returns>
</member>
<member name="M:Dynamicweb.DataManagement.FormFieldOption.SetDefault(System.Int32,System.Int32)">
 <summary>
 Sets default form field option
 </summary>
 <param name="fieldID">Field identifier</param>
 <param name="optionID">Option identifier</param>
</member>
<member name="T:Dynamicweb.DataManagement.FormFieldOptionCollection">
 <summary>
 Represents collection of FormField options
 </summary>
 <seealso cref="!:System.Collections.Generic.List{Dynamicweb.DataManagement.FormFieldOption}" />
</member>
<member name="T:Dynamicweb.DataManagement.FormFieldOptionCollection.SortBy">
 <summary>
 SortBy enumeration to sort field options
 </summary>
</member>
<member name="F:Dynamicweb.DataManagement.FormFieldOptionCollection.SortBy.Text">
 <summary>
 Sort field options by text
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FormFieldOptionCollection.Sort(Dynamicweb.DataManagement.FormFieldOptionCollection.SortBy)">
 <summary>
 Sorts inner collection
 </summary>
 <param name="sortBy">Column to be used for sorting</param>
</member>
<member name="M:Dynamicweb.DataManagement.FormFieldOptionCollection.Sort(Dynamicweb.DataManagement.FormFieldOptionCollection.SortBy,System.Boolean)">
 <summary>
 Sorts inner collection
 </summary>
 <param name="sortBy">Column to be used for sorting</param>
 <param name="ascending">Direction of sorting</param>
</member>
<member name="M:Dynamicweb.DataManagement.FormFieldOptionCollection.RemoveById(System.Int32)">
 <summary>
 Removes element with specific id from inner collection
 </summary>
 <param name="id">ID of element to be removed</param>
</member>
<member name="T:Dynamicweb.DataManagement.FormFieldOptionCollection.FormFieldOptionComparer">
 <summary>
 Class FormFieldOptionComparer.
 </summary>
 <seealso cref="!:System.Collections.Generic.IComparer{Dynamicweb.DataManagement.FormFieldOption}" />
</member>
<member name="M:Dynamicweb.DataManagement.FormFieldOptionCollection.FormFieldOptionComparer.#ctor(Dynamicweb.DataManagement.FormFieldOptionCollection.SortBy,System.Boolean)">
 <summary>
 Initializes a new instance of the <see cref="T:Dynamicweb.DataManagement.FormFieldOptionCollection.FormFieldOptionComparer"/> class.
 </summary>
 <param name="sortBy">The sort by.</param>
 <param name="ascending">if set to <c>true</c> [ascending].</param>
</member>
<member name="M:Dynamicweb.DataManagement.FormFieldOptionCollection.FormFieldOptionComparer.Compare(Dynamicweb.DataManagement.FormFieldOption,Dynamicweb.DataManagement.FormFieldOption)">
 <summary>
 Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
 </summary>
 <param name="x">The first object to compare.</param>
 <param name="y">The second object to compare.</param>
 <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.</returns>
 <exception cref="T:System.ArgumentException">Unknown sorting</exception>
</member>
<member name="T:Dynamicweb.DataManagement.FormFrontend">
 <summary>
 Represents form frontend
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FormFrontend.GetContent">
 <summary>
 Gets module content
 </summary>
 <returns>String value</returns>
</member>
<member name="M:Dynamicweb.DataManagement.FormFrontend.GetFormRow(Dynamicweb.DataManagement.FormSetting,System.String,System.Int32)">
 return form row or null, if row id is not set
</member>
<member name="T:Dynamicweb.DataManagement.FormRenderer">
 <summary>
 Represents Form Renderer
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FormRenderer.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FormRenderer.#ctor(System.Int32)">
 <summary>
 Constructs new object with specific paragraphID
 </summary>
 <param name="paragraphId">ParagraphID value</param>
</member>
<member name="M:Dynamicweb.DataManagement.FormRenderer.#ctor(Dynamicweb.Frontend.PageView,System.Int32)">
 <summary>
 Constructs new object with specific PageView and paragraphID
 </summary>
 <param name="PageView">PageView object</param>
 <param name="paragraphId">ParagraphID value</param>
</member>
<member name="M:Dynamicweb.DataManagement.FormRenderer.RenderForm(Dynamicweb.DataManagement.FormSetting)">
 <summary>
 Renders form using default template
 </summary>
 <param name="form">FormSettings object</param>
 <returns>String result</returns>
</member>
<member name="M:Dynamicweb.DataManagement.FormRenderer.RenderForm(Dynamicweb.DataManagement.FormSetting,Dynamicweb.Rendering.Template)">
 <summary>
 Renders form using specific template
 </summary>
 <param name="form">FormSettings object</param>
 <param name="template">Specific template</param>
 <returns>String result</returns>
</member>
<member name="M:Dynamicweb.DataManagement.FormRenderer.RenderConfirmation(Dynamicweb.DataManagement.FormSetting,Dynamicweb.Rendering.Template,System.Boolean)">
 <summary>
 Renders confirmation
 </summary>
 <param name="form">FormSettings</param>
 <param name="template">Template</param>
 <param name="formSaved">Shows if form saved</param>
</member>
<member name="M:Dynamicweb.DataManagement.FormRenderer.RenderConfirmation(Dynamicweb.DataManagement.FormSetting,Dynamicweb.Rendering.Template,System.Boolean,Dynamicweb.DataManagement.FormSaveInfo)">
 <summary>
 Renders confirmation
 </summary>
 <param name="form">FormSettings</param>
 <param name="template">Template</param>
 <param name="formSaved">Shows if form saved</param>
</member>
<member name="T:Dynamicweb.DataManagement.FormSetting">
 <summary>
 Represents form settings
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.FormSetting.FormType">
 <summary>
 FormType enumeration to define how the form is generated
 </summary>
</member>
<member name="F:Dynamicweb.DataManagement.FormSetting.FormType.Unknown">
 <summary>
 Unknown or state not set
 </summary>
</member>
<member name="F:Dynamicweb.DataManagement.FormSetting.FormType.Manual">
 <summary>
 Manual form where the user will define it by them self
 </summary>
</member>
<member name="F:Dynamicweb.DataManagement.FormSetting.FormType.View">
 <summary>
 Using a view to create a form
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FormSetting.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FormSetting.FillRow(System.Data.DataRow)">
 <summary>
 Fills row with current object data
 </summary>
 <param name="row">DataRow object</param>
</member>
<member name="M:Dynamicweb.DataManagement.FormSetting.Fill(System.Data.IDataReader)">
 <summary>
 Fills current object with data of DataReader
 </summary>
 <param name="dataReader"></param>
</member>
<member name="M:Dynamicweb.DataManagement.FormSetting.Save">
 <summary>
 Saves form settings
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FormSetting.Delete(System.Int32)">
 <summary>
 Deetes form field specified by id
 </summary>
 <param name="id">ID of field to be deleted</param>
</member>
<member name="M:Dynamicweb.DataManagement.FormSetting.GetFormSettingById(System.Int32)">
 <summary>
 Gets FormSetting specified by ID
 </summary>
 <param name="id">ID of form setting</param>
 <returns>FormSetting object</returns>
</member>
<member name="M:Dynamicweb.DataManagement.FormSetting.GetFormSettings">
 <summary>
 Gets all FormSettings
 </summary>
 <returns>Collection of FormSettings</returns>
</member>
<member name="M:Dynamicweb.DataManagement.FormSetting.GetFormSettingsBySql(System.String)">
 <summary>
 Gets form settings using sql command
 </summary>
 <param name="sqlCommandText">Sql command text</param>
 <returns>Collection of form settings</returns>
</member>
<member name="T:Dynamicweb.DataManagement.FormSettingCollection">
 <summary>
 Represents form settings collection
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.FormSettingCollection.SortBy">
 <summary>
 Enum SortBy for soeting form settings
 </summary>
</member>
<member name="F:Dynamicweb.DataManagement.FormSettingCollection.SortBy.Name">
 <summary>
 Sort settings by name
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FormSettingCollection.Sort(Dynamicweb.DataManagement.FormSettingCollection.SortBy)">
 <summary>
 Sorts inner collection
 </summary>
 <param name="sortBy">Column to be used for sorting</param>
</member>
<member name="M:Dynamicweb.DataManagement.FormSettingCollection.Sort(Dynamicweb.DataManagement.FormSettingCollection.SortBy,System.Boolean)">
 <summary>
 Sorts inner collection
 </summary>
 <param name="sortBy">Column to be used for sorting</param>
 <param name="ascending">Sorting direction</param>
</member>
<member name="T:Dynamicweb.DataManagement.FormViewOption">
 <summary>
 Represents FormView option
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.FormViewOption.Text">
 <summary>
 Text
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.FormViewOption.Value">
 <summary>
 Value
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FormViewOption.GetFormViewOptions(System.Int32,System.String,System.String)">
 <summary>
 Gets form view options
 </summary>
 <param name="viewID">View ID</param>
 <param name="keyField">Key field</param>
 <param name="valueField">Value field</param>
 <returns></returns>
</member>
<member name="T:Dynamicweb.DataManagement.IOption">
 <summary>
 Interface IOption used for implementing a source for key/values used for options in the forms module.
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.IOption.Value">
 <summary>
 Gets or sets the value.
 </summary>
 <value>The value.</value>
</member>
<member name="P:Dynamicweb.DataManagement.IOption.Text">
 <summary>
 Gets or sets the text.
 </summary>
 <value>The text.</value>
</member>
<member name="T:Dynamicweb.DataManagement.AddInController">
 <summary>
 Renders add in control
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.AddInController.RenderControl(System.String,System.String)">
 <summary>
 Renders control
 </summary>
 <param name="typeName"></param>
 <param name="settings"></param>
 <returns>Rendered content</returns>
</member>
<member name="T:Dynamicweb.DataManagement.DefaultFormSaveProvider">
 <summary>
 Saves all form elements into the associated form
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.DefaultFormSaveProvider.Save(Dynamicweb.DataManagement.FormSetting,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
 <summary>
 Saves form settings
 </summary>
 <param name="formSettings">Form setting</param>
 <param name="keysAndValues">Keys ans values</param>
 <param name="settings">Settings</param>
 <returns>True if save is succedded</returns>
</member>
<member name="T:Dynamicweb.DataManagement.FormProperties">
 <summary>
 Collection of form properties
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.FormProperties.Events">
 <summary>
 List of FormSaveProvider
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.DataManagement.FormProperties.AllowUpdate">
 <summary>
 Allow update setting
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.FormProperties.UploadFolder">
 <summary>
 Upload folder path
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FormProperties.ContainsDefaultSaveProvider">
 <summary>
 Shows if FormProperty event collection contains instance of DefaultFormSaveProvider type
 </summary>
 <returns>True if collection contains instance of DefaultFormSaveProvider type</returns>
</member>
<member name="M:Dynamicweb.DataManagement.FormProperties.LoadProperties(Dynamicweb.Modules.Properties)">
 <summary>
 Load form properties
 </summary>
 <param name="properties">Set of properties to be loaded</param>
</member>
<member name="T:Dynamicweb.DataManagement.FormProperties.FormSaveProviderCollection">
 <summary>
 Collection of FormSaveProviders
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FormProperties.FormSaveProviderCollection.Tidy">
 <summary>
 Verifies, that one and only one DefaultSaveProvider is in the collection
 and makes sure, that it is the first element.
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.FormSave">
 <summary>
 FormSave class
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FormSave.CatchForm(Dynamicweb.DataManagement.FormSetting,System.String,Dynamicweb.DataManagement.FormProperties)">
 <summary>
 Catches form
 </summary>
 <param name="form">FormSetting</param>
 <param name="typeName">Name of Type</param>
 <param name="properties">Properties</param>
 <returns>FormSaveInfo object</returns>
</member>
<member name="T:Dynamicweb.DataManagement.FormSaveInfo">
 <summary>
 FormSaveInfo POCO. Is in use of FormSave mechanism
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.FormSaveInfo.SavedEvents">
 <summary>
 Set of SavedEvents
 </summary>
 <returns>Dictionary instance</returns>
</member>
<member name="P:Dynamicweb.DataManagement.FormSaveInfo.SavedValues">
 <summary>
 Set of SavedValues
 </summary>
 <returns>Dictionary instance</returns>
</member>
<member name="M:Dynamicweb.DataManagement.FormSaveInfo.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 Constructs new FormSaveInfo object
 </summary>
 <param name="savedValues"></param>
</member>
<member name="T:Dynamicweb.DataManagement.FormSaveManager">
 <summary>
 FormSaveManager class
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.FormSaveManager.Save(Dynamicweb.DataManagement.FormSetting,System.Collections.Generic.Dictionary{System.String,System.Object},Dynamicweb.DataManagement.FormProperties)">
 <summary>
 Saves form setting and its data
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.FormSaveProvider">
 <summary>
 Inherit this type and override the Save method to create your own form save handler.
 </summary>
 <example>
 <code description="Creating a form save provider" source="..\Dynamicweb\05 - Modules\Dynamicweb.DataManagement\Head\Dynamicweb.DataManagement\Form\Provider\MailFormSaveProvider.vb" lang="VB"></code>
 </example>
</member>
<member name="M:Dynamicweb.DataManagement.FormSaveProvider.Save(Dynamicweb.DataManagement.FormSetting,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
 <summary>
 Saves the specified form.
 </summary>
 <param name="Form">The form.</param>
 <param name="KeysAndValues">The keys and values.</param>
 <param name="Settings">The settings.</param><returns></returns>
</member>
<member name="M:Dynamicweb.DataManagement.FormSaveProvider.Save(Dynamicweb.DataManagement.FormSetting,System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 Saves the specified form.
 </summary>
 <param name="Form">The form.</param>
 <param name="KeysAndValues">The keys and values.</param><returns></returns>
</member>
<member name="T:Dynamicweb.DataManagement.MailFormSaveProvider">
 <summary>
 Send the form over mail
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.MailFormSaveProvider.GetOptions(System.String)">
 <summary>
 Gets options by name
 </summary>
 <param name="name">Name of option</param>
 <returns>Hash table of options</returns>
</member>
<member name="M:Dynamicweb.DataManagement.MailFormSaveProvider.Save(Dynamicweb.DataManagement.FormSetting,System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 Save form settings values
 </summary>
 <param name="formSettings">Form settings</param>
 <param name="keysAndValues">settings names and values</param>
 <returns>True if saved successFully</returns>
</member>
<member name="T:Dynamicweb.DataManagement.MailReceiptSaveProvider">
 <summary>
 Send a receipt via e-mail
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.MailReceiptSaveProvider.GetOptions(System.String)">
 <summary>
 Gets options by name
 </summary>
 <param name="name">Name of option</param>
 <returns>Hash table of options</returns>
</member>
<member name="M:Dynamicweb.DataManagement.MailReceiptSaveProvider.Save(Dynamicweb.DataManagement.FormSetting,System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 Save form settings values
 </summary>
 <param name="formSettings">Form settings</param>
 <param name="keysAndValues">settings names and values</param>
 <returns>True if saved successFully</returns>
</member>
<member name="T:Dynamicweb.DataManagement.SaveInCSVFile">
 <summary>
 Saves current configuration in csv-file
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.SaveInCSVFile.GetOptions(System.String)">
 <summary>
 Gets options by name
 </summary>
 <param name="name">Name of option</param>
 <returns>Hash table of options</returns>
</member>
<member name="M:Dynamicweb.DataManagement.SaveInCSVFile.Save(Dynamicweb.DataManagement.FormSetting,System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 Save form settings values
 </summary>
 <param name="formSettings">Form settings</param>
 <param name="keysAndValues">settings names and values</param>
 <returns>True if saved successFully</returns>
</member>
<member name="T:Dynamicweb.DataManagement.Notifications">
 <summary>
 Form notifications
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.Notifications.Publishing">
 <summary>
 Publishing Notifications.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.DataManagement.Notifications.Publishing.OnBeforeRenderArgs">
 <summary>
 OnBeforeRender arguments
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.Notifications.Publishing.OnAfterRenderArgs">
 <summary>
 OnAfterRender arguments
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.Notifications.Publishing.OnBeforeContentArgs">
 <summary>
 OnBeforeContent arguments
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.Notifications.Publishing.OnAfterContentArgs">
 <summary>
 OnAfterContent arguments
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.Notifications.Form">
 <summary>
 Form notifications
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.Notifications.Form.OnBeforeRenderArgs">
 <summary>
 OnBeforeRender arguments
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.Notifications.Form.OnAfterRenderArgs">
 <summary>
 OnAfterRendering arguments
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.Notifications.Form.OnBeforeContentArgs">
 <summary>
 OnBeforeContent arguments
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.Notifications.Form.OnAfterContentArgs">
 <summary>
 OnAfterContent arguments
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.Notifications.Form.OnNewsletterSubscribeArgs">
 <summary>
 ONNewsletterSubsrcibe arguments
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.Notifications.Form.OnBeforeConfirmationRenderArgs">
 <summary>
 OnBeforeConfirmationRender arguments
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.Notifications.Form.OnAfterConfirmationRenderArgs">
 <summary>
 OnAfter ConfirmationRender arguments
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.Notifications.Form.OnBeforeConfirmationContentArgs">
 <summary>
 OnBeforeConfirmationContent arguments
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.Notifications.Form.OnAfterConfirmationContentArgs">
 <summary>
 OnAfterConfirmationContent arguments
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.Notifications.Form.OnBeforeFormSaveArgs">
 <summary>
 BeforeFormSave arguments
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.Publishing">
 <summary>
 Publishing class
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.Publishing.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.Publishing.Fill(System.Data.IDataReader)">
 <summary>
 Fills current object with dataReader data
 </summary>
 <param name="dataReader">DataReader object</param>
</member>
<member name="M:Dynamicweb.DataManagement.Publishing.GetPublishingById(System.Int32)">
 <summary>
 Gets publishing by identifier
 </summary>
 <param name="id">Identifier</param>
 <returns>Publishing object</returns>
</member>
<member name="M:Dynamicweb.DataManagement.Publishing.GetPublishings">
 <summary>
 Gets all publishings of all available connection types
 </summary>
 <returns>Collection of publishings</returns>
</member>
<member name="M:Dynamicweb.DataManagement.Publishing.GetPublishings(System.Int32)">
 <summary>
 Gets all publishings by viewID
 </summary>
 <param name="viewID">View identifier</param>
 <returns>Collection of publisings</returns>
</member>
<member name="M:Dynamicweb.DataManagement.Publishing.GetPublishingsBySql(System.String)">
 <summary>
 Gets publishing collection using sql commnd text
 </summary>
 <param name="sqlCommandText">Text of sql command</param>
 <returns>Collection of publishings</returns>
</member>
<member name="M:Dynamicweb.DataManagement.Publishing.GetXMLOutput">
 <summary>
 Buildes xml representation of current object view
 </summary>
 <returns>String value</returns>
</member>
<member name="T:Dynamicweb.DataManagement.PublishingCollection">
 <summary>
 Represents collection of publishings
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.PublishingCollection.SortByName">
 <summary>
 Sorts inner collection by name
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.PublishingCollection.SortByName(System.Boolean)">
 <summary>
 Sorts inner collection by name
 </summary>
 <param name="ascending">Sort direction</param>
</member>
<member name="T:Dynamicweb.DataManagement.PublishingFrontend">
 <summary>
 Frontend for publishing content
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.PublishingFrontend.GetContent">
 <summary>
 Gets modifed arguments in string representation
 </summary>
 <returns>String value vith modified args</returns>
</member>
<member name="T:Dynamicweb.DataManagement.PublishingRenderer">
 <summary>
 Represents PublishingRenderer
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.PublishingRenderer.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.PublishingRenderer.#ctor(System.Int32)">
 <summary>
 Constructs new object with paragraphID property
 </summary>
 <param name="paragraphID">ParagraphID</param>
</member>
<member name="M:Dynamicweb.DataManagement.PublishingRenderer.#ctor(Dynamicweb.Frontend.PageView,System.Int32)">
 <summary>
 Constructs new object with PageView and paragraphID property
 </summary>
 <param name="pageView">PageView object</param>
 <param name="paragraphID">ParagraphID</param>
</member>
<member name="M:Dynamicweb.DataManagement.PublishingRenderer.RenderPublishing(Dynamicweb.DataManagement.Publishing,Dynamicweb.Rendering.Template)">
 <summary>
 Renders module content using template
 </summary>
 <param name="publishing">Publishing object</param>
 <param name="template">Template</param>
 <returns>String value</returns>
</member>
<member name="M:Dynamicweb.DataManagement.PublishingRenderer.IsSelectedRow(System.Int32,System.Data.DataRow,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
 <summary>
 Shows if specific row is selected
 </summary>
 <param name="rowIndex">Row index</param>
 <param name="row">Row object</param>
 <param name="keyValuePairs">kv-pairs</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.DataManagement.PublishingRenderer.RenderDetailTemplate(Dynamicweb.DataManagement.Publishing,System.String,System.String)">
 <summary>
 Renders details template
 </summary>
 <param name="publishing">Publishing object</param>
 <param name="templatePath">Path to template file</param>
 <param name="type">Type</param>
 <returns>Temlate object</returns>
</member>
<member name="M:Dynamicweb.DataManagement.PublishingRenderer.RenderListTemplate(Dynamicweb.DataManagement.Publishing,System.String,System.String)">
 <summary>
 Renders list template
 </summary>
 <param name="publishing">Publishing object</param>
 <param name="templatePath">Path to template file</param>
 <param name="type">Type</param>
 <returns>Template object</returns>
</member>
<member name="T:Dynamicweb.DataManagement.PublishingType">
 <summary>
 Represents publishing type
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.ConditionalClause">
 <summary>
 Represents conditional clause
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.ConditionalClause.CompareOperator">
 <summary>
 Compare operator type
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.ConditionalClause.BooleanOperator">
 <summary>
 Boolean operator type
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.ConditionalClause.Field">
 <summary>
 Field
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.DataManagement.ConditionalClause.Value">
 <summary>
 Value
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.DataManagement.ConditionalClause.Operator">
 <summary>
 Operator for clause (=, NOT IN, etc.)
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.ConditionalClause.Condition">
 <summary>
 Conditional for clause (AND, OR)
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.ConditionalClause.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.ConditionalClause.#ctor(System.String,System.String,Dynamicweb.DataManagement.ConditionalClause.CompareOperator,Dynamicweb.DataManagement.ConditionalClause.BooleanOperator)">
 <summary>
 Constracts new Conditional clause
 </summary>
 <param name="field">Field</param>
 <param name="value">Value</param>
 <param name="[operator]">Operator</param>
 <param name="condition">Condition</param>
</member>
<member name="M:Dynamicweb.DataManagement.ConditionalClause.#ctor(System.String,System.String,System.String,System.String)">
 <summary>
 Constracts new Conditional clause
 </summary>
 <param name="field">Field</param>
 <param name="value">Value</param>
 <param name="[operator]">Operator</param>
 <param name="condition">Condition</param>
</member>
<member name="M:Dynamicweb.DataManagement.ConditionalClause.OperatorFromString(System.String)">
 <summary>
 Converts string to CompareOperator
 </summary>
 <param name="[operator]">string value of compare oerator</param>
 <returns>CompareOperator</returns>
</member>
<member name="M:Dynamicweb.DataManagement.ConditionalClause.OperatorAsText">
 <summary>
 Converts compare operator to string
 </summary>
 <returns>String representation</returns>
</member>
<member name="M:Dynamicweb.DataManagement.ConditionalClause.ConditionFromString(System.String)">
 <summary>
 Converts string value to Boolean Operator
 </summary>
 <param name="condition">Condition</param>
 <returns>Boolean operator</returns>
</member>
<member name="M:Dynamicweb.DataManagement.ConditionalClause.ConditionAsText">
 <summary>
 Represents condition as string
 </summary>
 <returns>String value</returns>
</member>
<member name="T:Dynamicweb.DataManagement.Criteria">
 <summary>
 Query expression to execute.
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.Criteria.OrderBy">
 <summary>
 Order by. Nullable.
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.CriteriaUtility">
 <summary>
 Set of auxiliary methods for working with Criteria class
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.CriteriaUtility.SelectAllCriteria(System.String)">
 <summary>
 Selects all criteria for specified table
 </summary>
 <param name="table">Criteria object instance</param>
 <returns></returns>
</member>
<member name="M:Dynamicweb.DataManagement.CriteriaUtility.CustomCriteria(System.String)">
 <summary>
 Creates criteria instance with Cutom field defined by query
 </summary>
 <param name="query">Query text</param>
 <returns>New Criteria instance with Custom field</returns>
</member>
<member name="M:Dynamicweb.DataManagement.CriteriaUtility.CloneCriteria(Dynamicweb.DataManagement.Criteria)">
 <summary>
 Creates new Criteria object instance
 </summary>
 <param name="criteria">Source Criteria instance</param>
 <returns>New Criteria object instance</returns>
</member>
<member name="M:Dynamicweb.DataManagement.CriteriaUtility.XmlToCriteria(System.String,System.Xml.XmlDocument)">
 <summary>
 Creates criteria object using XmlDocument data
 </summary>
 <param name="tableName">Table name</param>
 <param name="xmlDocument">XmlDocument instance</param>
 <returns>Criteria object instance</returns>
</member>
<member name="M:Dynamicweb.DataManagement.CriteriaUtility.CriteriaToXml(Dynamicweb.DataManagement.Criteria)">
 <summary>
 Creates XmlDocument object based on criteria data
 </summary>
 <param name="criteria">Criteria object instance</param>
 <returns>XmlDocument with criteria data</returns>
</member>
<member name="T:Dynamicweb.DataManagement.OrderByClause">
 <summary>
 Order by clause for query.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Dynamicweb.DataManagement.OrderByClause.OrderBy">
 <summary>
 Represents OrderBy sort direction
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.OrderByClause.FieldName">
 <summary>
 Name of field
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.DataManagement.OrderByClause.Direction">
 <summary>
 Sort order direction
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.DataManagement.OrderByClause.#ctor(System.String,Dynamicweb.DataManagement.OrderByClause.OrderBy)">
 <summary>
 Constructs new OrderByClause
 </summary>
 <param name="fieldName">Field name</param>
 <param name="direction">Sort order direction</param>
</member>
<member name="M:Dynamicweb.DataManagement.OrderByClause.#ctor(System.String,System.String)">
 <summary>
 Constructs new OrderByClause
 </summary>
 <param name="fieldName">Field name</param>
 <param name="direction">Sort order direction</param>
</member>
<member name="M:Dynamicweb.DataManagement.OrderByClause.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.OrderByClause.DirectionText">
 <summary>
 Shows direction field value as string
 </summary>
 <returns></returns>
</member>
<member name="T:Dynamicweb.DataManagement.SelectClause">
 <summary>
 Simple select clause for query. Can be select * (all) or select [list of fields]
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.SelectClause.All">
 <summary>
 Defines "select all" behavior
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.DataManagement.SelectClause.Fields">
 <summary>
 List of fields
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.DataManagement.SelectClause.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.SelectClause.#ctor(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Constructs new Clause using fields data
 </summary>
 <param name="fields">Collection of fields</param>
</member>
<member name="T:Dynamicweb.DataManagement.WhereClause">
 <summary>
 Where clause for query.
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.WhereClause.Conditions">
 <summary>
 List of conditions
 </summary>    
</member>
<member name="M:Dynamicweb.DataManagement.WhereClause.#ctor">
 <summary>
 Default constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.WhereClause.#ctor(System.Collections.Generic.IEnumerable{Dynamicweb.DataManagement.ConditionalClause})">
 <summary>
 Constructor with a set of conditional clauses
 </summary>
 <param name="conditions"></param>
</member>
<member name="T:Dynamicweb.DataManagement.ViewColumn">
 <summary>
 epresents ViewColumn
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.ViewColumn.Name">
 <summary>
 ViewColumn Name
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.DataManagement.ViewColumn.IsKey">
 <summary>
 Shows if ViewColumn is a key column
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.DataManagement.ViewColumn.Type">
 <summary>
 Defines ViewColumn data type
 </summary>
 <returns>TypeCode</returns>
</member>
<member name="M:Dynamicweb.DataManagement.ViewColumn.#ctor">
 <summary>
 Defult constructor
 </summary>
</member>
<member name="T:Dynamicweb.DataManagement.ViewSetting">
 <summary>
 View settings class
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.ViewSetting.Query">
 <summary>
 Query
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.ViewSetting.Name">
 <summary>
 Name
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.DataManagement.ViewSetting.CurrentTestVariables">
 <summary>
 Gets and sets current test varuables
 </summary>
 <returns>Dictionary of kv-pairs of test variables</returns>
</member>
<member name="P:Dynamicweb.DataManagement.ViewSetting.IsVariablesListComplete">
 <summary>
 Shows if variables list complete
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.DataManagement.ViewSetting.ConnectionID">
 <summary>
 Connection ID
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.DataManagement.ViewSetting.ConnectionDBName">
 <summary>
 Database name
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.DataManagement.ViewSetting.Columns">
 <summary>
 View columns
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.DataManagement.ViewSetting.Data">
 <summary>
 Data
 </summary>
 <returns>DataTable object</returns>
</member>
<member name="P:Dynamicweb.DataManagement.ViewSetting.Connection">
 <summary>
 Connection
 </summary>
 <returns>DMConnection object</returns>
</member>
<member name="P:Dynamicweb.DataManagement.ViewSetting.IsDesigner">
 <summary>
 Shows if current ViewSetting is designer
 </summary>
 <returns></returns>
</member>
<member name="P:Dynamicweb.DataManagement.ViewSetting.TableName">
 <summary>
 Name of table
 </summary>
</member>
<member name="P:Dynamicweb.DataManagement.ViewSetting.AllQueryVariables">
 <summary>
 Collection of all query variables
 </summary>
 <returns>IEnumerable(Of QueryVariable)</returns>
</member>
<member name="M:Dynamicweb.DataManagement.ViewSetting.#ctor">
 <summary>
 Defaulkt constructor
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.ViewSetting.FillRow(System.Data.DataRow)">
 <summary>
 Fills cirret ViewSetting with DataRow data
 </summary>
 <param name="row">DataRow object</param>
</member>
<member name="M:Dynamicweb.DataManagement.ViewSetting.Fill(System.Data.IDataReader)">
 <summary>
 Fills ViewSetting object with DataReader data
 </summary>
 <param name="dataReader">DataReader object</param>
</member>
<member name="M:Dynamicweb.DataManagement.ViewSetting.GetViewSettingById(System.Int32)">
 <summary>
 Gets ViewSetting by specified ID
 </summary>
 <param name="id">ViewSetting ID</param>
 <returns>ViewSetting object. If ID is invalid the result will be 'Nothing'</returns>
</member>
<member name="M:Dynamicweb.DataManagement.ViewSetting.GetDataForCriteria(Dynamicweb.DataManagement.Criteria)">
 <summary>
 Gets data by createria
 </summary>
 <param name="criteria">Criteria object</param>
 <returns>DataTable object with filtered data</returns>
</member>
<member name="M:Dynamicweb.DataManagement.ViewSetting.GetViewSettings">
 <summary>
 Gets collection of ViewSettings
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.DataManagement.ViewSetting.GetViewSettingsBySql(System.String)">
 <summary>
 Gets ViewSettings using sql command text
 </summary>
 <param name="sqlCommandText">Sql command text</param>
 <returns>Collection of ViewSettings</returns>
</member>
<member name="M:Dynamicweb.DataManagement.ViewSetting.GetXML">
 <summary>
 Provides current object data in xml format
 </summary>
 <returns></returns>
</member>
<member name="M:Dynamicweb.DataManagement.ViewSetting.GetNativeQueryString">
 <summary>
 Provides current connection data cruterau as native string
 </summary>
 <returns>String result</returns>
</member>
<member name="T:Dynamicweb.DataManagement.ViewSettingCollection">
 <summary>
 Collection of ViewSettings
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.ViewSettingCollection.SortByName">
 <summary>
 Sorts inner collection by Name
 </summary>
</member>
<member name="M:Dynamicweb.DataManagement.ViewSettingCollection.SortByName(System.Boolean)">
 <summary>
 Sorts inner collection by name
 </summary>
 <param name="ascending">Sorting diredtion</param>
</member>
</members>
</doc>
