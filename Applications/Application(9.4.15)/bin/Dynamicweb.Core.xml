<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dynamicweb.Core</name>
    </assembly>
    <members>
        <member name="T:Dynamicweb.Core.ApplicationResponse`1">
            <summary>
            The Generic ApplicationResponse class gives information about the result of a given application service operation.
            </summary>
            <typeparam name="T">The Generic Type that the Response handles</typeparam>
        </member>
        <member name="M:Dynamicweb.Core.ApplicationResponse`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="M:Dynamicweb.Core.ApplicationResponse`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamicweb.Core.ApplicationResponse`1"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Dynamicweb.Core.ApplicationResponse`1.#ctor">
            <summary>
            Initializes the Response class with a value indicating the success or failure of the operation returning the response
            </summary>
            <remarks>Initializes as succeded.</remarks>
        </member>
        <member name="M:Dynamicweb.Core.ApplicationResponse`1.#ctor(System.Boolean)">
            <summary>
            Initializes the Response class with a value indicating the success or failure of the operation returning the response
            </summary>
            <param name="succeeded">A value indicating the success or failure of the operation returning the response</param>
        </member>
        <member name="M:Dynamicweb.Core.ApplicationResponse`1.#ctor(System.Boolean,`0)">
            <summary>
            Initializes the Response class with a value indicating the success or failure of the operation returning the response, along with any relevant return data of the generic type T
            </summary>
            <param name="succeeded">A value indicating the success or failure of the operation returning the response</param>
            <param name="data">The data returned from the operation</param>
        </member>
        <member name="M:Dynamicweb.Core.ApplicationResponse`1.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the Response class with an Exception indicating what went wrong in the operation returning the response
            </summary>
            <param name="exceptionData">A Exception explaining why the operation failed</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Dynamicweb.Core.ApplicationResponse`1.#ctor(System.Exception,`0)">
            <summary>
            Initializes a new instance of the Response class with an Exception indicating what went wrong in the operation returning the response
            </summary>
            <param name="exceptionData">A Exception explaining why the operation failed</param>
            <param name="data">The data returned from the operation</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Dynamicweb.Core.ApplicationResponse`1.Data">
            <summary>
            Gets the data associated with the result of the operation returning the response
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.ApplicationResponse`1.ExceptionData">
            <summary>
            Gets any exception data associated with a non successful response
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.ApplicationResponse`1.Succeeded">
            <summary>
            Gets a value indicating the success or failure of the operation
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.ApplicationResponse`1.Message">
            <summary>
            Gets the message explaining why the operation failed
            </summary>
        </member>
        <member name="T:Dynamicweb.Core.ApplicationResponse">
            <summary>
            The ApplicationResponse class gives information about the result of a given application service operation.
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.ApplicationResponse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamicweb.Core.ApplicationResponse"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Dynamicweb.Core.ApplicationResponse.#ctor">
            <summary>
            Initializes the Response class with a value indicating the success or failure of the operation returning the response
            </summary>
            <remarks>Initializes as succeded.</remarks>
        </member>
        <member name="M:Dynamicweb.Core.ApplicationResponse.#ctor(System.Boolean)">
            <summary>
            Initializes the Response class with a value indicating the success or failure of the operation returning the response
            </summary>
            <param name="succeeded">A value indicating the success or failure of the operation returning the response</param>
        </member>
        <member name="M:Dynamicweb.Core.ApplicationResponse.#ctor(System.Boolean,System.Object)">
            <summary>
            Initializes the Response class with a value indicating the success or failure of the operation returning the response, along with any relevant return data of the generic type T
            </summary>
            <param name="succeeded">A value indicating the success or failure of the operation returning the response</param>
            <param name="data">The data returned from the operation</param>
        </member>
        <member name="M:Dynamicweb.Core.ApplicationResponse.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the Response class with an Exception indicating what went wrong in the operation returning the response
            </summary>
            <param name="exceptionData">A Exception explaining why the operation failed</param>
        </member>
        <member name="M:Dynamicweb.Core.ApplicationResponse.#ctor(System.Exception,System.Object)">
            <summary>
            Initializes a new instance of the Response class with an Exception indicating what went wrong in the operation returning the response
            </summary>
            <param name="exceptionData">A Exception explaining why the operation failed</param>
            <param name="data">The data returned from the operation</param>
        </member>
        <member name="T:Dynamicweb.Core.AuditedEntity">
            <summary>
            The AuditedEntity class holds information about a given entity and when and by who it was audited
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.AuditedEntity.CreatedAt">
            <summary>
            Gets the created date and time.
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.AuditedEntity.CreatedBy">
            <summary>
            Gets the user id of the user who created the entity.
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.AuditedEntity.CreatedByName">
            <summary>
            Gets the name of the user who created the entity.
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.AuditedEntity.LastModifiedAt">
            <summary>
            Gets the last modified date and time.
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.AuditedEntity.LastModifiedBy">
            <summary>
            Gets the last modified by date and time.
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.AuditedEntity.LastModifiedByName">
            <summary>
            Gets the name of user who last modified the entity.
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.AuditedEntity.#ctor">
            <summary>
            Private Empty Constructor for supporting xml serialization
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.AuditedEntity.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamicweb.Core.AuditedEntity"/> class.
            </summary>
            <param name="created">The created date and time.</param>
            <param name="updated">The updated date and time.</param>
        </member>
        <member name="M:Dynamicweb.Core.AuditedEntity.#ctor(System.DateTime,System.String,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamicweb.Core.AuditedEntity"/> class.
            </summary>
            <param name="created">The created date and time.</param>
            <param name="createdBy">The user id of the user who created the entity.</param>
            <param name="updated">The updated date and time.</param>
            <param name="updatedBy">The user id of the user who last updated the entity.</param>
        </member>
        <member name="M:Dynamicweb.Core.AuditedEntity.#ctor(System.DateTime,System.String,System.String,System.DateTime,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamicweb.Core.AuditedEntity" /> class.
            </summary>
            <param name="created">The created date and time.</param>
            <param name="createdBy">The user id of the user who created the entity.</param>
            <param name="createdByName">Name of the user created the entity.</param>
            <param name="updated">The updated date and time.</param>
            <param name="updatedBy">The user id of the user who last updated the entity.</param>
            <param name="updatedByName">Name of the user who last updated the entity.</param>
        </member>
        <member name="M:Dynamicweb.Core.AuditedEntity.#ctor(System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamicweb.Core.AuditedEntity"/> class.
            </summary>
            <param name="created">The created date and time.</param>
            <param name="createdBy">The user id of the user who created the entity.</param>
        </member>
        <member name="M:Dynamicweb.Core.AuditedEntity.MarkAsUpdated(System.String)">
            <summary>
            Marks the entity as updated.
            </summary>
            <param name="updatedBy">The user id of the user who updated the entity.</param>
            <returns>AuditedEntity.</returns>
        </member>
        <member name="M:Dynamicweb.Core.AuditedEntity.MarkAsUpdated">
            <summary>
            Marks as updated.
            </summary>
            <returns>AuditedEntity.</returns>
        </member>
        <member name="M:Dynamicweb.Core.AuditedEntity.TranslateName(System.String)">
            <summary>
            Translates a created by name or an updated by name from "Angel" to "System administrator"
            </summary>
            <param name="name">The name to translate</param>
            <returns>A string representing a System administrator if the name equals Angel</returns>
        </member>
        <member name="T:Dynamicweb.Core.Converter">
            <summary>
            The <see cref="T:Dynamicweb.Core.Converter"/> class provides methods for converting objects into other types. All methods are guaranteed to return a valid default type.
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToBoolean(System.Object)">
            <summary>
            Tries to parse/convert the object to a boolean and return the value of this result. If this isn't possible, false is returned instead.
            </summary>
            <param name="value">Boolean object to determine validity for.</param>
            <returns>The value of a valid boolean object (<paramref name="value"/>). In all other cases <c>false</c>.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToBoolean(System.String)">
            <summary>
            Checks the input string for a true/false statement and returns it as a Boolean.
            </summary>
            <param name="value"></param>
            <returns>Returns a Boolean parsed from the input string.</returns>
            <remarks>
            Methos is case-insensitive.
            If the input string is set to an empty string, null, "false", "0", "off" or "no" it returns <c>false</c>.
            Otherwise <c>true</c> is returned.
            </remarks>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToDateTime(System.Object)">
            <summary>
            Parses an object to a DateTime if it represents a DateTime. The default value is returned if the object does not represent a DateTime.
            </summary>
            <param name="value">The object to parse.</param>
            <returns>The DateTime represented by the given object; default(DateTime) if the object cannot be parsed.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToDateTime(System.Int64)">
            <summary>
            Parses an object to a DateTime if it represents a DateTime. The default value is returned if the object does not represent a DateTime.
            </summary>
            <param name="value">The object to parse.</param>
            <returns>The DateTime represented by the given object; default(DateTime) if the object cannot be parsed.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToDateTime(System.Object,System.DateTime)">
            <summary>
            Parses an object to a DateTime if it represents a DateTime. The default value is returned if the object does not represent a DateTime.
            </summary>
            <param name="value">The object to parse.</param>
            <param name="defaultValue">The default value for when the conversion fails</param>
            <returns>The DateTime represented by the given object; the default value if the object cannot be parsed.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToDateTime(System.String,System.DateTime)">
            <summary>
            Parses a string to a DateTime if it represents a DateTime. The default value is returned if the string does not represent a DateTime.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="defaultValue">The default value for when the conversion fails</param>
            <returns>The DateTime represented by the given string; the default value if the string cannot be parsed.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToDateTimeLegacy(System.Object)">
            <summary>
            Determines whether or not an object is 'something' (as opposed to nothing), and
            if the object type is a date. If so, the function returns the value of the date
            object. In all other cases Now is returned.
            </summary>
            <param name="value"></param>
            <returns>The value of a valid date object (<paramref name="value"/>). In all other cases Now.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToDecimal(System.String)">
            <summary>
            Parses a string into a decimal. If the string cannot be parsed into an decimal, the default value is returned.
            The input is normalized.
            </summary>
            <param name="value">The string to parse.</param>
            <returns>The integer represented by the given string; the default value is returned if the value cannot be parsed.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToDecimal(System.String,System.Boolean)">
            <summary>
            Parses a string into a decimal. If the string cannot be parsed into a decimal, the default value is returned.
            The input is parsed using <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="normalizeInput">If <c>true</c> the input is normalized; otherwise the input is not normalized.</param>
            <returns>The decimal represented by the given string; the default value is returned if the value cannot be parsed.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToDecimal(System.Object)">
            <summary>
            Parses the given object into a decimal if possible.
            </summary>
            <param name="value">The object to parse.</param>
            <returns>The decimal represented by the given object; the default value is returned if the value cannot be parsed.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToDouble(System.String)">
            <summary>
            Parses a string into a double. If the string cannot be parsed into a double, the default value is returned.
            The input is normalized.
            </summary>
            <param name="value">The string to parse.</param>
            <returns>The double represented by the given string; the default value is returned if the value cannot be parsed.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToDouble(System.String,System.Boolean)">
            <summary>
            Parses a string into a double. If the string cannot be parsed into a double, the default value is returned.
            The input is parsed using <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="normalizeInput">If <c>true</c> the input is normalized; otherwise the input is not normalized.</param>
            <returns>The double represented by the given string; the default value is returned if the value cannot be parsed.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToDouble(System.Object)">
            <summary>
            Parses the given object into a double if possible.
            </summary>
            <param name="value">The object to parse.</param>
            <returns>The double represented by the given object; the default value is returned if the value cannot be parsed.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.GetGuid">
            <summary>
            Gets a new guid object that is not <see cref="F:System.Guid.Empty"/>.
            </summary>
            <returns>A guid object.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.GetGuidStringWithDashes">
            <summary>
            Gets the string representation of a new guid object.
            The string contains dashes.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.GetGuidStringWithDashes(System.Guid)">
            <summary>
            Gets the string representation of the given guid object.
            The string contains dashes.
            </summary>
            <param name="value">The guid to get the string representation of.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.GetGuidString">
            <summary>
            Gets the string representation of a new guid object.
            The string does not contain dashes.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.GetGuidString(System.Guid)">
            <summary>
            Gets the string representation of the given guid object.
            The string does not contain dashes.
            </summary>
            <param name="value">The guid to get the string representation of.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.IsGuid(System.String)">
            <summary>
            Determines whether the specified value is a guid.
            String represenations that contain dashes and string representations that do not contain dashes can be parsed.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value is a guid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.IsGuid(System.Object)">
            <summary>
            Determines whether the specified value is a guid.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value is a guid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToGuid(System.String)">
            <summary>
            Parses the string representation of a guid.
            String representations with dashes and string representations without dashes can be parsed.
            </summary>
            <param name="value">The value.</param>
            <returns>The guid that represents the given value if it can be parsed; otherwise <see cref="F:System.Guid.Empty"/>.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToGuid(System.Object)">
            <summary>
            Parses the object into a guid if possible.
            </summary>
            <param name="value">The value.</param>
            <returns>The guid that represents the given value if it can be parsed; otherwise <see cref="F:System.Guid.Empty"/>.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToInt32(System.String)">
            <summary>
            Parses a string into an integer. If the string cannot be parsed into an integer, the default value is returned.
            The input is normalized.
            </summary>
            <param name="value">The string to parse.</param>
            <returns>The integer represented by the given string; the default value is returned if the value cannot be parsed.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToInt32(System.String,System.Boolean)">
            <summary>
            Parses a string into an integer. If the string cannot be parsed into an integer, the default value is returned.
            The input is parsed using <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="normalizeInput">If <c>true</c> is normalized; otherwise the input is not normalized.</param>
            <returns>The integer represented by the given string; the default value is returned if the value cannot be parsed.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToInt32(System.Object)">
            <summary>
            Parses the given object into an integer if possible.
            </summary>
            <param name="value">The object to parse.</param>
            <returns>The integer represented by the given object; the default value is returned if the value cannot be parsed.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToInt64(System.String)">
            <summary>
            Parses a string into a long. If the string cannot be parsed into a long, the default value is returned.
            The input is normalized.
            </summary>
            <param name="value">The string to parse.</param>
            <returns>The long represented by the given string; the default value is returned if the value cannot be parsed.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToInt64(System.String,System.Boolean)">
            <summary>
            Parses a string into a long. If the string cannot be parsed into a long, the default value is returned.
            The input is parsed using <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="normalizeInput">If <c>true</c> the input is normalized; otherwise the input is not normalized.</param>
            <returns>The long represented by the given string; the default value is returned if the value cannot be parsed.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToInt64(System.Object)">
            <summary>
            Parses the given object into a long if possible.
            </summary>
            <param name="value">The object to parse.</param>
            <returns>The long represented by the given object; the default value is returned if the value cannot be parsed.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.ToString(System.Object)">
            <summary>
            Parses an object into a the string that it represents. If <c>null</c> is passed, the empty string is returned.
            </summary>
            <param name="value">The object to pass to a string.</param>
            <returns>Returns the string representation of the given object; the empty string if the given object is <c>null</c>.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.TryParseEnum``1(System.Int32,``0@)">
            <summary>
            Converts the value to a enum value. Defaults to default value of enum, or first defined enum, if '0' is not a valid enum value.
            </summary>
            <param name="value">Enum value</param>
            <param name="result">Resulting enum</param>
            <returns>isValidEnumValue</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.TryParseEnum``1(System.String,``0@)">
            <summary>
            Converts the value to a enum value. Defaults to default value of enum, or first defined enum, if '0' is not a valid enum value.
            </summary>
            <param name="value">Enum value</param>
            <param name="result">Resulting enum</param>
            <returns>isValidEnumValue</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.EnsureValidEnum``1(``0,``0@)">
            <summary>
            .Net's integer to enum conversion allows values that are not part of the enum. When that is the case, the enum is simply 
            assigned a short value that is not part of the enum. This fix checks to see that the enum can be converted to a meaningful
            string representation of the enum, takes the first character and checks to see if this character is a number. If it is,
            then the conversion has allowed a value that does not exist in the enum, and a default value should be used instead.
            </summary>
            <remarks>Enum.IsDefined does not work for bitwise enums</remarks>
            <param name="enumValue">Enum that needs to be fixed</param>
            <param name="result">Fixed enum</param>
            <returns>isValidEnumValue</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.IsValidEnumValue``1(``0)">
            <summary>
            Tests the enum to see if it is a valid value for the specified enum type.
            </summary>
            <remarks></remarks>
            <typeparam name="T">Enum type</typeparam>
            <param name="value">Enum value</param>
            <returns>isValidEnumValue</returns>
        </member>
        <member name="M:Dynamicweb.Core.Converter.NormalizeNumberString(System.String)">
            <summary>
            Normalizes the input to be used with the TryParse methods of numbers, i.e., int, double, long and decimal.
            Normalized format means ',' (comma) is used as thousand separator and '.' (period) is used as decimal separator.
            Corresponds to <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo"/>.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Dynamicweb.Core.Ensure">
            <summary>
            Helper class that will throw exceptions when conditions are not satisfied.
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Ensure.That(System.Boolean,System.String)">
            <summary>
            Ensures that the given expression is true
            </summary>
            <exception cref="T:System.Exception">Exception thrown if false condition</exception>
            <param name="condition">Condition to test/ensure</param>
            <param name="message">Message for the exception</param>
            <exception cref="T:System.Exception">Thrown when <paramref name="condition"/> is false</exception>
        </member>
        <member name="M:Dynamicweb.Core.Ensure.That``1(System.Boolean,System.String)">
            <summary>
            Ensures that the given expression is true
            </summary>
            <typeparam name="TException">Type of exception to throw</typeparam>
            <param name="condition">Condition to test/ensure</param>
            <param name="message">Message for the exception</param>
            <exception cref="T:System.Exception">Thrown when <paramref name="condition"/> is false</exception>
            <remarks>TException must have a constructor that takes a single string</remarks>
        </member>
        <member name="M:Dynamicweb.Core.Ensure.Not``1(System.Boolean,System.String)">
            <summary>
            Ensures given condition is false
            </summary>
            <typeparam name="TException">Type of exception to throw</typeparam>
            <param name="condition">Condition to test</param>
            <param name="message">Message for the exception</param>
            <exception cref="T:System.Exception">Thrown when <paramref name="condition"/> is true</exception>
            <remarks>TException must have a constructor that takes a single string</remarks>
        </member>
        <member name="M:Dynamicweb.Core.Ensure.Not(System.Boolean,System.String)">
            <summary>
            Ensures given condition is false
            </summary>
            <param name="condition">Condition to test</param>
            <param name="message">Message for the exception</param>
            <exception cref="T:System.Exception">Thrown when <paramref name="condition"/> is true</exception>
        </member>
        <member name="M:Dynamicweb.Core.Ensure.NotNull(System.Object,System.String)">
            <summary>
            Ensures given object is not null
            </summary>
            <param name="value">Value of the object to test for null reference</param>
            <param name="message">Message for the Null Reference Exception</param>
            <exception cref="T:System.NullReferenceException">Thrown when <paramref name="value"/> is null</exception>
        </member>
        <member name="M:Dynamicweb.Core.Ensure.Equal``1(``0,``0,System.String)">
            <summary>
            Ensures given objects are equal
            </summary>
            <typeparam name="T">Type of objects to compare for equality</typeparam>
            <param name="left">First Value to Compare</param>
            <param name="right">Second Value to Compare</param>
            <param name="message">Message of the exception when values equal</param>
            <exception cref="T:System.Exception">Exception is thrown when <paramref name="left"/> not equal to <paramref name="right"/></exception>
            <remarks>Null values will cause an exception to be thrown</remarks>
        </member>
        <member name="M:Dynamicweb.Core.Ensure.NotEqual``1(``0,``0,System.String)">
            <summary>
            Ensures given objects are not equal
            </summary>
            <typeparam name="T">Type of objects to compare for equality</typeparam>
            <param name="left">First Value to Compare</param>
            <param name="right">Second Value to Compare</param>
            <param name="message">Message of the exception when values equal</param>
            <exception cref="T:System.Exception">Thrown when <paramref name="left"/> equal to <paramref name="right"/></exception>
            <remarks>Null values will cause an exception to be thrown</remarks>
        </member>
        <member name="M:Dynamicweb.Core.Ensure.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>
            Ensures given collection contains a value that satisfied a predicate
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="collection">Collection to test</param>
            <param name="predicate">Predicate where one value in the collection must satisfy</param>
            <param name="message">Message of the exception if value not found</param>
            <exception cref="T:System.Exception">Thrown if collection is null, empty or doesn't contain a value that satisfies <paramref name="predicate"/></exception>
        </member>
        <member name="M:Dynamicweb.Core.Ensure.Items``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>
            Ensures ALL items in the given collection satisfy a predicate
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="collection">Collection to test</param>
            <param name="predicate">Predicate that ALL values in the collection must satisfy</param>
            <param name="message">Message of the exception if not all values are valid</param>
            <exception cref="T:System.Exception">Thrown if collection is null, empty or not all values satisfies <paramref name="predicate"/></exception>
        </member>
        <member name="M:Dynamicweb.Core.Ensure.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Ensures given string is not null or empty
            </summary>
            <param name="value">String value to compare</param>
            <param name="message">Message of the exception if value is null or empty</param>
            <exception cref="T:System.Exception">string value is null or empty</exception>
        </member>
        <member name="T:Dynamicweb.Core.Ensure.Argument">
            <summary>
            Argument-specific ensure methods
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Ensure.Argument.Is(System.Boolean,System.String)">
            <summary>
            Ensures given condition is true
            </summary>
            <param name="condition">Condition to test</param>
            <param name="message">Message of the exception if condition fails</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="condition"/> is false</exception>
        </member>
        <member name="M:Dynamicweb.Core.Ensure.Argument.IsNot(System.Boolean,System.String)">
            <summary>
            Ensures given condition is false
            </summary>
            <param name="condition">Condition to test</param>
            <param name="message">Message of the exception if condition is true</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="condition"/> is true</exception>
        </member>
        <member name="M:Dynamicweb.Core.Ensure.Argument.NotNull(System.Object,System.String)">
            <summary>
            Ensures given value is not null
            </summary>
            <param name="value">Value to test for null</param>
            <param name="parameterName">Name of the parameter in the method</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value" /> is null</exception>
        </member>
        <member name="M:Dynamicweb.Core.Ensure.Argument.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Ensures the given string value is not null or empty
            </summary>
            <param name="value">Value to test for null or empty</param>
            <param name="parameterName">Name of the parameter in the method</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is null or empty string</exception>
        </member>
        <member name="T:Dynamicweb.Core.Helpers.ListHelper">
            <summary>
            Class contains list helper methods.
            </summary>    
        </member>
        <member name="M:Dynamicweb.Core.Helpers.ListHelper.Sort``1(System.Collections.Generic.List{``0},System.String,System.String)">
            <summary>
            Sorts list by property
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="data">List of data</param>
            <param name="sortPropertyName">List item property name</param>
            <param name="sortDirection">Sort direction</param>
            <returns>Sorted list</returns>
        </member>
        <member name="T:Dynamicweb.Core.Helpers.NamespaceDoc">
            <summary>
            The Dynamicweb.Core.Helpers namespace contains helpers that contain reuseable data-transformation methods.
            </summary>
        </member>
        <member name="T:Dynamicweb.Core.Helpers.DateHelper">
            <summary>
            Class Dates contains date formatting strings and methods.
            </summary>
            <example>
            <code title="Using formatstrings" source="..\Dynamicweb\09 - Core\Dynamicweb.Core\Head\Dynamicweb.Core.Examples\DateHelperSample.cs" lang="CS"></code>
            </example>
        </member>
        <member name="F:Dynamicweb.Core.Helpers.DateHelper.DateFormatString">
            <summary>
            Returns a string for String.Format: "ddd, dd MMM yyyy HH':'mm"
            </summary>
        </member>
        <member name="F:Dynamicweb.Core.Helpers.DateHelper.DateFormatStringShort">
            <summary>
            Returns a string for String.Format: "dd MMM yyyy HH':'mm"
            </summary>
        </member>
        <member name="F:Dynamicweb.Core.Helpers.DateHelper.DateFormatStringDayAndMonth">
            <summary>
            Returns a string for String.Format: "dd. MMM"
            </summary>
        </member>
        <member name="F:Dynamicweb.Core.Helpers.DateHelper.DateFormatStringFull">
            <summary>
            Returns a string for String.Format: "ddd, dd MMM yyyy HH':'mm':'ss"
            </summary>
        </member>
        <member name="F:Dynamicweb.Core.Helpers.DateHelper.DateOnlyFormatStringShort">
            <summary>
            Returns a string for String.Format: "dd-mm-yyyy"
            </summary>
        </member>
        <member name="F:Dynamicweb.Core.Helpers.DateHelper.DateOnlyFormatStringMedium">
            <summary>
            Returns a string for String.Format: "ddd, dd MMM yyyy"
            </summary>
        </member>
        <member name="F:Dynamicweb.Core.Helpers.DateHelper.DateOnlyFormatString">
            <summary>
            Returns a string for String.Format: "ddd, dd MMM yyyy"
            </summary>
        </member>
        <member name="F:Dynamicweb.Core.Helpers.DateHelper.TimeOnlyFormatStringFull">
            <summary>
            Returns a string for String.Format: "hh:mm:ss"
            </summary>
        </member>
        <member name="F:Dynamicweb.Core.Helpers.DateHelper.DateFormatStringSortable">
            <summary>
            Returns a string for String.Format: "{0:s}" resulting in SQL and sort safe date strings, i.e. "2008-03-31T16:05:07"
            </summary>
        </member>
        <member name="F:Dynamicweb.Core.Helpers.DateHelper.DateOnlyFormatStringSortable">
            <summary>
            Returns a string for String.Format: "yyyy-M-dd" resulting in SQL and sort safe date strings, i.e. "2008-3-31""
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Helpers.DateHelper.MaxDate">
            <summary>
            Returns the maximum DateTime value accepted by Dynamicweb (2999/12/31 23:59:59).
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Dynamicweb.Core.Helpers.JsonHelper">
            <summary>
            The JsonHelper class provides methods that can serialize and deserialize objects to and from Json
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Helpers.JsonHelper.Serialize``1(``0)">
            <summary>
            Serializes the specified item to json format.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item to serialize.</param>
            <returns>A string representing the serialized object</returns>
        </member>
        <member name="M:Dynamicweb.Core.Helpers.JsonHelper.Deserialize``1(System.String)">
            <summary>
            Deserializes the specified data back to the specified object type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data to deserialize.</param>
            <returns>The deserialized object of type T</returns>
        </member>
        <member name="T:Dynamicweb.Core.Helpers.StringHelper">
            <summary>
            This class contains methods for stripping and converting strings.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Dynamicweb.Core.Helpers.StringHelper.StripIllegalCharsExt(System.String,System.String)">
            <summary>
            Strips a string of invalid characters.
            </summary>
            <param name="value">String to strip.</param>
            <param name="legalCharacters">String that contains all valid characters.</param>
            <returns>Returns a string containing only the valid characters specified.</returns>
            <remarks>
            If nothing else is specified the valid characters will default to "abcdefghijklmnopqrstuvwxyz0123456789".
            </remarks>
        </member>
        <member name="M:Dynamicweb.Core.Helpers.StringHelper.StripIllegalChars(System.String)">
            <summary>
            Strips a string of characters other than "abcdefghijklmnopqrstuvwxyzæøå0123456789@. _-".
            </summary>
            <param name="value">String to strip.</param>
            <returns>Returns a string containing only the valid characters.</returns>
            <example>
            <code description="StripIllegalChars example" source="..\Dynamicweb\09 - Core\Dynamicweb.Core\Head\Dynamicweb.Core.Examples\StringHelperSample.cs" lang="CS" region="StripIllegalChars"></code>
            </example>
        </member>
        <member name="M:Dynamicweb.Core.Helpers.StringHelper.StripHtml(System.String)">
            <summary>
            Strips a string of all HTML.
            </summary>
            <param name="html">String to strip</param>
            <returns>Returns the string without any HTML.</returns>
            <example>
            <code description="StripHtml example" source="..\Dynamicweb\09 - Core\Dynamicweb.Core\Head\Dynamicweb.Core.Examples\StringHelperSample.cs" lang="CS" region="StripHtml"></code>
            </example>
        </member>
        <member name="M:Dynamicweb.Core.Helpers.StringHelper.StripHtmlAlternative(System.String)">
            <summary>
            Strips a string of all HTML tags. Does not handle unclosed html tags, but is faster.
            </summary>
            <param name="html">String which contains HTML to strip</param>
            <returns>Returns the string without any HTML.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Helpers.StringHelper.JsEnable(System.String)">
            <summary>
            Escapes any ' or " in the input string by inserting \ in front of them.
            </summary>
            <param name="value">String to process.</param>
            <remarks>
            Used when inserting data into a JavaScript that could contain ' or ".
            </remarks>
        </member>
        <member name="M:Dynamicweb.Core.Helpers.StringHelper.Md5HashToString(System.String)">
            <summary>
            Hashes a string using MD5. 
            </summary>
            <note>Insecure cryptographic algorithm</note>
            <param name="value">String to hash.</param>
        </member>
        <member name="M:Dynamicweb.Core.Helpers.StringHelper.IsValidEmailAddress(System.String)">
            <summary>
            Checks if the email address is valid
            </summary>
            <param name="email">Email address</param>
            <returns>True if email address is valid, otherwise false</returns>
        </member>
        <member name="T:Dynamicweb.Core.Helpers.TextFileHelper">
            <summary>
            Class TextfileHelper used for reading and writing text files.
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Helpers.TextFileHelper.ReadTextFile(System.String)">
            <summary>
            Returns the contents of a text file as a string.
            </summary>
            <param name="path">Path and name of text file to read.</param>
            <remarks>
            Path must contain the physical path to the file e.g. "C:\Testfile.txt" 
            </remarks>
        </member>
        <member name="M:Dynamicweb.Core.Helpers.TextFileHelper.ReadTextFile(System.String,System.Text.Encoding)">
            <summary>
            Read the current text file in a particular encoding.
            </summary>
            <param name="path">Path and name of text file to read.</param>
            <param name="encoding">As System.Text.Encoding, to determin a particular encoding.</param>
            <remarks>
            Path must contain the physical path to the file e.g. "C:\Testfile.txt" 
            </remarks>
            <returns>Returns the contents of a text file as a string.</returns>
        </member>
        <member name="M:Dynamicweb.Core.Helpers.TextFileHelper.WriteTextFile(System.String,System.String,System.Boolean)">
            <summary>
            Writes a string to a text file.
            </summary>
            <param name="value">String to write to the file.</param>
            <param name="path">Path and name of text file to write.</param>
            <param name="appendToFile">Boolean indicating whether to append to the file.
            True to append, False to overwrite file.</param>
            <remarks>
            Path must contain the physical file path to the file e.g. Server.Mappath("/files/filer/Testfile.txt")
            </remarks>
        </member>
        <member name="M:Dynamicweb.Core.Helpers.TextFileHelper.WriteTextFile(System.String,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Writes a string to a text file in a particular encoding.
            </summary>
            <param name="value">String to write to the file.</param>
            <param name="path">Path and name of text file to write.</param>
            <param name="appendToFile">Boolean indicating whether to append to the file.
            True to append, False to overwrite file.</param>
            <param name="encoding">As System.Text.Encoding, to determin a particular encoding.</param>
            <remarks>
            Path must contain the physical file path to the file e.g. Server.Mappath("/files/filer/Testfile.txt")
            </remarks>
        </member>
        <member name="M:Dynamicweb.Core.Helpers.TextFileHelper.TryMakeWritable(System.IO.FileInfo)">
            <summary>
            Tries to make the given file writable.
            </summary>
            <param name="info">File information (FileInfo instance).</param>
            <returns>Value indicating whether file has been successfully made writable.</returns>
        </member>
        <member name="T:Dynamicweb.Core.IApplicationAssembly">
            <summary>
            Gets the application assembly for the current installation of Dynamicweb.
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.IApplicationAssembly.GetAssembly">
            <summary>
            Yields the current application assembly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Core.IApplicationAssembly.IsCustom">
            <summary>
            Describes if this application-assembly implementation is custom.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamicweb.Core.Maybe`1">
            <summary>
            The Maybe struct provides the ability to work with non-nullable reference types, google the Maybe null pattern for details"/>
            </summary>
            <typeparam name="T">A reference type</typeparam>
        </member>
        <member name="F:Dynamicweb.Core.Maybe`1.value">
            <summary>
            The wrapped reference type
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Maybe`1.#ctor(`0)">
            <summary>
            Private constructor initializing a new instance of the Maybe struct
            </summary>
            <param name="value">The value wrapped by the Maybe struct</param>
        </member>
        <member name="P:Dynamicweb.Core.Maybe`1.Value">
            <summary>
            Gets the Value Encapsulated by the Maybe struct, if no value is present an <see cref="T:System.InvalidOperationException"/> will be thrown. 
            Use the HasValue or HasNoValue before accessing this property.
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.Maybe`1.HasValue">
            <summary>
            Gets a value indicating if a Value is wrapped by this instance
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.Maybe`1.HasNoValue">
            <summary>
            Gets a value indicating if no Value is wrapped by this instance
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Maybe`1.op_Implicit(`0)~Dynamicweb.Core.Maybe{`0}">
            <summary>
            Implicit operator enabling assigning of a Maybe struct with an arbitrary reference type
            </summary>
            <param name="value">The value to assign the Maybe struct</param>
        </member>
        <member name="M:Dynamicweb.Core.Maybe`1.op_Equality(Dynamicweb.Core.Maybe{`0},`0)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="maybe">The maybe.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Dynamicweb.Core.Maybe`1.op_Inequality(Dynamicweb.Core.Maybe{`0},`0)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="maybe">The maybe.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Dynamicweb.Core.Maybe`1.op_Equality(Dynamicweb.Core.Maybe{`0},Dynamicweb.Core.Maybe{`0})">
            <summary>
            Implements the operator == using the .Equals() of this class.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Dynamicweb.Core.Maybe`1.op_Inequality(Dynamicweb.Core.Maybe{`0},Dynamicweb.Core.Maybe{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Dynamicweb.Core.Maybe`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dynamicweb.Core.Maybe`1.Equals(Dynamicweb.Core.Maybe{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <note>If both objects contain null as a value, returns true</note>
        </member>
        <member name="M:Dynamicweb.Core.Maybe`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Dynamicweb.Core.Maybe`1.ToString">
            <summary>
            Returns the string "No value" if object contains no value. Otherwise returns ToString() of value.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dynamicweb.Core.Maybe`1.Unwrap(`0)">
            <summary>
            Returns the value or the default value for the given value-type, if value is null.
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="T:Dynamicweb.Core.NamespaceDoc">
            <summary>
            The Dynamicweb.Core namespace contains core types used within Dynamicweb.
            </summary>
        </member>
        <member name="T:Dynamicweb.Core.Encoders.NamespaceDoc">
            <summary>
            The Dynamicweb.Core.Encoders namespace contains helpers that converts string data for specific tasks, i.e. Html encoding etc.
            </summary>
        </member>
        <member name="T:Dynamicweb.Core.Encoders.EncodedStringWriter">
            <summary>
            The EncodedStringWriter class is an extension of System.IO.StringWriter class for enabling custom encoding of StringWriters.
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.Encoders.EncodedStringWriter.Encoding">
            <summary>
            Gets the <see cref="T:System.Text.Encoding" /> in which the output is written.
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.EncodedStringWriter.#ctor(System.Text.StringBuilder,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamicweb.Core.Encoders.EncodedStringWriter"/> class.
            </summary>
            <param name="value">An existing StringBuilder instance.</param>
            <param name="encoding">The encoding to use in the StringWriter.</param>
        </member>
        <member name="T:Dynamicweb.Core.Encoders.HtmlEncoder">
            <summary>
            Provides methods for encode html
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)">
            <summary>
            Encodes html attribute
            </summary>
            <param name="value">String value of attribute</param>
            <param name="output"><see cref="T:System.IO.TextWriter" /> with result data</param>
            <exception cref="T:System.ArgumentNullException">output</exception>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.HtmlAttributeEncode(System.String)">
            <summary>
            Encodes html attribute
            </summary>
            <param name="value">String value of attribute</param>
            <returns>String result</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlDecode(System.String)">
            <summary>
            Decodes url
            </summary>
            <param name="value">String value with encoded url</param>
            <returns>Decoded url</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            Decodes url using specified encoding
            </summary>
            <param name="value">String value with encoded url</param>
            <param name="encoding"><see cref="T:System.Text.Encoding" /></param>
            <returns>Decoded url</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlDecode(System.Byte[],System.Text.Encoding)">
            <summary>
            Decodes url
            </summary>
            <param name="value">Array of bytes to be decoded</param>
            <param name="encoding">Target <see cref="T:System.Text.Encoding" /></param>
            <returns>Decoded string</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlDecode(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Decodes url
            </summary>
            <param name="value">Array of bytes to be decoded</param>
            <param name="offset">Offset value</param>
            <param name="count">Count of bytes</param>
            <param name="encoding">Target <see cref="T:System.Text.Encoding" /></param>
            <returns>Decoded string</returns>
            <exception cref="T:System.ArgumentNullException">bytes</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            offset
            or
            count
            </exception>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlDecodeToBytes(System.Byte[])">
            <summary>
            Decodes url to bytes array
            </summary>
            <param name="value"><see cref="T:System.Byte" /> array</param>
            <returns>Decoded <see cref="T:System.Byte" /> array</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlDecodeToBytes(System.String)">
            <summary>
            Decodes url to string
            </summary>
            <param name="value">String value</param>
            <returns>Decoded string</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlDecodeToBytes(System.String,System.Text.Encoding)">
            <summary>
            Decodes url to bytes
            </summary>
            <param name="value">String value</param>
            <param name="encoding">Target <see cref="T:System.Text.Encoding" /></param>
            <returns><see cref="T:System.Byte" /> array</returns>
            <exception cref="T:System.ArgumentNullException">e</exception>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlPathEncode(System.String)">
            <summary>
            Encodes url path
            </summary>
            <param name="value">String value</param>
            <returns>Encoded string</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlDecodeToByteArray(System.String,System.Text.Encoding)">
            <summary>
            Decodes string to byte array
            </summary>
            <param name="value">String value</param>
            <param name="encoding">Target <see cref="T:System.Text.Encoding" /></param>
            <returns><see cref="T:System.Byte" /> array</returns>
            <exception cref="T:System.ArgumentNullException">e</exception>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes url to bytes array
            </summary>
            <param name="value"><see cref="T:System.Byte" /> array</param>
            <param name="offset">Offset value</param>
            <param name="count">Bytes count</param>
            <returns><see cref="T:System.Byte" /> array</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            offset
            or
            count
            </exception>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            Encodes url
            </summary>
            <param name="value">string value</param>
            <param name="encoding">Target <see cref="T:System.Text.Encoding" /></param>
            <returns>Encoded string value</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlEncode(System.Byte[])">
            <summary>
            Encodes url
            </summary>
            <param name="value"><see cref="T:System.Byte" /> array</param>
            <returns>Encoded string value</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes url
            </summary>
            <param name="value">Source bytes array</param>
            <param name="offset">Offset value</param>
            <param name="count">Bytes count</param>
            <returns>String value</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlEncodeToBytes(System.String)">
            <summary>
            Encodes url to bytes array
            </summary>
            <param name="value">String value</param>
            <returns>String result</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlEncodeToBytes(System.String,System.Text.Encoding)">
            <summary>
            Encodes string to bytes
            </summary>
            <param name="value">String value</param>
            <param name="encoding"><see cref="T:System.Text.Encoding" /></param>
            <returns>Bytes array</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlEncodeToBytes(System.Byte[])">
            <summary>
            Encodes url to bytes array
            </summary>
            <param name="value">Source bytes array</param>
            <returns>Result bytes array</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes url to bytes array
            </summary>
            <param name="value"><see cref="T:System.Byte" /> array</param>
            <param name="offset">Offset value</param>
            <param name="count">Bytes count</param>
            <returns>Bytes array</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlEncodeUnicode(System.String)">
            <summary>
            Encodes unicode url
            </summary>
            <param name="value">Input string</param>
            <returns>Encoded string</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.UrlEncodeUnicodeToBytes(System.String)">
            <summary>
            Encodes unicode string to bytes
            </summary>
            <param name="value">Input string</param>
            <returns>Encoded string</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            Decodes an HTML-encoded string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="value">The HTML string to decode</param>
            <param name="output">The TextWriter output stream containing the decoded string.</param>
            <exception cref="T:System.ArgumentNullException">output</exception>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.HtmlEncode(System.String)">
            <summary>
            Encodes html string
            </summary>
            <param name="value">Input string</param>
            <returns>String value</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
            HTML-encodes a string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="value">The string to encode.</param>
            <param name="output">The TextWriter output stream containing the encoded string.</param>
            <exception cref="T:System.ArgumentNullException">output</exception>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.HtmlEncode(System.Object)">
            <summary>
            Encodes html
            </summary>
            <param name="value">Object with html data</param>
            <returns>Encoded string</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.JavaScriptStringEncode(System.String)">
            <summary>
            Encodes javascript string
            </summary>
            <param name="value">string value</param>
            <returns>String result</returns>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HtmlEncoder.JavaScriptStringEncode(System.String,System.Boolean)">
            <summary>
            Encodes javascript string
            </summary>
            <param name="value">Source value</param>
            <param name="addDoubleQuotes">Shows if it needs to use double quotes</param>
            <returns>String result</returns>
        </member>
        <member name="T:Dynamicweb.Core.Encoders.HttpEncoder">
            <summary>
            Provides methods for encoding and decoding html when processing web requests
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.Encoders.HttpEncoder.Current">
            <summary>
            Gets or sets current HttpEncoder context
            </summary>
            <value>The current.</value>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="P:Dynamicweb.Core.Encoders.HttpEncoder.Default">
            <summary>
            Gets default encoder value
            </summary>
            <value>The default.</value>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HttpEncoder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HttpEncoder.HeaderNameValueEncode(System.String,System.String,System.String@,System.String@)">
            <summary>
            Headers the name value encode.
            </summary>
            <param name="headerName">Name of the header.</param>
            <param name="headerValue">The header value.</param>
            <param name="encodedHeaderName">Name of the encoded header.</param>
            <param name="encodedHeaderValue">The encoded header value.</param>
            <autogeneratedoc />
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HttpEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)">
            <summary>
            HTMLs the attribute encode.
            </summary>
            <param name="value">The value.</param>
            <param name="output">The output.</param>
            <exception cref="T:System.ArgumentNullException">output</exception>
            <autogeneratedoc />
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HttpEncoder.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            HTMLs the decode.
            </summary>
            <param name="value">The value.</param>
            <param name="output">The output.</param>
            <exception cref="T:System.ArgumentNullException">output</exception>
            <autogeneratedoc />
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HttpEncoder.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
            HTMLs the encode.
            </summary>
            <param name="value">The value.</param>
            <param name="output">The output.</param>
            <exception cref="T:System.ArgumentNullException">output</exception>
            <autogeneratedoc />
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HttpEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            URLs the encode.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>System.Byte[].</returns>
            <autogeneratedoc />
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HttpEncoder.UrlPathEncode(System.String)">
            <summary>
            URLs the path encode.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
            <autogeneratedoc />
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HttpEncoder.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            URLs the encode to bytes.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>System.Byte[].</returns>
            <exception cref="T:System.ArgumentNullException">bytes</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            offset
            or
            count
            </exception>
            <autogeneratedoc />
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HttpEncoder.HtmlAttributeEncode(System.String)">
            <summary>
            HTMLs the attribute encode.
            </summary>
            <param name="stringValue">The string value.</param>
            <returns>System.String.</returns>
            <autogeneratedoc />
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HttpEncoder.NotEncoded(System.Char)">
            <summary>
            Nots the encoded.
            </summary>
            <param name="c">The c.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <autogeneratedoc />
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HttpEncoder.UrlEncodeChar(System.Char,System.IO.Stream,System.Boolean)">
            <summary>
            URLs the encode character.
            </summary>
            <param name="character">The character.</param>
            <param name="result">The result.</param>
            <param name="isUnicode">if set to <c>true</c> [is unicode].</param>
            <autogeneratedoc />
        </member>
        <member name="M:Dynamicweb.Core.Encoders.HttpEncoder.UrlPathEncodeChar(System.Char,System.IO.Stream)">
            <summary>
            URLs the path encode character.
            </summary>
            <param name="c">The c.</param>
            <param name="result">The result.</param>
            <autogeneratedoc />
        </member>
        <member name="T:Dynamicweb.Core.TemporaryContracts.NamespaceDoc">
            <summary>
            The Dynamicweb.Core.TemporyContracts namespace contains contracts that are temporary. Will be removed/moved in the future.
            </summary>
        </member>
        <member name="T:Dynamicweb.Core.Result">
            <summary>
            The Result class is used to return values from methods that can potentially fail with known exceptions.
            To adhere to the fail fast principle, use this pattern to indicate to clients the succes or failure of a given operation instead of using exceptions to control the program flow!
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.Result.IsSuccess">
            <summary>
            Gets a value indicating the success or failure of a given operation
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.Result.IsFailure">
            <summary>
            Gets a value indicating the success or failure of a given operation
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.Result.Error">
            <summary>
            Gets the error message from a given operation in case the operation failed
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Result.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamicweb.Core.Result"/> class
            </summary>
            <param name="isSuccess">A value indicating the success or failure of the operation</param>
            <param name="error">An error message in case the operation failed</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Dynamicweb.Core.Result.Fail(System.String)">
            <summary>
            Returns a new failing result with the specified message
            </summary>
            <param name="message">A message describing the reason an operation failed</param>
            <returns>A failed Result</returns>
        </member>
        <member name="M:Dynamicweb.Core.Result.Fail``1(System.String)">
            <summary>
            Returns a new Generic Result with the specified message
            </summary>
            <typeparam name="T">Generic type T of the <see cref="T:Dynamicweb.Core.Result`1"/> class</typeparam>
            <param name="message">A message describing the reason an operation failed</param>
            <returns>A failed Result of type T</returns>
        </member>
        <member name="M:Dynamicweb.Core.Result.Fail``2(``1)">
            <summary>
            Returns a new Generic Result with the specified Enum error type
            </summary>
            <typeparam name="T">The Generic type T of the <see cref="T:Dynamicweb.Core.Result`2"/> class</typeparam>
            <typeparam name="TError">The Generic type TError of the <see cref="T:Dynamicweb.Core.Result`2"/> class where TError must be an Enum type</typeparam>
            <param name="errorType">An enum value indicating the reason for the failure</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Core.Result.Ok">
            <summary>
            Returns a new successful Result
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Core.Result.Ok``1(``0)">
            <summary>
            Returns a new successful result with a value of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value to return as part of the result</param>
            <returns></returns>
        </member>
        <member name="T:Dynamicweb.Core.Result`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Dynamicweb.Core.Result`1._value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Result`1.#ctor(`0,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="isSuccess"></param>
            <param name="error"></param>
        </member>
        <member name="P:Dynamicweb.Core.Result`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Result`1.op_Implicit(Dynamicweb.Core.Result{`0})~`0">
            <summary>
            Implicit operator for getting the type T out of the Result without accessing the Value directly
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:Dynamicweb.Core.Result`2">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TError">The Generic type TError must be an Enum type</typeparam>
        </member>
        <member name="P:Dynamicweb.Core.Result`2.ErrorType">
            <summary>
            Exposes the error type.
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Result`2.#ctor(`0,System.Boolean,`1)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="isSuccess"></param>
            <param name="errorType">An enum value indicating the reason for the failure</param>
        </member>
        <member name="T:Dynamicweb.Core.SimpleTree`1">
            <summary>
            Base implementation of a generic tree using integer keys.
            </summary>
            <typeparam name="T">Object type in the tree</typeparam>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTree`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates an empty tree.
            </summary>
            <param name="key">Id of tree</param>
            <param name="makeDummyRoot">Defines if a dummy root should be created (this root has id 0)</param>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTree`1.MakeSubTree(System.Int32,System.Boolean)">
            <summary>
            Makes a subtree from the specified location in the tree.
            </summary>
            <param name="key">subtree starting location</param>
            <param name="isShallow">Defines if a deep clone of the tree should be performed, for use when the subtree needs to have modified the parent of nodes</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTree`1.MakeSubTree(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Makes a subtree from the specified location in the tree.
            </summary>
            <param name="treeId">Id of newly created tree</param>
            <param name="key">Subtree starting location</param>
            <param name="isShallow">Defines if a deep clone of the tree should be performed, for use when the subtree needs to modify the parent of nodes</param>
            <returns>subTree</returns>
        </member>
        <member name="T:Dynamicweb.Core.SimpleTreeBase`2">
            <summary>
            Base implementation of a generic tree, that does not expose it's internal workings or nodes.
            </summary>
            <typeparam name="TKey">Key type in tree</typeparam>
            <typeparam name="TValue">Object type in the tree</typeparam>
        </member>
        <member name="P:Dynamicweb.Core.SimpleTreeBase`2.IsDummyRoot">
            <summary>
            Indicates if the root of the tree is a dummy root.
            <remarks>
            The purpose of the dummy root is to allow the use of a treestructure that does not actually contain a root element, 
            but instead multiple roots. All these roots will then use the dummyroot for purposes of the tree datastructure.
            </remarks>
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.SimpleTreeBase`2.Id">
            <summary>
            Id of tree.
            </summary>
            <returns>id</returns>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTreeBase`2.#ctor(`0,System.Boolean)">
            <summary>
            Creates an empty tree.
            </summary>
            <param name="key">Id of tree</param>
            <param name="makeDummyRoot">Defines if a dummy root should be created (this root has id 0)</param>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTreeBase`2.TryFill(System.Collections.Generic.Dictionary{`0,`0},System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Inserts all elements provided in the tree such that they are children as specified.
            </summary>
            <param name="parentIdByNodeId">Dictionary of parents for nodes to be filled into the tree</param>
            <param name="nodesById">Dictionary of nodes and their Ids to be filled into the tree</param>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTreeBase`2.SetRoot(`0,`1,System.Boolean)">
            <summary>
            Sets the root node. If another rootnode exists, this node is made into a child of the new root.
            </summary>
            <param name="elementId">id of root</param>
            <param name="element">element in root. May be null.</param>
            <param name="isRootPartOfTree">specifies if the root should be included in lookup inside the tree</param>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTreeBase`2.TrySetNode(`0,`0,`1)">
            <summary>
            Tries to ensure that the tree contains a node with the specified parent and key. 
            </summary>
            <param name="parentKey">id of node that should be the parent</param>
            <param name="childKey">id of inserted node</param>
            <param name="child">element contained in node</param>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTreeBase`2.TryGetValue(`0)">
            <summary>
            Tries to get the node with the given key.
            </summary>
            <remarks>O(1) lookup</remarks>
            <param name="key">node id</param>
            <returns>node</returns>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTreeBase`2.TryRemoveNode(`0)">
            <summary>
            Removes the node from the tree.
            </summary>
            <param name="nodeId">Id of node to remove from tree</param>
            <returns>success</returns>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTreeBase`2.GetRoot">
            <summary>
            Root of tree.
            </summary>
            <returns>root</returns>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTreeBase`2.SetRoot(Dynamicweb.Core.SimpleTreeBase{`0,`1}.SimpleTreeNode)">
            <summary>
            Sets the root of the tree.
            </summary>
            <param name="node">Node</param>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTreeBase`2.AddChild(Dynamicweb.Core.SimpleTreeBase{`0,`1}.SimpleTreeNode)">
            <summary>
            Adds the node as a child to this node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTreeBase`2.TryGetNode(`0)">
            <summary>
            Gets the node matching the id.
            </summary>
            <param name="key">Id of node to fetch</param>
            <returns>node</returns>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTreeBase`2.MakeSubTree(`0,System.Boolean)">
            <summary>
            Makes a subtree from the specified location in the tree.
            </summary>
            <param name="key">subtree starting location</param>
            <param name="isShallow">Defines if a deep clone of the tree should be performed, for use when the subtree needs to have modified the parent of nodes</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTreeBase`2.MakeSubTree(`0,`0,System.Boolean)">
            <summary>
            Makes a subtree from the specified location in the tree.
            </summary>
            <param name="treeId">Id of newly created tree</param>
            <param name="key">Subtree starting location</param>
            <param name="isShallow">Defines if a deep clone of the tree should be performed, for use when the subtree needs to modify the parent of nodes</param>
            <returns>subTree</returns>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTreeBase`2.GetAll">
            <summary>
            Gets all nodes in tree.
            </summary>
            <returns>allNodes</returns>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTreeBase`2.TryReplaceNode(`0,`1)">
            <summary>
            Tries to replace the node content.
            </summary>        
            <param name="key">Id of node that needs to have it's content replaced.</param>
            <param name="item">New content</param>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTreeBase`2.GetAncestors(`0,System.Boolean)">
            <summary>
            Yields the ancestors of specified node.
            </summary>
            <remarks>Oldest ancestors are at the front of the list, youngest at the back.</remarks>
            <param name="nodeId">Id of node</param>
            <param name="includingSelf">Specifies if the node should be included in the result as the youngest</param>
            <returns>ancestors</returns>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTreeBase`2.GetChildren(`0,System.Boolean)">
            <summary>
            Gets all children of the specified node.
            </summary>
            <param name="nodeId">Id of the parent of the nodes to fetch</param>
            <param name="isRecursive">Include all children of children recursively</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.Core.SimpleTreeBase`2.GetValues(System.Collections.Generic.IEnumerable{Dynamicweb.Core.SimpleTreeBase{`0,`1}.SimpleTreeNode})">
            <summary>
            Yields the values from the nodes.
            </summary>
            <param name="nodes">Nodes containing values</param>
            <returns>values</returns>
        </member>
        <member name="T:Dynamicweb.Core.SimpleTreeBase`2.SimpleTreeNode">
            <summary>
            Implementation of a treenode.
            </summary>
        </member>
        <member name="T:Dynamicweb.Core.SystemInformation">
            <summary>
            The <see cref="T:Dynamicweb.Core.SystemInformation"/> class provides information about the system.
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.SystemInformation.RootDirectory">
            <summary>
            Gets or sets the root directory.
            </summary>
            <value>
            The root directory.
            </value>
        </member>
        <member name="M:Dynamicweb.Core.SystemInformation.AddVirtualDirectoryMapping(System.IO.DirectoryInfo)">
            <summary>
            Adds a mapping of a virtual directory to a physical path.
            </summary>        
            <param name="info">The absolute path to the mapped directory.</param>
        </member>
        <member name="M:Dynamicweb.Core.SystemInformation.AddVirtualDirectoryMapping(System.String,System.IO.DirectoryInfo)">
            <summary>
            Adds a mapping of a virtual directory to a physical path.
            </summary>
            <param name="directoryName">Name of the directory.</param>
            <param name="info">The absolute path to the mapped directory.</param>
        </member>
        <member name="M:Dynamicweb.Core.SystemInformation.MapPath(System.String)">
            <summary>
            The MapPath method maps the specified relative or virtual path to the corresponding physical directory on the server.
            </summary>
            <param name="relativePath">The relative path.</param>
            <remarks>Does not support '..' in paths</remarks>
            <returns>absolutePath</returns>
        </member>
        <member name="M:Dynamicweb.Core.SystemInformation.GetBasePath(System.String@)">
            <summary>
            Gets the base path.
            </summary>
            <param name="relativePath">The relative path.</param>
            <returns>basePath</returns>
        </member>
        <member name="M:Dynamicweb.Core.SystemInformation.SanitizePath(System.String)">
            <summary>
            Sanatizes the path, ensuring that it is in the format expected for a file-system path.
            </summary>
            <param name="path">The path.</param>
            <returns>sanitizeedPath</returns>
        </member>
        <member name="T:Dynamicweb.Core.ValueConverter">
            <summary>
            Represents a value converter used for parsing input strings from forms to their respective type. This class cannot be inherited.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Dynamicweb.Core.ValueConverter.culture">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dynamicweb.Core.ValueConverter.dateFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dynamicweb.Core.ValueConverter.jsonSerializerSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.ValueConverter.Culture">
            <summary>
            Gets or sets the culture information.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Dynamicweb.Core.ValueConverter.NumberStyles">
            <summary>
            Gets or sets the number styles.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Dynamicweb.Core.ValueConverter.DateTimeStyles">
            <summary>
            Gets or sets date/time styles.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Dynamicweb.Core.ValueConverter.DateFormat">
            <summary>
            Gets or sets the date format.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Dynamicweb.Core.ValueConverter.JsonSerializerSettings">
            <summary>
            Gets the json serializer settings.
            </summary>
            <value>The json serializer settings.</value>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.#ctor">
            <summary>
            Initializes a new instance of an object.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.Convert``1(System.Object)">
            <summary>
            Converts the given value from one type to another.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.ConvertString(System.String,System.Type)">
            <summary>
            Converts the given string to another type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type.</param>
            <returns>System.Object as the type of data requested.</returns>
            <remarks>Returns <c>null</c> if the type specified is not <c>Int16, Int32, Int64, bool, double, string</c> or <c>DateTime</c>.
            If the passed value is empty string or null, the original value is returned as string</remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.Convert(System.Object,System.Type)">
            <summary>
            Converts the given value from one type to another.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type.</param>
            <returns>Converted value.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsDate(System.Object)">
            <summary>
            Returns value indicating whether specified object is a date.
            </summary>
            <param name="value">Object to examine.</param>
            <returns>Value indicating whether specified object is a date.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsDate(System.Type)">
            <summary>
            Returns value indicating whether specified type represents a date.
            </summary>
            <param name="type">Type to examine.</param>
            <returns>Value indicating whether specified type represents a date.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsString(System.Object)">
            <summary>
            Returns value indicating whether specified object is a string.
            </summary>
            <param name="value">Object to examine.</param>
            <returns>Value indicating whether specified object is a string.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsString(System.Type)">
            <summary>
            Returns value indicating whether specified type represents a string.
            </summary>
            <param name="type">Type to examine.</param>
            <returns>Value indicating whether specified type represents a string.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsBoolean(System.Object)">
            <summary>
            Returns value indicating whether specified object is a boolean.
            </summary>
            <param name="value">Object to examine.</param>
            <returns>Value indicating whether specified object is a boolean.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsBoolean(System.Type)">
            <summary>
            Returns value indicating whether specified type represents a boolean.
            </summary>
            <param name="type">Type to examine.</param>
            <returns>Value indicating whether specified type represents a boolean.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsNumber(System.Object)">
            <summary>
            Returns value indicating whether specified object is a number.
            </summary>
            <param name="value">Object to examine.</param>
            <returns>Value indicating whether specified object is a number.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsNumber(System.Type)">
            <summary>
            Returns value indicating whether specified type represents a number.
            </summary>
            <param name="type">Type to examine.</param>
            <returns>Value indicating whether specified type represents a number.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsInteger(System.Object)">
            <summary>
            Returns value indicating whether specified object is a 32bit integer number.
            </summary>
            <param name="value">Object to examine.</param>
            <returns>Value indicating whether specified object is a 32bit integer number.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsInteger(System.Type)">
            <summary>
            Returns value indicating whether specified type represents a 32bit integer number.
            </summary>
            <param name="type">Type to examine.</param>
            <returns>Value indicating whether specified type represents a 32bit integer number.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsDouble(System.Object)">
            <summary>
            Returns value indicating whether specified object is a double precision floating point number.
            </summary>
            <param name="value">Object to examine.</param>
            <returns>Value indicating whether specified object is a double precision floating point number.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsDouble(System.Type)">
            <summary>
            Returns value indicating whether specified type represents a double precision floating point number.
            </summary>
            <param name="type">Type to examine.</param>
            <returns>Value indicating whether specified type represents a double precision floating point number.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsDecimal(System.Object)">
            <summary>
            Returns value indicating whether specified object is a decimal number.
            </summary>
            <param name="value">Object to examine.</param>
            <returns>Value indicating whether specified object is a decimal number.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsDecimal(System.Type)">
            <summary>
            Returns value indicating whether specified type represents a decimal number.
            </summary>
            <param name="type">Type to examine.</param>
            <returns>Value indicating whether specified type represents a decimal number.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsList(System.Object)">
            <summary>
            Returns value indicating whether specified object is a list (implements IList or IList&lt;T&gt; interface).
            </summary>
            <param name="value">Object to examine.</param>
            <returns>Value indicating whether specified object is a list (implements IList or IList&lt;T&gt; interface).</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsList(System.Type)">
            <summary>
            Returns value indicating whether specified type represents a list (implements IList or IList&lt;T&gt; interface).
            </summary>
            <param name="type">Type to examine.</param>
            <returns>Value indicating whether specified type represents a list (implements IList or IList&lt;T&gt; interface).</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsDictionary(System.Object)">
            <summary>
            Returns value indicating whether specified object is a dictionary (implements IDictionary or IDictionary&lt;T&gt; interface).
            </summary>
            <param name="value">Object to examine.</param>
            <returns>Value indicating whether specified object is a dictionary (implements IDictionary or IDictionary&lt;T&gt; interface).</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsDictionary(System.Type)">
            <summary>
            Returns value indicating whether specified type represents a dictionary (implements IDictionary or IDictionary&lt;T&gt; interface).
            </summary>
            <param name="type">Type to examine.</param>
            <returns>Value indicating whether specified type represents a dictionary (implements IDictionary or IDictionary&lt;T&gt; interface).</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsCollection(System.Object)">
            <summary>
            Returns value indicating whether specified object is a collection (implements ICollection or ICollection&lt;T&gt; interface).
            </summary>
            <param name="value">Object to examine.</param>
            <returns>Value indicating whether specified object is a collection (implements ICollection or ICollection&lt;T&gt; interface).</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsCollection(System.Type)">
            <summary>
            Returns value indicating whether specified type represents a collection (implements ICollection or ICollection&lt;T&gt; interface).
            </summary>
            <param name="type">Type to examine.</param>
            <returns>Value indicating whether specified type represents a collection (implements ICollection or ICollection&lt;T&gt; interface).</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsEnumerable(System.Object)">
            <summary>
            Returns value indicating whether specified object is an enumerable.
            </summary>
            <param name="value">Object to examine.</param>
            <returns>Value indicating whether specified object is an enumerable.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsEnumerable(System.Type)">
            <summary>
            Returns value indicating whether specified type represents an enumerable.
            </summary>
            <param name="type">Type to examine.</param>
            <returns>Value indicating whether specified type represents an enumerable.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsJson(System.Object)">
            <summary>
            Returns value indicating whether specified object is string in JSON format.
            </summary>
            <param name="value">String to examine.</param>
            <returns>Value indicating whether specified object is string in JSON format.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.DefaultValue(System.Type)">
            <summary>
            Returns default value for a given type.
            </summary>
            <param name="valueType">Type to return default value for.</param>
            <returns>Default value for a given type.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.GetEnumerableElementType(System.Type)">
            <summary>
            Returns the type of the given enumerable object or null (Nothing in Visual Basic) if the object is not enumerable.
            </summary>
            <param name="type">Object type.</param>
            <returns>The type of the given enumerable object or null (Nothing in Visual Basic) if the object is not enumerable.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.FindInterface(System.Type,System.Type)">
            <summary>
            Finds the definition of the given interface.
            </summary>
            <param name="type">Object type.</param>
            <param name="interfaceType">Interface type.</param>
            <returns>The definition of the given interface.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Dynamicweb.Core.ValueConverter.IsNowKeyword(System.Object,System.Type)">
            <summary>
            Returns value indicating whether specified value represent "Now" keyword
            </summary>
            <param name="value">Value to examine.</param>
            <param name="type">Type of value to examine.</param>
            <returns>Value indicating whether specified value represent "Now" keyword.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Dynamicweb.Core.Entity`1">
            <summary>
            The class Entity provides change tracking for models that needs to be persisted.
            </summary>
            <typeparam name="TKey">The generic Type parameter TKey indicates the type of key used to identity a given Entity instance</typeparam>
        </member>
        <member name="M:Dynamicweb.Core.Entity`1.#ctor">
            <summary>
            Initializes a new instance of the Entity class
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.Entity`1.ID">
            <summary>
            Gets the unique identification of this entity
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.Entity`1.Audit">
            <summary>
            Gets the audit of this entity showing who and when this entity was created and/or modified
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.Entity`1.State">
            <summary>
            Gets the current state of this entity
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.Entity`1.IsNew">
            <summary>
            Gets a value indicating if this is a new transient object
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.Entity`1.IsModified">
            <summary>
            Gets a value indicating if the entity has been modified
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.Entity`1.IsDeleted">
            <summary>
            Gets a value indicating if the Entity has been deleted
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.Entity`1.Dynamicweb#Core#IChangeTracking#IsChanged">
            <summary>
            Gets a value indicating if this entity has changed
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.Entity`1.IsChanged">
            <summary>
            Defines if this object has been changed.
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.Entity`1.IsTrackingChanges">
            <summary>
            Gets a value indicating if the Entity is currently restoring it's state from some persistence mechanism
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Entity`1.Delete">
            <summary>
            Marks the entity as deleted
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Entity`1.SetProperty``1(System.String,``0@,``0)">
            <summary>
            Change Tracking method for setting property values, and determining the new state of the Entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name of the property on which a value is being set</param>
            <param name="oldValue">The old value of the property</param>
            <param name="newValue">The new value of the property</param>
            <returns>True if the new value was not equal to the old value has the state has been succesfully changed to modified, otherwise false</returns>
        </member>
        <member name="M:Dynamicweb.Core.Entity`1.SetProperty``1(System.String,System.Nullable{``0}@,System.Nullable{``0})">
            <summary>
            Change tracking method for setting nullable property values, and determining the new state of the Entity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name of the property on which a value is being set</param>
            <param name="oldValue">The old value of the property</param>
            <param name="newValue">The new value of the property</param>
            <returns>True if the new value was not equal to the old value has the state has been succesfully changed to modified, otherwise false</returns>
        </member>
        <member name="M:Dynamicweb.Core.Entity`1.SetEnum``1(System.String,``0@,``0)">
            <summary>
            Change Tracking method for setting enum values, and determining the new state of the Entity.
            </summary>
            <param name="name">The name of the property on which a value is being set</param>
            <param name="oldValue">The old value of the property</param>
            <param name="newValue">The new value of the property</param>
            <returns>True if the new value was not equal to the old value and the state has been succesfully changed to modified, otherwise false</returns>
            <exception cref="T:System.InvalidOperationException">If the generic type is not of type Enum, the exception will be thrown</exception>
        </member>
        <member name="M:Dynamicweb.Core.Entity`1.MarkAsModified">
            <summary>
            Marks the Entity instance as modified
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Entity`1.BeginRestoring">
            <summary>
            Indicates that restoring of the entity will begin and no change tracking will be performed before EndRestoring has been called
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.Entity`1.EndRestoring">
            <summary>
            Indicates that restoring has ended and change tracking should be resumed
            </summary>
        </member>
        <member name="T:Dynamicweb.Core.EntityState">
            <summary>
            Indicates the current state of a given Entity
            </summary>
        </member>
        <member name="F:Dynamicweb.Core.EntityState.Unchanged">
            <summary>
            Indicates that this entity has not changed since loaded from persistence
            </summary>
        </member>
        <member name="F:Dynamicweb.Core.EntityState.Added">
            <summary>
            Indicates that this is a newly added Entity not yet persisted
            </summary>
        </member>
        <member name="F:Dynamicweb.Core.EntityState.Modified">
            <summary>
            Indicates that this is a modified, but already persisted entity
            </summary>
        </member>
        <member name="F:Dynamicweb.Core.EntityState.Deleted">
            <summary>
            Indicates that this is a deleted Entity
            </summary>
        </member>
        <member name="T:Dynamicweb.Core.IChangeTracking">
            <summary>
            The IChangeTracking interface defines operations neeeded in a ChangeTracking environment
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.IChangeTracking.BeginRestoring">
            <summary>
            Indicates that the object under change tracking is currently being restored and there for should not be tracked
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.IChangeTracking.EndRestoring">
            <summary>
            Indicates that the object under change tracking has ended a restoring operation and should be tracked
            </summary>
        </member>
        <member name="P:Dynamicweb.Core.IChangeTracking.IsChanged">
            <summary>
            Gets a value indicating if the object has changed since restoring
            </summary>
        </member>
        <member name="T:Dynamicweb.Core.IRecyclable`1">
            <summary>
            Defines operations supporting recycling functionality
            </summary>
            <typeparam name="T">The generic type T for the recycler</typeparam>
        </member>
        <member name="M:Dynamicweb.Core.IRecyclable`1.MoveToBin(`0)">
            <summary>
            Moves the object to the recycle bin
            </summary>
            <param name="obj">The object to move to the bin</param>
            <returns>The newly assigned unit id for the Recycle Bin</returns>
        </member>
        <member name="M:Dynamicweb.Core.IRecyclable`1.MoveToExistingBin(`0,System.Guid)">
            <summary>
            Moves the object to the recycle bin and asscociates it with an already existing bin with the specified unit id
            </summary>
            <param name="obj">The object of the generic type T to move to the recycle bin</param>
            <param name="unitId">The unit id identifying all objects part of a specific recycle bin</param>
        </member>
        <member name="M:Dynamicweb.Core.IRecyclable`1.Restore(System.Object)">
            <summary>
            Restores the object with the specified id
            </summary>
            <param name="id">The id of the object to restore</param>
            <returns>The newly restored object</returns>
        </member>
        <member name="T:Dynamicweb.Core.StringExtensions">
            <summary>
            Extensions for <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:Dynamicweb.Core.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            A nicer way of calling <see cref="M:System.String.IsNullOrEmpty(System.String)"/>
            </summary>
            <param name="value">The string to test.</param>
            <returns>true if the value parameter is null or an empty string (""); otherwise, false.</returns>
        </member>
        <member name="M:Dynamicweb.Core.StringExtensions.IsNotNullOrEmpty(System.String)">
            <summary>
            A nicer way of calling the inverse of <see cref="M:System.String.IsNullOrEmpty(System.String)"/>
            </summary>
            <param name="value">The string to test.</param>
            <returns>true if the value parameter is not null or an empty string (""); otherwise, false.</returns>
        </member>
        <member name="M:Dynamicweb.Core.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            A nicer way of calling <see cref="M:System.String.Format(System.String,System.Object[])"/>
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>A copy of format in which the format items have been replaced by the string representation of the corresponding objects in args.</returns>
        </member>
        <member name="M:Dynamicweb.Core.StringExtensions.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Replaces the specified old value with the new value in the input.
            </summary>
            <param name="input">The input.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <param name="options">The options.</param>
            <returns>System.String.</returns>
            <autogeneratedoc />
        </member>
        <member name="M:Dynamicweb.Core.StringExtensions.IsNumeric(System.String)">
            <summary>
            Returns a value indicating if the string is numeric
            </summary>
            <param name="input">The string to test if is numeric</param>
            <returns>True if the string is numeric, otherwise false</returns>
        </member>
    </members>
</doc>
